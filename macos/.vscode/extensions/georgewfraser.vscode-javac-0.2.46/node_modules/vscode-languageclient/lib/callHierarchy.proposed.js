/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const UUID = require("./utils/uuid");
const Is = require("./utils/is");
const vscode_1 = require("vscode");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const client_1 = require("./client");
function ensure(target, key) {
    if (target[key] === void 0) {
        target[key] = {};
    }
    return target[key];
}
class CallHierarchyProvider {
    constructor(client) {
        this.client = client;
        this._middleware = client.clientOptions.middleware;
    }
    provideCallHierarchyItem(document, postion, token) {
        return this._middleware.provideCallHierarchy
            ? this._middleware.provideCallHierarchy(document, postion, token, (document, position, token) => this.doProvideCallHierarchyItem(document, position, token))
            : this.doProvideCallHierarchyItem(document, postion, token);
    }
    resolveCallHierarchyItem(item, direction, token) {
        return this._middleware.resolveCallHierarchy
            ? this._middleware.resolveCallHierarchy(item, direction, token, (item, direction, token) => this.doResolveCallHierarchyItem(item, direction, token))
            : this.doResolveCallHierarchyItem(item, direction, token);
    }
    doProvideCallHierarchyItem(document, position, token) {
        const client = this.client;
        return client.sendRequest(vscode_languageserver_protocol_1.Proposed.CallHierarchyRequest.type, this.asCallHierarchyParams(document, position), token).then((values) => {
            if (!Array.isArray(values) || values.length === 0) {
                return undefined;
            }
            return this.asCallHierarchyItem(values[0].from);
        });
    }
    doResolveCallHierarchyItem(item, direction, token) {
        const client = this.client;
        const converter = client.code2ProtocolConverter;
        const params = {
            textDocument: {
                uri: converter.asUri(item.uri)
            },
            position: converter.asPosition(item.selectionRange.start),
            direction: direction
        };
        const makeKey = (item) => {
            let key = {
                uri: item.uri,
                range: {
                    start: {
                        line: item.selectionRange.start.line,
                        character: item.selectionRange.start.character
                    },
                    end: {
                        line: item.selectionRange.end.line,
                        character: item.selectionRange.end.character
                    }
                }
            };
            return JSON.stringify(key);
        };
        return client.sendRequest(vscode_languageserver_protocol_1.Proposed.CallHierarchyRequest.type, params, token).then(values => {
            if (!Array.isArray(values) || values.length === 0) {
                return undefined;
            }
            const result = new Map();
            for (let relation of values) {
                let key = makeKey(relation.from);
                let resultItem = result.get(key);
                if (resultItem === undefined) {
                    const callItem = this.asCallHierarchyItem(relation.from);
                    resultItem = [callItem, []];
                    result.set(key, resultItem);
                }
                resultItem[1].push(this.asLocation(relation.to));
            }
            return Array.from(result.values());
        });
    }
    asCallHierarchyParams(document, postion) {
        const converter = this.client.code2ProtocolConverter;
        return {
            textDocument: converter.asTextDocumentIdentifier(document),
            position: converter.asPosition(postion),
            direction: vscode_languageserver_protocol_1.Proposed.CallHierarchyDirection.CallsFrom
        };
    }
    asCallHierarchyItem(value) {
        const converter = this.client.protocol2CodeConverter;
        return new vscode_1.CallHierarchyItem(converter.asSymbolKind(value.kind), value.name, value.detail || '', converter.asUri(value.uri), converter.asRange(value.range), converter.asRange(value.selectionRange));
    }
    asLocation(value) {
        const converter = this.client.protocol2CodeConverter;
        return new vscode_1.Location(converter.asUri(value.uri), converter.asRange(value.selectionRange));
    }
}
class CallHierarchyFeature extends client_1.TextDocumentFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.Proposed.CallHierarchyRequest.type);
    }
    fillClientCapabilities(cap) {
        let capabilites = cap;
        let capability = ensure(ensure(capabilites, 'textDocument'), 'callHierarchy');
        capability.dynamicRegistration = true;
    }
    initialize(cap, documentSelector) {
        let capabilities = cap;
        if (!capabilities.callHierarchyProvider) {
            return;
        }
        const implCapabilities = capabilities.callHierarchyProvider;
        const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabilities.id : UUID.generateUuid();
        const selector = implCapabilities.documentSelector || documentSelector;
        if (selector) {
            this.register(this.messages, {
                id,
                registerOptions: Object.assign({}, { documentSelector: selector })
            });
        }
    }
    registerLanguageProvider(options) {
        let client = this._client;
        let provider = new CallHierarchyProvider(client);
        return vscode_1.languages.registerCallHierarchyProvider(options.documentSelector, provider);
    }
}
exports.CallHierarchyFeature = CallHierarchyFeature;

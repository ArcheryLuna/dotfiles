import { Disposable, TextDocument, ProviderResult, Position as VPosition, CallHierarchyDirection as VCallHierarchyDirection, CallHierarchyItem as VCallHierarchyItem, Location as VLocation } from 'vscode';
import { ClientCapabilities, CancellationToken, ServerCapabilities, TextDocumentRegistrationOptions, DocumentSelector } from 'vscode-languageserver-protocol';
import { TextDocumentFeature, BaseLanguageClient } from './client';
export interface ProvideCallHierachySignature {
    (document: TextDocument, positions: VPosition, token: CancellationToken): ProviderResult<VCallHierarchyItem>;
}
export interface ResolveCallHierarchySignature {
    (item: VCallHierarchyItem, direction: VCallHierarchyDirection, token: CancellationToken): ProviderResult<[VCallHierarchyItem, VLocation[]][]>;
}
export interface CallHierarchyMiddleware {
    provideCallHierarchy?: (this: void, document: TextDocument, positions: VPosition, token: CancellationToken, next: ProvideCallHierachySignature) => ProviderResult<VCallHierarchyItem>;
    resolveCallHierarchy?: (this: void, item: VCallHierarchyItem, direction: VCallHierarchyDirection, token: CancellationToken, next: ResolveCallHierarchySignature) => ProviderResult<[VCallHierarchyItem, VLocation[]][]>;
}
export declare class CallHierarchyFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {
    constructor(client: BaseLanguageClient);
    fillClientCapabilities(cap: ClientCapabilities): void;
    initialize(cap: ServerCapabilities, documentSelector: DocumentSelector): void;
    protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable;
}
declare module 'vscode' {
    enum CallHierarchyDirection {
        CallsFrom = 1,
        CallsTo = 2
    }
    class CallHierarchyItem {
        kind: SymbolKind;
        name: string;
        detail?: string;
        uri: Uri;
        range: Range;
        selectionRange: Range;
        constructor(kind: SymbolKind, name: string, detail: string, uri: Uri, range: Range, selectionRange: Range);
    }
    interface CallHierarchyItemProvider {
        /**
         * Given a document and position compute a call hierarchy item. This is justed as
         * anchor for call hierarchy and then `resolveCallHierarchyItem` is being called.
         */
        provideCallHierarchyItem(document: TextDocument, postion: Position, token: CancellationToken): ProviderResult<CallHierarchyItem>;
        /**
         * Resolve a call hierarchy item, e.g. compute all calls from or to a function.
         * The result is an array of item/location-tuples. The location in the returned tuples
         * is always relative to the "caller" with the caller either being the provided item or
         * the returned item.
         *
         * @param item A call hierarchy item previously returned from `provideCallHierarchyItem` or `resolveCallHierarchyItem`
         * @param direction Resolve calls from a function or calls to a function
         * @param token A cancellation token
         */
        resolveCallHierarchyItem(item: CallHierarchyItem, direction: CallHierarchyDirection, token: CancellationToken): ProviderResult<[CallHierarchyItem, Location[]][]>;
    }
    namespace languages {
        function registerCallHierarchyProvider(selector: DocumentSelector, provider: CallHierarchyItemProvider): Disposable;
    }
}

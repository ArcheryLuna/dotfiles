{
	"game/AddAmmoType": {
		"body": [
			"game.AddAmmoType(${1:ammoData})$0"
		],
		"description": "Adds a new ammo type to the game.",
		"prefix": "game.AddAmmoType"
	},
	"game/AddDecal": {
		"body": [
			"game.AddDecal(${1:decalName}, ${2:materialName})$0"
		],
		"description": "Registers a new decal.",
		"prefix": "game.AddDecal"
	},
	"game/AddParticles": {
		"body": [
			"game.AddParticles(${1:particleFileName})$0"
		],
		"description": "Loads a particle file.",
		"prefix": "game.AddParticles"
	},
	"game/BuildAmmoTypes": {
		"body": [
			"game.BuildAmmoTypes()$0"
		],
		"description": "No description available.",
		"prefix": "game.BuildAmmoTypes"
	},
	"game/CleanUpMap": {
		"body": [
			"game.CleanUpMap(${1:dontSendToClients=false}, ${2:ExtraFilters={}})$0"
		],
		"description": "If called serverside it will remove ALL entities which were not created by the map(not players or weapons held by players).",
		"prefix": "game.CleanUpMap"
	},
	"game/ConsoleCommand": {
		"body": [
			"game.ConsoleCommand(${1:stringCommand})$0"
		],
		"description": "Runs a console command. Make sure to add a newline (\u0026#34;\\n\u0026#34;) at the end of the command.",
		"prefix": "game.ConsoleCommand"
	},
	"game/GetAmmoID": {
		"body": [
			"game.GetAmmoID(${1:name})$0"
		],
		"description": "Returns the ammo type ID for given ammo type name.",
		"prefix": "game.GetAmmoID"
	},
	"game/GetAmmoMax": {
		"body": [
			"game.GetAmmoMax(${1:id})$0"
		],
		"description": "Returns the real maximum amount of ammo of given ammo ID.",
		"prefix": "game.GetAmmoMax"
	},
	"game/GetAmmoName": {
		"body": [
			"game.GetAmmoName(${1:id})$0"
		],
		"description": "Returns the ammo name for given ammo type ID.",
		"prefix": "game.GetAmmoName"
	},
	"game/GetIPAddress": {
		"body": [
			"game.GetIPAddress()$0"
		],
		"description": "Returns the public IP address and port of the current server. This will return the IP/port that you are connecting through when ran clientside.",
		"prefix": "game.GetIPAddress"
	},
	"game/GetMap": {
		"body": [
			"game.GetMap()$0"
		],
		"description": "Returns the name of the current map, without a file extension. On the menu state, returns \u0026#34;menu\u0026#34;.",
		"prefix": "game.GetMap"
	},
	"game/GetMapNext": {
		"body": [
			"game.GetMapNext()$0"
		],
		"description": "Returns the next map that would be loaded according to the file that is set by the mapcyclefile convar.",
		"prefix": "game.GetMapNext"
	},
	"game/GetMapVersion": {
		"body": [
			"game.GetMapVersion()$0"
		],
		"description": "Returns the VBSP version of the current map.",
		"prefix": "game.GetMapVersion"
	},
	"game/GetSkillLevel": {
		"body": [
			"game.GetSkillLevel()$0"
		],
		"description": "Returns the difficulty level of the game.",
		"prefix": "game.GetSkillLevel"
	},
	"game/GetTimeScale": {
		"body": [
			"game.GetTimeScale()$0"
		],
		"description": "Returns the timescale of the game",
		"prefix": "game.GetTimeScale"
	},
	"game/GetWorld": {
		"body": [
			"game.GetWorld()$0"
		],
		"description": "Returns the worldspawn entity.",
		"prefix": "game.GetWorld"
	},
	"game/IsDedicated": {
		"body": [
			"game.IsDedicated()$0"
		],
		"description": "Returns true if the server is a dedicated server, false if it is a",
		"prefix": "game.IsDedicated"
	},
	"game/KickID": {
		"body": [
			"game.KickID(${1:id}, ${2:given\"})$0"
		],
		"description": "Kicks a player from the server. This can be ran before the player has spawned.",
		"prefix": "game.KickID"
	},
	"game/LoadNextMap": {
		"body": [
			"game.LoadNextMap()$0"
		],
		"description": "Loads the next map according to the nextlevel convar, or from the current mapcycle file set by the respective convar.",
		"prefix": "game.LoadNextMap"
	},
	"game/MapLoadType": {
		"body": [
			"game.MapLoadType()$0"
		],
		"description": "Returns the map load type of the current map.",
		"prefix": "game.MapLoadType"
	},
	"game/MaxPlayers": {
		"body": [
			"game.MaxPlayers()$0"
		],
		"description": "Returns the maximum number of players for this server.",
		"prefix": "game.MaxPlayers"
	},
	"game/MountGMA": {
		"body": [
			"game.MountGMA(${1:path})$0"
		],
		"description": "Mounts a GMA addon from the disk. Any error models currently loaded that the mounted addon provides will be reloaded.",
		"prefix": "game.MountGMA"
	},
	"game/RemoveRagdolls": {
		"body": [
			"game.RemoveRagdolls()$0"
		],
		"description": "Removes all the clientside ragdolls.",
		"prefix": "game.RemoveRagdolls"
	},
	"game/SetSkillLevel": {
		"body": [
			"game.SetSkillLevel(${1:level})$0"
		],
		"description": "Sets the difficulty level of the game, can be retrieved with",
		"prefix": "game.SetSkillLevel"
	},
	"game/SetTimeScale": {
		"body": [
			"game.SetTimeScale(${1:timeScale})$0"
		],
		"description": "Sets the time scale of the game.",
		"prefix": "game.SetTimeScale"
	},
	"game/SinglePlayer": {
		"body": [
			"game.SinglePlayer()$0"
		],
		"description": "Returns whenever the current session is a single player game.",
		"prefix": "game.SinglePlayer"
	},
	"game/StartSpot": {
		"body": [
			"game.StartSpot()$0"
		],
		"description": "Returns position the player should start from, this is not the same thing as spawn points, it is used to properly transit the player between maps.",
		"prefix": "game.StartSpot"
	}
}
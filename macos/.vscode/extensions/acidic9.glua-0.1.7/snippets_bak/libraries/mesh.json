{
	"mesh/AdvanceVertex": {
		"body": [
			"mesh.AdvanceVertex()$0"
		],
		"description": "Pushes the new vertex data onto the render stack.",
		"prefix": "mesh.AdvanceVertex"
	},
	"mesh/Begin": {
		"body": [
			"mesh.Begin(${1:mesh=nil}, ${2:primitiveType}, ${3:primiteCount})$0"
		],
		"description": "Starts a new dynamic mesh. If an",
		"prefix": "mesh.Begin"
	},
	"mesh/Color": {
		"body": [
			"mesh.Color(${1:r}, ${2:g}, ${3:b}, ${4:a})$0"
		],
		"description": "Sets the color to be used for the next vertex.",
		"prefix": "mesh.Color"
	},
	"mesh/End": {
		"body": [
			"mesh.End()$0"
		],
		"description": "Ends the mesh and renders it.",
		"prefix": "mesh.End"
	},
	"mesh/Normal": {
		"body": [
			"mesh.Normal(${1:normal})$0"
		],
		"description": "Sets the normal to be used for the next vertex.",
		"prefix": "mesh.Normal"
	},
	"mesh/Position": {
		"body": [
			"mesh.Position(${1:position})$0"
		],
		"description": "Sets the position to be used for the next vertex.",
		"prefix": "mesh.Position"
	},
	"mesh/Quad": {
		"body": [
			"mesh.Quad(${1:vertex1}, ${2:vertex2}, ${3:vertex3}, ${4:vertex4})$0"
		],
		"description": "Draws a quad using 4 vertices.",
		"prefix": "mesh.Quad"
	},
	"mesh/QuadEasy": {
		"body": [
			"mesh.QuadEasy(${1:position}, ${2:normal}, ${3:sizeX}, ${4:sizeY})$0"
		],
		"description": "Draws a quad using a position, a normal and the size.",
		"prefix": "mesh.QuadEasy"
	},
	"mesh/Specular": {
		"body": [
			"mesh.Specular(${1:r}, ${2:g}, ${3:b}, ${4:a})$0"
		],
		"description": "Sets the specular map values.",
		"prefix": "mesh.Specular"
	},
	"mesh/TangentS": {
		"body": [
			"mesh.TangentS(${1:sTanger})$0"
		],
		"description": "Sets the s tangent to be used.",
		"prefix": "mesh.TangentS"
	},
	"mesh/TangentT": {
		"body": [
			"mesh.TangentT(${1:tTanger})$0"
		],
		"description": "Sets the T tangent to be used.",
		"prefix": "mesh.TangentT"
	},
	"mesh/TexCoord": {
		"body": [
			"mesh.TexCoord(${1:stage}, ${2:u}, ${3:v})$0"
		],
		"description": "Sets the texture coordinates for the next vertex.",
		"prefix": "mesh.TexCoord"
	},
	"mesh/VertexCount": {
		"body": [
			"mesh.VertexCount()$0"
		],
		"description": "Returns the amount of vertex that have yet been pushed.",
		"prefix": "mesh.VertexCount"
	}
}
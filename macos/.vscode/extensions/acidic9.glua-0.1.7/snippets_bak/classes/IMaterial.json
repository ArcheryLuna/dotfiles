{
	"IMaterial/GetColor": {
		"body": [
			"GetColor(${1:x}, ${2:y})$0"
		],
		"description": "Returns the color of the specified pixel, only works for materials created from PNG files.",
		"prefix": "GetColor"
	},
	"IMaterial/GetFloat": {
		"body": [
			"GetFloat(${1:materialFloat})$0"
		],
		"description": "Returns the specified material value as a float, or nil if the value is not set.",
		"prefix": "GetFloat"
	},
	"IMaterial/GetInt": {
		"body": [
			"GetInt(${1:materialInt})$0"
		],
		"description": "Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set.",
		"prefix": "GetInt"
	},
	"IMaterial/GetKeyValues": {
		"body": [
			"GetKeyValues()$0"
		],
		"description": "Gets all the key values defined for the material.",
		"prefix": "GetKeyValues"
	},
	"IMaterial/GetMatrix": {
		"body": [
			"GetMatrix(${1:materialMatrix})$0"
		],
		"description": "Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix.",
		"prefix": "GetMatrix"
	},
	"IMaterial/GetName": {
		"body": [
			"GetName()$0"
		],
		"description": "Returns the name of the material, in most cases the path.",
		"prefix": "GetName"
	},
	"IMaterial/GetShader": {
		"body": [
			"GetShader()$0"
		],
		"description": "Returns the name of the materials shader.",
		"prefix": "GetShader"
	},
	"IMaterial/GetString": {
		"body": [
			"GetString(${1:materialString})$0"
		],
		"description": "Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.",
		"prefix": "GetString"
	},
	"IMaterial/GetTexture": {
		"body": [
			"GetTexture(${1:param})$0"
		],
		"description": "Returns an",
		"prefix": "GetTexture"
	},
	"IMaterial/GetVector": {
		"body": [
			"GetVector(${1:materialVector})$0"
		],
		"description": "Returns the specified material linear color vector, or nil if the value is not set.",
		"prefix": "GetVector"
	},
	"IMaterial/Height": {
		"body": [
			"Height()$0"
		],
		"description": "Returns the height of the member texture set for $basetexture.",
		"prefix": "Height"
	},
	"IMaterial/IsError": {
		"body": [
			"IsError()$0"
		],
		"description": "Returns whenever the material was not loaded successfully.",
		"prefix": "IsError"
	},
	"IMaterial/Recompute": {
		"body": [
			"Recompute()$0"
		],
		"description": "Recomputes the material\u0026#39;s snapshot. This needs to be called if you have changed variables on your material and it isn\u0026#39;t changing.",
		"prefix": "Recompute"
	},
	"IMaterial/SetFloat": {
		"body": [
			"SetFloat(${1:materialFloat}, ${2:float})$0"
		],
		"description": "Sets the specified material float to the specified float, does nothing on a type mismatch.",
		"prefix": "SetFloat"
	},
	"IMaterial/SetInt": {
		"body": [
			"SetInt(${1:materialInt}, ${2:int})$0"
		],
		"description": "Sets the specified material value to the specified int, does nothing on a type mismatch.",
		"prefix": "SetInt"
	},
	"IMaterial/SetMatrix": {
		"body": [
			"SetMatrix(${1:materialMatrix}, ${2:matrix})$0"
		],
		"description": "Sets the specified material value to the specified matrix, does nothing on a type mismatch.",
		"prefix": "SetMatrix"
	},
	"IMaterial/SetShader": {
		"body": [
			"SetShader(${1:shaderName})$0"
		],
		"description": "No description available.",
		"prefix": "SetShader"
	},
	"IMaterial/SetString": {
		"body": [
			"SetString(${1:materialString}, ${2:string})$0"
		],
		"description": "Sets the specified material value to the specified string, does nothing on a type mismatch.",
		"prefix": "SetString"
	},
	"IMaterial/SetTexture": {
		"body": [
			"SetTexture(${1:materialTexture}, ${2:texture})$0"
		],
		"description": "Sets the specified material texture to the specified texture, does nothing on a type mismatch.",
		"prefix": "SetTexture"
	},
	"IMaterial/SetUndefined": {
		"body": [
			"SetUndefined(${1:materialValueName})$0"
		],
		"description": "Unsets the value for the specified material value.",
		"prefix": "SetUndefined"
	},
	"IMaterial/SetVector": {
		"body": [
			"SetVector(${1:MaterialVector}, ${2:vec})$0"
		],
		"description": "Sets the specified material vector to the specified vector, does nothing on a type mismatch.",
		"prefix": "SetVector"
	},
	"IMaterial/Width": {
		"body": [
			"Width()$0"
		],
		"description": "Returns the width of the member texture set for $basetexture.",
		"prefix": "Width"
	}
}
{
    "derma.Color": {
        "body": [
            "derma.Color(${1:name}, ${2:pnl}, ${3:default})$0"
        ],
        "description": "DERMA [Client/Menu] Gets the color from a Derma skin of a panel and returns default color if not found\n\n[string] name\n  \n\n[Panel] pnl\n  \n\n[table] default\n  The default color in case of failure.",
        "prefix": "derma.Color"
    },
    "derma.DefineControl": {
        "body": [
            "derma.DefineControl(${1:name}, ${2:description}, ${3:tab}, ${4:base})$0"
        ],
        "description": "DERMA [Client/Menu] Defines a new Derma control with an optional base\n\n[string] name\n  Name of the newly created control\n\n[string] description\n  Description of the control\n\n[table] tab\n  Table containing control methods and properties\n\n[string] base\n  Derma control to base the new control off of",
        "prefix": "derma.DefineControl"
    },
    "derma.DefineSkin": {
        "body": [
            "derma.DefineSkin(${1:name}, ${2:descriptions}, ${3:skin})$0"
        ],
        "description": "DERMA [Client/Menu] Defines a new skin so that it is usable by Derma. The default skin can be found in \"garrysmod/lua/skins/default.lua\"\n\n[string] name\n  Name of the skin\n\n[string] descriptions\n  Description of the skin\n\n[table] skin\n  Table containing skin data",
        "prefix": "derma.DefineSkin"
    },
    "derma.GetControlList": {
        "body": [
            "derma.GetControlList()$0"
        ],
        "description": "DERMA [Client/Menu]",
        "prefix": "derma.GetControlList"
    },
    "derma.GetDefaultSkin": {
        "body": [
            "derma.GetDefaultSkin()$0"
        ],
        "description": "DERMA [Client/Menu]",
        "prefix": "derma.GetDefaultSkin"
    },
    "derma.GetNamedSkin": {
        "body": [
            "derma.GetNamedSkin(${1:name})$0"
        ],
        "description": "DERMA [Client/Menu] \n\n[string] name\n  Name of skin",
        "prefix": "derma.GetNamedSkin"
    },
    "derma.GetSkinTable": {
        "body": [
            "derma.GetSkinTable()$0"
        ],
        "description": "DERMA [Client/Menu]",
        "prefix": "derma.GetSkinTable"
    },
    "derma.RefreshSkins": {
        "body": [
            "derma.RefreshSkins()$0"
        ],
        "description": "DERMA [Client/Menu]",
        "prefix": "derma.RefreshSkins"
    },
    "derma.SkinChangeIndex": {
        "body": [
            "derma.SkinChangeIndex()$0"
        ],
        "description": "DERMA [Client/Menu]",
        "prefix": "derma.SkinChangeIndex"
    },
    "derma.SkinHook": {
        "body": [
            "derma.SkinHook(${1:type}, ${2:name}, ${3:panel}, ${4:w}, ${5:h})$0"
        ],
        "description": "DERMA [Client/Menu] Calls the specified hook for the given panel\n\n[string] type\n  The type of hook to run\n\n[string] name\n  The name of the hook to run\n\n[Panel] panel\n  The panel to call the hook for\n\n[number] w\n  The width of the panel\n\n[number] h\n  The height of the panel",
        "prefix": "derma.SkinHook"
    },
    "derma.SkinTexture": {
        "body": [
            "derma.SkinTexture(${1:name}, ${2:pnl}, ${3:fallback=nil})$0"
        ],
        "description": "DERMA [Client/Menu] Returns a function to draw a specified texture of panels skin.\n\n[string] name\n  The identifier of the texture\n\n[Panel] pnl\n  Panel to get the skin of.\n\n[any] fallback=nil\n  What to return if we failed to retrieve the texture",
        "prefix": "derma.SkinTexture"
    }
}
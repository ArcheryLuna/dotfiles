{
    "dragndrop.CallReceiverFunction": {
        "body": [
            "dragndrop.CallReceiverFunction(${1:bDoDrop}, ${2:command}, ${3:mx}, ${4:my})$0"
        ],
        "description": "DRAGNDROP [Client/Menu] \n\n[boolean] bDoDrop\n  true if the mouse was released, false if we right clicked.\n\n[number] command\n  The command value. This should be the ID of the clicked dropdown menu ( if right clicked, or nil )\n\n[number] mx\n  The local to the panel mouse cursor X position when the click happened.\n\n[number] my\n  The local to the panel mouse cursor Y position when the click happened.",
        "prefix": "dragndrop.CallReceiverFunction"
    },
    "dragndrop.Clear": {
        "body": [
            "dragndrop.Clear()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.Clear"
    },
    "dragndrop.Drop": {
        "body": [
            "dragndrop.Drop()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.Drop"
    },
    "dragndrop.GetDroppable": {
        "body": [
            "dragndrop.GetDroppable(${1:name=nil})$0"
        ],
        "description": "DRAGNDROP [Client/Menu] \n\n[string] name=nil\n  If set, the function will return only the panels with this Panel:Droppable name.",
        "prefix": "dragndrop.GetDroppable"
    },
    "dragndrop.HandleDroppedInGame": {
        "body": [
            "dragndrop.HandleDroppedInGame()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.HandleDroppedInGame"
    },
    "dragndrop.HoverThink": {
        "body": [
            "dragndrop.HoverThink()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.HoverThink"
    },
    "dragndrop.IsDragging": {
        "body": [
            "dragndrop.IsDragging()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.IsDragging"
    },
    "dragndrop.StartDragging": {
        "body": [
            "dragndrop.StartDragging()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.StartDragging"
    },
    "dragndrop.StopDragging": {
        "body": [
            "dragndrop.StopDragging()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.StopDragging"
    },
    "dragndrop.Think": {
        "body": [
            "dragndrop.Think()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.Think"
    },
    "dragndrop.UpdateReceiver": {
        "body": [
            "dragndrop.UpdateReceiver()$0"
        ],
        "description": "DRAGNDROP [Client/Menu]",
        "prefix": "dragndrop.UpdateReceiver"
    }
}
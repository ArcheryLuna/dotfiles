{
    "spawnmenu.ActivateTool": {
        "body": [
            "spawnmenu.ActivateTool(${1:tool})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[string] tool\n  Tool class/file name",
        "prefix": "spawnmenu.ActivateTool"
    },
    "spawnmenu.ActivateToolPanel": {
        "body": [
            "spawnmenu.ActivateToolPanel(${1:tab}, ${2:cp})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[number] tab\n  The tabID of the tab to open the context menu in\n\n[Panel] cp\n  The control panel to open",
        "prefix": "spawnmenu.ActivateToolPanel"
    },
    "spawnmenu.ActiveControlPanel": {
        "body": [
            "spawnmenu.ActiveControlPanel()$0"
        ],
        "description": "SPAWNMENU [Client]",
        "prefix": "spawnmenu.ActiveControlPanel"
    },
    "spawnmenu.AddContentType": {
        "body": [
            "spawnmenu.AddContentType(${1:name}, ${2:constructor})$0"
        ],
        "description": "SPAWNMENU [Client] Registers a new content type that is saveable into spawnlists.\nCreated/called by spawnmenu.CreateContentIcon.\n\n[string] name\n  An unique name of the content type.\n\n[function] constructor\n  A function that is called whenever we need create a new panel for this content type.\nIt has two arguments:\nPanel container - The container/parent of the new panel\ntable data - Data for the content type passed from spawnmenu.CreateContentIcon",
        "prefix": "spawnmenu.AddContentType"
    },
    "spawnmenu.AddCreationTab": {
        "body": [
            "spawnmenu.AddCreationTab(${1:name}, ${2:function}, ${3:material=\"icon16/exclamation.png\"}, ${4:order=1000}, ${5:tooltip=nil})$0"
        ],
        "description": "SPAWNMENU [Client] Inserts a new tab into the CreationMenus table, which will be used by the creation menu to generate its tabs (Spawnlists, Weapons, Entities, etc.)\n\n[string] name\n  What text will appear on the tab (I.E Spawnlists).\n\n[function] function\n  The function called to generate the content of the tab.\n\n[string] material=\"icon16/exclamation.png\"\n  Path to the material that will be used as an icon on the tab.\n\n[number] order=1000\n  The order in which this tab should be shown relative to the other tabs on the creation menu.\n\n[string] tooltip=nil\n  The tooltip to be shown for this tab.",
        "prefix": "spawnmenu.AddCreationTab"
    },
    "spawnmenu.AddPropCategory": {
        "body": [
            "spawnmenu.AddPropCategory(${1:filename}, ${2:name}, ${3:contents}, ${4:icon}, ${5:id=1000}, ${6:parentID=0}, ${7:needsApp=\"\"})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[string] filename\n  The filename of the list. This name has to be unique, but doesn't have to actually exist. If a player saves changes made to this list, it will be saved under this name.\n\n[string] name\n  The name of the category e.g. Comic Props.\n\n[table] contents\n  A table of entries for the spawn menu. It must be numerically indexed.\nEach member of the table is a sub-table containing a type member, and other members depending on the type.\n\n string type - \"header\" - a simple header for organization\n string text - The text that the header will display\n\n\n string type - \"model\" - spawns a model where the player is looking\n string model - The path to the model file\n number skin - The skin for the model to use (optional)\n string body - The bodygroups for the model (optional)\n number wide - The width of the spawnicon (optional)\n number tall - The height of the spawnicon (optional)\n\n\n string type - \"entity\" - spawns an entity where the player is looking (appears in the Entities tab by default)\n string spawnname - The filename of the entity, for example \"sent_ball\"\n string nicename - The name of the entity to display\n string material - The icon to display, this should be set to \"entities/\u003csent_name\u003e.png\"\n boolean admin - Whether the entity is only spawnable by admins (optional)\n\n\n string type - \"vehicle\" - spawns a vehicle where the player is looking (appears in the Vehicles tab by default)\n string spawnname - The filename of the vehicle\n string nicename - The name of the vehicle to display\n string material - The icon to display\n boolean admin - Whether the vehicle is only spawnable by admins (optional)\n\n\n string type - \"npc\" - spawns an NPC where the player is looking (appears in the NPCs tab by default)\n string spawnname - The spawn name of the NPC\n string nicename - The name to display\n string material - The icon to display\n table weapon - A table of potential weapons (each a string) to give to the NPC. When spawned, one of these will be chosen randomly each time.\n boolean admin - Whether the NPC is only spawnable by admins (optional)\n\n\n string type - \"weapon\" - When clicked, gives the player a weapon; when middle-clicked, spawns a weapon where the player is looking (appears in the Weapons tab by default)\n string spawnname - The spawn name of the weapon\n string nicename - The name to display\n string material - The icon to display\n boolean admin - Whether the weapon is only spawnable by admins (optional)\n\n[string] icon\n  The icon to use in the tree.\n\n[number] id=1000\n  The unique ID number for the spawnlist category. Used to make sub categories. See \"parentID\" parameter below. If not set, it will be automatically set to ever increasing number, starting with 1000.\n\n[number] parentID=0\n  The unique ID of the parent category. This will make the category a subcategory of that given. 0 makes this a base category (such as Builder).\n\n[string] needsApp=\"\"\n  The needed game for this prop category, if one is needed. If the specified game is not mounted, the category isn't shown. This uses the shortcut name, e.g. cstrike, and not the Steam AppID.",
        "prefix": "spawnmenu.AddPropCategory"
    },
    "spawnmenu.AddToolCategory": {
        "body": [
            "spawnmenu.AddToolCategory(${1:tab}, ${2:RealName}, ${3:PrintName})$0"
        ],
        "description": "SPAWNMENU [Client] Used to create a new category in the list inside of a spawnmenu ToolTab. You must call this function from SANDBOX:AddToolMenuCategories for it to work properly.\n\n[string] tab\n  The ToolTab name, as created with spawnmenu.AddToolTab.\n\nYou can also use the default ToolTab names \"Main\" and \"Utilities\".\n\n[string] RealName\n  The identifier name\n\n[string] PrintName\n  The displayed name",
        "prefix": "spawnmenu.AddToolCategory"
    },
    "spawnmenu.AddToolMenuOption": {
        "body": [
            "spawnmenu.AddToolMenuOption(${1:tab}, ${2:category}, ${3:class}, ${4:name}, ${5:cmd}, ${6:config}, ${7:cpanel}, ${8:table={}})$0"
        ],
        "description": "SPAWNMENU [Client] Adds an option to the right side of the spawnmenu\n\n[string] tab\n  The spawnmenu tab to add into (for example \"Utilities\")\n\n[string] category\n  The category to add into (for example \"Admin\")\n\n[string] class\n  Unique identifier of option to add\n\n[string] name\n  The nice name of item\n\n[string] cmd\n  Command to execute when the item is selected\n\n[string] config\n  Config name, used in older versions to load tool settings UI from a file. No longer works.\n\nThis feature is deprecated.\nYou should avoid using it as it may be removed in a future version.This feature is deprecated.\nYou should avoid using it as it may be removed in a future version.\n\n[function] cpanel\n  A function to build the context panel. The function has one argument:\n\n Panel pnl - A DForm that will be shown in the context menu\n\n[table] table={}\n  Allows to override the table that will be added to the tool list. Some of the fields will be overwritten by this function.",
        "prefix": "spawnmenu.AddToolMenuOption"
    },
    "spawnmenu.AddToolTab": {
        "body": [
            "spawnmenu.AddToolTab(${1:name}, ${2:label=name}, ${3:icon=\"icon16/wrench.png\"})$0"
        ],
        "description": "SPAWNMENU [Client] Adds a new tool tab to the right side of the spawnmenu via the SANDBOX:AddToolMenuTabs hook. This function is a inferior duplicate of spawnmenu.GetToolMenu, just without its return value.\n\n[string] name\n  The internal name of the tab. This is used for sorting.\n\n[string] label=name\n  The 'nice' name of the tab (Tip: language.Add)\n\n[string] icon=\"icon16/wrench.png\"\n  The filepath to the icon of the tab. Should be a .png",
        "prefix": "spawnmenu.AddToolTab"
    },
    "spawnmenu.ClearToolMenus": {
        "body": [
            "spawnmenu.ClearToolMenus()$0"
        ],
        "description": "SPAWNMENU [Client]",
        "prefix": "spawnmenu.ClearToolMenus"
    },
    "spawnmenu.CreateContentIcon": {
        "body": [
            "spawnmenu.CreateContentIcon(${1:type}, ${2:parent}, ${3:data})$0"
        ],
        "description": "SPAWNMENU [Client] Creates a new content icon.\n\n[string] type\n  The type of the content icon.\n\n[Panel] parent\n  The parent to add the content icon to.\n\n[table] data\n  The data to send to the content icon in spawnmenu.AddContentType",
        "prefix": "spawnmenu.CreateContentIcon"
    },
    "spawnmenu.DoSaveToTextFiles": {
        "body": [
            "spawnmenu.DoSaveToTextFiles(${1:spawnlists})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[table] spawnlists\n  A table containing spawnlists.",
        "prefix": "spawnmenu.DoSaveToTextFiles"
    },
    "spawnmenu.GetContentType": {
        "body": [
            "spawnmenu.GetContentType(${1:contentType})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[string] contentType",
        "prefix": "spawnmenu.GetContentType"
    },
    "spawnmenu.GetCreationTabs": {
        "body": [
            "spawnmenu.GetCreationTabs()$0"
        ],
        "description": "SPAWNMENU [Client]",
        "prefix": "spawnmenu.GetCreationTabs"
    },
    "spawnmenu.GetCustomPropTable": {
        "body": [
            "spawnmenu.GetCustomPropTable()$0"
        ],
        "description": "SPAWNMENU [Client]",
        "prefix": "spawnmenu.GetCustomPropTable"
    },
    "spawnmenu.GetPropTable": {
        "body": [
            "spawnmenu.GetPropTable()$0"
        ],
        "description": "SPAWNMENU [Client]",
        "prefix": "spawnmenu.GetPropTable"
    },
    "spawnmenu.GetToolMenu": {
        "body": [
            "spawnmenu.GetToolMenu(${1:name}, ${2:label=name}, ${3:icon=\"icon16/wrench.png\"})$0"
        ],
        "description": "SPAWNMENU [Client] Adds a new tool tab (or returns an existing one by name) to the right side of the spawnmenu via the SANDBOX:AddToolMenuTabs hook.\n\n[string] name\n  The internal name of the tab. This is used for sorting.\n\n[string] label=name\n  The 'nice' name of the tab\n\n[string] icon=\"icon16/wrench.png\"\n  The filepath to the icon of the tab. Should be a .png",
        "prefix": "spawnmenu.GetToolMenu"
    },
    "spawnmenu.GetTools": {
        "body": [
            "spawnmenu.GetTools()$0"
        ],
        "description": "SPAWNMENU [Client]",
        "prefix": "spawnmenu.GetTools"
    },
    "spawnmenu.PopulateFromEngineTextFiles": {
        "body": [
            "spawnmenu.PopulateFromEngineTextFiles()$0"
        ],
        "description": "SPAWNMENU [Client]",
        "prefix": "spawnmenu.PopulateFromEngineTextFiles"
    },
    "spawnmenu.PopulateFromTextFiles": {
        "body": [
            "spawnmenu.PopulateFromTextFiles(${1:callback})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[function] callback\n  The function to call. Arguments are ( strFilename, strName, tabContents, icon, id, parentid, needsapp )",
        "prefix": "spawnmenu.PopulateFromTextFiles"
    },
    "spawnmenu.SaveToTextFiles": {
        "body": [
            "spawnmenu.SaveToTextFiles(${1:spawnlists})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[table] spawnlists\n  A table containing spawnlists.",
        "prefix": "spawnmenu.SaveToTextFiles"
    },
    "spawnmenu.SetActiveControlPanel": {
        "body": [
            "spawnmenu.SetActiveControlPanel(${1:pnl})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[Panel] pnl\n  The panel to set.",
        "prefix": "spawnmenu.SetActiveControlPanel"
    },
    "spawnmenu.SwitchToolTab": {
        "body": [
            "spawnmenu.SwitchToolTab(${1:id})$0"
        ],
        "description": "SPAWNMENU [Client] \n\n[number] id\n  The tab ID to open",
        "prefix": "spawnmenu.SwitchToolTab"
    }
}
{
    "sound.Add": {
        "body": [
            "sound.Add(${1:soundData})$0"
        ],
        "description": "SOUND [Shared] Creates a sound script. It can also override sounds, which seems to only work when set on the server.\n\n[table] soundData\n  The sounds properties. See SoundData structure",
        "prefix": "sound.Add"
    },
    "sound.AddSoundOverrides": {
        "body": [
            "sound.AddSoundOverrides(${1:filepath})$0"
        ],
        "description": "SOUND [Shared] Overrides sounds defined inside of a txt file; typically used for adding map-specific sounds.\n\n[string] filepath\n  Path to the script file to load.",
        "prefix": "sound.AddSoundOverrides"
    },
    "sound.Generate": {
        "body": [
            "sound.Generate(${1:indentifier}, ${2:samplerate}, ${3:length}, ${4:callback})$0"
        ],
        "description": "SOUND [Client] Creates a sound from a function.\n\n[string] indentifier\n  An unique identified for the sound. You cannot override already existing ones.\n\n[number] samplerate\n  The sample rate of the sound. Must be 11025, 22050 or 44100.\n\n[number] length\n  The length in seconds of the sound to generate.\n\n[function] callback\n  A function which will be called to generate every sample on the sound. This function gets the current sample number passed as the first argument. The return value must be between -1.0 and 1.0. Other values will wrap back to the -1 to 1 range and basically clip. There are 65535 possible quantifiable values between -1 and 1.",
        "prefix": "sound.Generate"
    },
    "sound.GetProperties": {
        "body": [
            "sound.GetProperties(${1:name})$0"
        ],
        "description": "SOUND [Shared] \n\n[string] name\n  The name of the sound script",
        "prefix": "sound.GetProperties"
    },
    "sound.GetTable": {
        "body": [
            "sound.GetTable()$0"
        ],
        "description": "SOUND [Shared] Returns a list of all registered sound scripts.",
        "prefix": "sound.GetTable"
    },
    "sound.Play": {
        "body": [
            "sound.Play(${1:Name}, ${2:Pos}, ${3:Level}, ${4:Pitch}, ${5:Volume})$0"
        ],
        "description": "SOUND [Shared] Plays a sound from the specified position in the world.\nIf you want to play a sound without a position, such as a UI sound, use surface.PlaySound instead.\n\n[string] Name\n  A string path to the sound.\n\n[Vector] Pos\n  A vector describing where the sound should play.\n\n[number] Level\n  Sound level in decibels. 75 is normal. Ranges from 20 to 180, where 180 is super loud. This affects how far away the sound will be heard.\n\n[number] Pitch\n  An integer describing the sound pitch. Range is from 0 to 255. 100 is normal pitch.\n\n[number] Volume\n  A float ranging from 0-1 describing the output volume of the sound.",
        "prefix": "sound.Play"
    },
    "sound.PlayFile": {
        "body": [
            "sound.PlayFile(${1:path}, ${2:flags}, ${3:callback})$0"
        ],
        "description": "SOUND [Client] Plays a file from GMod directory. You can find a list of all error codes here For external file/stream playback, see sound.PlayURL\n\n[string] path\n  The path to the file to play.\n\nUnlike other sound functions and structures, the path is relative to garrysmod/ instead of garrysmod/sound/\n\n[string] flags\n  Flags for the sound. Can be one or more of following, separated by a space (\" \"):\n\n 3d - Makes the sound 3D, so you can set its position\n mono - Forces the sound to have only one channel\n noplay - Forces the sound not to play as soon as this function is called\n noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for IGModAudioChannel:SetTime.\n\nIf you don't want to use any of the above, you can just leave it as \"\".\n\n[function] callback\n  Callback function that is called as soon as the the stream is loaded. It has next arguments:\nIGModAudioChannel soundchannel - The sound channel\nnumber errorID - ID of an error, if an error has occured\nstring errorName - Name of an error, if an error has occured",
        "prefix": "sound.PlayFile"
    },
    "sound.PlayURL": {
        "body": [
            "sound.PlayURL(${1:url}, ${2:flags}, ${3:callback})$0"
        ],
        "description": "SOUND [Client] Allows you to play external sound files, as well as online radio streams.\nYou can find a list of all error codes here For offline file playback, see sound.PlayFile\n\n[string] url\n  The URL of the sound to play\n\n[string] flags\n  Flags for the sound. Can be one or more of following, separated by a space (\" \"):\n\n 3d - Makes the sound 3D, so you can set its position\n mono - Forces the sound to have only one channel\n noplay - Forces the sound not to play as soon as this function is called\n noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for IGModAudioChannel:SetTime.\n\nIf you don't want to use any of the above, you can just leave it as \"\".\n\n[function] callback\n  Callback function that is called as soon as the the stream is loaded. It has next arguments:\nIGModAudioChannel soundchannel - The sound channel\nnumber errorID - ID of an error, if an error has occured\nstring errorName - Name of an error, if an error has occured",
        "prefix": "sound.PlayURL"
    }
}
{
    "ents.Create": {
        "body": [
            "ents.Create(${1:class})$0"
        ],
        "description": "ENTS [Server] Creates an entity. This function will fail and return NULL if the soft-edict limit is hit (8176), or the provided entity class doesn't exist.\n\n[string] class\n  The classname of the entity to create",
        "prefix": "ents.Create"
    },
    "ents.CreateClientProp": {
        "body": [
            "ents.CreateClientProp(${1:model=\"models/error.mdl\"})$0"
        ],
        "description": "ENTS [Client] Creates a clientside only prop. See also ClientsideModel.\n\n[string] model=\"models/error.mdl\"\n  The model for the entity to be created.\n\nBUG: Has to be precached with util.PrecacheModel if not precached previously by engine or other means.",
        "prefix": "ents.CreateClientProp"
    },
    "ents.FindByClass": {
        "body": [
            "ents.FindByClass(${1:class})$0"
        ],
        "description": "ENTS [Shared] Gets all entities with the given class, supports wildcards. This works internally by iterating over ents.GetAll.\n\n[string] class\n  The class of the entities to find.",
        "prefix": "ents.FindByClass"
    },
    "ents.FindByClassAndParent": {
        "body": [
            "ents.FindByClassAndParent(${1:class}, ${2:parent})$0"
        ],
        "description": "ENTS [Shared] Finds all entities that are of given class and are children of given entity. This works internally by iterating over ents.GetAll.\n\n[string] class\n  The class of entities to search for\n\n[Entity] parent\n  Parent of entities that are being searched for",
        "prefix": "ents.FindByClassAndParent"
    },
    "ents.FindByModel": {
        "body": [
            "ents.FindByModel(${1:model})$0"
        ],
        "description": "ENTS [Shared] \n\n[string] model\n  The model of the entities to find.",
        "prefix": "ents.FindByModel"
    },
    "ents.FindByName": {
        "body": [
            "ents.FindByName(${1:name})$0"
        ],
        "description": "ENTS [Shared] \n\n[string] name\n  The targetname to look for",
        "prefix": "ents.FindByName"
    },
    "ents.FindInBox": {
        "body": [
            "ents.FindInBox(${1:boxMins}, ${2:boxMaxs})$0"
        ],
        "description": "ENTS [Shared] Returns all entities within the specified box.\n\n[Vector] boxMins\n  The box minimum coordinates.\n\n[Vector] boxMaxs\n  The box maximum coordinates.",
        "prefix": "ents.FindInBox"
    },
    "ents.FindInCone": {
        "body": [
            "ents.FindInCone(${1:origin}, ${2:normal}, ${3:height}, ${4:angle})$0"
        ],
        "description": "ENTS [Shared] Performs a ents.FindInBox and returns all entities within the specified cone.\n\n[Vector] origin\n  The \"tip\" of the cone.\n\n[Vector] normal\n  Direction of the cone.\n\n[number] height\n  The height of the cone.\n\n[number] angle\n  The angle of the cone.",
        "prefix": "ents.FindInCone"
    },
    "ents.FindInPVS": {
        "body": [
            "ents.FindInPVS(${1:viewPoint})$0"
        ],
        "description": "ENTS [Server] \n\n[any] viewPoint\n  Entity or Vector to find entities within the PVS of. If a player is given, this function will use the player's view entity.",
        "prefix": "ents.FindInPVS"
    },
    "ents.FindInSphere": {
        "body": [
            "ents.FindInSphere(${1:origin}, ${2:radius})$0"
        ],
        "description": "ENTS [Shared] Gets all entities within the specified sphere.\n\n[Vector] origin\n  Center of the sphere.\n\n[number] radius\n  Radius of the sphere.",
        "prefix": "ents.FindInSphere"
    },
    "ents.FireTargets": {
        "body": [
            "ents.FireTargets(${1:target}, ${2:activator}, ${3:caller}, ${4:usetype}, ${5:value})$0"
        ],
        "description": "ENTS [Server] Fires a use event.\n\n[string] target\n  Name of the target entity\n\n[Entity] activator\n  Activator of the event\n\n[Entity] caller\n  Caller of the event.\n\n[number] usetype\n  Use type. See the USE_ Enums.\n\n[number] value",
        "prefix": "ents.FireTargets"
    },
    "ents.GetAll": {
        "body": [
            "ents.GetAll()$0"
        ],
        "description": "ENTS [Shared]",
        "prefix": "ents.GetAll"
    },
    "ents.GetByIndex": {
        "body": [
            "ents.GetByIndex(${1:entIdx})$0"
        ],
        "description": "ENTS [Shared] \n\n[number] entIdx\n  The index of the entity.",
        "prefix": "ents.GetByIndex"
    },
    "ents.GetCount": {
        "body": [
            "ents.GetCount(${1:IncludeKillMe=false})$0"
        ],
        "description": "ENTS [Shared] \n\n[boolean] IncludeKillMe=false\n  Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct.",
        "prefix": "ents.GetCount"
    },
    "ents.GetEdictCount": {
        "body": [
            "ents.GetEdictCount()$0"
        ],
        "description": "ENTS [Server]",
        "prefix": "ents.GetEdictCount"
    },
    "ents.GetMapCreatedEntity": {
        "body": [
            "ents.GetMapCreatedEntity(${1:id})$0"
        ],
        "description": "ENTS [Server] \n\n[number] id\n  Entity's creation id",
        "prefix": "ents.GetMapCreatedEntity"
    }
}
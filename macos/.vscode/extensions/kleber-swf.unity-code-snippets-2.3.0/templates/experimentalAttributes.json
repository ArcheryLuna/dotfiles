{
	"Attribute: AddComponentMenu": {
		"prefix": "AddComponentMenu",
		"body": ["[AddComponentMenu(\"$0\")]"],
		"description": "The AddComponentMenu attribute allows you to place a script anywhere in the \"Component\" menu, instead of just the \"Component->Scripts\" menu"
	},

	"Attribute: AssemblyIsEditorAssembly": {
		"prefix": "AssemblyIsEditorAssembly",
		"body": ["[assembly:AssemblyIsEditorAssembly]"],
		"description": "Assembly level attribute. Any classes in an assembly with this attribute will be considered to be Editor Classes."
	},

	"Attribute: BeforeRenderOrder": {
		"prefix": "BeforeRenderOrder",
		"body": [
			"[BeforeRenderOrder]",
			"%PRIVATE%void $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": "Use this BeforeRenderOrderAttribute when you need to specify a custom callback order for Application.onBeforeRender."
	},

	"Attribute: ColorUsage": {
		"prefix": "ColorUsage",
		"body": ["[ColorUsage($0)] public $1"],
		"description": "Attribute used to configure the usage of the ColorField and Color Picker for a color."
	},

	"Attribute: ContextMenu": {
		"prefix": "ContextMenu",
		"body": [
			"[ContextMenu(\"$2\")]",
			"%PRIVATE%void $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": "The ContextMenu attribute allows you to add commands to the context menu."
	},

	"Attribute: ContextMenuItem": {
		"prefix": "ContextMenuItem",
		"body": ["[ContextMenuItem(\"$1\", \"$0\")]"],
		"description": "Use this attribute to add a context menu to a field that calls a named method."
	},

	"Attribute: CreateAssetMenu": {
		"prefix": "CreateAssetMenu",
		"body": ["[CreateAssetMenu(\"$2\", \"$0\")] public $1;"],
		"description": "Mark a ScriptableObject-derived type to be automatically listed in the Assets/Create submenu, so that instances of the type can be easily created and stored in the project as \".asset\" files."
	},

	"Attribute: CustomGridBrush": {
		"prefix": "CustomGridBrush",
		"body": ["[CustomGridBrush]"],
		"description": "Attribute to define the class as a grid brush and to make it available in the palette window."
	},

	"Attribute: Delayed": {
		"prefix": "Delayed",
		"body": ["[Delayed] public $0;"],
		"description": "Attribute used to make a float, int, or string variable in a script be delayed."
	},

	"Attribute: DisallowMultipleComponent": {
		"prefix": "DisallowMultipleComponent",
		"body": ["[DisallowMultipleComponent]"],
		"description": "Prevents MonoBehaviour of same type (or subtype) to be added more than once to a GameObject."
	},

	"Attribute: ExcludeFromObjectFactory": {
		"prefix": "ExcludeFromObjectFactory",
		"body": ["[ExcludeFromObjectFactory]"],
		"description": "Add this attribute to a class to prevent the class and its inherited classes from being created with ObjectFactory methods."
	},

	"Attribute: ExcludeFromPreset": {
		"prefix": "ExcludeFromPreset",
		"body": ["[ExcludeFromPreset]"],
		"description": "Add this attribute to a class to prevent creating a Preset from the instances of the class."
	},

	"Attribute: ExecuteAlways": {
		"prefix": "ExecuteAlways",
		"body": ["[ExecuteAlways]"],
		"description": "Makes instances of a script always execute, both as part of Play Mode and when editing."
	},

	"Attribute: ExecuteInEditMode": {
		"prefix": "ExecuteInEditMode",
		"body": ["[ExecuteInEditMode]"],
		"description": "Makes all instances of a script execute in Edit Mode."
	},

	"Attribute: GradientUsage": {
		"prefix": "GradientUsage",
		"body": ["[GradientUsage($0)] public $1;"],
		"description": "Controls how the Gradient inspector editor treats the color values."
	},

	"Attribute: GUITarget": {
		"prefix": "GUITarget",
		"body": [
			"[GUITarget($1)]",
			"%PRIVATE%void OnGUI()%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": "Allows to control for which display the OnGUI is called."
	},

	"Attribute: Header": {
		"prefix": "Header",
		"body": ["[Header(\"$0\")] public $1;"],
		"description": "Use this PropertyAttribute to add a header above some fields in the Inspector."
	},

	"Attribute: HelpURL": {
		"prefix": "HelpURL",
		"body": ["[HelpURL(\"$0\")]"],
		"description": "Provide a custom documentation URL for a class."
	},

	"Attribute: HideInCallstack": {
		"prefix": "HideInCallstack",
		"body": [
			"[HideInCallstack]",
			"%PRIVATE%void $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": "Marks the methods you want to hide from the Console window callstack. When you hide these methods they are removed from the detail area of the selected message in the Console window."
	},

	"Attribute: HideInInspector": {
		"prefix": "HideInInspector",
		"body": ["[HideInInspector] public $0;"],
		"description": "Flags a variable to not appear in the Inspector."
	},

	"Attribute: Icon": {
		"prefix": "Icon",
		"body": ["[Icon]"],
		"description": "Attribute to specify an icon for a MonoBehaviour or ScriptableObject."
	},

	"Attribute: ImageEffectAfterScale": {
		"prefix": "ImageEffectAfterScale",
		"body": ["[ImageEffectAfterScale]"],
		"description": "Any Image Effect with this attribute will be rendered after Dynamic Resolution stage."
	},

	"Attribute: ImageEffectAllowedInSceneView": {
		"prefix": "ImageEffectAllowedInSceneView",
		"body": ["[ImageEffectAllowedInSceneView]"],
		"description": "Any Image Effect with this attribute can be rendered into the Scene view camera."
	},

	"Attribute: ImageEffectOpaque": {
		"prefix": "ImageEffectOpaque",
		"body": ["[ImageEffectOpaque]"],
		"description": "Any Image Effect with this attribute will be rendered after opaque geometry but before transparent geometry."
	},

	"Attribute: ImageEffectTransformsToLDR": {
		"prefix": "ImageEffectTransformsToLDR",
		"body": ["[ImageEffectTransformsToLDR]"],
		"description": "When using HDR rendering it can sometime be desirable to switch to LDR rendering during ImageEffect rendering."
	},

	"Attribute: ImageEffectUsesCommandBuffer": {
		"prefix": "ImageEffectUsesCommandBuffer",
		"body": ["[ImageEffectUsesCommandBuffer]"],
		"description": "Use this attribute when image effects are implemented using Command Buffers."
	},

	"Attribute: InspectorName": {
		"prefix": "InspectorName",
		"body": ["[InspectorName(\"$0\")]$1,"],
		"description": "Use this attribute on enum value declarations to change the display name shown in the Inspector."
	},

	"Attribute: InspectorOrder": {
		"prefix": "InspectorOrder",
		"body": ["[InspectorOrder]"],
		"description": "Shows sorted enum values in the Inspector enum UI dropdowns i.e. EditorGUI.EnumPopup, PropertyField etc. This attribute can be applied to enum types only."
	},

	"Attribute: Min": {
		"prefix": "Min",
		"body": ["[Min($0)] public $1;"],
		"description": "Attribute used to make a float or int variable in a script be restricted to a specific minimum value."
	},

	"Attribute: Multiline": {
		"prefix": "Multiline",
		"body": ["[Multiline] public $0;"],
		"description": "Attribute to make a string be edited with a multi-line textfield."
	},

	"Attribute: NonReorderable": {
		"prefix": "NonReorderable",
		"body": ["[NonReorderable] public $0;"],
		"description": "Disables reordering of an array or list in the Inspector window."
	},

	"Attribute: PreferBinarySerialization": {
		"prefix": "PreferBinarySerialization",
		"body": ["[PreferBinarySerialization]"],
		"description": "Prefer ScriptableObject derived type to use binary serialization regardless of project's asset serialization mode."
	},

	"Attribute: Range": {
		"prefix": "Range",
		"body": ["[Range($2, $0)] public $1;"],
		"description": ""
	},

	"Attribute: RuntimeInitializeOnLoadMethod": {
		"prefix": "RuntimeInitializeOnLoadMethod",
		"body": [
			"[RuntimeInitializeOnLoadMethod($2)]",
			"%PRIVATE%static void $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": "Use this attribute to get a callback when the runtime is starting up and loading the first scene."
	},

	"Attribute: SelectionBase": {
		"prefix": "SelectionBase",
		"body": ["[SelectionBase]"],
		"description": "Add this attribute to a script class to mark its GameObject as a selection base object for Scene View picking."
	},

	"Attribute: SerializeReference": {
		"prefix": "SerializeReference",
		"body": ["[SerializeReference] public $0;"],
		"description": "A scripting attribute that instructs Unity to serialize a field as a reference instead of as a value."
	},

	"Attribute: SharedBetweenAnimators": {
		"prefix": "SharedBetweenAnimators",
		"body": ["[SharedBetweenAnimators]"],
		"description": "The SharedBetweenAnimatorsAttribute specifies that this StateMachineBehaviour is instantiated only once and shared by all Animator instances. This attribute reduces the memory footprint for each controller instance."
	},

	"Attribute: Space": {
		"prefix": "Space",
		"body": ["[Space] public $0;"],
		"description": "Use this PropertyAttribute to add some spacing in the Inspector."
	},

	"Attribute: TextArea": {
		"prefix": "TextArea",
		"body": ["[TextArea] public $0;"],
		"description": "Attribute to make a string be edited with a height-flexible and scrollable text area."
	},

	"Attribute: Tooltip": {
		"prefix": "Tooltip",
		"body": ["[Tooltip(\"$0\")] public $1;"],
		"description": "Specify a tooltip for a field in the Inspector window."
	},

	"Attribute: CanEditMultipleObjects": {
		"prefix": "CanEditMultipleObjects",
		"body": ["[CanEditMultipleObjects]"],
		"description": "Attribute used to make a custom editor support multi-object editing."
	},

	"Attribute: CustomEditor": {
		"prefix": "CustomEditor",
		"body": ["[CustomEditor(typeof($0))]"],
		"description": "Tells an Editor class which run-time type it's an editor for."
	},

	"Attribute: CustomEditorForRenderPipeline": {
		"prefix": "CustomEditorForRenderPipeline",
		"body": ["[CustomEditorForRenderPipeline]"],
		"description": ""
	},

	"Attribute: CustomPreview": {
		"prefix": "CustomPreview",
		"body": ["[CustomPreview(typeof($0)]"],
		"description": "Adds an extra preview in the Inspector for the specified type."
	},

	"Attribute: CustomPropertyDrawer": {
		"prefix": "CustomPropertyDrawer",
		"body": ["[CustomPropertyDrawer(typeof($0)]"],
		"description": "Tells a custom PropertyDrawer or DecoratorDrawer which run-time Serializable class or PropertyAttribute it's a drawer for."
	},

	"Attribute: DrawGizmo": {
		"prefix": "DrawGizmo",
		"body": [
			"[DrawGizmo] %PRIVATE%static void",
			"$1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": "The DrawGizmo attribute allows you to supply a gizmo renderer for any Component."
	},

	"Attribute: EditorWindowTitle": {
		"prefix": "EditorWindowTitle",
		"body": ["[EditorWindowTitle(title=\"$0\")]"],
		"description": "Use this class to set title text and icon for an Editor window."
	},

	"Attribute: FilePath": {
		"prefix": "FilePath",
		"body": ["[FilePath(\"$1\", $0)]"],
		"description": "An attribute that specifies a file location relative to the Project folder or Unity's preferences folder."
	},

	"Attribute: InitializeOnEnterPlayMode": {
		"prefix": "InitializeOnEnterPlayMode",
		"body": [
			"[InitializeOnEnterPlayMode]",
			"%PRIVATE%static void $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": "Allow an editor class method to be initialized when Unity enters Play Mode."
	},

	"Attribute: InitializeOnLoad": {
		"prefix": "InitializeOnLoad",
		"body": ["[InitializeOnLoad]"],
		"description": "Allows you to initialize an Editor class when Unity loads, and when your scripts are recompiled."
	},

	"Attribute: InitializeOnLoadMethod": {
		"prefix": "InitializeOnLoadMethod",
		"body": [
			"[InitializeOnLoadMethod]",
			"%PRIVATE%static void $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": ""
	},

	"Attribute: LightingExplorerExtension": {
		"prefix": "LightingExplorerExtension",
		"body": ["[LightingExplorerExtension]"],
		"description": ""
	},

	"Attribute: Localization": {
		"prefix": "Localization",
		"body": ["[assembly:Localization]"],
		"description": ""
	},

	"Attribute: MenuItem": {
		"prefix": "MenuItem",
		"body": [
			"[MenuItem(\"$2\")]",
			"%PRIVATE%static void $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": ""
	},

	"Attribute: SettingsProvider": {
		"prefix": "SettingsProvider",
		"body": [
			"[SettingsProvider]",
			"public static SettingsProvider $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": ""
	},

	"Attribute: SettingsProviderGroup": {
		"prefix": "SettingsProviderGroup",
		"body": [
			"[SettingsProviderGroup]",
			"public static SettingsProvider[] $1%LINE_BREAK%{",
			"\t$0",
			"}"
		],
		"description": ""
	}
}

{"_id":"@sinclair/typebox","_rev":"291-f10611170308a2d9c6fea914879d2230","name":"@sinclair/typebox","dist-tags":{"latest":"0.32.14","dev":"0.32.0-dev-28"},"versions":{"0.8.0":{"name":"@sinclair/typebox","version":"0.8.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"npm run spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.8.0.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.8.0","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-x/nrHVVB7L7lJHnYR8yV4BxFf9UWqwXDi1ygPemUknW5mLlfwkBprVfXb3r3tS7a4mifyzjIj4j50eKTNCL/oQ==","shasum":"b075e04c6e1eb3c997ce50f4638606b0a44f3515","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.8.0.tgz","fileCount":5,"unpackedSize":49553,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYCenCRA9TVsSAnZWagAAADAP/2eYX/Hzb8UreGWMOmAy\nJ5xBzsJIS+EGxRXHP6/dLEPU8zf83WEsGd95S6WICD+QhnBC+9Lfl85edEiI\nYps7zu16CkfZsECX5qKb/NaEzpCdZR3v+efJIY7TpZ/kt902fSNKaKPxjG9I\nZqH5J5JcWtWfgPwTjqrKd5o7D6E19h+Y83BE8eSOabm1exshCe/hYldX3ZkW\nBCVx+zMBtG1joLbMSfoxO/OnYL8uRnNvh1OtNsUPlHdDtI5vMw9bEnl46q6D\nyx5IZOO4Y6hxiq/VztQ609azuJlz9za3Kd8hWlzPHmWAhhBb0kt2HkGGqRBI\ni/xx+NUnp+TIXvkYnx9o1IZBUWZDyoCI4leaPyG8tqahUZvfS+QNAwmB+3Q/\nd5Nci2Ns4UlJdU53DH9kGUryxy4MhkVDeccKpEaNtgAal/IJrthAQQFrG6Zd\nqAq+AoQHXDSGQwng1dFXnEBRaj0YznPMs8AE7Jyi6kyKuA7PvB2ZwPRxf5ou\niDzI1MUGTHEysNaFO2AoGFTmoTntRpjM0trYdvoQO2P4hF7JQ3C5jQcUrHGM\nigv707SafQ49qhMJBgmn2/E4ctn0hK9FtEYmiNPcHbFGPf8wRQEMKPrftDQq\nLYuAwzVXOFH+TylM7WHS6A++HPIDLYWmDDO/trCTEas0aySf15PZr9TcDsWK\nwwvz\r\n=eyWD\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDu0GRHHGVWNohcM2fUGwQ9LSAvGcH6OxWLDR4eIKNkygIgMQ85/3L8jSupxlrk4RkBxc7UuiH80dDOISlftGySBUw="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.8.0_1583359911043_0.034058186348479236"},"_hasShrinkwrap":false},"0.8.1":{"name":"@sinclair/typebox","version":"0.8.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.8.1.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.8.1","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-oHKERsLyIxfuOnSrEUuM0nrfyWgvPXRXNfQeo+qGtnS64HA6VgwZ/ev+/H8QheJa4taTOF4hErSdQfpnipQ7Ug==","shasum":"e891f05bb706e0feedf5a09b6e3e4592114b2495","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.8.1.tgz","fileCount":5,"unpackedSize":50234,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYDVJCRA9TVsSAnZWagAAvGAP/j9gseErNlHLd0KLrraX\nKJBPaMECHAF46sCDL0OCDMsFmuGiKsxZ3KKTFUIn7ZDQLGhYhQD7/H5qWxC/\nvra7Y93g1gygHw+yivLxg/Nj4C2k9cNesb4huEXZbh/S9jwTa3NHMCIpKPMn\nRAVQb9UHI257IY6f7A5SluVS1B1ejSqmx9OdfXhI7KbdiH+EDoDTFKAID9hN\nQRO+PMwtOuRoFV206H6kp/zbgmd521PypVpYifCPYVxM86XSg2RoayoVTCMV\nUFeuH2Lit1DlnwFdNKuoRyQXcYgHrchf+5Xfw2KiJsDAiXjJe7fhhGV/q4Zu\noNtNX2mNfEJikfgkF4dZHuNwzynTrUTUPPFdH2CADozc3Fp81J2B6l6w09bg\ny2y7jlJLFhF1TDm/COFLeJQFBA3g0bSEYNPVupjosqPblSu2OnbNYgf3tSvh\nUkv4TOIjrB7yzEXUvQl9aY9u34Md1TnXCqVo9xBD5sDFggaEmC7cCkY7ZBmI\natC26E6kNwy6U6IZNQBB+CUQPlR8fjasmmh/8u1yBrMQ2PflRZcypwFZn2Da\nkW4jYxwkcw9M/JBboyr+IO/J/Q1WDb3znByv3hnuBlJJ+LR/OmEU10SoEksv\nRLzE6WTlRQWBu4ZgQasKzWGbgwiZIW36chdqXaFVWdDKXBmjgo7GZDv6kvt1\nP6OE\r\n=ec4Z\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDoj0I19ntPxe14R8grWbxD4WDwSqbsImuWRS+sNld8pwIhALHj9bdS1K2r9bs7kDo4fGRvhKtDpPdYx3g6fsLxuOie"}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.8.1_1583363401145_0.2970624065230636"},"_hasShrinkwrap":false},"0.9.0":{"name":"@sinclair/typebox","version":"0.9.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.0.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.0","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-R9ReRb2aAiNVygt0JPvySQIham488r1vMccDDiVPJdEWDFLP7Uha6hgLY2g0nGXs2eaXk4Xs6htHpjsMxVN13A==","shasum":"5aabed0a3a2205f5dad9f0a88b104752d7c02eed","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.0.tgz","fileCount":5,"unpackedSize":50500,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYGQpCRA9TVsSAnZWagAAIk0QAJVccgOfmcyTGSGsGFR8\nGJloNuEDkWTmbY48DT0Gl18Xr8lxm/5tS5Npromk9AKeRjf24VMxTpjDVK7I\n4Jnavd4xQZhhTsiqIeG2y01xT82y3DWwwd7UH6D1r/lRtsuNtXFTj8Dp9EZC\nCp+PqGEEWNMZ+uAU8p1PtX2ZzN6G0MlNPkhIkZzMip6JQIaSQmVH2BUf4V3Z\nGXLcS+WcSu+Jx0eM4OgPKvTg4k4Ia2XzE5NuSuKCAUYYZ6gbGu9GJjtdAIym\nhU9SLHKA23fmqsRp5tSA+0lb6eIL6f9vv13AaweN3JKOvWAUdkE7TQcI+PGz\nNR8z0QuEQ86VB9yqcsKr/hZIoSvL7yi3a9oiqa5/1zUgxRzt4ZwukMS50qqp\nv9qkjj72YTm0eSkXeIRpybsMJ/8XepibcQ88CRjK8C9OEEn9pKjRLfANE+BD\nQiDIriNagbUpY83qapenJWlp02oPEarWK/+xsQosD08m1uUiIGuCtttNuq4h\njOfbVTZl72ZZ3BrWum+epLHz1Tccrqgir7/Kg4gw5hUYSZDoPZ4f6g3mQAXx\n4EwfC60eGr0A7MzdhHEITe9RI3y0oZwF8iSGV4CZU9zuj+/sGvnnBjJhOMjX\n0fOV4jPUtY+Vd9aiqRK3qgFeuhbeJtAEggwYDxJtmh1tR00h2S+gU87wtCOw\njvW3\r\n=Ypgh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDzhT7Hq7kRsMXV2EczdIymecxj03t0kLltMnF4VcW1vgIgClh+BZ3NpQ7Duazn4qGjjU0mvcYbCBHFXZj7U+kLJRw="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.0_1583375400842_0.6495084434058633"},"_hasShrinkwrap":false},"0.9.1":{"name":"@sinclair/typebox","version":"0.9.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.1.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.1","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-UCheGU7MBDC11YRodd8QOzoigVi5sR/biXccz/mg7dBvnAQlOmuRN4TLlKzXHhMTsZ4AgTu6nJhQxi3AutiacA==","shasum":"59169451613fee4d4fc97754f6632cbf35774a7a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.1.tgz","fileCount":5,"unpackedSize":50492,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYGYECRA9TVsSAnZWagAAVWIQAIk2YL5cQgONDv0v4NiI\n3cf3xmzpQ39BSYUTM0RKe0SbmicYiLHWwnTprL0oZcptdtEO376BcXM2K8vW\n3bW3aFZNqpz1+63AvfLDjQbJmN4rzN5lwam5+MW04CGDzrweENw/LbUBKOq/\nk6EvD1EMEnYkUYWjGSwE6LNPFYoU4bzA7+P0pDm+owNblTzPkYf52EhaPFVX\nHj0BVYkTjCHOKS7k5ht5Kpj+j+1KsNyBZ2GykBIi504gg0zbML+z0HyNGj+p\n0erjgxeRKDyaP+xPh7hozbvMihkYrnZZlvcL9cuX505iKhgqf7dOO6SlM7Ml\nws6/+bhbZ2Ux+PrVCJC6PNldWD9jczWhlDbdvET15KC6LwdZfZV/IxrXl9RI\nXsLacL0iLwb/ANPVoiRLW0zYoqlf3XczMGDfUEZ3cOKTK549yuCoD41pl2X4\nKxDz4wcE+0j8yIrbjSUD7B5wQUfpq1l0rLzCLmtgtjigbK1Da8lAGikzbaR9\nbwechOPOc3PqdN8azHcBB/SpCtNzO84UN5NQ+J4RqRBd8FeyU2949aaoi4B0\nf4UrhKJrAQj5bjhCi/JlOxS285WBPttmyF/6b5PTrO32KFCj5rP6eo+FVxgW\nUV93T0Yqp7xNZ9nx6u3kidh0sZ9FbYwXKFwvKa8dlG3NYix7E1rv4ZJ2iShM\ntddF\r\n=QcXw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQClSd4oiay+642vzNEL0fxbp8371PtOmYwWAljeZOu98QIgNn9OGACLdkbss09jk1ZVslZVjWCjkhsAJ+5iqTB9D4Y="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.1_1583375876361_0.4468361164738972"},"_hasShrinkwrap":false},"0.9.2":{"name":"@sinclair/typebox","version":"0.9.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.2.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.2","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-Vf5k7loHgmXVi206wqRzqBlqNQEEeGMOFgLbs5vFBWmOUIfJTZwmXL0pVK7AGTnVZz6Dr0pPGBenwSZaNlhFeQ==","shasum":"fbc48a03e5125398731d1bd9e59ac250095da54d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.2.tgz","fileCount":5,"unpackedSize":57710,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYc7bCRA9TVsSAnZWagAA2BAP/0jeG2LJ9UombR1iCljQ\nBJNdxfwhfGXUFaxgX11gIIJPyflcuJF+3xl5uWz3EqI4Z7GvP403bTQGfvZ+\ncO/PJdTPjttznW01nMiHLIum3q+vLevGY8AyZzqbselZ1WkKR5p2NqWBYsZf\nJdU4y+DVp8I2P5rgP6xsoQ29kfQKxqrb+dlyoO0nwBU6YZU0MKvQr2bcgBcP\nY+4CAHjGLgNXrEtsaLSk9TdPBmNGjHs6TOs1xhu0eudlgP48YpE2G0gd1UWG\nxAnG+RGWYOT2vnykqGlku1IEzpPsZOM6fxKlfdDLyRx1yuwMlQfHNIlvIM9Y\n7bqaWB3h/Pge1ZcjKHO5fku0UBhBYwpcktv4TLA+einbRaqxGoNRQZTWuFx3\nK6ksW9BY/g8SNTJUtjckazvUi3f5WWfa0H7uw7ZxspJlodkFzsUn37c6vZg2\nBx+VIr5j6s52rhfniT3SDG67KbBLngusUGG1cKQxPc1ycxoosIn9tjc9uFXg\neIQ/T+6l15o7h31ZhIAP925XbmgYqguNaUKJoVMSos8wDNsxuIDcssr7iuB9\n1jCTQMucY1GHlSh0afWxjoG0EPWDHjUaDGvwy9334zFCFo50HmwndD88BswO\n33C/uOOQT0Wcykg+r5DXbS9Jgqrz1XFn1+knDYTIEcYUnVku6ZQ9dC6xoJ+G\nss3U\r\n=J+Vc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF242hXC5+Mc5tB9btqKvaTr8Mi9eLogjQuJx987DdhQAiEApJtCaWO1kY9+hWf0Y1Fgq5y0+U0WHCRi153cHB0PVbA="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.2_1583468250488_0.44867105115684347"},"_hasShrinkwrap":false},"0.9.3":{"name":"@sinclair/typebox","version":"0.9.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.3.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.3","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-nmFTlEMp/LFOneMZGO2y7hENN5tfmWGe4uA9jMeelJmxOtiOLMsnVl1WdbMx0dDfmkI6tTotlg6AfO3PE60KQw==","shasum":"228b5aa00fc839ae9865a890ce2a36d4f7605ad1","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.3.tgz","fileCount":5,"unpackedSize":58463,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYigfCRA9TVsSAnZWagAAUiQQAJD3QDqn22wHBea1R9Y3\nnPnxD6U7vKgwzD8uegOIpbFBuoZ+gYasj4pmPoKOz+K34p0TAtlYR44e8Dxy\nS0NfZ2kCIq3bZq9nQyt6+NWEz32JREtMGjrHddKP7RQSfIx0eELwWvw1VMhH\nMro7+ax86x0MZqWhZeYhK0S9rEJ5JwQKE7gUhbnlEHP/XdfE96/dO1ZxqtpL\nOX3/zogut6J/cg1kRhy77sxo0kC2netBhW6fgBRv1njtmgLc0PQWGpwbEMKi\nIGU+zpgoa9nhUEHkcVs/Pru4oodGAmRgq3ooBo5nxR5Dkm+Ls2ewgtPjg2hs\nvCLMbH7Lt7Bhnm1Gjx6JvwSP1jMDbc8wZUilFYLbPLeuvVA17xAn5MRZNvNI\nSewxxWyKub3eqVYvfrrq+6J4X9N3Lb85eEQEEvenJeq37VQVshPU+tsewEEc\nFmzKUmtXul22xbre1zSwxysw6oasEffTzvKovHHaaJWOM8FJtBCAOMInzIqY\nmuWbB8kP48uT3+zFCuh4n76RTTxJXbvdV83PxjjVnXKPN1gp4ZaXYh0EGu2s\notC7pzvGJHVTLA6WeZZPK1Fyr8w4a1H3YOIEvcGnWIfs0iNDNa249CvbwFIE\ngOaHYCQx9+trxE4PhMNRelNsT32Ymo7/ml8KQFFZx3u0/b+9SrDL3jy2shQC\nYLXb\r\n=LOk5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB1eEDIa/VXNSd22lzOTFoWnikfo3o2Tojh31+Dx6qH0AiA9gkV7gz3iDGofFNWbzjrDzwizF0Nb2vbuvNglTyyYEQ=="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.3_1583491102475_0.5985503932480156"},"_hasShrinkwrap":false},"0.9.4":{"name":"@sinclair/typebox","version":"0.9.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.4.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.4","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-MOjeauqMVIfzvMQ4CY97CmOx4VqY55vONQDUyKQbvJPyn5fXuE9vAx7VZURe6+AQxZnvbj/NAoo6dKPAHrqI/g==","shasum":"80c8ed73682f59a0ece23430f87fc72beb11adcf","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.4.tgz","fileCount":5,"unpackedSize":60480,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYkVyCRA9TVsSAnZWagAAjcoP/0TNIfTup+t0kZrZrtpo\nOdy/xhditSY2HRBegpLhCYdE+90I5/JWAO/Vd59cg+TOcmfZN549UhBTk+2P\nU+uk9kvejoT9g6Ov117/DJcO9cW2THjoKaPyKAcxnmYOjAVan+1PQ+N7A7aT\nKAlyeQauSFIrEgVhRHiVMQk1KX+1EjlDpwKMDSkvc1HnlL3yr393ff1mSZpZ\nhIO23OT4ECL2bVRtVhE/WA0cANqrccVAkETfjodocOBsYdZ13Ar2iUCwgG8s\nXMD6aHx3NJvpHe+F1qWRDTYIKSXe7838xqoT7RViiraqEZsEjF05d7ZUJSwG\nQ1A/5vz2ZiO2X+b02XBORjGUAYMYg3VYCHOQKPK1oYbeoukH+rnaegHSGaGy\nn+hx0rNPux39MXayRV1ukIQFr/Xy1W+/+BrH2snfckhtLaDM3zX0x2qdUAmu\n1JKO2MXlLhZXyjpV1EzEO5ySVHdPL6dj/lLdjdnrqHezjc67NDj5ZsloJo/C\n0kMPYnI+V9Sb0s4lLi7iY+blCGqr+herE+xK1/C/pQdVL76Oq+K24fBcr3WN\nmAb57yoRcgSBFsgfNRQ1UVFdp4KaYPz/Ezia9k2ojNW+vWafhEql3N9mQRBl\n/MtuoFiwKAq2OE6ug2WQJKYjuY39FShcycrjpE+VJGHpSjR87H75i2ue3xFV\nix+k\r\n=j9gY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCbNxzfKu1J6lsWMZiHyOUPeDNv3AdhNQ35qX72IN7ongIhAPk744dIvtVSsqOzp79nug8EHnk8z9KnzkkwGZWzX9EE"}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.4_1583498609810_0.9033757547056813"},"_hasShrinkwrap":false},"0.9.5":{"name":"@sinclair/typebox","version":"0.9.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.5.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.5","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-t+141kjzEbg9NflShVrZSAt7p91MqZjbn+/BIKO/hdGdU3bCusA1DWuSocss19LAjLWxZQ3beZ1eRHcI8LmU+Q==","shasum":"261591913fe6a76de36e478c39b640c3c7783335","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.5.tgz","fileCount":5,"unpackedSize":60480,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYm/gCRA9TVsSAnZWagAAcA8P+wRntNM2ZlV1sVIVjfN7\nEJRux8mLiMCNBTwmsaEbZKo+FIjVJ9F4yBptkCY3AbQNa5b/Sk/h4WD9w6J2\n/UH01z/ZodCENy8DWirKjNh5DpYDG4rEhfi06jCUZ82qXbYdB8cCAGRDHAOX\n/dTIKJ18IKTv9bgprdMvdwastvfDuWPrb6xzGIy85IrU9hZtMSwWihqfToqe\nMwZZhMCOe1fxumUpWohMxCDLKUSa5o6rIjX4f7gDs/xvj8F94ita7fRm8yRj\nrWzl0lPfy2jZBxu5TZMmthVxNg2HJ2sbZfWSNe1NtS+D92HVg//TCHkf6jAW\nlhiAbj3zdb+XraqCMy6kRPi36ENJ27Hoee5k6NSLSNrf/LWuWUkcN+cx4XiD\nfCQQzcfhlu/2g3Kdfukoot/ciUdY0XWshFTKcB2IvUJ3E/VL8lmBhMIAB78s\nYrI3gBVNQKOHkm6/IaPGlvyKkUwdpsOiZ3HTYR7JTkhb+6oR2xpaL321eOXe\nIIGE9HQ3FjIu2DoHvMpPihU9ImrLCmbZPvenVsc8NbAFGLPEVs632WdkDde6\nxLbpJluZcqOcr5xlaom2VQvdgP1n9slcVHBWkge79o9LNTxedS9Kym4PnyTD\nRCmqs8otronCTLGPPDHsvwl8agZqvifK3w5X6T45dXuRSnc5+1KfcFXxE6+/\nDCRs\r\n=io0O\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDROoxdIOcxybyb6IFEtZ68vItNvVZL2XNcyWIQPUpNVgIhAIMje/zA2+5FWQSBbPL8m2bjfdXe6u0helwx5JuvLvLh"}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.5_1583509471723_0.6820419851638333"},"_hasShrinkwrap":false},"0.9.6":{"name":"@sinclair/typebox","version":"0.9.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.6.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.6","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-C42167L6lEfHeTOXlR5IKSkkScBWlq1XpznNi/tIr+9LuGcSTBXcahQCeFo3g8qcTLr5f/0+MknzMxgKWzaCBA==","shasum":"5135f299ef19fa63dbd148ea9d60d6d6387ff74b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.6.tgz","fileCount":5,"unpackedSize":60781,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYoQ1CRA9TVsSAnZWagAA+5QP/jbUNDvwGBKLXMEwJ5Nl\nMGFREbw0q560K+vytnVhOmEPfBQRtIqPhvos83vlbmz5UJHthmocKHikmbZh\nzNWn69u1NWE6ju5FLIerBIENQDRd97r0z0fnxMsBIZHN9CEQhqe5/57Acgph\nbIxdBMDKzCELzVVYt4hXJaeqGx+T/IRdB8h4s/kXzwyDrg7dCZrngosgcIx3\nLIQA1jS4fq5x2zZdA5vhONKXMGCMJlCf9dNZ5ESPcBrQCwHENSrItOmsV5wo\nUviARp4QQSdgWZQo9ljTBTol3qQjp0ewjzv3XtputMA9kl7/kJz3HcpCFtYT\nQQ5KGqO2w9D4X87oRr5Q6D+/rF9T20KUd9nKQf9uXPx3GlKIYtqilOjbWCxD\nuJMqrSMslGSiQOrtfzOfVDCM+4ObSJpxWqiUhbxlU//ZKc4slBtAYOe4LO3K\n7ukzQ6UuZ+Q6cp6oREK/C5XLLaxC3kawCkP2n551zj33F0kBwBthrfi/TBGW\nT86heeZIdu0u1x2dacXlqw8AbjP9vSL7/AY7SkBapUi9yGwBshbeXaY/iD1u\nrTe5T1Oe6mVSlCWdhJeeFEdL/Dk6hVyfJcBzSJgBvI+unFclVX0Ld61B4tNo\nQyP1/kPzqSKV60wmGkH5tlMrcMI1zEy6bo9kX2y6kaoCsL1Zj/u8oFOdZDbs\nlfc7\r\n=1Yux\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBIJU1Ss0wfzGmR8cOY8fWAx2gHFjPvaBHTpWCTYmKCoAiBYPdheU5QzIit1hhTqSEukYfq74nC3WRU3aYQ1DlSVDw=="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.6_1583514677014_0.9003093816850498"},"_hasShrinkwrap":false},"0.9.7":{"name":"@sinclair/typebox","version":"0.9.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.7.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.7","_nodeVersion":"12.3.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-iR0vhm05UB32KPautEDS/t6HNmX3N7933lDSl5FynovYNdlwWUCuev0UqxFhGgmF92tUlWjStLWaEFEci26jFw==","shasum":"3c029f03bc6da4c34f989779e3f9c23a30cac9d3","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.7.tgz","fileCount":5,"unpackedSize":64921,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeY0KgCRA9TVsSAnZWagAAH1MP/jDNB6CgUSQkjRpEwNQE\n1/UGrPEJb6iwDVCSQk76tMoZZhYKi+RqSXBLL4J4OtO6hlHLt8sFp12FS+xQ\nNICMLz2o/JpCsQf2Ay5pPs22fegRSYOj8GjMGFwA7rf93XfszkLsW6yfvX4N\nrUxw3zkGrI+vsJmL/a5YvHYMKAZAQoD9/z5pWPqjjq/ipICx4zuemo2Qsq0G\n39nVsvWrdRmUv9fVMFtgsVzGnownY/nM0gn+j0VkgZeNegFgFjCcCs+ZKKQ4\nm26LN5gFqfdPRnqaMMTochTrkXQBJoHb80aft3v1MzE5LgvAMY/Q1PE9xj0g\nLl9VLZCJI4PBGURqPoWLrM+x9dN9RY0/eHcPVCvH7J2WH5zQynhy+03f/4NF\n4eBqkKiAup3NbJIoLCFjp58uFoXHmFEHQImpGdmEdykOdQeRF8u7+j/Qcygl\nJiyGq90Q9h4DUVqAXHVEWLGel9aykNRWW+FpAePRdYzzlogBNR2BeqJaDH15\nY/DmxQBdFh3WuEklkGmwNF+5hYHRhos3ewc7uuFu8Aanc7AAXoe8+KlHifFF\ndmJJJc2g1yExILbYpR4yDIHNoGc14AWWvWKwui0+42b7KlUugnaSJs5KWZ0o\ncnl8PO2+UopinFTC9LxUHGQkp/cCquQfy4qAQ0yQZ4W9E/x2pBVnZ378GzxC\njUbf\r\n=Lq8Q\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQChuext7JMqLe7lN2EO/WfZHKW74dro7wgZbbRTkOuYXwIhAJjWfTvaBh1I/+tgOcWAtWzjwJn7QMSKHRVlGrE3bBUc"}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.7_1583563424129_0.8510498241402402"},"_hasShrinkwrap":false},"0.9.8":{"name":"@sinclair/typebox","version":"0.9.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.8.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.8","_nodeVersion":"12.3.1","_npmVersion":"6.14.2","dist":{"integrity":"sha512-6SqGc5AZTUlixUfP1+UsubZBCSGxlz5XWas+Ej5YrmmtAVPJkzaM2Wc+1SOc0d2i0BKOe333udMhUsFl2gFwDQ==","shasum":"48ddf8dd686702d2635146193347ddfe3860b102","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.8.tgz","fileCount":5,"unpackedSize":64196,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeZIE0CRA9TVsSAnZWagAArAIP/j/gdPoclvvcfo4H+x0N\n35AFAE1NLJWlQme4QESuXyAdncWgEjdQva/5/A/2GL8x1iMFZFpURbOEq1ZU\n9w5VQkGy1Jdvr6TnNPO7IQ4k8tXxtaNmxwPjGFJCN4QjvXeXxBfEHtsbpkpQ\ngOvLrTOlMF8Jg82nXqbA2ZVoOT1oSS8irusouHbj4kvn1i0ISZCLKrC6ki6F\npS+XOTPovwoKFweoakO6WvqNQ/ribsMUpZ0pZAaT7zhaNxoyEEkc2AoOxwyq\nU0UGW2peZ4AdrxYJQ72tGz+YBwgSZ1PuVGLtpNgdCZs0kejbxmd9+ZJvO/mh\n1uaci/Qyj/QD7+JpOFeQgJffBO/fXtnVM5YySOEEDk1GFP9aliNs6+LhwcZ2\n9fGmavT2bs4j3RYq9vbNIkNpcmVnwJjGNyf4KXClbTh/m0mm3Sar2OuaoUTF\ncvtHCrtICLSgdGJknu530SfP4VJA642l2gL0gSET06G5X2yAB2DBR+imP8+r\n6eRKmXYEGOyvlKsczTPUnUglCnOVfwhe1Fc4heidzkAQc/G/HcFcvUSkFbyd\nkNS9Rr3ocw/5ZaoUHb+IBu/XhbMD7B3/ABLiDnoUB0J0+7rkqgxG4LnvaKOw\nKr/S22jvjjTZIj94sLbB58r+ybbJc5VoSr5SAjeTXNA3tctr3NxQLqxW1ztl\n3key\r\n=CRIB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDrRtyB0qATtFK+YFtX7f1M1KMYXhtxvgCpvckvqOS2eQIhAObB6pDujju47eLHbz6+i8XE5WWkMiAhn2rgasG1qsH1"}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.8_1583644980404_0.25037394753850983"},"_hasShrinkwrap":false},"0.9.9":{"name":"@sinclair/typebox","version":"0.9.9","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^5.2.0","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.9.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.9","_nodeVersion":"12.3.1","_npmVersion":"6.14.2","dist":{"integrity":"sha512-CIFvnIHFl+0mKgKQsKJfV/5fOxWTGiF9nGShmVt+As+FKLay2tRpCer5RdELd0SFUSlCmhkKJ4xw8ue1HYwJ9A==","shasum":"e4c74ac66eff8f86127eaa8e7e8645117d7e5a13","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.9.tgz","fileCount":5,"unpackedSize":64112,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeagowCRA9TVsSAnZWagAAAXkP/R8iyqimhmr8TfamL+OO\n6toMNAWo0/v4/Qrboma8j5n3yw0ZllRo6hm7a3TCFrzdFAoAysZdqEDOjCqw\nMDTB8DqqiF98BeSy9nzIbtqZjsC60LUCDxmRi8uy3BZkCX2nosv9UM+y5OaU\nnf2ya1oH7umfZFbRFcy1VvNiDN5mPkUSydu3Nr0EZKEA91wIlWakMDfKiyaZ\nSDhiLUC0PuSBsz3cI5Im+BvyIa5cZWI0aBdiqsepiDScw/MseoKu19+EFH/u\nXGFrpue9aCyhuCCjFV4xwn1eVAXfiZ8eBOwRZh1vPABqzBAGctuBAki/oe2K\niOfr4S6b37tju8QqFI2CLtrRRmQqJbVPbf8fW8n9h3SD5PYP4VidocN8437w\n1FFZ/DYgMGLdDeQy00OHjYuteYze+gJovTrxsx8aRL4P8795L9Qzu8JRJDQM\nlji26Q42JdU9uhX/7R51X6B0jdj5QnDArRAFjQPZ0eMyY6oJVsJt787pbP/+\na5NxPQUuQJ5Z1Fbw3PyGaGugbvzA7hlC+etAMIh1f5f0H5biTsFU91NMXXpA\nXpdVb6AD5NVJUq5RN1RzYuhFtIgufDVni32D4APHYjefI6tQtDR9rCF1J9td\n7XTcq0QwjzHSzdD9mmhkHBEgHIB2KeGNKGU44CCbjMMvQdxhGRlsqSs6jrL6\n1XIe\r\n=KRwg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGTlWpUBQSo6kcfNkYoUyQOFEwLR/qA0v1+6WI986ophAiEApfMwdQtnw1ZeCTmq6U5NiScVqBw7jeqV+QSz9xerprU="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.9_1584007727813_0.24434255104374758"},"_hasShrinkwrap":false},"0.9.10":{"name":"@sinclair/typebox","version":"0.9.10","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.10.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.10","_nodeVersion":"12.3.1","_npmVersion":"6.14.2","dist":{"integrity":"sha512-gSdP8DYfNWpemiv2cndVmKuCnQYF+br3PdrXABWb9q03ehem0eCNtbbVAqXtpdwNR/Ua0OeH3NNc34AGcpdUwg==","shasum":"42d7c39b605f679c96806cdb6c201eb3832dd6c5","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.10.tgz","fileCount":5,"unpackedSize":66322,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeguaoCRA9TVsSAnZWagAAOEoP/iBpFAZqD7olBu3/9yp2\nn8lap8LV0ESHiy0SrK5msgsVAku/VBARbvI2+TqgZykrJJu/xX81SPR3A1su\ncqflPQtbVx/Aj6XtCPFgbWKzFY76qU59gCzYkuNGSPWXb5Hw+QfpjxMCf0En\nchkvWwuqXmKI19lgE4xP7cnQo/ZfpswzIztbuzQR2FfU5RZJaVJLG0YIvAtE\nS/QYIQZsCzVpOxUUsbndEzUb0iBVHbJ/lf64VUCHPCYLrCE84a9DGvEOB+sl\n32qhnEAypLAYYj+FEfi7XTDt1I9DUI2iV3szpi+CIa2L/6zt7/pC8YS/TCFU\nk7xlK19Vj2ibsYy0l0xm6SvLChCoLWD4gqVTlF43QFiJ9pVFvtwlqNZeZH9b\nLNxSc63iJwoontH6WxjLmmoG1u5VDbrfcuhXCkEdej9qgdD4VjTGhHsXVk9s\n/cbSrbIxOqFAyPe1O9/kkH62zN45IZnJNXVLESWKWYBTVksX/JMXgi9aPJEz\n2PVlK0CUuPcg2CSe8EXsNYKVNVJ5KF8zfmEru3XjUwkOr/qwa4eJNYP1ix5c\neRHOxLkUSeA9IvBXcXHgBO7yHEDxbPFgvZ8z8y1/kRFV87mVX+FDQPVAbSZA\nzl7SLTr2PlzGcrH9/r2KfIfTyG5Gr/ogSmHt3VPRtSR2ZSQTWicDT/Emrv0F\n0DX4\r\n=QOu2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCU53BaDysDYD6Pwi86FihseavKBScSIJiBy9GzcmWbPQIhALjnfce0ReLuIn7q1rn6OhrVo5k2HxEpkzd43etG1nX+"}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.10_1585637031786_0.391635058577644"},"_hasShrinkwrap":false},"0.9.11":{"name":"@sinclair/typebox","version":"0.9.11","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.11.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.11","_nodeVersion":"12.3.1","_npmVersion":"6.14.2","dist":{"integrity":"sha512-2JL2iQSKn/CrxYzp0Xr03AiXMeaICHotNhkR5aOMwEUmOdQD8KFY9Fbs9CvXjOgLr57Arll7FjstUrXvLSnMrw==","shasum":"e00974e013da43226bb0691d6a24b7e61e72926a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.11.tgz","fileCount":5,"unpackedSize":66351,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJegunzCRA9TVsSAnZWagAAtLgP/RbOftqCnQNqgKpl5hS9\nrAhcGW9IjEsyEYIef/8q486su14hVx9DD3KC2B4ZWwqOPbzD/nbz6XuWRQ1C\nWeiDqNfEORO8+Ykf/tsjsq3w9leyf7ZqbqpSloPodatcAyG1DbOdItiOqmmK\njcWFlyv73Jgs+v4pVj6GwvJEM4BHN6OvcVxfjpV91IG9ljb8SIp7pFZqQZQf\n066nNeG8bydBZdkUK8iDAWJ3xNo3CIfMZBpFditeT3+D9ErhZaXr94jqbTOF\n2k+ODacAFfa3GqTniebxyk++q3HBQEqZueXm3uw+KFgoSRvrijI1AF0m64qV\n9V0vJOSBXAZdNf2yh1xzTAinDzne1IXJ0vhn0NXnsCXHDP6oBJcdzgOQCnhm\nPDOyHQ0LRBELkKcQR05u4XafDb+COfrfO1eUP0yqR/NuBNxQccj92qS/fE0x\n6yBIPcG2Tm48pbfMlkovCJUYF6amDkaz3u5AsmAwDNEzzpNJZTzRxILjzk7b\nRMRkZCM5L4l0UxAriBI7r2XASnsZcGbfmKS6T1FWUGW1g+QNODnaH4GrCNAl\n6uqJJcG3y1RFoVxGiL7KfMyHKGv7Id2yVaWFZMX0+XuCE/P6WMHTwCirSav2\nm1nZ+4xVGs+hyGxqEeHVrwY/54Zr7wVeZGmFM8iZf9StSfn0KfxzP7IzQKYc\n92HB\r\n=3dFs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5WJtSurpZvvss1eFKp6owm38NT9DQjD1OpBPODm8NQwIgO0Tl//LhQMI36C+NYtsZ+UsYa4F8nP0AgOC3XM+wKjA="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.11_1585637875266_0.47547938982304805"},"_hasShrinkwrap":false},"0.9.12":{"name":"@sinclair/typebox","version":"0.9.12","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.12.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.12","_nodeVersion":"12.3.1","_npmVersion":"6.14.2","dist":{"integrity":"sha512-9KuzScpdCOqjU+LHqIFSDOaAPNNRwGz9fH1KwPeC+4wAN3+RIa1h/N1gwwBHC548cOgzWvno6xOeL5AiMpCfAw==","shasum":"2e2edaa783a3a3734fd87ba3fd59a6e3d3e798e5","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.12.tgz","fileCount":5,"unpackedSize":66372,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeg0ipCRA9TVsSAnZWagAAsRYP/jjwTj9vsVScWS+VEVyD\nUNTwdUaclzq89CfC0UhjmsMJ4M/sy46/zISpRPtnCNgyynMJoZ9UP63i/QDK\nkYBquryG+Hch7rRkVKWPzHbpGpvjcLDlzvKDUaoHar9gFUJJ871LQr96gWer\n90pmJbQATJlJMoNtnXNl2gmsq7oVT/1ZMjeDI+i1dHpBj5Vxv0p4lGgEp1F/\nPdnAUpgCJ0c7yhyeab0QRRh+NguJSvQIgUZdm3TLwnuFi3GEG1/g78QRNRFl\nKNJaYkh0Lr/df4JmI7jrKJjk8UB/0kMuMRfNTS4HGfOv8thI3kO/VLbXPwI/\nk2urezG8Zm+8VEkog7hWgKw5oXs9RIW9E1osIcSrACrql8NtkrWegUgo5D7l\nexd9JHYbNmsSyiOJ0FqxqfDBBS46j9+dfce3PhsRENS2w3VnVpZDgH7GeokE\n45AqW4LjiStCGnlt4iDMj+UpKrU/wXaZUwbckczC9jGowHXXo+6Gb4zQxESK\nL1OJAvrs8WxzXeRysgXeuiyQS3hptGtGorNjI/jZv0NFWvLdnjSdJk0Cx2pI\nl0aV3MlYRToA+kbxgANVQZpK0QebCoO7kdM83oJl95HKgFYgRFmmJVhhSRYf\n3JPTmZrki5UDV1QbmuOZURAHnc0y928Gif2hWka1o1zcExtFvtNc0xygJKZu\nxa/9\r\n=K7xw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH/F5IygY13aDS+XVH1CWmwdkb94ilguAY6DxlCgHd4aAiEAuvbvpY4k0DRvXqBmPia9bKRzdxQeN2oyfpLjmCBn+Dk="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.12_1585662121351_0.37525665927037877"},"_hasShrinkwrap":false},"0.9.13":{"name":"@sinclair/typebox","version":"0.9.13","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.13.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.13","_nodeVersion":"12.3.1","_npmVersion":"6.14.2","dist":{"integrity":"sha512-nHnhkXh77wDXKG3XiX6SN/IPCHXJFG6ppRyGXibfWDoMBGmv1GXTHWmCzgOokbpgAMZQ9uHJ95GO7qnQGk6ssQ==","shasum":"1536ae77fe3980d84922d95b51168529efb17b0f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.13.tgz","fileCount":5,"unpackedSize":66409,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJehfhzCRA9TVsSAnZWagAAY30P/1TrwGCw84LChsqWwa/O\n/N2x0NDInIXvvSgB6ROxm9LeAXPqwfIYBDYGOqNW8HBX6NrjVv1C9dqcrfyv\nXTc34N4Lj5EbC9gu5V1RGk2KkFii5l8fAwKx9GmnDHVwYG9NaO5fYahECTcm\nfMSsspuymMr5XPMDqLhohvBf4O3ejfl/MYkYKsziW6wTzn9e1ByAmV5+rvWg\nRMIbbbmE2uYKMT6A8/UFSJBHhqZf8hLpA6aEESBiTZlu/k11W3fH1MTygUL3\n/zbEkI0NKvnU9o0UZX9G+XfB211prLvPwZFIO6FxDPZABkQqTViEaBPVhcBz\ntWTp/Wa1BMMNg5YFkUZ/dNmNQBbRIUwzryaCSwLxR20wCEqCjBmLHg0FVJ92\n4xvRFum8xRXnskxRhn2A0phO/EHh0ppAOr+lrccnUNRuyyRpyZjZfTuRK4Pz\n4gUbH2qazSJ+ZGF2lQzuGwv1Yv4AQQFIbl9MBsdbVKEBmQ5OzmC+pfw4CaqY\nmfZlsLXvwkYINCxVl9OL1m90UG5WS2g4BCwcM4eT/Aerds+DKrwd1W52nyLC\nw9B9aLPLXuLS+B+zoEVhk7UNaPZhaY8U9WvToNcdTpmghCFCvjmZj4cqyFHB\n1c7Qz/n+NBLdp7kVzgAL9wa64ynz70PMcMIExZYWlIy+WQwUdBdKwubq9FPs\nPSo+\r\n=DEGH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEE6xZ1qGYJY+OiAMqzYFeBfo83sxsqfK1HcamaTd5FBAiEAy5jiqAFBgzEasAbSvvOu8PiwraTV4dzlbZGT6TTDH50="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.13_1585838194388_0.057461177993584966"},"_hasShrinkwrap":false},"0.9.14":{"name":"@sinclair/typebox","version":"0.9.14","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.14.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.14","_nodeVersion":"12.16.2","_npmVersion":"6.14.4","dist":{"integrity":"sha512-zDe4qPtYXK7tzE7zToz3yzjUPGfHQgLVettQsAGTqy7fWOdOezwjNqhnpQW8WjIE1pE5k+xJNW+ki/J05hlxkA==","shasum":"057e285ba686047a03a90a09045d3b01680a91f0","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.14.tgz","fileCount":5,"unpackedSize":65379,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJer7yrCRA9TVsSAnZWagAAySUP/3Xd+ral1+XdNud/eIpt\nR0RNIVvIYt4uf52B/el8wB3JBrmcP2kTU22eQnEtwG4pcXyBUW7MkJHLbrV+\n67ix9+OWKE9zCm2SmMgJRKo0u17ZjsjBMoHBKH8NcZH1AY731aGw6Y3LTKC1\nso4iKGegd5FL9Gzw5JwZSJSMS0Dn/PW+E7it/jqirgX+5k+2Zz5TwCWxvXt9\nRtFuKlfM7M/FxlvqcjTtzns3I84rbgZonPLoD4L25u+I/nF5yHT6k4GcC4Lk\nyHHauGxsaQMTpzGE1bYwdD5QVm5oxV/lRRDXBMHCaLTug2Xngd1EbuJ1bpDY\nwdrK4FZ2J8tLrCB3nMrmp8rweqNkXx+TDdELwFJmF0JsHycL/4YJ1QvJPFJo\nfjiOSlE7T2P6Bk4Bubsj9JCMTV/G8bUgfcYjTGGJE7/8pk1ibazMykD6UqRQ\nPUgE3xWRGN1N+r0VRy3vQnOFc3I14vDc7W6Gqnn5KlLqTZl6FZbkaVOtIr3n\nCMu9OQAzhQ0b4PUGhvliEUTh2yqICXliDuloic7K6qCIr1ksQot4NM6EZ5FL\nXgQZbIni5dxPEb8R0OMwMc18w6sBj7wXBvH1+b3VWaRyzBn5o/v27YLamAu7\nzwCMg3BV67pd2ZXUjtF1ZQ+BZUDGy5nBn/ImNJy4oYLoIdL15Q+1QHP3TDf3\n2FfL\r\n=hJQ5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDLcscHf9kF/S4vpNZIrTmSP5GP0zgfnQBAx5urQYYAAwIgc4ZyuPrpvWUCeA3ZvlbFbgiV9CJaq6y1rgKkkh44JNI="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.14_1588575403097_0.9387609837301745"},"_hasShrinkwrap":false},"0.9.15":{"name":"@sinclair/typebox","version":"0.9.15","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.8.3","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.15.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.15","_nodeVersion":"12.16.2","_npmVersion":"6.14.4","dist":{"integrity":"sha512-Sp4xyUz+A5fCvsbAFKVLLNXN/TZTmQ5s3rOB5Po5k8IGFxoqaE6rFcBooGRRLrP1CmO+7k902R+IoL/axd8+Dw==","shasum":"748db23ef34c81bdee56de3a8ebafa55ad12b083","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.15.tgz","fileCount":5,"unpackedSize":65420,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeth/VCRA9TVsSAnZWagAAFsoP+QBMZfeq25mOiiZiOi1N\n/gNLbNVgOfkz1YFk4fmLNev0roR1Cq9RVa/ChXg+dGSyMzY4r30ezlIJJQzz\nHkBtTm80VDF0SplNy5nS0YQUKPQtSjO3/iEzSoVhqRP5nNA1nVwgHXjXeC6D\nMo7zZktiEX8pqfTBYCpLYBHfOoT4bHcLVDTx6E2NbteKDx1zxfuE4Uy8WXye\n3VOS1PeixDmshF8KJVNTWI1ZbWsYSTgXzh3q2CNIvHL/8MbGg1+w3r1sTt8g\nb6d5UP9NrcWJ5PoZlmQcCZFa1jCWhrCvmSG4X9dzI3uNnXDE2aMYQdKMrAt/\nlAMMILmQApc3XkUMqJdzv5ruveWGpl4qQ8mXglkcBz/F2gK4vN5p1ZN9pxmX\nxfb/nOr2e/3DzsVeIYo7gwj8ZbvqtC58y2GxCLT6omm6GDtvjJq38egqheY9\nxcMaQCTGsGpsH6wrNf6uCRDcf8KrvH8IW5wefFrmCX7wrRnoI7GqqqJBe3+7\nGH6dO1tDpy7CsTOIE2/tbHbUHqh3i+Y9sRMhDn69qZSfi6qBXk1gbT4Ec9cL\ncL0UJ2lM2WVl3qH+3ssOKcK2IWoyDgOGXCB65pcY0K4xJFHBn7aRUYZIMhCJ\nvkYt8KGXUiyXOzIWQHe955jcK0A2/9Wlm2+/b0LW/ZSD9Cbyp59frDsQCDxH\nnDdT\r\n=oahm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICl25g8keNrBHC1n7jqu2/fb2dhXhTc240RywRnJsUp7AiEA8gdEmkExx2xdJHDJUHX7V0aDFa7RpXAg59Q016FUsdU="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.15_1588994004640_0.015289996197237032"},"_hasShrinkwrap":false},"0.9.16":{"name":"@sinclair/typebox","version":"0.9.16","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.9.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.9.16.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.9.16","_nodeVersion":"12.16.2","_npmVersion":"6.14.4","dist":{"integrity":"sha512-2zWf5rm/g5AXD7zwSPpaCqG4acEJfB6TaC3hkjvWESCicxZessaIz51AJocdX1EyelGFwSvVeD6DQHexA+s0Aw==","shasum":"804b1a4b08f545ea98593c6e7e682679cf8fd5fc","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.9.16.tgz","fileCount":5,"unpackedSize":65312,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJevmJACRA9TVsSAnZWagAA/jsP/2s31p8/lRhnvs0R15RG\nPW6s84aIEREk8piTEUlP8OXpQcjDiUwZjyA+L2AWbsEBH3TQLQr181AtdqEv\nPyBEL1LQi3Q1EdsutrjyRyyliITpOGFmlCVsNHUTmTX55B9r733DFQjlGaPF\n1K/FEaRKugfEJv+F7umOIgaN/4ITBz9LxOLvZG/DRc8RgDGPwJryG53Ws77/\nIsXy7I4vZWhBwXTI8An/IONoJf8bbCyt1iLPu2cDLUqQndq3JAQ7oLfbE1Nd\nEao54AR35/TR9XGA1RfJltueRqA2aQMGgswuVNIpbbWZ2arJpNtEAppSy5b2\ng4v/mX4nJd1mqdxpw+4C9WjC4fhwQ4EDa7QC2VxXhnTyKH1kYmhU2T0Nvf15\n6UkJ8U8NgrM8/5Gdy4epWVhEtVd4uyVp7ymmadUlociVkzytDFHfXdFtTCYC\n+FreUyBrcD6eurlFSJZVH/IqsXCY++kLhFSAw+gf7YRO0m5w0Uk4xbKuG/sL\nMRm07ZewsU7GoRLWWKbjjfRsBZWaaNXR4zMr+s8wnTfCJuHNIZ9FqtBMof1E\nIa1CSfZ7uu5//MEsFe1sLk2nNQYowWAShUWn1S0gCb3xzH7Fr15MLU5diAhi\n34PYCuWNYjn5q+pUbs6u0qcgm2Wpe48IJUgD3YPOmPZu5II+/w71wJqtqLm4\nCLgk\r\n=tEUk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCxTkEPI4HPCBL8jM0+sGJ6kYRa1ELqlTEUMViANwBmHwIhAIeeQbUz8JeCPpGuesijsyeQYHDhnRwEebciy5RxCl61"}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.9.16_1589535296147_0.4033076836931868"},"_hasShrinkwrap":false},"0.10.0":{"name":"@sinclair/typebox","version":"0.10.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.9.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.10.0.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.10.0","_nodeVersion":"12.16.2","_npmVersion":"6.14.4","dist":{"integrity":"sha512-zsC0Z1569Lsb2bW4RLjU32haZ/Oodm9jJxKBZJQ/hk5GnX5AOL0rabgnKu0MKOU8LXiZlTIh4SAFkusGwN93TA==","shasum":"ad83b7fc17cb6910f22ca80d96bbfd5106e35c72","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.10.0.tgz","fileCount":5,"unpackedSize":64243,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJewixvCRA9TVsSAnZWagAAXCUP/1430/L4UA8hQM+YvlXv\nIAwcNF/6Zw8Wpju/bOEhylrxVBbS6BsTKrYX8IUlimhZ+12PfBdD+EYEUxGM\n5ygX1jt/AMhiVWqnnxj5TUxN9EKop5atehRobjZMA96bpp/bODKQ7JcuUvZk\nY14/xdzbtsZauHBrTgAcxySjyVWSUzDNC2dyytSc0+LYTlZIN0iTXJUB3KRt\nY0kXj5d3fDPmRBPx3qHyoHRiFXKTq4hKO26nIY5hEUGvlDDge19pzKlApux6\nlXsbS0tisqInzPSyZcXWreEIlfTqfKYJFqGfNxRqcXvQ/MejxpNSFvS68+/J\nnUb19LyrLPvcMoxgQa6ue+FDw2/6Y44MqlnGM5Myl8GqSr2+hiBDb64Md7FJ\nIqy8vug1VrdwX3jtqABUKqOpD3XRvvsrGr1VvRLqTl+1m6kTFAAjEJfSU36l\nwZ/1z3dcWbbXpZJ++5G/9IEdS+0c1e/47SPnEbCOWdKVRWVHvAPP8cI6GEo2\nSjegttKstsfAPtKSL7e23AOVSJovnJudCDmG4ENqhD5gGrRnKnMYOirBZUxN\nEoCN2iRDh8ZpVxs8hyFv73Fj2+QjhkVomKUlFo7u9XYlO6CWVdNff/VGbVc/\nRfZVnPtSqzTNBMSO4Xuzg7ZmJsDr1NdqGC8fuUvuVML6ILa+Fdn+Cwhk/Oj2\nVJA9\r\n=qS5m\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD+4inokOuTjF5vcdIw/3uzF0CeEdIfevnHeYuXyaCC2wIgPFwoIsy/8mVJmVltTLiPtSQSCaaxxMxdoVKn7G482vU="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.10.0_1589783662994_0.4001287125325905"},"_hasShrinkwrap":false},"0.10.1":{"name":"@sinclair/typebox","version":"0.10.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^3.9.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.10.1.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.10.1","_nodeVersion":"12.16.2","_npmVersion":"6.14.4","dist":{"integrity":"sha512-IZK7ao3ef92oZ5TjTwjVm9Xx65P2rj3frp7Fc58qy+pN+EL5gtv9mJWSQ5lcUWOWKNIOeOdTYjMPhg86rWGq2Q==","shasum":"5239a7f3b3e51bab3c2838550639350126746079","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.10.1.tgz","fileCount":5,"unpackedSize":64383,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJey86OCRA9TVsSAnZWagAASTAP/jUtee/upWpBRccnMi9i\nrEo9vglNKIoXMBbk7eR+GbYFI6C3RFF0Po3jqtqWK9isdY3BzZDUaMJVY2qU\nwuc2j/Su380G1qj4ppVCE+2gFRtVGMTJ96iYloh0dbOItD2bhp4a/BHAUw3R\nldez6hMR+Uk1jskBiE0kKNTj8HNnAuvh1zbAWI2Gycsx225XqS6vQBVWRzFj\nPW9fBKnkBuGe0SGYbZXscvA/5b+JCw6z+XvYrHWF3sf3E67DjaAxGcOt3VJc\nAshlju+uRoKRhT1qyF0NB4sfTkHYOKEueRpLVgu1gX5SslSGS0aI0ATpkEcX\nsONPxLcI9UdtP3sfu4phQyZvetz5rPonBAJXrDdWh6Igc7Km1R37m0umkxHt\ni7aCS4UrX3IPvfdlmmW4kWy2r3DuxIkz9K+os9WiVxLqFh3lX3VQ1l/KCs0B\ndYRkmRExB8e+HXMqzixl02W/y67+1P6rWKNiU32WjUAkvjLixdK1OupMAgvW\nAw3EwYpepkWOBn+596wT9b3OKpmw7ksqdaXYb7HFB2dzU5JReAO0H0DGTVH1\nF2viGtf2e7Ov3mbmVF4ccQvrPaAu8elcdoPW6uL2fxcNIeF4FT0/z4CTvYmy\nAxGGhtTqxnjf+VdQgbZMww0Ek4u6UEmD4IAE53TXz1j5eCDGfiDoflamKIOF\n6Ewv\r\n=7ZKq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDtaaF0SRrUl90Ny88DLDsDxQvhpPctWI/fk4/ypYkizgIgEFzXZrPkUsJ37IBDChxrqpJv27zYKN0p/qlyvrB3ODA="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.10.1_1590414990008_0.87007409594856"},"_hasShrinkwrap":false},"0.11.0":{"name":"@sinclair/typebox","version":"0.11.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.11.0.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.11.0","_nodeVersion":"12.18.2","_npmVersion":"6.14.5","dist":{"integrity":"sha512-X6AnqkuudPrKJ05pHY7Q0e8AQCeK9N7uV89x0KgWE+TH03PXmWgIDfLlNwThsEx59A5qdrhhxajwO3+ZJD3QVA==","shasum":"9e85f2dd1753d3e464582060d5f6a0f3b0b29b7b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.11.0.tgz","fileCount":5,"unpackedSize":38412,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfinJHCRA9TVsSAnZWagAAJdAP/23cHxSWMWwzUD7Cp/6y\nFoTDU41rj3xAMlgGdsIlPf8kXNb6FQvdt+pa222I2HUFmk7Wm4xdhFga5ock\n2ESpM1auUH3h06s3sH4KYvWfmI0Zu2ULbJECeaaWdhLoDRxiuZtRjXmQRg4t\nYp2y3qwZ8mMwTawkVwCWY1ao3wBrcO3sWwGv8qVO/hLyVwkLDtF1NuD3vdqo\nm7D6U9m3kzn5cbsYBb8daEoSLVlQzNULLy2yWNLrx294miAxjlBLCwJWGhxO\nBa1snAtXD1VwR68bj6sJXtBQN9Hl2aEfNsVF7vXPHrTBM0DP3hhbmPy4LFS2\nXe4x7YJI4yGL6yJlaslEgTmxI8wbnStf1pib9cxiijEQLsheTpCQUfJ/AO8W\nsLRc4S8bX2zUvHGwQqFVxnjDOjXwfAlJVmbam3C1xnycYx6aUOkO+ZGNF84F\n6cQZ7RKQx5cHK757CCOh7/YLIvRPpSkrc8aAU90M+y3r35vGRk4EdkRLiURz\nzyyWf1t9i0OwYWKndvoVeCYkH/Sld5W5XUu+92pwUOs5s5GBUEQAClIKoYR0\nvCZSm7hS2r8dCVqMzBFlJxNhWxN7EN1BXq5LUygKRYbguGuhF9Q4vUvapokg\nOnAiOI4I0S5v0XwdaP6UvDEYOVgo+dGKJMYGKnV03+zmrkTYAgenK9WNJY6W\nwYBt\r\n=syuX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICSmzonzwq+SaQmgXvZghagRpKpG29Iv1KFPWSsmlZ5EAiBDJ6UYFQGV9CIzrC6El9IpjVeOtWbt+lpOkDaMIYd0mg=="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.11.0_1602908743141_0.8280791332792752"},"_hasShrinkwrap":false},"0.12.0":{"name":"@sinclair/typebox","version":"0.12.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.12.0.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.12.0","_nodeVersion":"12.18.2","_npmVersion":"6.14.8","dist":{"integrity":"sha512-rXLjXB1WEansVWnHxfEwFvykvcs3ePRbEpX04u9wA+dDCgeLNe+8MEcDg4c728SBzZEO5ArUBHvMumqTdNCfKA==","shasum":"72b742796487a8ad911f048a37f2b55dbc07625a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.0.tgz","fileCount":5,"unpackedSize":41687,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfnbGFCRA9TVsSAnZWagAAuBEP/idCAmZbpf8Q/LXGiPS5\nYnUGGCII5vyXe/ah9amKPEvaHYvfzIym2GUNC6Lguy888sq/7X8rvnkBco+I\nij8U/i9JtvO5Pz8dz1cRvVDs7kZrksqEbm/LdPi9SmOJJoGyV9kDwgjHlp9/\n77kcCI+GzGBXOhaUGqeYFi3eL12cNi3k3P4qHDxPMolDtpoD25wWwFXiZGSd\nY6q5tpe3J/oEF2UXOW0tEBYgHFLwjxZhvHL+EgHjVnK/8Qw5X6op3LW0naB0\nE3VcH2UOTlEVS61QcELWjO1Px2pkmZquWAeRCl6oO8l082c35ockk3UGPp9c\n/HjqH2aV8ZIhWRsuryXz9WO4ed8JJqpJbx9zTJ+3drhCrNU4NVcfZWyL3dmQ\nozCkfIDhIZ1rh8ZEW70WwBySquagKzVTyQG3t22ZMeJmd36OFew4b/qINfya\n4iME6nJiy4q+BRXZqR2R30KPZWevC79OJIq7/FBPRsoFNI+3AxPx852P1mOw\nvC9C3gj51KQW/T3bzOgNteWpwQhdCCE+aBn6XiQRbSkcJWBr5T6QCDFOwN52\ntRcfAJMT2I7jZUDhj2g+WuHJ6RwT5u2iZro1BD2OGyML6a1HofgWhktbYxlZ\n81iQmFNwMqW9wzTOZeEknbbuOtoeeNPyXZA3KdCZEBpUKJ7vegFFB1KnOYhN\nSLzU\r\n=QlDb\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBmlspLbFtmi30kNgApW9b+iGNUxqRIT5bfKJ1J/HQSsAiEA+uFXGFKo7WSRyt0h7OjtX5VAPflxbcduko6bvcJp04A="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.0_1604170116743_0.7477237969510224"},"_hasShrinkwrap":false},"0.12.1":{"name":"@sinclair/typebox","version":"0.12.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.12.1.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.12.1","_nodeVersion":"12.18.2","_npmVersion":"6.14.8","dist":{"integrity":"sha512-2MEy0afCs3dYsUBotFsgRP9XCX8HRC/0LvxcqLY5DL4UyiOI0QboyW+9/EcokW0FZhAaTiYHihBlmit4nfKZgw==","shasum":"70a97c29498550279586d128185809e17e66f291","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.1.tgz","fileCount":5,"unpackedSize":41700,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfnbeRCRA9TVsSAnZWagAAjSMP/0/bwHok7EAYQvZRWwfG\nXoLxA2TxtCIVjQWkKN2d2SG217UxaSGZc9AyyyPyomS1MjvQvKoY2SHn4KfU\nZvxKmmRMJ4AjQqelL0dWsNsRXDtBrpJfsrwA+Wkr18ltGJ4WhMvk8uXLhZMP\ncCmhnip58oc6U7gSN8BXrXS558g7lspOz8ycUcJF6RiaKy8QlCnNLHmyAFss\nJNyIjYabe5pK8qHAXzI8xCrEZpEZ5+GaV6bsmk/PVCNMVAmf5qtcsiQNI6YD\nPMMnDqlhbKurHZMq/h39+7uv7azdzdt7EplfdsuAh5G9YJZJNOtUwg1q7S0A\ns+52oXOZ/TMpM0y13g4KXmtR7ZmYmZpdHSmy1IWd8yDeZZVKfMFV/ymAx1oQ\nXfg8+nJHLn1aElRXENBHEaQOa7m8ujTQAvJ/JGgB91UNu05mouuF3lxWcO8+\nbVRzWuUuYHXEpr75z0Bq4CNVJ1NROWDeZfpSSNnYKlv+xRfQChvlGCumHLVM\nK+ojQOrN4SgGKApk31I8DXD0t8m6rugX73rfkp78UyMz3guds6Ak0hgAn9nc\nzzmmlHfMGPE3iZT2hjIkZXFjkqC7YZwnYutoKpaPko8hTEJoLYCezhyi0NL9\nR8/ZRG7z74bqNkW4zipY57swrxFx4SGJ1FceAqkXb9B1FE3vRmw3w8jyZzIU\nxU5/\r\n=ytv2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG7sBY5UN/sDCghc2l7thqIe6EyAvTtB07Z6V4gvOtxlAiBKEq3I3bekBJXmZmgA40ygd24YbGUO2xzbV268r69AmA=="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.1_1604171665021_0.051200586153316685"},"_hasShrinkwrap":false},"0.12.2":{"name":"@sinclair/typebox","version":"0.12.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.12.2.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.12.2","_nodeVersion":"12.18.2","_npmVersion":"6.14.8","dist":{"integrity":"sha512-IItFQzUCcZYbmz51wU1UN3CGfsUAcVOHK+1+wwKDfIuK1KfhjZ6EdgGZSTvIpC5p4y2tGp22W++70GNWd1KBCg==","shasum":"7462ff99916fd8bb7c9c8abd81b44f71e590e172","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.2.tgz","fileCount":5,"unpackedSize":41751,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfnpAoCRA9TVsSAnZWagAAg8EP/iZ+nqUPiaJLBXMZ4eFo\nAw/MId7Q4O7Pn/Dg2IPahJw+vxVJuu+WuGn47tQprIw49UL8VNtIYs3X/H11\njM5L7EupLUkC25kEiIBQMu+mbuurBvB0MFb89nIosClOTzoyFbn/iXg3myU/\n07y4444gdITqfdqfoSs2xnCL1uSJcDRBwdGo0hVzYTQUXSK6CSWRZ19IZUAW\nk640XRA1/e2YEpAMS2vyqyb2AOj5GSQ9961n2rkW2ORKJ8Lc/fmccgBLzgMk\nkuk1vdsM+W+ND1h+NtiCSCi7dGJTViNJ984kroHqev62a4pbYpw8NAJtu0BO\n2gerSW7eCKxwtMMe/z1Obu0PlsNs0I4o1rLT41rjTBavMI6vGum4LZ6l5a8J\nm7bd28n6CKHebA+5/Rh8P87hUtMlTE3MugoC52/4oobzMzZZFT9afXU8GXuh\njjK/WdDSzjQoDB0dfjNCFNlY/2t0KJqcWv3QwHvsWhGMxDyEZDHADHt7n+Kj\n2vrRPIv6vwnHuGAqhNsNl/2MEFuEtMz5+DdBDgPSJ+lg8rVfQmrNppTlFKhf\npVniD6XxPk/barSkD4ipxDKTShdDYxuWNvn4JBcak8ohDvWxK7uO+folgjir\niHkj7HPAML5/iSngbFH5V+pbyBh23N5mWoI9eBT5NnEwLzAlFkHOLaZSEk7H\nr02B\r\n=VIZr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB9+eITPV4BgKdx9vUko+Y8Pusg/2P9takFp6WeIBUAdAiA2edqjAlayp4hfgP4+CJAZ0APl5zAqsfNQQZ6gakZxxQ=="}]},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.2_1604227112292_0.4495630449154575"},"_hasShrinkwrap":false},"0.12.3":{"name":"@sinclair/typebox","version":"0.12.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.12.3.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.12.3","_nodeVersion":"12.18.2","_npmVersion":"6.14.8","dist":{"integrity":"sha512-1fdWu9ifilmSY5ta+o5/ISomNCpKW/IaanGK3UAVIeDp/SZrYQAbPs6MSIeMvOCx0jGrk8y5Ca0WOfEElxD8Xg==","shasum":"0add73c83ae77649fe9a5445efd89754c7138fd6","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.3.tgz","fileCount":5,"unpackedSize":41759,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfo/04CRA9TVsSAnZWagAAbdwP/1jMOeYtC3IyVomudJs3\nUZrKm3lQ3vY5thMGshAs/NcJ5IyDnRi00AXEJHUeC7HNYBBVWxEdyaGQQzGi\n/eMjtUrYlwdlMyoWrAZt94Fq2pjgwEKGSFL6iWloyp38DwNhcprTian7ZSRT\n6o5iwW8iBzsToTm+zM7mWlXCmUbOjdMoW9tw1gvIspvcAyZ6mFPJMF6DQykA\naJvErINb6no14NqfMMvIK8ZWavj+XUMf33KZpptjiCO5s/GvA0DWlAX3q/yZ\nGPe66ihFwIxwXSZIxk9Ps/6iworcm4W//kK31A0kIQcXi4oEJbwrf8Lld4Cx\nioGDywQRY7FKmZEaes6W1FLPiB2caUBeSdzSlAA3yh8Zg7PZoILYKJ2TZV7X\nUf7XZSD5UisP9wx05FzqGZb6vK0B3pRF4zgX0dSRhZ23kaYXLxQO7urxfC0n\nA/9t72MpVzrcMtNOpWdoMD2PVxSvVIRifof81FJbqsGqf5lFedHDUALzn51N\n/2ZuXVjz224xX93lURIDv2Qjm/ocWDBIc3124ewBd509NCJPS6KLvOVcN4v/\nk1F/aqOiO+8qlQdB526qUbOyoQ/JOEyZCuiYOX1ODqsA+bov7AljnlllQgTZ\nG8BpzBZRN+mFhybRh1pnQVr6u0Ix3GNap06Xl617Oj2IBQ2SYPivPJiBLh+M\nB2f0\r\n=5zkB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDe+HByUJ2z/U7iLRHDZ5H9ZflNkhiqbxMWI3IR8OWudAiEAnhOlItJlrglb7Loge/00Cc1+nFT4rVfiZseHAjqxRPw="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.3_1604582711962_0.9065093403811142"},"_hasShrinkwrap":false},"0.12.4":{"name":"@sinclair/typebox","version":"0.12.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.12.4.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.12.4","_nodeVersion":"12.18.2","_npmVersion":"6.14.8","dist":{"integrity":"sha512-uE69m1eABzVNRrCDTWL0NhmlAxGmY4KNqzh2HuIr6iGnINQbYp++lLDtMLxxrBlKJxyUuuy+s0g8QDVY2b1a7A==","shasum":"8d81f5e842da78b1ad860a9c6230dad95252d4de","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.4.tgz","fileCount":5,"unpackedSize":41658,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrDMfCRA9TVsSAnZWagAAQRMP/1A9O72CnGphCPGNuvGt\ny3LRUnLc/sdKMKldzHoxgJVKJ7SrSeELhe8MWzLE4IS20LTTDg3zl+LQ0k9w\nv4o/lgyvxAGbyd5E7U8G/kPXdBERerhYLwoOeOEJX13w+uYg2j/61Q/4drZI\nOSZEXaT3jTojzZ23x+NV9yAmEEtVfJw4nhWt/qSs75ZHNCcgFVtymNth54vX\nDiAqoXsNQT6HwOHJ9Ehh/zrXc6rxWgNLTwywGezEADOd3VRb4yLPq0QKgmlX\n5ubARbjfe41ZQLLnewsdJ1JNJSKB0wlWlotWXERcOd/DicNEGeWcGkDsTSME\nDALZew1LrJkQknjOqOa0M8NyZEZTVSWcfdiNPCPWN5wwqguyNw31j1oUL0bC\nynsXtFN5ciHNJZntT0PCohdodABmgo2zsz8frFixHwAh248+tF9xPqqVJXE/\ngy81ZeGEe6UAqvhnIgGLy2DNE8IvZkzkIwuh/0/jHeUZzbQrUuvKfvjg2i6+\njEs+CWOAlVh1o/Hfk22RIonJB9LIQprDwf+R1f5J70NwW1Lj/Ak/u4cNXkja\nuoQrinlR5Slr5UQZpTPKYHSf/b+CAXCP6foIihJ4KdK3Svhc/qb94+l7WTrW\nH3UMeAEXDVTavvrbaU/silYuWewLSRvyiNvg7BN16CF/jYW3HOPLhSyouO47\novzw\r\n=Q7qP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGHTEdXkqgnb5lntbQqGyUWMevwcB6QWKKJ/ru+ipb2RAiEA8+8GmKDAzCDj7+KO5Srg4D24UDlvwtQpT2ZyA8B0Cjc="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.4_1605120798397_0.4285299812299943"},"_hasShrinkwrap":false},"0.12.5":{"name":"@sinclair/typebox","version":"0.12.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.12.5.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.12.5","_nodeVersion":"12.18.2","_npmVersion":"6.14.8","dist":{"integrity":"sha512-bBhSyaBVUlTgTcAJNIRrt1b9oTfRCXsdBnR89jxckOUqSdrVAIuOMEBMQIe7RFplyMdbC7LdL2XQwCqohpBRZQ==","shasum":"e77b76db44b878b40bf598f913fd62a501194926","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.5.tgz","fileCount":5,"unpackedSize":57205,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfsQ98CRA9TVsSAnZWagAAlgsP/RN5gVWYVQewdVpwVxgM\nsBmGyTf5BlBRkF9nEM1ivtXx8r708bTdKTRD3AfyOwnAQlISMeWzpbZvfzMy\nxMyn2qJnE7+/aqipxm01Rongac8ozdcQKSomGSx8dEleJ29JRob/PxqLEjJy\nAt+N40OEq5lHq8d0ZXqWAB7qqudj5GyKX3e1DIOaU6n+aLCaSnpco9QS7rEJ\n5PWazpHcZaErAMxQb9aALRmBJAiUp0CwFFQp2xCn1zrHi0rro4M2lQ+yAnrv\nFlwFKnZlLOR4dfq31XDFhQnQ/qFC54RIoTFR2SEnazE5+kGnaBRgnDe61fQi\nWY0xDfCAGcW95E2yBf70BkMb3RP/wrTlYV1FktBTv7A+qkAiQ/rSIjVIsd10\nyF0+bBVc++Mc6ju36er2EeTUaD35Mo4/pPYIwOV7G7R1YNUv8xv3owNvN9Zy\nNaBRcMbKqgDbw5ktuBTEiOiLjRGeqkvRN+1IIZiYHCWcGt3jNyHbYD2u8uh8\noV2xHRuI7ehWueWI+YIcFU0tKiSrisnIFiIiXjtpq13iMTzzkXtRF66JkQaz\ni/o5RTvMiOEMjIWtRqRZyNMgZQpJz6pz8rQR8vEzjs6/lcmb7shHyEB1LwkG\njtsuttP++8Uy7iPJi88pgHJ9eXe2OsAJPnNfp6xpz2hxpO3PkfHmDS1rAkTU\nzM6Z\r\n=wTRx\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCRXAjV+iHv79ZHfJ+ZaXWzJtdMaq009yR0oBB/MLBYXgIgQSz1nW9a9AIZgR7VG90cVzBx7rvkDDR1s/yshqfNGNA="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.5_1605439356050_0.36491103310682504"},"_hasShrinkwrap":false},"0.12.6":{"name":"@sinclair/typebox","version":"0.12.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.12.6.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.12.6","_nodeVersion":"12.18.2","_npmVersion":"6.14.8","dist":{"integrity":"sha512-q3Gq3Vq9/lq55dDwTAd5ZpoNBy6bxuiNCXVW+BVuxyKIM0kS+cJ05d79Cg9dopZhgJGa05aKHBnKFullAwFLHg==","shasum":"80273dc4e6fdaac53074b06a7e28db0cc804c00e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.6.tgz","fileCount":5,"unpackedSize":57211,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfsdhCCRA9TVsSAnZWagAAIH0P/ip6e/YzhZcfG2G/3rkv\nCynHaiyBSt3cTo7e0hCBzF2HcxZ0Zh+Cd7q5I+/kK9NfbxvSQiuYunpchgTn\nkpfQ86Ym2M9tEAjFheyQOmpLrk2gNeP3AZR3n5yhuavUqyVDDgDmztQxiIVW\nhf8pdItRwghKMLyVQOnIqIyV7FOw745g1sLP+6RFxw4tV+OEd1JdSm9SXqTw\nkP5STO5UsunSp96Ac08rSLujA4XgIR66+M97bpIWKmTdP1iu3qas4jbT7jfJ\n+yZjY/d7JFSF+IxhAtp0aPNGDLFq1qhJczQgvaFgh2bQAqqkvhZtnmdpL2oU\nq47VBvjJQv+asN9ioef/dxkEqUW2nV+gKPz9/NVbxzCUa9kyWCzNsmhLUg2U\n2kywbsbCgzpJk3nWo6rQRsGOmYQE/bF/sP3Vmi56pXqWBpz9L16v7BCQjY9j\nyibOxorPbCLPY+ucuSeTc4KkVeyoVpnKFp18I7egBKxrX5fgqCnoJYVy4d1J\nXWOhXsLo3ORLxuDrZFrSzRbfbBUM8Be1On9opZv27NyWTMNPmXjDJ9eUXwoo\nz8wgc1Dh3rzut12xhMwfVM8HQSdqb69fWJNXOVu9GTp76TU+bT6ndhKFT/ZE\nQAfyomasCqXvyn1pYO6dLui2C931UT8EbA7hcd5EB+snG7Vk6So10Up1s2wb\nGd3Q\r\n=fGhK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCn2rhgabHyKc3vDhhcf8wsXGMQzu+xShNb9A2CKDg68AIhAIiV3W7g3AQ8FoHc9R7oJZSQbNOFnF8SB2mQRj7fJh9Z"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.6_1605490754173_0.4171287343015093"},"_hasShrinkwrap":false},"0.12.7":{"name":"@sinclair/typebox","version":"0.12.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.0.2","typescript-bundle":"^1.0.16"},"_resolved":"","_integrity":"","_from":"file:sinclair-typebox-0.12.7.tgz","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.12.7","_nodeVersion":"12.18.2","_npmVersion":"6.14.8","dist":{"integrity":"sha512-Smss1Ju5lx6pu0CwufPDyx7ncK8iqb9L4nMi2vXSLMHYFSlVcwTITChC78v0l/CpUpzlRSn1IWhHv1hnSGMgRg==","shasum":"4ff89150cabd1395fd8a7dc30c8a613fb6c626e1","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.7.tgz","fileCount":5,"unpackedSize":57863,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJftrTcCRA9TVsSAnZWagAAL2EQAJ8RA30bHFOydcggHP9C\nvuL2EYWmsemWC4Kfu26C0/ELREARvc6m76jZt0lXSlVc6xnUu3DmeITaqqdq\nPCK7I5Q7ztQLhPHY1GnbPCQJ9gy73diwLr9wxxJt6UWziQrR7X1x3KcmIK4n\nBg1ykkglGlfAR9UgQCu1MdivDdR35iYpZqBgqzSiHBS0/Vl7aXCapBUAiEfI\nb6PcdrHEPgBO6qiIjfaq/ziUcdd/nbalnKCuBkl3o/Yag5UP+b4mrc/AcNCY\nqYAx9qjR0O4FU0p5s/o/el7Qh6ydfuhw68dkqa6qNGtuRNNxsaJbHacc1DzV\nORUklIGh9FaPynRXU/gQlVBBQtq2vk7B/sjR7Hmd0grJrhihEekmOEfBb1EC\ndeYyLJXi7qNtDCC4spaTZSxsnGPdrs9q1fZdET/DEHGAb8w+51HqEKCdTJKW\nZ8EsfbjBitzOE4I6CbZXy9vOFMzSQdaC2QnZZpUimVMcq88Ake8+lsEIBNvF\n6gkyGPjyvDvWlPw2t+U9ctg0eNbNvxFaymiepYWqVTgf3SkZCTckO6m7aWFc\nwiCsmowlE9Rws9q98th6Xq0/JLkk5wLQP/OjWCwMLHXS5bGDIAfrB7ex8MtC\nB6lCml5WaT5f+RZU38rBh7Q11CF8ip6pjz+ndGVin4ubcMM7U5nHrHObDL2j\nCyRP\r\n=/jHh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDN/J7EuXKJYCuQDF0mOMPfHsHHoXVzKeW/zsmiT9vGtAIgAm+2mNxSHQi3FEmh8wWIN50AUSLF+uklnwWmiGhLju4="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.7_1605809372330_0.03457435847785506"},"_hasShrinkwrap":false},"0.12.8":{"name":"@sinclair/typebox","version":"0.12.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/ajv":"^1.0.0","@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^6.12.0","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.12.8","_integrity":"sha512-bJ/ZCkGKRW55pg3bkMfr4N7XDWQVTjPNhjXXAoEetpD+Sf/8ODUNTuqxHXjDSCDv+2EtDgyaE0kp7YNvXqcLVQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\dist\\sinclair-typebox-0.12.8.tgz","_from":"file:sinclair-typebox-0.12.8.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-bJ/ZCkGKRW55pg3bkMfr4N7XDWQVTjPNhjXXAoEetpD+Sf/8ODUNTuqxHXjDSCDv+2EtDgyaE0kp7YNvXqcLVQ==","shasum":"a54bed6c7730d9c40b077c14310cd32d73e3ac5b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.8.tgz","fileCount":5,"unpackedSize":59409,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgMbQZCRA9TVsSAnZWagAAILgP/1LaoaAtdyDTBIiWui5g\n1PQVMil/YSeXpuJIM2YIBcVUS2p9hh3IC4YjY0jG6SjUz1rrUyG9e1u53bHH\ntWAwky4bw6QQ65kC5N+dXGtTRD/eiGuzTdA+Sl1A4dLjagnDUX6xTvscFv88\nKUZ2YDQg4XV/ba+73hkM/CAUJ08Fl7xnyBPF0WGDBDN+zCK8GA0lVJLIoeko\nRgUTKsKqbvfzD33fF3KvDnOOrE1WWWvTgLr4M9/V0zuOTFM0DTIKohpP294N\nLwkH1TEhjs1AwRVxm+24rL+97I6nB1BsBPuXtfUgO2HKbV4Vnlya4WOub35G\nTcGjMLpuloBnmZBRpjfRMjH43CQa9IbmwYxXgsMgZqYoNqZYzS64lgvzGn/5\n7vFr+sDEKgae6tcvg7d6aDKlJgLT2HjGxlWnwt4y6X/FFGB1EV2WNL1iiTkR\nrHGQTkzm1MZRhGSHG7CbTXrHl3ikfQQ5yv/L+L9OvxglhBMAr3LoBMigDUQP\nHL14gfPGjSSvXQ5BModke8YToUsCMmK9KspFw4TKtA1fiLKBrrFrcAJUYb5v\no4g1TBxnKtcnfMOoZ92OwdMpFWKpZ4DmIvdWM0Rs8i3LjIGtaFfQp3dQlod4\n/+R1trb7IjbBo8yNLInCVXso0T3vAoFyfOYJyacS5JO7O4dtHfQuOVcRYSrB\nBuMo\r\n=Nyd8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDp5SEEuLF2NGNKIWfpAeCiXRx+MOZCvo9Upy25ULVs+AiBDFo93Iws3xI96eeWk3D/3bLJENjtrEfdmK6AnVaSIGQ=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.8_1613870104931_0.6218090880840199"},"_hasShrinkwrap":false},"0.12.9":{"name":"@sinclair/typebox","version":"0.12.9","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.12.9","_integrity":"sha512-JQzO2wlZ2wJdCft30wRMmxPcTEz4cDS4Hi2izVoFgGzTo5/eJKxCpklc2WTa7K24s7f3L5DKvhlC6RKcf2WNhA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\dist\\sinclair-typebox-0.12.9.tgz","_from":"file:sinclair-typebox-0.12.9.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-JQzO2wlZ2wJdCft30wRMmxPcTEz4cDS4Hi2izVoFgGzTo5/eJKxCpklc2WTa7K24s7f3L5DKvhlC6RKcf2WNhA==","shasum":"4444c9bb2f98fcee693cbcb69256bd3dde8b4543","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.12.9.tgz","fileCount":5,"unpackedSize":60609,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgN1z+CRA9TVsSAnZWagAAt6cP/inpablt1rGIx0B488uQ\nWXwD8e6C32VR7/9fa9HE6DajppeD+HvVwiBz4jThXSlZLrBj/xuxs/RCBFQr\n/18pi6FBC9baa6HQz9i68BcMBoFeo7QzUG03NGG225G29NAJ/N6ltexgTEWa\nJu6l80KFmdKalKeAwLCpjMMmZ7/hN1v+PItJfAz7zIckqry2zNqTXtwH4zRo\nf4qoxmSLx+P6NDMTQM0ASa3FaipozOGjlONTlLfHn+WFv0oeiUQPJygybF2/\nBfA3ItS0Xtdm1WuVnqTLNhjI98qNR8fiEKhgmP9L0Dfor+bKttPn7ZKDIva2\nngrBMkQNlR6asxEDSRwn7wWvkotyjKkXvvvLK0Ipq2Q3gkHnuuzbtJz9N3wC\njljTV/A2GpLPLnl7JqFlqd15ar+dgNPVu+jCr7wLBWzYkvC/VyZh2KcpJhv6\nMGM1l5JsKFfKChAF0bQ4gtNjbhEY0hnff1NdrIQWDatNHAKv3jcgLF0fGVYu\nhWkZQbbLvNOnY0v1ccr3m0mDkeOKH8sFUTRbiG+qZk0r9gp1sgjtKA6JRajA\nDlks9s9dmBUvkav/41rrx65D1xLTK61xpR3AqgQgXM1OIcS7+coAh44EOJRg\n1qIrB4QkhAFjL8uZzLg5Ezta/cR3Okzrw3L2VCN0nGK30sT/Cub8OG2zLbrf\nunV0\r\n=VCSd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDNcyXawko2h3gcPpi4ttG2+ykjymZBjx9n2iLERQIYQwIhAIUhm21NNi6ExK4/LER941NP8hUvIz15QeSI5/D3Su1u"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.12.9_1614241022383_0.9309834514913089"},"_hasShrinkwrap":false},"0.14.0":{"name":"@sinclair/typebox","version":"0.14.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","example":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.14.0","_integrity":"sha512-Y49c44s0zPcVbuUPAAlO3mAx7IUo5XDbWJrHOc7IcpuragP/dKdYOy4mOLktaiJ1ciBXXH82sGVdkjGaDssr8g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.14.0.tgz","_from":"file:sinclair-typebox-0.14.0.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-Y49c44s0zPcVbuUPAAlO3mAx7IUo5XDbWJrHOc7IcpuragP/dKdYOy4mOLktaiJ1ciBXXH82sGVdkjGaDssr8g==","shasum":"83277e5fad5294d607cf9f789cedab3fa9571843","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.14.0.tgz","fileCount":5,"unpackedSize":72372,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgUKGbCRA9TVsSAnZWagAAty8P/20oMn8HPnIqyblfDijZ\nUOO4CrAHX0q6AHX2pMOpUZvNCuPJ42lkkn8wCy5p85QQLSbHulxGWxE2Dceu\ncD9RK5A/PvZ8oZEADINZR5T39sPDSxT4syyfVeAJbiNkdxnFZUTG00L/89oy\ngC5zaIaT2aUYTdLRu2wkzMOScwJafOKKdzkIrm8i3rxeoOYsQwz0vBmO/z9b\n6LXCoH929sZQ4aJ3yJmewwn85xsmER0CSz1Y/R/GtJ18arNzn/HN/hbiY4os\nnvvTUVw792aRNCzUEZibF5A0v8JejXKavfTlWvgf0qCxu9jrAQC/1MIwfTjT\naWXPJ+2L+Ptths3c2TIQpsZhET02i0f4dfCec0xS2DmdBLlW57Lxx/UWuKe9\nrJZTgmppEs5LqR0/+Ib6fu2hjqzXsgmi18Vwu9xTuBAxQ9QxrNa44UqfTd5U\n3fXkf2hALFSzGfF5T3PWuYJJ7NRbGsVje7V1nww7ryKNHw+kv6QAwbaF9/IH\n2wp3Hsk4lhLEGea2SNcUrlR8QZAvcVRGgbdlXRe2E8NZyfIRuR3n3ixBwS0I\nC0ODSjUbAHXTpaiNdyT2cpPOu467nBaQ8urLl1pG4N836MAVfD5jreIwCyBZ\nl4JAbOTkY5RO0F3rbF0NF1MNjvR9VWfmjM2F+4vRKsm84DAya17+u5JBvJup\n3FTI\r\n=N7c8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEQ8DN3EeQf1E2igbhOEawrUMtz4Si+XfEVtu1MDs2UEAiA1exvOhVz+bqPQXZpagB6tqIfp2JtIjhXC/FVPFhRktQ=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.14.0_1615896987252_0.4688064491306243"},"_hasShrinkwrap":false},"0.14.1":{"name":"@sinclair/typebox","version":"0.14.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","example":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.14.1","_integrity":"sha512-SPm1ttNRHTK+kcJmkjqc0PwzCxhtre32lGcsdn6s+mXrpOm3RdjclBrRhE1/t96hRKb7qXrx/SHZoor4aEkI9Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.14.1.tgz","_from":"file:sinclair-typebox-0.14.1.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-SPm1ttNRHTK+kcJmkjqc0PwzCxhtre32lGcsdn6s+mXrpOm3RdjclBrRhE1/t96hRKb7qXrx/SHZoor4aEkI9Q==","shasum":"a306436ff4beba1e98e635f58d6625aa56b3de6a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.14.1.tgz","fileCount":5,"unpackedSize":72373,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgUKKHCRA9TVsSAnZWagAAw+gP/jl4QKftDeHPOkjlQ8ii\nREjP6AFEd1wKnTkB4LjL3HOnxbq7/Zs87cM1MU2OQOiMCjIi0YZe9yDZfaaa\n5txEMWC9mS1EMjE4eRGPJ/IZV6cHwWGadkyEHxq6UdkwcMNxBK/vJnWFzi30\ni5SZzMPuEbnU1Z5ozH1eLPPnmIf60F0SeA4Jy3LC2bNmUoSl5+AuiFZ2HU9f\nCN4PPVZ70YXX68kZdaMlz4d61CawWaGQ9LnLbSVe6menB76nnQh0dkyuy4dH\nK968wo5m/9gI55/12gZN/ygfhiIsqoqBQlA3ZgHIr5tP76Xnyc+nb3nNYe/n\nglVcKznxjTwvQTUUvTcAjlt6NlB9/hAxvlj19gcU80eqnjveYAIi6ls3dK8P\nN/ZZEeyHE8gJUJcUHpXZcy/GhWWVYDRGU3SkAG6A3cJn0KH4+hGmPdy+Ad5Z\n15oYUjJ++sUCQ/jLAjev9bE6kSj9AvTzW458L4CC6/QmQYt3eMg/y0/kiSZx\nMidPKA3P0kLBY+Ft3GU7j7cIAbfXoId/HVt82ugf+CK2vzALAgW4S//Dui5d\n6wgWpeaD2v8R7oIxXbD6igXpcLoaP4YQ/49af31WXyZiBTVjY3w4wXA0wVV2\nYyrfxHksLTEMukA7b1TVmrNfrus9pu194aX0F4di/pw6rkqG0GnhOoKboHrx\nWhc2\r\n=EO6n\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCJqu97IkBCz+8QEOJbdZB58qEsnjh5/oOGoTvf9oCvaAIhAN5NI7Qinkb+Wf2S30Xk61D6t5uhtyt180Al+rP4J7eI"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.14.1_1615897222669_0.8195024516596479"},"_hasShrinkwrap":false},"0.15.0":{"name":"@sinclair/typebox","version":"0.15.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","example":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.15.0","_integrity":"sha512-lKSdEZJJxzK3ll8qaCBuU18/XMZR9Yt/awOuDugMATOyLLk7lCDcdiNs2wAN60/MSTpx94NfbfVTRLrP6frkHA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.15.0.tgz","_from":"file:sinclair-typebox-0.15.0.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-lKSdEZJJxzK3ll8qaCBuU18/XMZR9Yt/awOuDugMATOyLLk7lCDcdiNs2wAN60/MSTpx94NfbfVTRLrP6frkHA==","shasum":"b0cc1179f8af0d244a927bf8e071ad19ef199a17","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.15.0.tgz","fileCount":5,"unpackedSize":74697,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgUdHkCRA9TVsSAnZWagAAhl8P/jQmhKwHZ4LFRbBgQ3YZ\n0TeHuwMsuTM8BkGlTT0H+GpLvyTo/Me2PMW5J+7gzlsqZf+VY4q7FITRtkYg\ncLjPmmmN9aMT5/H/p7EJYJo4Y2qhpH+z5LkPCqBW6zdx+OBQmU+pnRelPmbe\n0rPBKj4QeW6CYGe96ujafm/HkeoW3+0UTN9L0EbltrR21WD497TgdqY+bnhT\nNugUdH5CFuh+Yrd7prhc1kSkkrfuWn8f435mmvCjH6vt1vtVneTlxDjnPfyx\n0ek2tUePF8/YQry7sekyn91Dp4xssrFC8LwiHP30XPrOKfupzWa3wadM84eI\nBfMjuUQq5Sbbqm5szb7FXdmVjIE+hfAdk+SNcplYSMLdHY9B4TNsB8KQefVy\n9wdZ1IkOvBk4bpnBFWxtFHeITIZApWgk2p/obp7YauUEKTXS/zUcuUp9NPoe\nRMpfllNA0X2hixJRoGYbBJIFPlTDDaQBy6LgvBogmupWuFT89xVHmZ/RlH5I\n0ETgnXN9aD5LaS+r1gK6F9ndv9QVlN7Kv8a4sYxNAEf/wxuf9PGxW+GbFPTb\nuBj/Ek5cC12edJSvoenbi043xthJ1hEkkUJ/QMZJ2JGSJq3hkl3BB+juTxca\n0Vr89CkRXOLSjYbXi+JCx+8Iprxp8MJNiMOsqIZRakew/5ByQ2c54jgO/gb0\n6gxH\r\n=c7sA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCH1czzA7SdybbXvopc6QavTFtta8K0zlPF44AIPU3/fwIgejKEwcUahggmUux+ioKPeZX/NeTMZAZpoVrJ4Clv7+Y="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.15.0_1615974883846_0.9454264424925964"},"_hasShrinkwrap":false},"0.16.0":{"name":"@sinclair/typebox","version":"0.16.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","start":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.16.0","_integrity":"sha512-+5ucTvISuUyxE4yvSjpx5vZWThK/ya0MbOIgwxfhEdZSZje0v1xiGuZWAA/7/dcalu8WGKGopyf5fsHF4giiEg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.16.0.tgz","_from":"file:sinclair-typebox-0.16.0.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-+5ucTvISuUyxE4yvSjpx5vZWThK/ya0MbOIgwxfhEdZSZje0v1xiGuZWAA/7/dcalu8WGKGopyf5fsHF4giiEg==","shasum":"a1e0af52f26b5006bba4703c405102419f9cbc48","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.16.0.tgz","fileCount":5,"unpackedSize":75661,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgVkWJCRA9TVsSAnZWagAA1SsP/i0fLjfdOs88+hcAfLP9\nMD1R/1adkZUMqvr0dHpVe+zVjEGXMvYt2ThRyqNQ3ZkD7zynoGN1L9XSMbXH\nUqr/RZPDGbAPdKNWYY9jJS8Nodp9srbrnxBjAcpUE3s4cReprVS1S6+yxsEk\nSo9Z+0EeGzJMVXYKL1w0ylEX0soxNpA1a7FQHfit5Eq0gDRe6z23cf4+e6/K\nirHnP4u+R//7x1lxx2vNpqNDC1w4JhEgNvW4BKfuXoqBnX3Y7hLbRXdyG6W9\nIBZt7RlHq2okhgoXxNqOcizPqMdbPPgqBJZFbRe2DGq+vKssOXJt6ybdB+no\nSJGoj2xbGP7tQFOvoXZuZmCjcpWAdbFed0B/OUaK4M7jec78wayBBd8U6UDB\n4Uv6dhNw5Kr8eHceoCXVHdF1TokPiyHMCQeBMmYLktY/vX5RVqyUCeb/RWIh\nJKzU6bGojnRz9MXdhyM+tfFnn1Q8pmakE4u8l2bQ4TxsjVy3vliPcwYya+9k\nnkh6bCnUUTTZByDKTbnaF9oWEg9prhSMGXCYsz78oAnXYnPGl1OwxssgDHOt\njf+ur5nPtsdnBTYnZNc/x0c05x1aAqcO8AN1X8jf6tDKDBMqritZSnNVFLC4\n/TjNXcW1jUJfNWIbuEYmVelgN4T7xGBqSsK74FFCGuanHuH5AgP2NKkTaKw5\n5K+s\r\n=YHA6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCZ67zzFC3fx8rc/++cQJIzz0Z0XbN8FyfKTiP01KJfoQIgJC1CwDGFeU2qFz6XuntSIsDNRuT419BCQ3Efh4e1caY="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.16.0_1616266633122_0.3824878343413336"},"_hasShrinkwrap":false},"0.16.1":{"name":"@sinclair/typebox","version":"0.16.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","start":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.16.1","_integrity":"sha512-M2e35t7IKJYlIIvLAHYeAHAubdW5Dlb4v6lpeH630G7ebWv5nfJKQoCOMku7OngfScN936Z9y0ZD1r4NhRVWHQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.16.1.tgz","_from":"file:sinclair-typebox-0.16.1.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-M2e35t7IKJYlIIvLAHYeAHAubdW5Dlb4v6lpeH630G7ebWv5nfJKQoCOMku7OngfScN936Z9y0ZD1r4NhRVWHQ==","shasum":"1534198931db61e5c630106909a02743376bef10","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.16.1.tgz","fileCount":5,"unpackedSize":75699,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgYqSgCRA9TVsSAnZWagAAyW4P/27+qK+tkMY4BpmYv6W8\nmVSyev4ryoEkNs/LHE3UZPK8ilC8b47+77va3ddK7Aq5LJiY3dBtR+ruNSZl\nFH4rY27jrzIbgtT3V3lmtL5WD9rIHt39Jl64xfv875v55Zu6l3rb7fmBlYRh\nmK4BdbFcBXvYmLqvm/EC9wLd5QpsuWLn2N36+A2I7HUuuL40H6HZQVjwxsxE\nY1Rzd2T2YQ9+4gIaGmLVA/4cHGnD6oI1Bm3ox1A/rWk34t+2tPRxzIrwmSui\nt4IpRdcdlyaZgKsNtVV1KhDD0CP1mmFibXRDoZtyte6hYdjCGhb1D/06pL2s\nmRRVIy/MsvXqW6gyN6vuIW9BKmKW0bDCrDPkNW1XZsiEy/oCEEj/gDzKC0qW\nLc9MheKVE50QU8CJlGJja2L3ErUojT3WMyfm/a2CY2C8uD14fnHQLyzcgect\nQ06zJNNreltUqwzEzeIpU0T7t2EBvWPor0x2GL2uIBtbdArUVGVudYJQUKWp\nLM1UGTiO53rBpUXeJFJGHR2vZqIjp1wEOSQjUaK2D1PRvIhtTJUP4rm3Ud0M\n/6tVBqbSSwkYFWzVSogqZwaEoMLQno5voCcJjvgtU/nK4gQj6mFfon6MQveW\njf97/r6QrJCMVbhMpJZLnyl59ilO+Dr6W5cRZoAogJ9BBBuYUACifgwdx6eA\nfkGO\r\n=8Tz1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDiI96EKe5LYdToSHFqk0bJcZH0kXJpbCOa6ffZgD5DaQIgZDzkOrJWdiLfzgf2cokbwTkmMa3cKhs/Dfc7V8ngNEk="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.16.1_1617077407522_0.5305074916974941"},"_hasShrinkwrap":false},"0.16.2":{"name":"@sinclair/typebox","version":"0.16.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","start":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.16.2","_integrity":"sha512-fvGbn6K+gZY/aJDCdWiA/NmdIfSSXYDTs/8DMIxFGhbvDPPJSKpKam99SAygfJsAzfhN/SIh71GCiFPWrw33lQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.16.2.tgz","_from":"file:sinclair-typebox-0.16.2.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-fvGbn6K+gZY/aJDCdWiA/NmdIfSSXYDTs/8DMIxFGhbvDPPJSKpKam99SAygfJsAzfhN/SIh71GCiFPWrw33lQ==","shasum":"f81ea9def0aaf3a7152c1b73d8db9122a37219da","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.16.2.tgz","fileCount":5,"unpackedSize":76275,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgbKHCCRA9TVsSAnZWagAAyrIP/R3q0ByNAM47zu6OR7R4\neh9y4TBcXpWDGxZq4aRqkJ98MVj0Lsvondl/k2vR4PrznX0L//7c5m80htnd\nSFLc/i6YBdwhIV2PWw5+744lE0uRcYij3CyYmtmz/8+PZaqa3IPiNz2oL8n7\nu18w9pmNXWXs/5+E2QKs13mIwUQJ99NprnCQcnKDpSUd9dZmmn9xiELlGREc\nuCu1VbW/MANBCuYP7nAwaHU4jTxw0cdLI8IO+wZdgyiICuIOs5WTmDMLN5N/\ndmgB/ZAhCgSCBNR6HqEnhHcXWIX4jFYqNUpcJlPZhu9HBvH5LHKQH+psmUOq\nUf6dWMYfJqOdxIaCBh5lYIUMPpxlcD0xpPzS+Jd0i42ibz5qYBBqcjG5rWAT\n/iV88aBwvbJmnYyh0TJCfrYzJK2GBzjQSDPagWMOSsjK3CRRF/r57vFKaRxX\nwQFYMQOtNszBaJ11yDApg784ZGgUfc5YYW6RuwYA16ieFGtTFlkUkhtlnsLX\nH/sSCaq1g4w1M//wX8KFjGZ+8uXNJ6JuQKzX/7FRnWDVRPjoo949SGw95fAZ\nbbyb+ByCACGJM3nhymkIeqAjI2XkpgWOHbR6VaQer0DWD2FtMeMPa6Ihg5WU\nEY4gMItzlE4txjZsL8GqskhYBvR+ehEcbg9PWHVbS+Y8DxKpa21zKbKZNsdk\n3uuy\r\n=ejC+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID+DlW8cQohs0CPwq4E4yVp1pQdEcv0JKx6IEu50M3oQAiEAhDRSs4lweOEmpVEjiEA+irKZ/8sDzEjG66eyc0EsnwQ="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.16.2_1617732034441_0.03358383816301269"},"_hasShrinkwrap":false},"0.16.3":{"name":"@sinclair/typebox","version":"0.16.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","start":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.16.3","_integrity":"sha512-jWGmkmPtxiipL3zGuoq3aX5TIyXkqUXC9BrdwsAlxQ+ufzOgRhHuwBdKc6CuD98Sn8W7e0XdoJvOx6PhEAf3IQ==","_resolved":"C:\\Users\\relay\\OneDrive\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.16.3.tgz","_from":"file:sinclair-typebox-0.16.3.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-jWGmkmPtxiipL3zGuoq3aX5TIyXkqUXC9BrdwsAlxQ+ufzOgRhHuwBdKc6CuD98Sn8W7e0XdoJvOx6PhEAf3IQ==","shasum":"2db54d30a8e1f47d2bc0a23b665c07e650e3b645","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.16.3.tgz","fileCount":5,"unpackedSize":76299,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgcbWvCRA9TVsSAnZWagAAJboP/j/D9U68estTVmfrbqlM\n+Afv8xQMsBpyvp61QP9gybG6rSUynZWWVX+lXwMDf4bR6PXzn22V9si5iXiy\nax7dy6c2wxq/HNrHskmXupUQghbDfzZeGdqfIgRJwLIKAeixwPhUXw3T2FIu\nKBuERdaT/Sa3NoD/ZhpVIzMQ6gWkuN11UWmR09/6OwZF2jINR+beDXoM6G4h\n8b69yb6E9RUTXVAWi7tOoHnu14eiBHMILxabFArEZ+r8amGtWfCZkDKy6lw9\n9fc6xKkG1N53FTjw1t2U8qaIU/V5DhPKokcqiCYfsiwwmf6WcdGxFejGtpqX\n4eUZ6kb5GadeIMHE+9U2QCCN5RCK4Izf7N20lQ9PBHwSey9+xT8BQaUBV4BR\n0FhjV0VLxqNMRCroD82/fM8Xzl4kOj08HdSR/VLdPw8O7n0sdaLQWnw9q8MZ\nRy9Njo7CWKCzoRnZ8d2sMNPgC9Nt77d8XzlRc+u3mB9Fq69DrPxMpi9cboie\nC7rXSGlFj4t/GyEsdy7Edow8JlI81I0SWfSz3K2AAk4M3QTMYsc+zcF1kl65\n+/DhQd3WrJEFtE2e0alo54I6eP1cvTPAABxLVtKZPnrLnsKuwKlSuEKIeDNG\nD5dneoWlvOWZ4SdsJr5/ECjOnhjFfYsRkfpLnjWkBtE4p2CdM+BT+A65zU5t\nqvSM\r\n=skti\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDEpYBJJxJpOcjFVNz7J0W5v/bxbKjyBUICHRh4URlyZgIgDBQzV5OsuT01ThyLUVigf132EU0cnTJ19ZGE6blG2ew="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.16.3_1618064815435_0.07936137507120855"},"_hasShrinkwrap":false},"0.16.4":{"name":"@sinclair/typebox","version":"0.16.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","start":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.1.3","@types/mocha":"^5.2.0","@types/node":"^13.7.7","ajv":"^7.1.1","ajv-formats":"^1.5.1","chai":"^4.1.2","mocha":"^7.1.1","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.16.4","_integrity":"sha512-KMDgWZ+8kmaiHW/rbJfmxk8eUWOx2sflyeeYIVmAk0Nk3/GEkDW1QhyP2/eelsv/ZkqeNwlFoSMGxB0fb/TwKQ==","_resolved":"C:\\Users\\relay\\OneDrive\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.16.4.tgz","_from":"file:sinclair-typebox-0.16.4.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-KMDgWZ+8kmaiHW/rbJfmxk8eUWOx2sflyeeYIVmAk0Nk3/GEkDW1QhyP2/eelsv/ZkqeNwlFoSMGxB0fb/TwKQ==","shasum":"90cc259857230476bf40765ee30f79ec6012fa4d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.16.4.tgz","fileCount":5,"unpackedSize":76591,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgcn/WCRA9TVsSAnZWagAAWlwQAIl+XIcSwy6IcMaXqCWg\nc1G5jM492+CC12AY9qVjjcmNjeN7C3Jj0xzbormFiM2HsKv9sQK/cVdYwkxH\nxfk+dqKiLaog9f/Vua5XcEB7DCQkWvB/KTufTni2yzJxG/GdavX/WqDTcjHG\n9ljeAtl2zunC439r/Mx6j/p0me2aQSqFFyOoQQn2fBmnhg9MDDDPWQbLhs3L\nfCY3sTK4fgJD2GUnWR2U5xc5GtlTTZX6RHtVzu1jGIDK1D6YNSHVN8YmUI0D\nA6gDaip3wSL1Ou+Nurxt9rshX31U7cwyFsrTKxzdSwYcg3JJ+MAG/tnj0tX4\nRsqrbcHeXRiVqVqFDhc0L9/4Hihrrklh/4a1m6v+oTugZJ3p9f2cG0/vffDO\nI53ez3AbxKv5IXs5I7fyrDF1pFXQOf3Lk4FQn7CQw7htes+/Z9/naPTiQ44H\nopT4rPMGRWjn4Jqzdls6EbyjPWeZJBVZVO5vy4Hnu2PlFErXNhJNzq8vj41b\n0iU2GiQvSbRDRITuShPgm2cTdea2UOAPwO/hYtsdzcPoCAk5Kwrir3hSuq2S\nxKOCCrRrlV2l6aKPFzE4cPb0AXBv7WqXUkRxbiF+iJBX39/OllEwYqJ938MX\nG32N7lq5Hnccu0Vuu7Jjnwrhy0Gq+9DpT7kBDmSn193X2iYv7P68/Ly5pNLW\nEmrk\r\n=uPEX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDsM6rs49PqqBdbZvzTexg3VVdeuJAgTNRIrvfV2kUspwIhAOgrcGddd4k84PqS7532yRjuSeJdt5oDkIj9TlKEn4Yr"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.16.4_1618116566297_0.4967920424996035"},"_hasShrinkwrap":false},"0.16.5":{"name":"@sinclair/typebox","version":"0.16.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","start":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.16.5","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-0AZ9wqPcyq0ekH5yLoTelu183C7G4K0vy5ROOZl4A4KBOk1TcGk00iOmz5PhTjWQ9Bq7wAPfGclVsn7MTHzbTg==","shasum":"c5fea69bb29f1b2a72e4d87851d8b2461b47994f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.16.5.tgz","fileCount":6,"unpackedSize":87529,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgdRC/CRA9TVsSAnZWagAAhuUP/3Z0fmgbo9ftDpfb1Ogn\nJW3bFWUjLvpJ8LYREXJkSPUXM9H1Ikkkw7XO1ego/vIzTDCaDsQLakgA2xia\nMDz7vf0+liLjPWnNPoI8tMqLSN0dWvuif04STU/3kMmDHo5i5oIs8+r47/pZ\nl6sq4B56hCxfNcz6O73AJ4MM7602yH5lUPVCGsOUlPcMkZdAFO2FSY+JRORI\nd3sSgjK9xXqzaRxO4zQ09bWXT85G2y6XL93R41Lf7dZPdaw79AtFt2A2na1K\nEX+L2anVWqFN1VYPvcpLsRxbY806SMUXvBPAusD6MWaVj4Ey2DTZJesB3OIu\nwJlYKEQf4shIubv4NmjVdrZ0JjyIme05B2qtcJQ1yX9LHYeG6msYQmuBE+rR\ni4g9u5NXto3WhXyPr1ojG3BW6k0EekXPt7tO2KTOARn/P00iJKODU62YEpw4\nbPOye0/PjmO3KtbO/BsCvClIAuZOBCUmOf44TZvS0W1i9eVhujNZGZ3n1Kdt\ndL9RRjVRUkdigIf/CwaYgamI6xzaMsgYOYlT1FclymNLeJlQ77W7DHhmz6Sd\nMk9VGqcholS/czh0eU25hnRXgv4sEVvKOE8GRxLvseT50o56y+iAoBqqMZ/x\n9Vy9iDyAS/sl86DdwgShttP0rlYKXdquDLG62/AYNoEKSgahC05z7GLfpm5t\ndwYW\r\n=PDDm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD4uEEX7/6yjebZ+VES0tj3NQ69lt6IRwpKbATXBkiopAIhAIXgpgx0Gv0TkuPd1fpoAsRXstqRBMs2vXsIos5jYjJ1"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.16.5_1618284734612_0.41774579474672136"},"_hasShrinkwrap":false},"0.16.6":{"name":"@sinclair/typebox","version":"0.16.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","start":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.16.6","_integrity":"sha512-ZD2FapdV8rZweAa5wqBHN7yB3HyRJdY5ty1e8b2YQjw+j4WPYNZN3FbpDUFMXD6Cd51gickYEin3Q8YF2K7Q7g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.16.6.tgz","_from":"file:sinclair-typebox-0.16.6.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-ZD2FapdV8rZweAa5wqBHN7yB3HyRJdY5ty1e8b2YQjw+j4WPYNZN3FbpDUFMXD6Cd51gickYEin3Q8YF2K7Q7g==","shasum":"4ef0810c8b6c9ab2da9040da87cdb4d7d3108395","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.16.6.tgz","fileCount":5,"unpackedSize":76701,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgozPOCRA9TVsSAnZWagAAdGsQAI2UejrBZ6sE8m1EwOlG\nHr2KM/miiJoveEuknlfYoZaKbGDoo+ejN0/UCJJu/qSbb7sxXjvnHwHtrpOQ\nDIOQAIb0E7yTXpw7Hl9Ssw387pdk2y3PRwLbdH8Ezs1ww/wSgH8smmhy/IFw\n10ATv3m1vTFzVEOXbtGfAEUSPjN1aMT84vU/pHUWNheWjMM/8oyEik3Yehii\nl7ijiav993QG0KJ/hV0C6GYLtEjlg7MLxIulE9Geq9ggxzoSey+0lwM1t+ni\nV2ZZe5P399HIBIhEuu0o+bsf2pK6ei3p4CH6AfJC8G3T7xQ72LYwq8lB724X\nkizkmhYIn7DpZxkLRfzBT8yumotJgVZqQOaU4SM//cacxsasbsbHE8x60gER\n/auz+jLy2K+au8FmEJfPGRzzMsLCqDNbeoKCDveXDzi3d7jqLdpLjsS8m1fm\nBGw1gdKnaNZDIzS4GIEb/ohnc2CkkxX573oh0K2gQtNE/9pfR2SqjXWWSU2D\nlHeUhqp2V6XkRw9pKcp2Agf18RQ5vLkyDBkgY88uXCUaF3FNLtr6Z9a/iTrn\n2Uvksy8zzFu7wqXq8aCJKQwaNNQxiyZ2aphBl5NDNlyuU0KWbwf3w89RZAbL\n23zKANIchH5qbXY7Mc36FfWaOVlfaKBIXCm8TGyQ/1LxeIaDZw4F5TnPZTCn\n9Rnt\r\n=u1H6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAxG0qzZ6yjx0880Xs4IAgFbzRZxa7pIUSdaWws2LIy4AiEA1x00PV53sMShKnPgXowMRTqVtdE6onCMp1bTLzWgoEc="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.16.6_1621308365772_0.5174433428929068"},"_hasShrinkwrap":false},"0.16.7":{"name":"@sinclair/typebox","version":"0.16.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"smoke-task clean","build":"smoke-task build","start":"smoke-task example","test":"smoke-task spec"},"devDependencies":{"@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","smoke-run":"^1.1.2","smoke-task":"^1.1.2","typescript":"^4.1.2","typescript-bundle":"^1.0.16"},"_id":"@sinclair/typebox@0.16.7","_integrity":"sha512-d12AkLZJXD30hXBhJSgf33RqGO0NMHIDzsQPYfp6WGoaSuMnSGIUanII2OUbeZFnD/j3Nbl2zifgO2+5tPClCQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.16.7.tgz","_from":"file:sinclair-typebox-0.16.7.tgz","_nodeVersion":"14.15.5","_npmVersion":"7.5.2","dist":{"integrity":"sha512-d12AkLZJXD30hXBhJSgf33RqGO0NMHIDzsQPYfp6WGoaSuMnSGIUanII2OUbeZFnD/j3Nbl2zifgO2+5tPClCQ==","shasum":"3187369b2ff237f57477ef155be4c992e592fa7c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.16.7.tgz","fileCount":5,"unpackedSize":76699,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgoz6KCRA9TVsSAnZWagAAzQ0P+gPaqdElxf+f/al9rHwC\nLVbMND3ute9xkFc4o3jYE5+n4Tj3MR4DqvL+F5BqHyh8l6IsZHjnlzwOIweW\nXGuftOLoWIjWR/MOnulpOgJ8imJWGv18wVb9rjlqt04KcVVzZ6Z4OaJuvKR+\nD568CIVQOkR5YPQi6YcN+0X0lDwRGHfu4AtrM5BwZtlNdbgrN2/Ht4l3Dvb9\ni7ZoK2ATBzTA23qd67erAkmeIqcVjEZs6URhuSUoSQZoKDIjD5CZWcZMw8tX\nv4elS7iHH9bZRxUx81qaV8ezo9F0vHVZkOLyXr5pXCtUsYBgSKzxjDtPEf9V\n1Tgr5C8AJWI5thnFapiQ0obd2CZMbvfSFTx3UqPrZukRC+ye6q9AIb2IQ0H+\n61vOK6OnrHlyv8t56fbmksAHlL9O3b78edxftp3SQ0Oaq4RztvR/BVIcLDpU\nyQ43TochKBnftNMh1bij9SuOwfNsYp/xdXC0cce58XCa2tRnY3ZQ8woFS+PV\nCyca7W0ZzDRZxhhFLHuYC/IaJWsT+PV7MHRiW7vyTiGBCGTrBji39DsLZ8OC\n4Hotm5SSqGutdG4J2OFCjWNm9bc26dtOGVoJKRp0iKSRHUjVBMy0NN5+/i+j\no6X/bNJAbYnaBu4ZHcQEjszF3VagcvB3syPr8bT2Jzyv2egNKGLAhW2Clp67\n27Io\r\n=XCAX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDr9I/CvZWlmLXkKN1hxVueqBemKKEyzLleycCb3DluCAIhAL5+1Fpp+C7Dhw31iNtTcKl98RwEWtSkVgvE7NciDA/F"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.16.7_1621311113811_0.2830577939602723"},"_hasShrinkwrap":false},"0.17.0":{"name":"@sinclair/typebox","version":"0.17.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.0","_integrity":"sha512-cHkdl1XP2EUGQVnaVgWT48VTgwI695/+W9LrDn1qTudDtmkUK6dS+Da79jZUvSeRFqglQTmDrbiXyugDx0kD/A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.0.tgz","_from":"file:sinclair-typebox-0.17.0.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-cHkdl1XP2EUGQVnaVgWT48VTgwI695/+W9LrDn1qTudDtmkUK6dS+Da79jZUvSeRFqglQTmDrbiXyugDx0kD/A==","shasum":"6ddb9286a49fdc5b36fcccb6ab2de56d97f0ffd3","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.0.tgz","fileCount":5,"unpackedSize":77899,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg1tDYCRA9TVsSAnZWagAATicP/0bNW5ug3D+Kt+grVa2x\n/SDVaVKNX8TqIR4QkMawSO2iO6snaLaSuXjpZc3mPds8j7laruoaA09VEFyM\n8a0tip1Y793hju+VpDk4y/9BGeqFiZ/8lMuxiMsJxhF5Wf2Z4zpbNxMEPtS4\n18GW8Tge736Jka2wGhdPSi6BTGKh05E+G1x3igaK2KlDy0Gu2eaUkziiq+UX\nNEzBKPpPB7sQJwrdA0HlTZTxhiBvf3CRTUqyC6rvB7eqVCHFWX6sjhoWHL40\nqvU8wDs1DRkN7z2JTRclUyxTkfY27Uk0beDcJQjfa8LisTTJ5noDWR2QYpew\nJ+znBGbMiKxFS2B0m6g0jJFTMilE1arOWuMP+OX/VQP0vXMLepVlKzuTOCxU\nHu/XvID3VqEUdMPPeEtX9Q7DYtfxB0p0AuWng1VUme8k3RWo1AZXHbb2Kp6H\nC1OPAChSO2NtSKJA8x8Ne8y/y4xBeAic9Fiz87fC1L4NzlC0xR5N74XoC0x/\n++ui6lYdTFx0O5eeB8dQxxvtELa7Qe8OY0J4jHOsPzqLCF1k4+zVcGr7xqFk\nXhD/8tEWcZcRZKCIheiWQ3hr6bCRqdzH29esYqVWT3p+sM24Be6/xGamB117\nkORH6BHCuf4BQ9rqpfbXre8XnOtsnQAnSLaR+YPHSHRpDrx1caTQARgftcD/\nA8Oj\r\n=rxi1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCtMv30DdsPUaFLYjfovwZlE4Hejm05EErs/mwQjFvD8QIgDIu0DC3jZrqQpV29YVVTW5pjiCRE4Qp2HOJgK8l8Opc="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.0_1624690904125_0.7974732075309647"},"_hasShrinkwrap":false},"0.17.1":{"name":"@sinclair/typebox","version":"0.17.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.1","_integrity":"sha512-rva9A1kYSDDmXnu/YfBNlW1RbZVJJo8rzY+9gytOxpG9FF+lgL/8JHK6gJsXA1mFjO8DF7+55BiR7MP+zQMLCA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.1.tgz","_from":"file:sinclair-typebox-0.17.1.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-rva9A1kYSDDmXnu/YfBNlW1RbZVJJo8rzY+9gytOxpG9FF+lgL/8JHK6gJsXA1mFjO8DF7+55BiR7MP+zQMLCA==","shasum":"945392b4aaab513ec7899c48ab0040e9933b46b9","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.1.tgz","fileCount":5,"unpackedSize":77899,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg1toPCRA9TVsSAnZWagAA3JMP/3goW/GwKXUjyNa/iW10\nY7fXfXWPvWkQBdUQGMhAxxdEMucrsfvH2+gYZed3KtDIRbK0fy7we0a3J0D8\nVZalOM82JCs7ylGznH6THytDG3VWDw7WC2ue4+LOmc1YPQFm9J1VjuB3kl7c\nmtcUUA9WBj9fx9pO/l7A3sy7Inrk8WEmeYAtkbQEYTZ+KxpXPB55Uj6vVAr1\n+Hr8TGy+N4QP9TVoieUt9iStgr+02qCgg+4t9arY7SeM4vNrzbpQDYFg/bvz\nkkcZsc6nRpWKfdBH83Qd1DGwg/MQ6CSMmMDM1iz/M0h7cWgNJ+YBrcb41C0t\nN1oxav8HaVaa86WNsLhhtRLltHKYTv4P+TdNwISh5MNKjz1Na2z+ykSSkC9g\nX5zGBjjZi/SjTg303UYkwzLmy4VP4vmyy0c/LuAD6LLHkr+x+jvZhW7gf6G/\nm60DFzJcmKIbRG53j9XbXq96/CiggnsyNmVlfq3Dgkfb7FoH2GgBmJMxtEWP\nAMUn3cfSIETfVCVGPNVHLc91iNcYB2eEMjNmHooGbEh0ieMqX3HFjzsz1LkY\nwAoOix7H0kxH49axcbHQuzcOKNw94lgpqp6zsnu/uKrouW9DLbjpRaim5dL8\ngQNsCLcd35xAFuIxnrJJ/jHjc2IRR6okNVYO4Z+KGeQxUqUgKjmUs+9gExSj\nD03Y\r\n=YJ9f\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE6uYPVALshSKlpUCSir1+hYSklB5ExA5Vm3zrb7qQHvAiEAmlVNu+MdWMDkB2bTqG5Hu6++zgecp9p6tm3Nks/I8hY="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.1_1624693263513_0.07996416645691573"},"_hasShrinkwrap":false},"0.17.2":{"name":"@sinclair/typebox","version":"0.17.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.2","_integrity":"sha512-sma4R8zamJJlGWsDOtl41z4XVinREox85eVtfVJpFFBbFk9jyDcUgzXvYY1uZV8nRsMjXcngmxpw8SVww+0r3A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.2.tgz","_from":"file:sinclair-typebox-0.17.2.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-sma4R8zamJJlGWsDOtl41z4XVinREox85eVtfVJpFFBbFk9jyDcUgzXvYY1uZV8nRsMjXcngmxpw8SVww+0r3A==","shasum":"6d3ad611ce284d14297787e3343860bddf2a5007","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.2.tgz","fileCount":5,"unpackedSize":79941,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg4ERFCRA9TVsSAnZWagAAFIAP/RGfZpQD4+Er+grCMD/h\nPL6Tx5dnLoQIs7r83wzelAAxavqDgEgSlqeDRDC3QoXD0JijBU4igElts/92\nu5QlBu5UFVJmocw5bljUjIa70eiv2aC5+3S5KOGfnxDZUwmnZRMmU6Nq538F\nWEwVcAFVSesSzKSo5GarTCiSsngsqCSL8wDyuWxPIzeRDwMBHV+OluXWlnXy\npBk8DsDPapfWYOjs7rNws2DP7I9/sZaQqlSmxpEQeMi92PZ8xYR+2saPbiTz\nOd4IMsDPT1zr63bdH/cH4zX8RLrrEg/nxSupRy/4FufuDp2h47/a9WU8t2F8\n8veZSv0CkRd/UWNF1cwtGcvP9Z9jvQ+akbFGOhbAW4xE6FxXyMtUVvM/Njiu\nYdH3abO3ATdlljfd+M3Pto2xVWzl5qnpCTongc42J/1vuyHJwdhmz8AMTW30\nKqYnee0B1wJqVP586wOcuXVGIQCL8H8neRaomHHsOIhRbSQ4t7KlOhzeUux/\nIYlD+Po+tGIk5EJz3nRc9mKmnqdxhDbLgoro29J+O2iq3uJPcnqWnXhVrljC\n/X9evcau4ajNeviXwAka95o//KFucBq8QIXTQ+wkjQBIpPgmgKxGnmGkleUW\nrfwon0RSAghpW/nxc8mTdWEfOiTw5CA2kHKIPI+0d3lTU0/reInMlYj5P1bc\nYpnb\r\n=noFw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDXGDaHRxUJLz8LxM0xUD1Nl0VF7XSiY9L0X4BcJWqDJAiEAwgC9rhEpZ88uY3NS0J6Oj+4eCs+lgAed8hIifPeAAAA="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.2_1625310277122_0.9412102957062185"},"_hasShrinkwrap":false},"0.17.3":{"name":"@sinclair/typebox","version":"0.17.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.3","_integrity":"sha512-PnELUAhjAXJRdCJsaG5/qLrjqzy4YO8cJUbGmLsalhYsGytS6dtKJ3wz5TsYW7syY0EjLmo8FjNP+W2DdYJLyQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.3.tgz","_from":"file:sinclair-typebox-0.17.3.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-PnELUAhjAXJRdCJsaG5/qLrjqzy4YO8cJUbGmLsalhYsGytS6dtKJ3wz5TsYW7syY0EjLmo8FjNP+W2DdYJLyQ==","shasum":"c140a0b3c73e4636bc7c48bfc62838ec7d4f5f56","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.3.tgz","fileCount":5,"unpackedSize":81013,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg4JqsCRA9TVsSAnZWagAASLsP/3weVGwbhkUn+8Gn1gQG\n/g5LDvESP3DWXkZ84fJkVH6kecFqRE1J2DaoapEvWBkTLX88NWOmpdUKwI12\nMaqtQ+YXwwnzeNg9GnUPODeDWoZS01ukO/TuW8fIT9ZpLPdlSTuuUwVoKcmS\n709cp+BgqHl20kCXcIipr0xb+pmw4zZhVq3NP2/qhhSO4l48E/Xk19T8lcNW\n9KEc6FcQ2snKxPBY95tmg5Kwo7V0urCP/epVTTQwiA/e4MD8wGBEgOQ9gcuq\nTZKeP/F4TcDe5RynCIph2a0IAvGhPoSZ6HIWkLjLymF+jP4IZKMTBddC8AS3\n3saim6v2p6BvNx7VtoooIzXkqFvBtUz3ecslcXWPRYRpJeQVwt6oQ6PxB0cV\nrAJVYtGItKCb/YF/do/7mFRYm8ndcsInZOwKWQQhPnA4y7sK2T+bBerK92gZ\nv6s1XGD/hywk1vD1WA9xgDbiC9xENGzK64OiZ5c+rkDdVyR4ewJC63Zo8B1J\nxV5MGR+O3qDOn6GYl+9BdsU3Lx9/OrAPWJdgEmoBRK7IWjLTZ2iz4YSPnmA7\n51EQUHWLM7GY7mWYuZwm1V/FL0Hpp14I8enAW3TukObDE2JT5oxY0c8jLL4c\nNYFp8nPvX/Fp9RlnSdqcDI3Vkbg6xMnKtQnNdavxVoO5caaa6xMqgpVu8tLk\n4S1m\r\n=TuQ7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFHpH7cnaB+LKTBtCB2bt1wsoa/q41ktKl7ONMZ6lnrKAiA8zlAcH2NAjz046shxnfWit8UQSc09ONmnmZVYmEQxoQ=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.3_1625332396306_0.3208711351561717"},"_hasShrinkwrap":false},"0.17.4":{"name":"@sinclair/typebox","version":"0.17.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.4","_integrity":"sha512-KCm+wGleBbpuyqE6Tfx6HONkM6EzJOLqd+yQ0wCkMLVG3/7DUMcCjaxA33eRgmRjNY+NL+vpZF2HZRGYS4AUEw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.4.tgz","_from":"file:sinclair-typebox-0.17.4.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-KCm+wGleBbpuyqE6Tfx6HONkM6EzJOLqd+yQ0wCkMLVG3/7DUMcCjaxA33eRgmRjNY+NL+vpZF2HZRGYS4AUEw==","shasum":"ccbc7ec86114bb963b5f30e4cfbd58349184bb38","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.4.tgz","fileCount":5,"unpackedSize":81003,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg4JtyCRA9TVsSAnZWagAAJeEP/ioXQs/HsvhmheA1Gakx\n9BSpWU0ZwHuxpCQXFHk10vHg6EigS6MD5sL0Oze4d2MPH1EnjVnjRduBZnXf\nP+KLB1MtlZwVq6CUJoG49xtozk7yFbP3NrXuX3+hlAZSGdSVgDXzDTNa6SfU\nH9DGt5v0clWHjYJpmGzdgfnv8KjXIQo7rRhQb2iKxhYBp9/DyITEZ9azqwGa\n3yhWezCb8HUMuWXAu3pNnaGKUevLFYxQVBz2fY5DtSCixqSnkhtEnJvtekUZ\ndCIgRM2iwByNmhdwSKa5yFTGsefhheY49zN9t9tPqyiW0bp9gsUGWCKR9JOb\nsI+GWD3b8nLPBgRu+7g1fQDrfKX1J84yY0apnp6TbrDfF9c9aUf5dZ1KLSlP\nzxDNVaBCPd40c6NrkP7XujBr0vgWTIdZt0Lzj44LNNuDq5dwsqw2coQwHYvW\n/I19zntejp502E0z8w6EE/7ukrNUMytCD1Ph5dN7qCxLBBh8dzQRXFkPIA6D\n4HrNRPv7quTJvSy9sxBlkuAUk1nmYAr7NcjCm+JsHODO96Iw0Pt427/kAMVY\nE9A6e9Xz2v1wdiJxtfGwq4G8hiymlghsaX3dnGarpRxsJupcIqHhoz9HOFgc\n4KVPL0qmvJv7sa3PUFFWlojJVYsbtlUtXvtanvGYMMOt1bsJGBT4rAbTxxqx\n/UAc\r\n=wJQH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHUBBHst+EaW8EdyDqU+JfMdlfC0jTmNdPwitnXKHn7nAiEAlkUBnjXjpKQdOlmsX4Xe0DT0XVAFXjBq6F9IQj/lF60="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.4_1625332593974_0.7107073872915799"},"_hasShrinkwrap":false},"0.17.5":{"name":"@sinclair/typebox","version":"0.17.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.5","_integrity":"sha512-HxRZzRNAOd9WkENToiWMJ1TrBbxI5UyNo4HzC/HhoQhbv/1gkdDvy5IQvaivddyiurw3rE0kmeousXS+eTyc6g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.5.tgz","_from":"file:sinclair-typebox-0.17.5.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-HxRZzRNAOd9WkENToiWMJ1TrBbxI5UyNo4HzC/HhoQhbv/1gkdDvy5IQvaivddyiurw3rE0kmeousXS+eTyc6g==","shasum":"544db2ae049bd517d7549bd3a00e01ac83c075e4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.5.tgz","fileCount":5,"unpackedSize":83236,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg5A/hCRA9TVsSAnZWagAA7K8P/0mSqi1a4WV5BFZNG48X\nJa2nWHmb1tqwUf18xMb4AtZNcJo9PaviJpFgcqsVLVhA3RJDcAARcFVTDeFB\nIrQ63RiTRN1me9wvOHSpKvW0xrfU/YEfqoGTDy7FmkUQSrj0HhtwSxw2+R0J\n6rqk0+whYlM4GT/yTeJPpjOPZzPXNqDJBNhgoiE1j36iHDx9bXAhLLggmtJw\nc1Gsx+tIOl0HfLd/3Ten8Q/P/dD5UE46oP39IQIvPohYmoMW3L1sZMJBzmGM\non4npPNt6WkHotENzm1xwmb1dMEcgIAx7OW6FZ7pOjxUbTy+KBh4KFqa9ksc\npyqSANlxTl5NPr6MN98vGSozM1EnuEJtTn6J3EPpBkdPHFqdJxXVdFvLoObg\nLWf3IYSA4yfrIxzuNCy6jGdNIXY2x7c7xRbpsE0VusRDKVbv+Qwgn2eWOKBR\nr0DKYh4XexqHgYxOsepB+DqtCJ8CFNOzYOSRGZFKM3gh+iGYM0qyXjxqugyU\n7q+nHc8OKoILQxb1sbG0pEVhtQ5XkHs2ki77T7fsMCbEhVEkkDxz0MQlvJq7\n59tzHCdTMpCOJalXxXlGLOWg8EKIBcZrj8WYS9d9+DvqYXtFgtAvBWTxgis+\n1SE1txg/Ur6fWHl4NDpsaHGevf7qWbSYs1DuirqE5OY4jyttX7A21B3olJib\nExgG\r\n=vhZo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAElQFwIgSRtqhnQEtbTa5QPz0o63a8iSz1dCcvUxtnGAiA/JE5Q7CcEsF+ukqFvFBq5gpl86xx1YOUK+nsIflNJ6g=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.5_1625559008954_0.9201363237884765"},"_hasShrinkwrap":false},"0.17.6":{"name":"@sinclair/typebox","version":"0.17.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.6","_integrity":"sha512-YuqlXKWYZkzMDJphA8M2cN1U2MBUembu1wmRsUcagwLLH0L0/m+79iH4VQk+WKTmgvtF9cbD5mi+j4cmSPyUYQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.6.tgz","_from":"file:sinclair-typebox-0.17.6.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-YuqlXKWYZkzMDJphA8M2cN1U2MBUembu1wmRsUcagwLLH0L0/m+79iH4VQk+WKTmgvtF9cbD5mi+j4cmSPyUYQ==","shasum":"56c59321b6007edaa0d5e81dade49b6df89cf1cb","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.6.tgz","fileCount":5,"unpackedSize":83467,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg5BDCCRA9TVsSAnZWagAA/SsP/1CF5jtAEjc1Xp1+IXPD\n4jueIDne7aVDN7kWwkDFf7tSQc1+ZzbRUtr8zQiyrYncWOA72Z6yqvpBpwOc\nmp4AYx8YAx54aP9SfAtvpExAu3Rp/qwXyRkLYWXZbTor2lMgVAHxxv7ZQxSW\nfwyYTjyvl6XnsVHLQptIxZHNHX93jg6xrQ/SFDUUtddArX3VhDW+knXqJVcx\nHussVAkwcESDQeqZwFHtlrfk7kZG5bjO1gr1Vm9XzSMhWf6L5TKjjxhhjq2g\n3FTrqbKncnzFdu1LKpknR9hjjRyLEgFT0F8nCKulj3Ul54p3BdB76PqQx0zr\nJhgcy0avKleaCNidiS85iJq6ru4wkOtOeUVJKykKX+InkPv+v31H/VwXeNmK\ndzuqtlVXExRE0eqxK8ys1zG7tTSqE3Ps4GgGu+SUzPtRntAu0plfH3DOSNsB\nQh0XxGldquCnX44oEnER940ZVPXh3t+g3CyPO502fg7sKb6Z8RVHxiKrKgFr\nUK9u7WI9t60zhYtB0AfTBerVt5aQ/FBRecav97PF2yOUbkdfRauea27Y25lO\nlJUiE8WyBVVUgSvs4ZDbt3ud72U2GQ66Ti7JPZPynpZkMs5xYmEICn2D3xm1\n19kZY+FCDCnDBIk74ELvZtGDP5tT45yQoOKe+nQOal+sAxE9ABt8gPseaNjB\n9Xop\r\n=BZlS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCID6L1zPMEOxJR/zbYKj30+WKkx4O9Pw0FJ5ZXJiWZdOUAiASayNY7fQFiGrJhDpUc6M2kL7VBNAZ1RdQyd5dOTiIyg=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.6_1625559234364_0.3814591768050357"},"_hasShrinkwrap":false},"0.17.7":{"name":"@sinclair/typebox","version":"0.17.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.7","_integrity":"sha512-eu/XpQu20LHTjMnuOkUlTYwombrAF0xLAvDNV2MVR6RHXfWRp7iEEz87Eef0FEkiitNeEoH4BtzLBKGAhfH7Ng==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.7.tgz","_from":"file:sinclair-typebox-0.17.7.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-eu/XpQu20LHTjMnuOkUlTYwombrAF0xLAvDNV2MVR6RHXfWRp7iEEz87Eef0FEkiitNeEoH4BtzLBKGAhfH7Ng==","shasum":"fdb7fa1e3ef0f2f943c0bb8f375427c27fcda280","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.7.tgz","fileCount":5,"unpackedSize":83576,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg5EOLCRA9TVsSAnZWagAAUK8P+gNVPMkwMdaRopwl9qs3\neBI914+OhxR3A2WRZWqcG/bqp/+MHv40n4ZtIVedKkiOgoAMT0ueDsSAJKol\nINjjfXO66AyCMTRBZZhVdFCmec7O3toLLsxxncIjmWpXD+Ge2wUhlaVv+lrc\nDsa88a7snByDGqnaCfwRWCAl2TuIAtvVsUMP3SYtKenU4T4sKwjFabX5vphf\ncIdoPjRUpFsnV/UNSsSuTm14e033t+orL9axE5oTJoxmw1kfHb+4QEBbTIBn\nc+ehFG9a49UyWj71ZxL1MwdRD8noC7aDBKxqOYLl/FDa115M58pfFJhGQ2t6\nymYMdhIQkegS8sT/QiHFDGOZk2Ij0JOQRTMJZXfywHetGUN6OcUfso5xcMpP\nIvE6+UndJncpt+zpU9JA0CBzdwVdYQWCXtlRbx3ow3DHWfAZDt2p6os0W8Tn\nQw0vWAor3Q4dNxy0rxMWxw8VolgI7FaDR3TIn5H2/iy3vC4CuvF3alBs3XG7\n5ndvdWHkPoa9bmqefyYJA2+pxiB3dNr9r8CGlYfDbHcM4qveRABNE9PZcB57\nKLi5EK+MQIG5GzSyqDSZKYf03cYrbBZbAyYc4X/+ukD0CDA89xP2gfUxBYst\n+M44EHhxb1vqK3wvnc7dAzcUkG3dYTmp3ukRi2u1vPqWrp3JMchoksaQwt/u\n/5tW\r\n=TfRn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCFE7TxKhecTNqs2W610AabWZ1FclP/loAm/NLV3p4htQIhALRr41hpagOU9PktBYKJPGDtL9RT/LzTGTdLHzbaKMfs"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.7_1625572234774_0.9448630897017243"},"_hasShrinkwrap":false},"0.17.8":{"name":"@sinclair/typebox","version":"0.17.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.17.8","_integrity":"sha512-enm8ET5E31RYbzGYPB9p+CvRzURrNEUCS2EvUxYQCdnDJw6wBpn6N+TK7iIumCc6fTRKgoOX1InJO2cQYZA4mg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.17.8.tgz","_from":"file:sinclair-typebox-0.17.8.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-enm8ET5E31RYbzGYPB9p+CvRzURrNEUCS2EvUxYQCdnDJw6wBpn6N+TK7iIumCc6fTRKgoOX1InJO2cQYZA4mg==","shasum":"9cef4c284d2437368d90fc36a002549681e7263b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.17.8.tgz","fileCount":5,"unpackedSize":83695,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg8AXoCRA9TVsSAnZWagAAYjsP/iET4Vz8EjYHvsW8XL3i\nsFCk2OypCvTZ2ovSGrkdN3ScrZDtAyYbYNv47QNoC+d+ydMUPFeRQ07T1fPF\nQslH2vtRAU/50NFRcNeLbW8apOYYNiQd9kZPAPcJz3bKsXJJL7sgZObTBWaw\nvW2G7sL25gp21PojhZ6ydTAxSw9J1icda/aIjbTxQyknhVeKLy4CByZ+XPEQ\nv0Q/zylsyFIRHLGQQtxVVs71ERSgQ/eXyoFBahi3Az/0BFd68dp5OPq6N31i\nZioL4zjPhg+eha+EYI4eSAOLcHYMAfC5LlNwEdqI73KOVhM34dqLpa+U4pok\nj8n8Acmw7nyNfIdWeLU1/g50TWTXkwt92wOKzJfX4MtQIjBOM7eclEdBTP4I\n2lWWZ9QKDDVd8evcRsV/u5Lpn5D/7QOvoLvMkWk24ghaa8dREkzFb86Y+0Du\nP3XWDazcz+WXRBLjniKfTeH2XBLRQbZR8u6sazz4hZs+KS+X2r9L0wN4OrFC\nM6f4v+s6UbDVv39cvfPMu6y2TLqkyvYP0+R+pgAcwJaEAp3lLBjAgFMwedSK\nqme7oObxRQiMxFeqKaHU3a9RZ5Lws73XIEbj+bN14E08YAeVgXtRn+nMLjB2\nGuQuIqDbr0AWWsFV7pE89uucW5+6mkGCsdk/G0n9o/PBXwHhKT57VfqDTsVv\nL8WQ\r\n=mzwL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCmTyd6+ecA3NIN0xxCCj436V/XIFWwPGtiPtgbCbalQQIhAMiRnh7DtdQDjVvf3swLXnSvvqtiP0G7x4vRW8QnFCn2"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.17.8_1626342888438_0.3249582033709708"},"_hasShrinkwrap":false},"0.18.0":{"name":"@sinclair/typebox","version":"0.18.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.1.0","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.18.0","_integrity":"sha512-VfCZfx5BAF+NpJV+XIKqvQvZbbXCKWyTk2QYbQ8GD2BN7ipnITaKTNdJGzFQ1fZn/+4eh8tlisaNA0RLxG8isg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.18.0.tgz","_from":"file:sinclair-typebox-0.18.0.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-VfCZfx5BAF+NpJV+XIKqvQvZbbXCKWyTk2QYbQ8GD2BN7ipnITaKTNdJGzFQ1fZn/+4eh8tlisaNA0RLxG8isg==","shasum":"c7f31bd7ba59634dc7b2468a873b78553b680342","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.18.0.tgz","fileCount":5,"unpackedSize":82841,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg9wOZCRA9TVsSAnZWagAAYxcP/1lljAFO837M5QnV+Sah\npmv6eu5qWEllHDzYS1KDptsCBOtrSAXgqR1hia3QBQgOg0DmXyzSsTz2TNel\nhgSy+d/3+1SehNv6pq259tEF2DrQoZ0G7uAT2YT+VCpiYkGTLPasD+YXJ/UM\n42patIoyDLFiWYXH0T7w5rJlcBXhNALDBLgLIEytjLbhJAvs5DRTYXBozdRz\nOOrVBQdpsWPYx/ERzWUL/oQKwo43X36Mo5wZORm3QFPMXXtjlyYxzfjgQXkv\nWccwQFv2V6pPdfVeFSHsZQY5mNPU/9y9oFfTSeZwnUkCkDDVD6e9rlf72eaY\nskHzhoIsFA8VYpP2alpKn1iSClcPzE5mIx64eeLjpM46IjX2f7hyxrpBsK1M\ndv9WtHILsxSlQD3pZpigSVxP2oUtSvFLjFuOkPW1YZ9oYCimtbJQfUF3Rbug\nklNYdqYg99mAOhmikik/TEFjXkNnG5ez03Kk//723Zj4A3SNCR6c41wwKDee\nazn/TZ2NZ/02tNyMUTcdz0PQBgGGGw25+M5gNzSlSDPlCcLlAPKR6PFqfSiM\nmBxOpPVC7/FjRf3Uz7Cx+2lmNksWZQ5LotvVhRLShFIEEA9CkGL58EO8YWVG\nFiLmxfchb8aIOPTuuw3dl5dGfLGTVhj+PjmZ9efnit1jH6DrUqkf+OKH8LDe\niMET\r\n=uy5J\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFDnv3aL5tWWyltGX692GZTcJwZ5Hskz1vhlcPekGbe/AiEA/TKTnLFjOvowca4iIA5VEOJjodCBikCba4FwCu7jH7c="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.18.0_1626801049293_0.5774701300342711"},"_hasShrinkwrap":false},"0.18.1":{"name":"@sinclair/typebox","version":"0.18.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.18.1","_integrity":"sha512-bl1omaQJ7RKyEmhfQGGIqv9XxwngP0P1MpUFhyBQZcLpFQyNu213DRva8NMorkf+YpX833IUZL5VrqSkaCOL7Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.18.1.tgz","_from":"file:sinclair-typebox-0.18.1.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-bl1omaQJ7RKyEmhfQGGIqv9XxwngP0P1MpUFhyBQZcLpFQyNu213DRva8NMorkf+YpX833IUZL5VrqSkaCOL7Q==","shasum":"2d01fe5109dfa9b97188aa98081b4ef2c9a29beb","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.18.1.tgz","fileCount":5,"unpackedSize":83888,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg+rl2CRA9TVsSAnZWagAA8+YP/2t11OHyFu3uBjuEIdQG\nhy1IN4nKwNRvhyddi/sLoIp1YfZ1u1H5M8AdTlp1IGDqFi8ox1N1dRWUMh2U\nsg2jSO5tB0KKX8cGf5gqKsJ7B+J/z/DkP2XVe9bzczGDAQ24tBrVNtS1v+7r\ntfEGiYIkwB957Jm8SFyo627t5FbgN9x6nWH7mBJBnZemWExLMPfVSmCnaLxg\nURWW61giIkDaq+SFD36nM9A3xHak57OBk6vW14EVeq/es2HNLOE3zdoE4AXS\nX8lkcfC76H7G+tE2XgCzlvZ4g+QHuZ1QIbiIZSBJgjTk+HZvnVSUXuKsltq/\nTvoOfGYOK0IDhhhK8h9alzw7b120jYngWtoSX7qUG5KRzJY+2MKbJgoAUxh2\nKa3BUupw6LVrm54ItDnnbii1rlZ2+10FieFHE9UEuJlJlc5uMx1T7qpuN1yg\nDwT9CHW8dldG41pnAEVY8EZMYkNX+TguzPmepid87ETGc4HMGuKOtdRxusZZ\nG2pFwkrRNn+eEVCBLXJproowftY/bCCDzB/Pxmdhz65SXWxOs1QdBriN2s1s\nH5TYPuSDmOimCG7K3zHPGcUHNSXNL2oMOndMvyBpF6m8cTAnfJ0QEetDmbNA\nr27oXogC4D9RLMVKtAc3vnqSMCGbTHsjrhyxCwnUFQv7eaksIfySW1XQ1BOW\nX04Q\r\n=lEXK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC8QA7d2m6cmaLL7xdGhjvlaMeqYcUiQNn8zq7OM+nMlAiEAi1TdQMR3LTJaj5d7HAC+04A6tbWcZfargVZMOicgb/Q="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.18.1_1627044214754_0.17873792461189275"},"_hasShrinkwrap":false},"0.19.0":{"name":"@sinclair/typebox","version":"0.19.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.19.0","_integrity":"sha512-+jOcKa/HVQgT+UuSsupGPdyJ3L9xr399hz9DyVgbks0AESYPkOkQNgP+CwySEjqqJcgiL0AzIPz9Q6+P4WxLOw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.19.0.tgz","_from":"file:sinclair-typebox-0.19.0.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-+jOcKa/HVQgT+UuSsupGPdyJ3L9xr399hz9DyVgbks0AESYPkOkQNgP+CwySEjqqJcgiL0AzIPz9Q6+P4WxLOw==","shasum":"6725fbdb1dce93d9ccff3b82d487277a1aa980a5","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.19.0.tgz","fileCount":5,"unpackedSize":87365,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg/UfDCRA9TVsSAnZWagAAG2EQAIj8Pu4elbFf2byPTtRj\nJSaCcz7t6HpToom916tuPDbV4wNZo4NHk95UegSViUbhOf6Dy3zvYHya6G2a\n+3qUG3tnFsHTnIAoqqKzP5jJge06+IcZVknsms+3612d84r/POKrx1tMelbt\nq2+pPCm5t5yGgFKxptqXiHo2GG/zKF2Fp1V5YfOPdOGOIJFiruiqYsODMfQ0\n0dTsvKOtBFO61lSeFBzkUIq3M8vHRZay314db8ZA/5jBOAg3/hR4DbcQrrGl\nNmkNpfQNSA5UytHyxlApqdvhldzdggq4WPIRGq9eSxi56K6e9JDhw2MW3OzS\nzcdLxl8jUjRzFF4EnRK5bXI0AocAOP0wXmuIgRoqhe+cMTqqcqvjvRJn+XIO\n9Ibfw7v7Jl6nPQ3+k2QqFrFuooecpwPWMmX2ygE4dkNLG/MLpTDw7CvNrxaO\njAypEFyIe+5t5liOAhsK8du8VmYpmWdrUcGjlzWBTKZgGy22oyKRyKqIIp3y\nwzqwae+tnVcrzD834i2gfCkLx4itoYT0S7ksNCvgmOePDfuZ44nMptZVJ54a\n2BFIV4Zn42nNZTKLdFi8RVEuzQtdsC73BeVdpn5S9H4BI5Y5EhZ1MHR9dqxb\nDcZeuSoFwTlWsoxIWGKcOp38VgzvWTtppjx89XMeRQoQ5C5fHmWCVc0paItp\nXpfd\r\n=qFNz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDCtlLcwaW8t24SJJa0j6X6pR+GPu1QfOnYp1fkhN/XsgIgG9KKmPTDgRAFrD+MLjBj198eotO9AC4cPClySMgMa6k="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.19.0_1627211715254_0.6394675172760469"},"_hasShrinkwrap":false},"0.19.1":{"name":"@sinclair/typebox","version":"0.19.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.19.1","_integrity":"sha512-VQW34PPRWPX4d7RpHLqkMDQhcrcWVmZtVVh0KAblBbUAaosapAb7I2G07hmkxhCYNkWAAN9tXWtb9BFSDXN4JA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.19.1.tgz","_from":"file:sinclair-typebox-0.19.1.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-VQW34PPRWPX4d7RpHLqkMDQhcrcWVmZtVVh0KAblBbUAaosapAb7I2G07hmkxhCYNkWAAN9tXWtb9BFSDXN4JA==","shasum":"705f1ba1c007cad2a465ce9fa892ae0adb026d6e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.19.1.tgz","fileCount":5,"unpackedSize":87356,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg/UiSCRA9TVsSAnZWagAAXz8P/2QKYsrUadzcpT4gCViv\nGG1eqZMAr8925nYMAB63eEYXBdGzDqdciqxC78PYOSbjsxd8TQCK0rvV/5B4\nXpvXbALAfS0HCTfcEsHVg/ie1kwWLMi3mjZVisUopxg3mr4TQGwrTx9ue2FP\n/bn5dmish3UrN7N/HKoVpiq60BWnY/oyizBClCVJ0ugobUsA764w1keu/79E\n4NhUUJyyIjasRZcP5z3/zKUuJMqJxcbF1znNbtMEqGFFZ+iVOphHxqDDkR0t\nzVJ4xJo4fVrqh7V1qIr/lJhcYG86OKvfGjBofQ4dIeMICCGpkY2Eqa6LO9dN\nhMhag2bVo8Wr+oLgL9hyRLhwfsejgzKpFJCPA0prcOH3rbQ5uial8zAHyvkt\nly4I2HqKQvAsR0KTxF/tofeMejyaakt9/zsYJsuz8bOTh96yJFXfbJ5/AGvi\nqhAr7GPJAnoJM8UXnuJVNs4U4XYS6JNeYJ7Fx9xwRrvgNSzKFmzJi13/K0D1\nUck4pWEs0rWXNpUKbZdIuH7Tk4FPSt36hMjm1Hgrqm3V3AzgT6OFcpJojMlE\naJgf+e4+WY4CPdBOoxr2STFSX6zU/IDP7Hnr3QIc+Fz5lEENVToN4E/dxnNQ\nGIkuyau7luwRrSpJWDArYa49UQX5e+CqXxdUV6sW4Z3pjaTM7OnVHbooLvbh\neLH5\r\n=6uFh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCWEa9H14dLhjtK+0jYtO0oYD30A9g5WsImnT3lc+19uAIgT/ca6QCfOP0H6kGQg2fEu4kXNJZ2ggYmeD9iNfJHDVg="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.19.1_1627211922333_0.10952095893133129"},"_hasShrinkwrap":false},"0.19.2":{"name":"@sinclair/typebox","version":"0.19.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.19.2","_integrity":"sha512-0U/RVPZQw1QxhrbKV0o281ZWI1Ve3osJnyEYnwOp3slydIQHyXumbJANJeNv9BqABDiHWlmzsxSVopPHMvt3Aw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.19.2.tgz","_from":"file:sinclair-typebox-0.19.2.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-0U/RVPZQw1QxhrbKV0o281ZWI1Ve3osJnyEYnwOp3slydIQHyXumbJANJeNv9BqABDiHWlmzsxSVopPHMvt3Aw==","shasum":"3a526594d6f652ada78e6c00be84463ae48047e4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.19.2.tgz","fileCount":5,"unpackedSize":87359,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg/UpECRA9TVsSAnZWagAAL1wP/RUFgWTFtF3HEMWXOFa4\nDDlYwz6Z5hnfRgi30fv6occbfiWYzWPl9O8gQB3ruXIwRZHnwcCX/mG9fWCm\nPZbBYCRLzgSecTjRtEPygjit17sSDipKl9iktF3hXzMj4I0BtmjNHgEqZjTJ\nh1IduiA24zUBSaQlXl++8dcCds2byy2aRWErV3ET5XbZupmbwwtXIB37rFQ7\n9Cn4CYPFL6S0gNyO+rbyMbLxlPklXrcQXr5vsMjdC4fTTfVO1KOzgsUEdBxQ\n3kY4deTx/DxJoxd4jGqNw7ag1X6PDmqv610lEYaCL9iWMGmWuPRT2wfsl7bj\natt/JlP7l9jB9w++WRiz8ZHSACH11hJgSty/amvl4MQR6Qh9vl7HQ3KKxA9B\nDzZvjesX3Dy3YhSCwqh16M5tfpda2EHzoypPqp7I4qlQd/89Bwcr+As0tSh/\nz05EzK0h8HvVxTdRmUxWeCkL6XYZt4j5tqRyrNDW5S4uMnsb+afZItTaW80r\nSUQy5nRf0jbRdtJQo15eliLpwGEassJPi7MUHB+Gkc1IvaqKZ8XUo6oc37Fs\nRn3ibDd58X30qc+EKuEFC49qZ3PosUNbYiTT+7qZxWMdI55J4fsEnnu9W20M\nTqoTXSnLORKDiULlWPiHvlKdQKAjRQbrn566PBzrK24qzOcpoJmUJhYgI4cQ\n2igg\r\n=V0iU\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCID0Fd6d+1z53CTScxqEUZotrw6szK7lKRiUEUJeQIPIZAiAjz2u5cLZ7MxOU3lVpRVX7cx0pljMb11e/fylPmH6W5g=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.19.2_1627212356267_0.12027053311482261"},"_hasShrinkwrap":false},"0.20.0":{"name":"@sinclair/typebox","version":"0.20.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.1.2"},"_id":"@sinclair/typebox@0.20.0","_integrity":"sha512-qFKbghRt4sutWEQYchceiErGVhunbCoCssCcOjLXN6vtMMyaycCQGGEgd1kGyueucONnnO+nNYUXLXATU35j7w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.20.0.tgz","_from":"file:sinclair-typebox-0.20.0.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-qFKbghRt4sutWEQYchceiErGVhunbCoCssCcOjLXN6vtMMyaycCQGGEgd1kGyueucONnnO+nNYUXLXATU35j7w==","shasum":"f0e620ea3a4f82b2fbbd16d89a92fbe5c869ba90","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.20.0.tgz","fileCount":5,"unpackedSize":88769,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAED4CRA9TVsSAnZWagAAUgsP/3E35SEWzHFqZHFtHk90\nnlPbHikEUXUIHaxbxf+/3MoCfHsstoHNEqOz0RjUgZcd5HH76/VnfBlX+1oD\na8baKjJx/ag1BwtTIZLmCbWX0xd8DYtN0n03vPyj21QkyInKJZZtJCfLZKVR\nL0WUgmM3sbBgKywCV8CsPfa4j6cVqiRr3sPwf4eUwUv+FU3c+EvyvjBRoeUP\nFRhKuMlCIbuMnZnATqEhRzd/L3L3576DK8Y8Xrj45OJcKm88dQO9wSoVOqOu\nas8RjI2kaNjIjD/yq+2UY8QMQBbA8j7wWeFaXi+OhgSodTw8LvxqahOPsfP4\nTu2rAvoV8HQJHslfIJtI9qZ4kHJ/BLHim9Mkrc2bp5bkS3DvzjQe5PBuMgqi\nfp+qhhIEfjrvVWqbNnzp8AefK77/NzOkIhNe/Uopg8RCW5/4vCxcrQp75+BN\nTPugXSRh+o3Oah7+H/I6cN1Puk5rZde9sr6O/WS0lH7O9xdNmrZkhF22e8uH\nZX4L0b3B5D7zFb4sy4LCDSwzpEUuAh0/xKm6Ddv52RCOGSZaVElZV7taUKKM\nxurXsZBmtxuqNT5BUPORaaGlQsEaedmN4a1hJDnqTCeSqfyLt6J4TvDnoSRj\nRrKPiBs2eRkFlWaVDqjW/MLqMdCjqbxjzLmim002MElYnb1XcSQXQ3/G76hr\n6o9N\r\n=+GrI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFWVAkTBG8FC3glLqsBJz59n3vtF4n5GX8xijs149jmmAiBJWxYKOk6GQ7JRkXrXV7VFrmXKdXMeIsgN0wRaNpuExw=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.20.0_1627406584783_0.6071930571258608"},"_hasShrinkwrap":false},"0.20.1":{"name":"@sinclair/typebox","version":"0.20.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.3.5"},"_id":"@sinclair/typebox@0.20.1","_integrity":"sha512-uJdygXCzArkBE7sjqPljYaCKcWP3frqye46DLYJCjGgWKAKlMdMdO2g4K33uxAiRdnTAItBu6k8nQzpVLE9dxA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.20.1.tgz","_from":"file:sinclair-typebox-0.20.1.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-uJdygXCzArkBE7sjqPljYaCKcWP3frqye46DLYJCjGgWKAKlMdMdO2g4K33uxAiRdnTAItBu6k8nQzpVLE9dxA==","shasum":"7a4636960dc31d95d26d831f177d39d58682744e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.20.1.tgz","fileCount":5,"unpackedSize":88779,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAEuACRA9TVsSAnZWagAA2BQP/iVZYQYqj6n2S5OIFFiG\nM8f6QtbvcwsqbHx+F+Bs5ZHPftWciG/t0Lb5d7xA820WatVAL6kQJG4uMU+g\n8R66QX1ftQNbGWhsRDiAxCmGcK4T7qBMnlbIuneuuz/wiR1XAlAe7vPSz+6q\noamGEzH7MaHBXNaRXdBZMR7LogUuaKN5weyPNF0/CMVk4fjGJ/q6IkvpgCoM\nx6X6KD4guHvfHrzXnbMFg8kPKgUUfcqi3of4f6XymOnSM8U8vn/0Of6W2625\nLEOsEZ2EfhwN863gHZioicRgVB2w0U+ISqKlSpbSrYSFG5b6YRW3mt/Ib9zU\n/L30L3n2Z5wL2PTJnjOGDwuwH6Cq4owR5HH/VML6i+tCNivfdpBZJ4uHPlnI\na/QQns0K5PfkQVTeI++/FP3Bk9gxoatXNpN03YfQ3obmEiIizFovdL/Zqiln\n2hP4fUggT8AZGynDuO4hkNeEOi0RlvtCf55gbTWWZd/EOkyg829s1Nm7bOHa\n7uAiGoLuqrkjbZALWw49URZTVTPRRQMtBjf1AsyUwEShwBU5q/rj05tIawgW\n0kuvJd5JxGWoRXOertEICgYgFIo7Dam+bLTxwfIrN+MjVLDxb2pZC7yKE3bW\nAxEbS+edv8KF0ehlXv7dTRqe38omxBopHUrSCfRDZyzvjvogeqWqczfm1QrV\n6gQ0\r\n=TlYA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDgM+0Ys1u2Ikpgso6dETUw/817nkJcC/Sn0NHFnUqxkAiEAz/amhv5yATPLs2BzP1Cl7YtfBxqs9ggLNwf/iK8tlNk="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.20.1_1627409280763_0.06865223521231445"},"_hasShrinkwrap":false},"0.20.2":{"name":"@sinclair/typebox","version":"0.20.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.3.5"},"_id":"@sinclair/typebox@0.20.2","_integrity":"sha512-AL347st6ZPLjvN/Pncs1O1C6MXOPgcEmgbt7+AQVfXPhwMtedn9EpzvjbvyveDPBF6iuwSZN9D6UVgPJybUgng==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.20.2.tgz","_from":"file:sinclair-typebox-0.20.2.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-AL347st6ZPLjvN/Pncs1O1C6MXOPgcEmgbt7+AQVfXPhwMtedn9EpzvjbvyveDPBF6iuwSZN9D6UVgPJybUgng==","shasum":"9b43ce3b143083b4aa67bab8653005c506a6a158","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.20.2.tgz","fileCount":5,"unpackedSize":88471,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAS7oCRA9TVsSAnZWagAA6RwP/0FpKBRmWsx6flxLJh5U\nyZtGzDS9fSOq36pj/Yi1HKywTyXDVwGZ3y9cfUqys5LQBZZH2Z4DanmLhYqO\nbLyiBOmjLwrZloQ+2JhBMPBEerUqvLGX/sRkXhn9ccCYkg6ES7dMaFRlD5dO\n67a0KL0WCzOZM3gp7kSLT1sRbD+ejcJnvRmb+YMqeozOFCd7bV85757dKnA2\nvYkxxgiJoQYR6GYqnMtvJWyOE6lMSp3zp0jeCBv6PT+e6BSx8SqBsor2cZdX\nP6TSGlyO0U78nfc9Xsxxdubt9gqCiO7Pa454K1zT7YuCbD3/eb/8vd6Z6k3p\nECXiLTR3PfcvmhkOOjvkEnLQnC4wdzgt8kG09ZYGJma4M3aoGAfts5x+ByEe\n3sPTaXBUHVHulRMYaBKZ7IS6AnQG2KIMtfnvOGUvAnX/oLEFf75JZ+2Crer8\np2RxX2Yb4XfpHlKwA42jFEJOAshNJQwOzHGTf6tmQAo8CHqv9pX4ID2juHVR\nKTDUnZa06/iXqAjlNZvpVYQ9aQaujeEmXq7NcbNSx5mcKxLqit4CvWqxPcE2\nqW2Fe8t76eoijMNLC9aZzrooX5+3lXIFaAw7HglMfCbyyu14sO4BedwGpyLL\n3pYQlATv6G4gFJCJeFdZ/ItSBlBMqzNBe+Hr7v22F3ikqc1Y0jv3VbB6GMGP\nCDd9\r\n=k19y\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDXhwtkWvLqohW3KyV7im2vxjx1wT7TzKFyGOGK8C6qQAIgA2GPC2dvBDGPvZA/DAVwTXIaz07NHHpKzU9TOGt+QIU="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.20.2_1627467495986_0.24338420645370618"},"_hasShrinkwrap":false},"0.20.3":{"name":"@sinclair/typebox","version":"0.20.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.3.5"},"_id":"@sinclair/typebox@0.20.3","_integrity":"sha512-8qopxzSWCfjKtVrjbFmIoQRJI/x7fVXQc0JrV3XJw4lzaREpRUh7OBsRcxube3T3RXxv1ztPH+BSTqwPx4peng==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.20.3.tgz","_from":"file:sinclair-typebox-0.20.3.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-8qopxzSWCfjKtVrjbFmIoQRJI/x7fVXQc0JrV3XJw4lzaREpRUh7OBsRcxube3T3RXxv1ztPH+BSTqwPx4peng==","shasum":"597c30cbb2c20c6ee2ceaa9fd5146c1af968eb99","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.20.3.tgz","fileCount":5,"unpackedSize":88597,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAZr1CRA9TVsSAnZWagAAehgP/1E3wM9W9otjXcbJR8Qs\ntFhIX9SXm541uVBIQ6AOWDdakm38l0h29i+b6XuKej2XS2CnE3/e/FwxG5VF\nvDzsizUga4kipJWC94FYkGEhgOVnoMdzjcphl9SjMM8jH5/FghCPFW323GFf\n8DKvfm5HuOk9N3BCs1jZnCb7V/ICk2UBRr+gO71jlQ+QF8ZBFBRg1aeFTVIR\npktmg6ReLPjI/OrYME0gpphnDJ/7TCS/SFNq1wQkkt+GFsZmVzEh13zjJ/4j\n6eJI5kyYhBBLAXjlyhmFLkI2LiU6q1BfzL1xwO8WYIdJg659DU3PVkwDFStO\nKTmeZDLL4N16UgtAPxCTwXuOC0IFYmsvIK78Q8FPsbGsyHJG1/dQX4U7TqKT\n0/rc0BHYQi7h0MsJr+TqfZZTgPT+tLdAwSca+s7tHSVcgSLfFJ8tBk/662D0\nd/U4aAqi9BZSITyy4QP3x2ggwVDYJbywhe17GWLtPpcrkTXm1+7VwacbDYeQ\nK+vjmqccuFQGSz5IdSsQQwqMW4H7HPktKriVbtxRsnRaq9+7kshomhKYVS/a\nrEJjWBJUHgXylKvzzkmVsUmxwvVMrQBRMmLQ2/mxsun2DhhywGarSikfhAWA\nCjg8bhPk1XvroCyNrdUSfxMDpMuCkkermTE5lwvExQ9SgXqnP5TPnocwkpD8\nXHN+\r\n=P1Me\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD1ywbVnKdnfEXjlKKTzyIXSy8jupkiBb0oFxJmVSz/xQIhALrHfTzsYeXEPwIKi+qiKhiHOzX5DwMdSHtU7Ra3Fn59"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.20.3_1627495156970_0.4899278222479988"},"_hasShrinkwrap":false},"0.20.4":{"name":"@sinclair/typebox","version":"0.20.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.3.5"},"_id":"@sinclair/typebox@0.20.4","_integrity":"sha512-cWmUFRMdGanzrrDzE1uHyWG0FeDGf8EWtzxbGQ0zD+Dad8Y4f0xSBe1kK+27TWQKQKcC9/GuOTysmOqaQfK3Aw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.20.4.tgz","_from":"file:sinclair-typebox-0.20.4.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-cWmUFRMdGanzrrDzE1uHyWG0FeDGf8EWtzxbGQ0zD+Dad8Y4f0xSBe1kK+27TWQKQKcC9/GuOTysmOqaQfK3Aw==","shasum":"d1c68a9aa320f2e1ae77d1bed595c03b3853176b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.20.4.tgz","fileCount":5,"unpackedSize":88476,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAaHfCRA9TVsSAnZWagAAx6MP/jLgPqE93mRcl/6pUu9i\njdT0OPJnecojXdxMIWPfVPlHTDuHOPE3f19owPJv4J7pRKAMai1E/Y+5Pg6V\nKImkgDBBDQB7WQ3ffg7R/IL5Y5k+jkZ4QKdujCV6RIDpd6OjnW+KAzGcKfLR\n6s7kpPmEymPO7AwdX/KVT1S1z1OIZSFQf2bLIcCl86PZNPnPkhBqahoQcDUg\nyexOcICKxAp3UqeheweY/0rMMmM9VYOyVSidHWPbjT3G+2T1tbNi5meQKDES\nsRAzRKE859eqC5OS00vXT65aDXTIKnzjLqZi2jRZrSjSCwzYJTdXtp3rPsYh\nz+zATxHHi5sq26zfF27oQJcNyJ62C2j0tavzO6fPYUtXHCvlcEw5N6V5/gQg\noZzi9aaF+WkvYwXTMJqdvQpguqaeSzVXiKimwHCk1Vu2MvyEHgIHWzCa4xK8\n8UF8NLkXKt/MBcfqwa2uuETtI6+RRHHNzNbGgb38VglNTMbZhSwKY/CKm3qN\n0JJz1x/LEbAK6cfSSgBOkMTwYd6AbMUnQ53yKkjMLUq8TPpZ6fKBhqAUtMS1\nkopZY6mGzlN2+B5rENMVROpWo8L1qYxCMzcWUnmjB8ToCvv2aC9fq/s9Uy/n\njhgPL9vlukiMNII/mMWf8DT+1dmjzl478RoU/tXmJomPf1E5AxfpD4fF6SQA\n8kSa\r\n=XQu3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFlHyjgKghOqSw8A4MXgaMeGAt45eaoJieWc1d0VajM9AiBuxn0l1mAo9BiZVJ3RQd2LOoyAzbqyAYe5mMVMOJmpwA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.20.4_1627496927349_0.32029499895032143"},"_hasShrinkwrap":false},"0.20.5":{"name":"@sinclair/typebox","version":"0.20.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.12.1","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^8.3.2","typescript":"^4.3.5"},"_id":"@sinclair/typebox@0.20.5","_integrity":"sha512-WNiVFcS1rdz5KyEutpl3Wmp/AwSQHBUFTyJz7KqMLkpLhOXCj1dnvMytBM6uMS5OTwhwwq877T7EC4vDGrX5Eg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.20.5.tgz","_from":"file:sinclair-typebox-0.20.5.tgz","_nodeVersion":"16.2.0","_npmVersion":"7.5.2","dist":{"integrity":"sha512-WNiVFcS1rdz5KyEutpl3Wmp/AwSQHBUFTyJz7KqMLkpLhOXCj1dnvMytBM6uMS5OTwhwwq877T7EC4vDGrX5Eg==","shasum":"d5828bbb8237876d7937dd229e3dac71d1220771","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.20.5.tgz","fileCount":5,"unpackedSize":88583,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhHyuBCRA9TVsSAnZWagAAQj4P/R8jHLd8OEwXecq0Th5C\nzEsRG6ApAcgpo6n8eG01Q6d1DT5wjxYClxiLNRyg2mLCCZt53FIZFW/0Onnk\nXPAJ18swCyV19SnGB9AcDopA1JHOz2zFkGC5uRjF13tcHPnXZKS1tSfTRh2g\nuTbvcVfIcfSF4noCBQgrT7LO5+wrdDNVL4UCnxgZ1XEOD1sRK5O0Y6Fo7pFS\n3+w/OJrwY60NFj46ETrNHV2NkLvtXyJx+3AmUddMuhfhiF44ZU+Xgmyuzga9\niDz7ymiX0cKD9pSujnrz9FE3bcY1kdM+NHveNU+r5Yo2fs1cVipK+U9zwuEQ\nXMzlkJSaAF+G4iZ+irOyjSmYvNJ4kEe6EmKpK7JOf4aTs6kqOXiIB45wsnDM\nPshQ1xrsaYDSkNHyfqYwTtxq7ujjDvSgetjSzUTIBfnan76/10nvn6TM2Rdk\nRYHwm6c1ytQbJXn+T5ES8ehfsVQn7zjy019av8oAhQsAvGJ/C5LbmC1uRepl\nVGlA4GuEn1cxqg2bA9tUM0jT7lRPj7lgjeqnJ99I8rQN8A8juYbdeuTP3K03\n1tCEkjZKOdeY3sFJGgrNr04cTupiGkrngZ0zAmc9hg+nIlUZGOIHgI2rx4Bv\ngioPqtRChAX6zivRa9zixKf/VUczUYIi7ir1iwR4JCCYgX7Wqmo0JUoeMO5L\n0O02\r\n=Ohcr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICQ5HnDDytx5PS9puxfBKZBD1gNyFlrGb9aCLEfxYHgMAiEAp3fU2tywdOfLQ0DXfRyPhrT8GMyLvwHaeMJupXpfOhs="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.20.5_1629432705504_0.5948338219699616"},"_hasShrinkwrap":false},"0.20.6":{"name":"@sinclair/typebox","version":"0.20.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.15.7","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^9.1.2","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.20.6","_integrity":"sha512-8/y8a2Xerrfym1W0lNtFe2+1OsWSao5S7A3b2375+vcAIh0pdf6Sgz4FH2dwpVnH9bJeIiq+RvT5pbEgM9Q28Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.20.6.tgz","_from":"file:sinclair-typebox-0.20.6.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-8/y8a2Xerrfym1W0lNtFe2+1OsWSao5S7A3b2375+vcAIh0pdf6Sgz4FH2dwpVnH9bJeIiq+RvT5pbEgM9Q28Q==","shasum":"98b08aafb4556b85e9ba78d5075aed23cf04eca1","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.20.6.tgz","fileCount":5,"unpackedSize":90344,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhli4QCRA9TVsSAnZWagAAB3MP/iOuOln57tWg8NHPBtUf\nndvvpOHco1VrKRlfuSNEnMSQWgjNzaOui7FMHF2sJFCfcT/BPEfjkedOTEYA\naSMb7/d+fa9Vjm9zymXsRKBAnQ++o6hKsY5UZBezPeASNS6bNx3XlgV5pL99\nwxLDmNkZmyXeE9NsOeU8lnP2KEEHedaDfqx5pALec+SaZQS/ZpE/wnn5cAfr\n7JdrtALo1Vk8nDIJLFaYhkfcCqQHxV1TH0Fh3Z56bKnCb7iiXbunFZO3XX34\ng4QCiIvOtTo8qpD8T/gvYFNP4wxmnjsFcoVe4eLbmxtVnnytboZWp/Of4j0t\n/Rrm42x4qnJ2JXlsMwcRpyDC2XX33S2PITWEY0PD8v8N3pxk660deojYV7zL\nyFC0InpMQgfpoSKxVW1lIdm8YL1M2c+yz3dZaPJMkUqL8SlRpQFPlWozkDPc\n8jcTh2hLQ81KAad0NcrTFB0M+5e1wfVG7a20nJ0hqz0FZSo6GSieUKBzETyS\nTowrFOdYK7Eq5SsIwGk5OulEMeuDaEPVEiuIDnkQJ2feddwAZBe189NldoiK\nzq5Er7d3NrY+IuKduxUUnpUnv/K6BrvEAh6/ICM/lRfTFGmCo4EBG80/jsRt\nbdL4Pkwg+ZGAIKBZwR10Zj9XxAtgUL3Tlrk4Hv35tXFi5WYBCrTY2Y02E0Dr\nOeXZ\r\n=z+Bd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEYacq9n/6nvl6ZrIvxaP+tXl8KZ3oypYo8cTj7kTiANAiBKnh31RsiZhNfebQR2OraNLw7KduYhmvx8JCdCEZiSIw=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.20.6_1637232143952_0.6897018829331245"},"_hasShrinkwrap":false},"0.21.0":{"name":"@sinclair/typebox","version":"0.21.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.15.7","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^9.1.2","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.21.0","_integrity":"sha512-UVtAtxCHhixACtlZAvRCS3pBNOPGwYkpY6zpHbSEyOBuTmYunGTzXlnsD/+Hu61l9xdF8mqyebg8lnzMOr/Vlg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.21.0.tgz","_from":"file:sinclair-typebox-0.21.0.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-UVtAtxCHhixACtlZAvRCS3pBNOPGwYkpY6zpHbSEyOBuTmYunGTzXlnsD/+Hu61l9xdF8mqyebg8lnzMOr/Vlg==","shasum":"fd0fbdcc760a00354a99218ce78e00c05e78fead","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.21.0.tgz","fileCount":5,"unpackedSize":89205,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhlqf6CRA9TVsSAnZWagAAdZ0P/0qWTNrfeJOqh/UnLeug\nk5qZ/xLsjZjI1hn6i2VYE+u47KBQEhryDGxrJpCiOYlB3R1qEE52K3JUQXhM\nFxtrMAJ86RgRYsO4gxfwxndfepaA7+6zQbNzQjGjb8L6cRp208Lx05+vR86g\nE4Hy95UdQxX81CmcmfDlJgvjUdM7md2RkJytRKGEJrubsvo/EU+WO4UF0lOS\nIqOEq55sHirrSPe4/X/1CzCI/2C2XMRFi5A5PuKqpH4gnaiZ0BDHlWH5hZUT\n5P0UQSxkPYwJ/wGE0wl7WGGkHxshpx+zsaWNbO11wU1r0JKbCAf9j9zCQFWe\nMLaCQdo3YE+4t8xW/FAt99vxxDpfg/SbCQ6sKrl5zqifF6/X4lFMETc3+SDT\njl0FL6Tn4Wbd+hhvhqeSj58ejLUaE7ybyHNBczZ8t7QVrYv6K1v7DBwxFjwQ\ntRiE8S2s5046e+lQQZIxbXIcyNpEO1kLpwsVwk4yigi0F8yvfHJrHvox0cBY\nqjy9VbZNzojzubFUmF6NgAYUkryz/EW7ml8Vj7QuXt7m5dniFe+zqprDgbBl\n0aVF2ZOfls+giJ9v2g9jM6sBryl5P/HelEsFDXYdIQF/bT80M4Me7kmjb6ZP\nCppmkKCCGCsiDCpDqFcTJDcFDU28Gr/C0T83mp/6+j1PTZiBhuq/UvwlERGj\nPVH4\r\n=CeoV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDl/KD8haJzR7+Ama5k/mNSawsv6vwNek/U7K4dEtLWxwIhANBstKS0v4SJJxbQucWWIZ9SLBDd5v6cjUmhn0i6hjXg"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.21.0_1637263354464_0.8851163995993059"},"_hasShrinkwrap":false},"0.21.1":{"name":"@sinclair/typebox","version":"0.21.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","test":"hammer task spec"},"devDependencies":{"@sinclair/hammer":"^0.15.7","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^9.1.2","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.21.1","_integrity":"sha512-pdD7wcj7WOu0F7s2ITLGJjwS8y+Vzbh96cHi5PccKFD/0NV4HmnW+1rVQhSnQ0g9K6zUGiHu1JZIasdljGWHaw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.21.1.tgz","_from":"file:sinclair-typebox-0.21.1.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-pdD7wcj7WOu0F7s2ITLGJjwS8y+Vzbh96cHi5PccKFD/0NV4HmnW+1rVQhSnQ0g9K6zUGiHu1JZIasdljGWHaw==","shasum":"e89170c12da6369a2099f47d5dfcdb1b5239f5db","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.21.1.tgz","fileCount":5,"unpackedSize":89500,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhly/kCRA9TVsSAnZWagAAV1gP/igfm4UZXcaan2ixr731\n2goA2yOv/2mb7K6e7RCGIFiySNPKUcA2ytucF5/b1FjPqTuCopNNABC/2ud3\nH7NrUlV1BHNVLCRpTkIT1CA6HBn4T2fOPMQ/SiqOdXiAG6iiXLpD53cRS7nY\nUiuJgDL6Y3tQ8NbTOl56gcryo/Y0rhPpPSPXkl0dDjdnY5vBFZ79lLdgEPzI\nR62yjHVYlS8HZWttWvVekjj3AGhf5KtbG0wo3ak2tAO4SDfAc+9ktY3Gi27T\nr3L+f6JqOvYDtcxxw2S8v78xzhypkgHTI+RHWv0/wGkbo0CXxVQviCuEDXVi\nJsVNZGlBnWBeRoPlj5Rzy862lLQbfFdJawY0MME543T1es6IO+PORz0mZuJV\nXqH74lMjk7KpqwxyoFIxaU2yWqkmhmFxpDgKFQDv0urregVVCSE6wyLjxlS6\nO6J3OvPdeXU13D4500hE/KT9WahjGTqnddL4vaOEybZuSVGBYdtED8/aYerJ\n/TGqcH8CgEpbRp97/dTf7ZtpE2j26Wspzy7uV4WVWXgrX5U8PFLuIf0o15UM\nHN1sS+2Y23E5K1zINgG4S7fyRAUw1DX70g84JVBdobCqAFB3TH+GoyaP2CXt\nOFRlOZCmX1QptDiz5UY/Gq4S1MZoE3kEBV2LG9Zo03ResOs/TOR0AoppxVc4\nN6Uf\r\n=UM8B\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIERslg/tkCFnKT2Txnk+G1LSQfbreJEyV6FF0vstaUynAiBxJaZuMwuiz36W34+OYaQgEd781V/zFyoLfEc+jvJ58A=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.21.1_1637298148539_0.654900276264692"},"_hasShrinkwrap":false},"0.21.2":{"name":"@sinclair/typebox","version":"0.21.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.15.7","@types/chai":"^4.2.16","@types/mocha":"^8.2.2","@types/node":"^14.14.37","ajv":"^8.6.2","ajv-formats":"^2.0.2","chai":"^4.3.4","mocha":"^9.1.2","tsd":"^0.19.0","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.21.2","_integrity":"sha512-YeGOsWyjmGS26VxfvxbDgO7In4em8riCI5hEe/NnjM72ifoLQNUeHxwFNufXVIcaaPEK4fCV+fYoLKgmpPKjsA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.21.2.tgz","_from":"file:sinclair-typebox-0.21.2.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-YeGOsWyjmGS26VxfvxbDgO7In4em8riCI5hEe/NnjM72ifoLQNUeHxwFNufXVIcaaPEK4fCV+fYoLKgmpPKjsA==","shasum":"d23a42adafc482f4893994e22916b0b54e18c23d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.21.2.tgz","fileCount":5,"unpackedSize":89921,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhl2J+CRA9TVsSAnZWagAAC6sP/0TtIwsnx+S8bwRakA9H\nt3iYsF1gvAfCy4t0pIwAu5O/3u5Svcw1Qo3g9/1HjWrdaH87nNarolbAlxoW\nv521mS+Fpxt/Y2zt15VozAIcHxrjc0uqSCYbf+Zwa2hOnhuGeLqvfZupR7ev\nsXsewojkQ4s35C8yL20cWKLFigx4PjXmsY+MMAJ2e+sOdBH43tT4EJ9ZD2jw\nfw0+oSgxw+3L8L6GgJNHooyyN9chm/1N0pECvQoejddg4cZRIpjDolK/A9CX\nRQGNjgxDyZDPmrvFm+cix54ux0+L2MQTCgi1yxwl89ihEnAF12MbHe+NO/ro\nF7N/iE2QHxoJXIHp9gT9RkPybRcFJWJz4sWfN5gyirABO1KzJn6H8RnzksCn\nYvAGL17iWgCYPkPY2uAUok0r2fi6EkubL3Cz34Q4CzT3izKyrWskEdiaRKyS\nklBvGlm/4OF1ox2qqAvy+qQxrwkRtIGlZZ8e5cBA8em8l9Rd+xoJbiMMrwEv\nvnBHy7r9gfQqeIhuegXKnu5w7wLrAukbEWZID7zJB1+x1r+NwkPTx+JQavYw\nYpxOx0x2P3IDJO51xnEasDPF0LtAxMDlkPGBLHyJRDyN0CsfE+ulZ8kJyiTJ\nZhReFvnrcwx7ahzHn7FBWlT1qp7O3u8NZL09tm41AF2eLUVZ4SYTbnnXhpLM\nEfNn\r\n=7gmB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA9YfJEwMhg1ju/qjy8nFUKTMkiMIowx0Zu7DgYn4Hz1AiEAkVU4Ws2XvfGuYCwfcG4+tA77dpCraR1UIPahiq9VmS8="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.21.2_1637311102264_0.5226018427532988"},"_hasShrinkwrap":false},"0.22.0":{"name":"@sinclair/typebox","version":"0.22.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.15.8","@types/chai":"^4.2.22","@types/mocha":"^9.0.0","@types/node":"^16.11.9","ajv":"^8.8.2","ajv-formats":"^2.1.1","chai":"^4.3.4","mocha":"^9.1.3","tsd":"^0.19.0","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.22.0","_integrity":"sha512-KEB7UiEMw43/x2urIAlUD1bu0JUTiTNcEMcGVM0pYq2mAHg8CbVQHMP1xGSCbPWpmoej/oaz3lGLO7XZN9AN9Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.22.0.tgz","_from":"file:sinclair-typebox-0.22.0.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-KEB7UiEMw43/x2urIAlUD1bu0JUTiTNcEMcGVM0pYq2mAHg8CbVQHMP1xGSCbPWpmoej/oaz3lGLO7XZN9AN9Q==","shasum":"503448f3b76d86f87342739621610e766103a5ee","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.22.0.tgz","fileCount":5,"unpackedSize":90277,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhm2DICRA9TVsSAnZWagAATUAQAJkQS2GQY4GblUuC461u\n549QIAyhJsemgiefcBz0ABNQ9sJKuZqoLmbSbBPqmMupFbfHtlHsM9rtrM2c\nAKTwij0F/Hh+keDERV91BGGuHrh7zuK4RFafxz5d11uVyS9vjffEkqU+Wtnl\n6Ithcgif1XNgKWWY6UP70f7eMWmW2ZxbE+oFZgj9zss1ghkzujZOSpAXT1+1\n8T7JC7MHhA6riP4wF+o1MGVm+OmYD6U2QStbFg9EHni1Nx71AcAQChH4BZ5E\nKyQAh+0VpPh030BWUwWKj5Erz//cXN4bu+Z4jQLJ4YzHUuTCD5OQL47lgE9O\nILMMkC21IOTHXwXFqWE18gdiLfBS7AnQ3ldBrqTUL39B9g9PaO8j6lCuWYEP\nc0N4AjJ17Qsxk7NB743DhE7JC3YpBStJu6Rm89h/IPpbVW6uUvCH1HJyzsEe\n2LzwAXVCEJgIW/HRZqQCnt9mz9c4GDmoBLxhwf4+dsivAa4M9PTUtHlicBSG\noeAJj0zovHPc2663EROBU5q2+uncbpOuL2YjDWS6Ga8QUIUNYV5RYJEbNxn4\nxEAqe5KEtiEEB/feqlTslrQ1fMMlibiImA1/HzInP90LmukcyC0pg2bD1G8S\nsMVREi0laPi7wQlE/28iYv+BCsK0MmRgVJO10LNtbeDh7iP+bErGWxKonmb6\nclhg\r\n=3luO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB7xLKEeDJotdos1ACNNN7tKW5ZowiElsDE0/5BFaJQZAiBW9NB6jVkvl3L1Lm7CYwjt+KhakV8CW+cFqn8EtKcB6w=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.22.0_1637572808394_0.7562884039335187"},"_hasShrinkwrap":false},"0.22.1":{"name":"@sinclair/typebox","version":"0.22.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.15.8","@types/chai":"^4.2.22","@types/mocha":"^9.0.0","@types/node":"^16.11.9","ajv":"^8.8.2","ajv-formats":"^2.1.1","chai":"^4.3.4","mocha":"^9.1.3","tsd":"^0.19.0","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.22.1","_integrity":"sha512-cYkZ5oYd/KrzwcocLtGI4QRi6oniV4eP8IEefEhZp8YjLhrsrHiiaeChs8a9T/YKIlIjHMoxoOCWOUkZ/vviNw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.22.1.tgz","_from":"file:sinclair-typebox-0.22.1.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-cYkZ5oYd/KrzwcocLtGI4QRi6oniV4eP8IEefEhZp8YjLhrsrHiiaeChs8a9T/YKIlIjHMoxoOCWOUkZ/vviNw==","shasum":"718162cb38d5cf732ea348821cce00d88a10d2b3","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.22.1.tgz","fileCount":5,"unpackedSize":90170,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhnKjvCRA9TVsSAnZWagAAN2kQAI+neoUNum8UNhYYYgqv\nt6JiCse5wZB8a0f6jyhoKs7SZDs5Vh/zmlo5DhV3F5VR37qpFe7y0/CTHTmU\nAn0XARcg54s74ihWMQbnlsHeGxqkVYjbHY9fYqCBdjsTUPkHhX11bM0wZBMH\nxNsCrh7b2aaxP3PVXaHN2xV6EwP6VRLwAZAdqMp284CP8myxvMJ9IMh9Iq5d\nVafbnJuLaaBuMALOV75nxhT7fOb99Echz56YHVsEyzsQobnLwLyb0/2yiIpz\nb4K0gUqAit+64nh8ZlXNrcwGsyOH/ngP3060nGmWFFu3+6z+pqDzY6nUIf8O\nC8F6jiYwq5XqHhCbZnkfnJnB1kLlcIZPG3z3/TtDCVkJ2PR1MUDK1wZ+8Gml\nlueHzePOjaboikJ7oAV2TVjQt88yaa+pKeal0+xN8cD2tfioKaQ2k402Jget\nraPcbB2R50yAmmUFdtI5iEq2uQFAW/DKCgcUT8SoB/lumrjeZjVnLp3flfSW\nIbfXkdSJbivIHigdRHnJROQbkdBXCoFn+ogGCPjEIBkrJpeb13OzzkGEOZxS\n/6j4/5irQH+ru71Vw2kxOFgIvb8KND8wBRji2aqTV2asWbE+A9NpWjiTVstG\nAbOc+bFm2YT9GW4AgMspOuujVhtLHwhhjCGCnlqEnuz4g5xW6P13CN+u4H1+\naWjk\r\n=hEEX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDY6RxuLasYejCcbZwcFdkBtUM5kcHEMv+kAVWGoGr90AiEA/xXynYQ5v/GRR7uTCFtFLiFW+uQlLHJsUIYqxYZ9Eis="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.22.1_1637656814938_0.17706449883164566"},"_hasShrinkwrap":false},"0.23.0":{"name":"@sinclair/typebox","version":"0.23.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.15.8","@types/chai":"^4.2.22","@types/mocha":"^9.0.0","@types/node":"^16.11.9","ajv":"^8.8.2","ajv-formats":"^2.1.1","chai":"^4.3.4","mocha":"^9.1.3","tsd":"^0.19.0","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.23.0","_integrity":"sha512-G8+yjtQlXVBOSWqsi8ezmmt2Y4VyR+FJOvYV/3DwKcJiAvyU+WcSA9chS5X3H+2VN3L/MEHm/puenGo9S6kbcw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.23.0.tgz","_from":"file:sinclair-typebox-0.23.0.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-G8+yjtQlXVBOSWqsi8ezmmt2Y4VyR+FJOvYV/3DwKcJiAvyU+WcSA9chS5X3H+2VN3L/MEHm/puenGo9S6kbcw==","shasum":"67da07e1e3be6d18f861728ba0a83cc7fee462e3","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.23.0.tgz","fileCount":5,"unpackedSize":92731,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhpRt+CRA9TVsSAnZWagAAvT0P/0vNT1uDGrTJKNvWiMns\n0y1reagz+PyRCWgbRgkc90O2C7Jhrf71WQbRVChrr0oPxPEpw8loeBHE3yT1\nSopuYm/JVr/KoRnpFsLAHL3cWUqdaugLpdqDeu0RMj8Vf/FASWDmpUOXOmBI\nEJfEzGxYgvjqPPiorIm0zola7KfDEhoObYqAjtK2XZQckvoErBuuJV3b+hAJ\nSJEgbPxelsBQBY4ckRMF60nP4nhAYAiE1Enku2IDO80PqOsmqCop1QH1CoTY\n6d6quVC7ePmkJDo3IInIOafRB3gxaA73DdmMyGQA5J9E0B+cax/MRUfWGrfg\nCzwBWOtT0IDOUefBvdPDdiROc+bsi+1Wzm6I+gEglxCbGpZ9ukuCqKh7oynW\nTu/JNaFMeeDfuHuRv6psCTXL0gL20xgjzvynjjvMk/bGQKq55uwkn2jFhkg2\nozsUa7MQBpvd3oA0RUxoYChk2BbtPsTNKRhjIi//0U/POSEMbxKEQn3bdKAZ\nV/x3pE94OJpUeZOwzAR327nqPQQlKpaXdapgJszPLMcwkTXmhGDmn4arJN4b\nCeuv03WSciQjGSlpVQfVVBMeu9jgtdIjCVatS0rhuVlat56weiTwGhi1KJOJ\n9cEpUMpP5b/Y9m66sPT4aWYYxuzm7sGmoHcFpkombfTCZqSwNH5DQTfuG8nv\nE+qp\r\n=z1gl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCjxG9M/owvsKew5nLfbZk24BhVx+IAAn/y/WDxmSydFwIhAIvfRznfU2zx0Z+BeZ8kUx+R3yd1PGAvYMKyuXPnij7J"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.23.0_1638210430014_0.15507066709494866"},"_hasShrinkwrap":false},"0.23.1":{"name":"@sinclair/typebox","version":"0.23.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.15.8","@types/chai":"^4.2.22","@types/mocha":"^9.0.0","@types/node":"^16.11.9","ajv":"^8.8.2","ajv-formats":"^2.1.1","chai":"^4.3.4","mocha":"^9.1.3","tsd":"^0.19.0","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.23.1","_integrity":"sha512-XsmyWfps86gFmZhK97HDesbCe/pR+8qf/VveZaADI6oCk0cHGq6WeKdUHM/a8NeSetv/vpUf19ubwU34C2PVWw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.23.1.tgz","_from":"file:sinclair-typebox-0.23.1.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-XsmyWfps86gFmZhK97HDesbCe/pR+8qf/VveZaADI6oCk0cHGq6WeKdUHM/a8NeSetv/vpUf19ubwU34C2PVWw==","shasum":"14a945aa26a41a875a219db00b293c0bbe4fb804","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.23.1.tgz","fileCount":5,"unpackedSize":91575,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqm7lCRA9TVsSAnZWagAAoncP/RtwfkzXrgt9m5PYJKmD\nGKk7kTkOzMb2xkYDezyw6rLju68TpDwYDz92YXg95pud8u/JGu9mJFzRCJBf\n0bq2icfFMl5G93ao6pAeL/4ZSqHrCUFmjaRxOwm0hdlNucOOuAjyeyNexAqE\nq+J4gXEtQnbLpDsdJyCgwL2PjrROhW0x/1faaovsbTh5gNGzIazsBt/u/naN\n4JcQPot/ScE76HwI7DNFc7isD8y0mTkrObEZor/KmTgx6V9HFhkPpM1QF7XC\nHlczLma4w20CdY/6qK1fLfm/LwkyUImq/f9mEDZ3/k+oVPjWS5H085my6ZZ1\nu04dCRrL7w1ux8ZJIhCAiiaCbzsfg/HMnk+/rrm1lxdauKx6JiHHd853TpDN\n7zXtSjKH8X1M3DOB6jOb3T4NqcfxiacWJPt4YhT5IiStWHeo9p7jTLK35Pmz\nT/mfyHZmy2eSe0pMgXFCaQt4IZX+Gu7Qcr7x5nzXCAdkpdlI7CqM+jeUZHk/\nQpZtWoFIoZpC+YefRt1YI10Qr7XlTa56ioBEoh5pxe+DYJ3f4MTswJ1o+JUw\nHVBO4JZiTASPQU12Rh830v+0Gq3vxsdFkIH0Xl3cWz2hAiVk6iQmQ4yqg3x4\nDF7DAM4kLCFvw4xROBv2KUfojDCaXcQIVPZGwGAIirP4sENnfgxZLjT8m3eR\nauL6\r\n=Wtr9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDjdVGXMdyDZLhqhvzzv9UxGtwsucQV6lACepO742yTzgIgBRV1utjwEROgNxJnoWMrvFj/LVowKJeIab8sfwmjTAU="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.23.1_1638559461750_0.1201321149718595"},"_hasShrinkwrap":false},"0.23.2":{"name":"@sinclair/typebox","version":"0.23.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.15.8","@types/chai":"^4.2.22","@types/mocha":"^9.0.0","@types/node":"^16.11.9","ajv":"^8.8.2","ajv-formats":"^2.1.1","chai":"^4.3.4","mocha":"^9.1.3","tsd":"^0.19.0","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.23.2","_integrity":"sha512-Q2+xTM1zfzYt0TnSFQooG8RY3i39qi3VZRfTS75h5V2qGqqk6ZHHTTtuB1fBtolPRO8+cNCT7nny9bdFmW787w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.23.2.tgz","_from":"file:sinclair-typebox-0.23.2.tgz","_nodeVersion":"14.18.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Q2+xTM1zfzYt0TnSFQooG8RY3i39qi3VZRfTS75h5V2qGqqk6ZHHTTtuB1fBtolPRO8+cNCT7nny9bdFmW787w==","shasum":"387c20aacf9c9f7e55f8b6fc80ebef946ca818d8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.23.2.tgz","fileCount":5,"unpackedSize":91738,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhwzybCRA9TVsSAnZWagAAkX0P/i/WF/yKNfnqzomZZzfB\nhHoa5zGon//Wc7FVfjMNLEuVnYGrmk9ZS99EKpIL0Li6JBPn5aa0aiCVTtXU\n5z6EgKW+RvJY8f6K/WxafaVsZfRHeR/4mSSScdK7dnfU3y3WoT/SKLMF1FXO\nNOEyiaQ0NMCAXbAv8qN9PEB55yJyECJ77KH0W00vHvHE0y1k2gem3rRGfHVa\nSepixdDNnb83i0iEKk2MR7CNBiqvbBVtABJl2FA39qlXKA1jPRzEj8rUkmAO\nkg20d7ceVjkIrytjyb8TzEdkP12tpDQwGDzvzMxnf39rRoeACAnb+lzF/7yj\nY5EkTpo3Db0R7jcNxpQBDn6vC7wVXob0gqlWVnDZFjXRRLRDCXwR/c4Wulvg\n7HTRCubT9SAFZb7/qBgJGFtyYiuIXZg9cA7KEgr8nQdBZMbaIea7ja595GYG\nszwTntYorhNnB99p0Tw+4mYwxKKORnOEBd7soo/wCb340QFcbILA3tEBQtlr\n1gbHZb0L8XtXVNEvhniI6DYNa2xGpm5bV6CeJwHlZ6ET00769RmIZM0jDPKq\n4RxJLmC9twA+jJWM7jRiW8IFiyYcLcE9/sH1Kc/wg0TbFa7+NtSKdFDfXuDX\nMHP94vTBDs/UEz+fO/sOBh6oPkmcOCoYIXFRBQV4KgLgDs/JyL4XO+RRCAjg\n/wZn\r\n=ODY+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCAUUEVzpqKmJSDY8BX4KakORwPXNVyG53qlt6X3aVZCgIhAJByx91IlL4ZjtYnPoJyEsPKNEPL1XcmdngY1cY9pN39"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.23.2_1640184987543_0.15811760414373"},"_hasShrinkwrap":false},"0.23.3":{"name":"@sinclair/typebox","version":"0.23.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.2.22","@types/mocha":"^9.0.0","@types/node":"^16.11.9","ajv":"^8.8.2","ajv-formats":"^2.1.1","chai":"^4.3.4","mocha":"^9.1.3","tsd":"^0.19.0","typescript":"^4.5.2"},"_id":"@sinclair/typebox@0.23.3","_integrity":"sha512-zIjVOx3n08kLSAE6o4BhOUtgkpvbrZmR6B+lJLl/tP78GB7KpLrOK15FC9sKaWZHLtnObIDAQV5kihLbisgYYw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.23.3.tgz","_from":"file:sinclair-typebox-0.23.3.tgz","_nodeVersion":"16.13.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-zIjVOx3n08kLSAE6o4BhOUtgkpvbrZmR6B+lJLl/tP78GB7KpLrOK15FC9sKaWZHLtnObIDAQV5kihLbisgYYw==","shasum":"83e127d1c5f9d79d76004a1b36f7b483f5056918","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.23.3.tgz","fileCount":5,"unpackedSize":91742,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh7JxyCRA9TVsSAnZWagAA7SMP/jm6UyEkR03PjsS6yknB\nw0VovDXP9kV7UiXdZifBfHEeJ+TA10XCsQWXauhtAC0/izxANJabMRmOt7WD\nfaBq2RgM+xj5TwcRfP7VgisVZ23BfS8a1+RDzEi29wHju9Kkpy4JfhMCLHHU\nE9D/D+RDHIs3VLXKiKfKUOd9fXh8F16qSu457rbVU2ErBZcl1Lw+QkySYnJ1\nwMnXrvfbvUtc8rOls2nawkghjJrIHxHgLH4G/b6MdXSX6LDaYUeMqQsdVykf\n+nwQYdrqBlU13xyMZ9pmVIqW/dzNY0I+w5Ar9PJvAC5gHmksNbpj1jzyjf4C\nsEa1JKfHlPak0DmXkzHcQRel0g9s+Gw4S16to5S5DfTmRUlin/TGg1nxPk1G\n9EPaHgDUEj7TvxULEtqrMI+w5cxS74Ir30OzOVz9KYTAG0BjsvtVlTql1rcw\n12lWNfB0HHJVgPZjLs5fhBpLmimcAIcE+mcWff3KWvydBeLQoYNTb5PfIVp8\nMGqIJBPMtYF48/qSfQmADqbld3IPsi3NNIGkmvMbVvFgCjzLjSbv1wEs/Y1h\nxl2I7g3uKmYohDgF3ZA0y9B6bqvfrcGUlfsySMZkGqwpmtwT8aOjElZ4vDu0\n1K1z5qAgVdQB88kFMrJyZmxq8FmIOyABXTHpCaZchbsbAxTrc49VFJnqCFjQ\nzF2Z\r\n=sPue\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE1V6/36YaiAGt7P1595miqS6P+0lG3NUuNj705pzWkjAiAw5nbnheuxPcb9pHfmfYLp2/kEG8fVXKMfS5ylpbXFhQ=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.23.3_1642896498399_0.7081304169967535"},"_hasShrinkwrap":false},"0.23.4":{"name":"@sinclair/typebox","version":"0.23.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.23.4","_integrity":"sha512-0/WqSvpVbCBAV1yPeko7eAczKbs78dNVAaX14quVlwOb2wxfKuXCx91h4NrEfkYK9zEnyVSW4JVI/trP3iS+Qg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.23.4.tgz","_from":"file:sinclair-typebox-0.23.4.tgz","_nodeVersion":"16.13.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-0/WqSvpVbCBAV1yPeko7eAczKbs78dNVAaX14quVlwOb2wxfKuXCx91h4NrEfkYK9zEnyVSW4JVI/trP3iS+Qg==","shasum":"6ff93fd2585ce44f7481c9ff6af610fbb5de98a4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.23.4.tgz","fileCount":5,"unpackedSize":91799,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiDknZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo5XhAAo/eH0V8efagTBnxPGVPHjDduM/g1zs07xNE0fEcIsz+TbVZz\r\n6ZRcnOKMsCWFiW41471UbMbtDd68MYevPoSLtSZwWh0zMRqgM4nPjXYk+EyO\r\naKeYgSf50LwCJKBVg3DUr5FV/8dwwHqjROwVC1lP44NyhBB8jvQTT6J7bgKB\r\n5uaUUsW8yaBfE1SQmN8AnaqN8PM/Y9QuFc0fmN0XkJCYWCo9oKdJ3oYKCmar\r\nl8JA+L1nh5iHSK4z+z2DYJedi1nzTtAjS2YzEJp0Z6ZVwFBrx26KeuyZ5qzU\r\nVEe74MpLvt+ATEA1WReepZy/G+7VXd+KiAKDy1Smc6zMTAWXUPV+H0Bx3xY/\r\nS+fe93Xvy+13An6pEy//+7IkMjtvVUtAMlBL7Cm2C6TtjfAvHuNAvkrejUh+\r\nVFguXa1TNn+wLZvR/iyGLAoReSOw96ILaNoRMn7LokVFqeX7u2xvn3R7fbCD\r\nF2KaEUpp5O/8odgg0dTolWzjMLYvz6bgclpdR6viEyddlgisat7hBNvFk+93\r\n//1HCg9BW04SnBItf88FCPFKg+Qi1QRc3uGeNe+/s0HDQ7vJSPGXb/gHj9J1\r\nRiScGTiLrxu9fB/E4lO/m1YLZIgDVv14rnUv+6mp38QnMHZPV/5QKWwtGhAr\r\n1/9eQfgdjyhzhUiBlAACi+HTPbJMRXOM+oY=\r\n=HgP5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG8qBHXrQXLqF0AmAPN3tIf9vQ7si9+CZgHiXPd76prfAiEAy9at/j1SIQwglY7u2nl3dJUPOnTIXLKDHa2NDQNYgHE="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.23.4_1645103577540_0.8454530339502178"},"_hasShrinkwrap":false},"0.23.5":{"name":"@sinclair/typebox","version":"0.23.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","build":"hammer task build","example":"hammer task example","spec":"hammer task spec","spec:types":"hammer task spec_types","spec:schemas":"hammer task spec_schemas","test":"npm run spec"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","tsd":"^0.19.1","typescript":"^4.5.5"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.23.5","_integrity":"sha512-AFBVi/iT4g20DHoujvMH1aEDn8fGJh4xsRGCP6d8RpLPMqsNPvW01Jcn0QysXTsg++/xj25NmJsGyH9xug/wKg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.23.5.tgz","_from":"file:sinclair-typebox-0.23.5.tgz","_nodeVersion":"16.13.1","_npmVersion":"8.5.3","dist":{"integrity":"sha512-AFBVi/iT4g20DHoujvMH1aEDn8fGJh4xsRGCP6d8RpLPMqsNPvW01Jcn0QysXTsg++/xj25NmJsGyH9xug/wKg==","shasum":"93f7b9f4e3285a7a9ade7557d9a8d36809cbc47d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.23.5.tgz","fileCount":5,"unpackedSize":91885,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC2ElztxzYXU5HzCCN+wVQk3yaY7w3CYZScw1+wpg90VgIgT4rW9cthHMVS0TVsh0pKrok2xr7Glc+/RK5phejSEXo="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJia5nZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqANw//bzHUoGApDjdSE7Lp3kwU6BaHch8r1ta3e42bHCzAKySg5fHs\r\nN945y85wL7zpSJD9MI5FM/H/Tju+qL2Td0AkdLLIE5mYl4iqFSWXPwLkM2q1\r\n/ADsghpS8kOAFvL2QNXUco9JkHWjlSC+JniFngMCUG0ZY22HAN9Kq2fIZN71\r\nbkvTUPd7ngvjvmSDvY7hlyIyQpfdf+vWOyt7HWpoZMUw2hMQkU7Jw0DfaAP8\r\nmpixug9IcLmUYJWbs8ZG238E3R/KSRcVgNxIabRVJbt3H0mFpG1GdBYdbZgW\r\nkHEEuQD/5Vi9ckJoF0Z8O1E+DVsCmMNUiGBZSD9TxuWHiErXxcuxQ5x8q6/2\r\nEQkveQpAJLNKmRfCH1KMKfZnNu9GRSRudtqr3F9f7n9BiUVZUAhftI91jl32\r\nkyXw5QjSe8yALkD3USa2GUdUqPWXpl/Ug3U8ziUN8d4ibozetSMRP+LmSaQU\r\nxZrgRkAejrZJzQdT5cL/Ftz4+5HJjNgyEyrTjTjreLVY/ucSSMg3r0gFBtzc\r\n9OIdjfEWvVBDqiB7D30k3glgTCqpkZtWrhoIUTUxL5lqOFd1xx5u1s4C+GSH\r\n2SMeqPD544Wi4sGvJ1uEgtH2DSNHjKc+b3iSsO8HDlqR6Xis2DZUOZO4HK8J\r\niCoTKsbLatxpFZ4Hmw1ci3iDyYqUnh+KjRo=\r\n=KWFa\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.23.5_1651218905582_0.6088332311992679"},"_hasShrinkwrap":false},"0.24.0":{"name":"@sinclair/typebox","version":"0.24.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.0","_integrity":"sha512-UsOG+42zjQrmAAdxXitRI43fUYNwef9bq5jSwWKOe9q0NWrR1zkWe1ceXSYwuf3tkC7rJitiT0kHWMkCKiSfzA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.0.tgz","_from":"file:sinclair-typebox-0.24.0.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-UsOG+42zjQrmAAdxXitRI43fUYNwef9bq5jSwWKOe9q0NWrR1zkWe1ceXSYwuf3tkC7rJitiT0kHWMkCKiSfzA==","shasum":"07f233080e6840f41c4fe8eadb172102a7328092","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.0.tgz","fileCount":27,"unpackedSize":164932,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBosBVbukxlnsCBcgLfymauVAn8PxxiTraMggZqYVCVhAiA7a8DEaqkBIIDpC6CsFNr4Fsp06LXYzuuBzCQycESmtA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivE6bACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoEVRAAhr0Cf1fVM2Kc9lLfDxxUUzPLWVfyumR6PEPS8FYXlmkbOvv4\r\n8E0A/drCo7g/txvIzKJbdEt0h+0fCG3MmRJdce8fW7aXgIS2BiaKvb3PPikG\r\nwWGj86xby4S5LG0T+BqRFcHsWhFa4cPXBqGE4w/fRjQ4USDcFzq9msjd264a\r\nzWAsDaJ6JQVjlDRQg2aDC9KwueI0J4dK2GPkQ7HbKUuxurFqex8V4ga0mREn\r\n8ZzVx4azJKy5UyCFK6tAPngMW9PncU+JwTyCAChb1tymuzZJUZGhqKZCtSok\r\n15BaDbgzCN8aWIUqycGP2RDNgrVaQchoygZUwb2GMFXuClhHIgCGbh/yOixg\r\nPlO7OCCFMfOUYgfHvQIvWosY2XwAX9aSoLz2I6qQCSd2p3ydgMurO8fxTlZC\r\n0uzYDyE/PlV0J/G6OhvDtsrGQlQJDuVm5SLP8FE0x/BEuo2alJ43yfGCoQUt\r\nON0xskr3l8F7+CoCTlvWA+v9014E1o/X1fRIf7W8dxnAoIu+TD7Fmrmvuh+6\r\nwLQUD7UtN664Viqun5OtvmJSSZuJ4q1lOBH6m42t1kXYexv4x0iC2KBG94NB\r\nzHEaiVgoF1Vx4Z7mpJLl9fHdYIwC+GPyLt1jeZJ5d9rwOO9ZgmIdO7hklHNs\r\ngHgLdmDF7misuIiAObahOSquxQt1fwPSFe0=\r\n=QtoM\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.0_1656508059136_0.7187567085541802"},"_hasShrinkwrap":false},"0.24.1":{"name":"@sinclair/typebox","version":"0.24.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.24.1","_integrity":"sha512-v59jW0KQIy4iMP0Pn7gcpQ48YDXa9vOopsRhaPWmsStTxaVNYIqFY3eK6y4PU+53hlQoaQ8pAxU4cPIaMFEJwg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.1.tgz","_from":"file:sinclair-typebox-0.24.1.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-v59jW0KQIy4iMP0Pn7gcpQ48YDXa9vOopsRhaPWmsStTxaVNYIqFY3eK6y4PU+53hlQoaQ8pAxU4cPIaMFEJwg==","shasum":"b4ff200fb4f18dfd15c53e984d8801e2c8df1526","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.1.tgz","fileCount":27,"unpackedSize":164156,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCKBXK6qEZbh1LgcLNp6+Jr9ySVde59bcNjZkD88sNmxQIhAOcMDYPuT3v2GmCs+cYLDlRfYgGhfMCvflsK6mCvjq4e"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivGaGACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqRNg/8DrePSA9q8kzoOwjxyoSBMrOilXOOjHja2O/ix/ETooyRTGYy\r\nl54+OEKz50k/TRTI8ga8Vhzm2f2Ne+SUSYA+PoKi2UDjh0Wbv//DlcMM0mqq\r\n/ua40aai1KEN5nnPZVjDVNhGNI/I/Z3eEmDlPZ4kP+upNWsug7qvbOGQyRgi\r\n7v3+kAbJX0pNvigXMaUEmYjKFpsfReavY6QDSxOxbs/GpRiH1rLedy/WNROu\r\nlOsQg85Os20l6e6xztVHjIn57fmW8vYuRH+7hoYuj4JD2UL4FCWqFT8UjtSo\r\nNycNGzcyotNe56zJN7TivaDTt9ZLfaE/StdtLxCS7AFPGi+4i96cHp+PBcB0\r\nqpJvG/j13jRaLtSrHsrYx+COPd7i/v1uzWlsC28WVKNcMCM7oNfXi8nNwjK9\r\nFvvmzh/knPxgbMKkOTvphi8dt0mOT42bfugv1Kdfi396iePraErO1VMsqW9b\r\nJqUZdgPq5mhvv2Em6AlNaVNPf8FpLiDNS429SyZvd7CiqF0H/v9eAJkboOPV\r\nTQo2MkuYH+d7oKOv5JbsDJ3am+nBUCkSr1k0HdpsTd3bKMK8ruBzktpaLBy+\r\nZXyIFNSc21O7Ttcf/a8K7ITtV++gBUR+XUE3Kn0UjObW+1mLiuOrX8HrCZ99\r\nWRjXblbhRGeT/GmTu/AVXDXApF8FFIYdxoA=\r\n=j5NT\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.1_1656514181831_0.0032912113645298113"},"_hasShrinkwrap":false},"0.24.2":{"name":"@sinclair/typebox","version":"0.24.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.24.2","_integrity":"sha512-EpdWGQtmnZbXMioI90e+JSL0DnYINu8OX4ruVEXhoXAbgUgSmkpz5FWTiLai1sfg8AfpX8XDCLF50gzlEcBv2A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.2.tgz","_from":"file:sinclair-typebox-0.24.2.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-EpdWGQtmnZbXMioI90e+JSL0DnYINu8OX4ruVEXhoXAbgUgSmkpz5FWTiLai1sfg8AfpX8XDCLF50gzlEcBv2A==","shasum":"29f290d20a144ee47106206309eceb1488166d41","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.2.tgz","fileCount":27,"unpackedSize":164258,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC8Q8uD6DSgmrTj86HNZwtkA5TJwmaiB6l5KQSZjhZBQAiBRM25hszQeBZWO0Dp54b3VXYP7HC9Ed7qN15pxgHdcLg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivcVrACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqNOA/9FqBP0BwLXgXKAaUutpROMGvZPUJ04AJcdFID3q1yQeWXwVKn\r\nblAWWZwSDHTNS+PAwYNusg27vPYRVqwCvVs77AMgfIiWa4EBP4HvJc534VcV\r\nmcxU2snBKK/LGn6jiekB9siFzwTduL47lt0ZUu9XP6Hdn0CzC+g22CpEtYcG\r\nhE78U0tQaZbmp9yUqO5o8P8J1nKXd9YVxPBiM6h7TIbSWs6iFIzJ61gHDBbH\r\n6map9lsRekpx7FdGRUNiCcQp1p+gFrHMe5s6TtUoNgbVOZ/ZEmRQ5GlFDSKP\r\nzZ1BKkNxuw3oqwEtTj9irmFfx+zpcgQHp2k7h6ir4PjeU51j5ebjmBqG349l\r\nVLJMgZMI/EIjd1cmNPdaI5XR8ZliB50QcbTxwD+wEXpJCL3KT8vPicCdcHem\r\neS7SiwRusGXShNyQ81SY1+iGNOth3OFWYe9vgnvoHRYgU+rBMACswj0fYKsR\r\nRlTYAFLW34beYoyiB1MuNJxISuHlYvQb5lc3OnLws7n8fIfpBd5tjqn1DieA\r\n/y5IbaNUMOl3hKooKQbLokh9oorwfE/zsyGxp8FfbXynehSI5Vq9MeIOqFLG\r\nBDKj5jDoeXuA8e+ncwzOP13Ouk+YsMCLcYiPkF5cjbmkOurpYMFbgcmOYHfq\r\nezbGbxHlivrXb1Ut7bRp9hue9tS/9BtC00E=\r\n=Elhq\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.2_1656604011535_0.5667895059651575"},"_hasShrinkwrap":false},"0.24.3":{"name":"@sinclair/typebox","version":"0.24.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.3","_integrity":"sha512-/h/IFTmwpLQeHbtkPb7DUr/jtl7VW8xZgIIAZOK5vRpKQRuJPUdJY1ltAR2Ba7n8vQLP4porDyg20oobIvXcUQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.3.tgz","_from":"file:sinclair-typebox-0.24.3.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-/h/IFTmwpLQeHbtkPb7DUr/jtl7VW8xZgIIAZOK5vRpKQRuJPUdJY1ltAR2Ba7n8vQLP4porDyg20oobIvXcUQ==","shasum":"dd74a836233305bca4078c23d7ab926ad53e8ed6","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.3.tgz","fileCount":27,"unpackedSize":162664,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC8SvHBehfEKtmQDrCBF5mUgkewpXfpCj1Fr8CTJnO6qQIgX/kEj2H54icQmK0Kas09BIwQtpHSl2C/f90sBKiL2Vg="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivmxFACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpHfw//YAk4QWXws8UQTxXDpUka4YQIbPUv9gRdjOuyY7e847/FylfI\r\nBk+3fxhIMVJAopVqLOao4CbkIyTLBnqRb8xGnBelW4t5wBn0TyyOUPlVurbI\r\nqpW+I+VMjVijK9IV0r2hecjYyDEQN0jzAkMA1k5M8cqiOBW2YftJm59wJU/h\r\nzob2BvuL3X7oYe3eRHMV4o+sIzgneBADFKbMusb+TsA6p+ZJXCAkrhzqjYZv\r\n0ZesgHP7bUymejYcb4I86Av97K0dzBZu48dCy5/rWaB+8GnoCygbhjDpOhAo\r\nXHOje3YU1myIvuzEaerLAZ2fxdKoZZkoq2aH5zl8mulZRFIAxg4aO12T77vt\r\n7b9n80WE9FIZz7Gt6hxyjuxwtWHrSCQd0Wnx4PucdOIoYqUgdcPuuygNZK2r\r\n6Fg0h0/ua/tEQWTMalREKUTynoJY04OWguITrlvBYGlUplBzCVu7s6Ty6+G9\r\nVp6dcAv5UW1McPnmmqhAHxYGYcKCgHYNqgy498c/jaB0gZV4xKA9sQFgZDVc\r\n0csQdbQIhKTIqvd7Y6GmfC/atYud7CuaMR+gEokmxGpsoTZCi2w0mJVuia/m\r\nJdMpHfTl7/+cQSZzb5Sc8IjkA+rwco33xJIB5D9tI6RekYF4Ab1EID0/Usxo\r\nvY2/+eiG5+7VthflctxYC2qePb/2lQFQcXA=\r\n=PrjW\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.3_1656646724930_0.6549617611621041"},"_hasShrinkwrap":false},"0.24.4":{"name":"@sinclair/typebox","version":"0.24.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.4","_integrity":"sha512-KpJwpDfG4o4DM+zm4k4hGVH5pRRTgmxptFzU6QtXTKsuNW8UPkxapEOUDXMnBj+FhsfVHM3fUVAvAVj0ki6lAQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.4.tgz","_from":"file:sinclair-typebox-0.24.4.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-KpJwpDfG4o4DM+zm4k4hGVH5pRRTgmxptFzU6QtXTKsuNW8UPkxapEOUDXMnBj+FhsfVHM3fUVAvAVj0ki6lAQ==","shasum":"a22231479a4291924e424729f92ab5cb394eace4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.4.tgz","fileCount":29,"unpackedSize":178662,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC2e2kpbaxsdJLcsryTWN8FM/E/4CZPjMrjfnGp5mRdDAIgdod1CCmAplT6arto83DwjLOK+lJZLemw4d72AEMSZUM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivqjFACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpnPA//UuUR69P/Ij726NDPh88CCEHmOZQf1gIqzklb/hvcDCjDrcYq\r\n3qkTFnEGn49nOoEPc7RlLMw3ZvD9XBj74KjHtK7Za/+QWK9QkliMSaztm/KV\r\n7t1kJq28qnIR68np/UlOH6QO80NVxgc9F92quLcvDp0Phvj22Xm91G5UlkYD\r\nb01X3Nc/8nnXx/gGfwRC8GZrB+bJmv/M7irx35YRMaFSxobqPBtGC9Td2rrq\r\nVr541t9xgw2fI7dbpZlSKsOLN5aW3wLWy+TIhYV73rmYWnEMAcBRpOIsvc/o\r\nHWokt6o7JSh7EQ3EjSzNxUzjjZH2PMaIpPtm3jLUjecg40NF6gbRS9uYONJK\r\nP/diNi4cwvSl9Hxee623jeo7qP7bDphgoZDS6gGvSFqhYAedLH18SKpZsSCq\r\nUAcBGLORP29EzVN86AtEw28r1arUnqSYykjp/EDF/+lKuEOuOPeLfjBZxPkS\r\n403iTMZ75SiLaiYiZNVTlMkEzlh2IKoWeYk/tci6JDlaa7du0wLWz1l2L37i\r\n58JwGDPvyF5n4jNjHErnTAtvBIYTGR9sDi/GcSV/ibr0HOJZnGv5pSnptePN\r\nuLAE+0Bs4w0zT+ZNRYdh7/J3s65vIyaG9kFwhlWpxR0lXz6pCRolyCfIHVXX\r\nZHFNXUwknmuLWG7zrgXKr5BOn9TCne9hnAU=\r\n=SAe1\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.4_1656662213259_0.867266456483494"},"_hasShrinkwrap":false},"0.24.5":{"name":"@sinclair/typebox","version":"0.24.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.5","_integrity":"sha512-Te3ZdSGjvNg9knge4ZvHpAn4Pjr5jV1GfKKWJtZzWtyDB0tIWIVVJLqaD0sXFyWqFnKKzjzFsRbDRvd/5ejawQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.5.tgz","_from":"file:sinclair-typebox-0.24.5.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-Te3ZdSGjvNg9knge4ZvHpAn4Pjr5jV1GfKKWJtZzWtyDB0tIWIVVJLqaD0sXFyWqFnKKzjzFsRbDRvd/5ejawQ==","shasum":"b43b65329e2b78d4260997899d28965171315afc","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.5.tgz","fileCount":29,"unpackedSize":178615,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCvte/ysqr5MFYuj2jPQFyPo5lOjrMhrpvw9T5/14kBAwIgd4Ttxe/pKp3GBSsx8JST7yk/R3I9xmTAbWZ3ECMGhXs="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivsJBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpGWA/9F6veyQ/JNZt/lvAY7Np2BXPrKQWIwaRMzxRSYyKpT6brL3Ex\r\niMta9HRwxHV7/RkMYMw7F/w0HlQs1D9NpddlvsWgri65pLL/wzpN64UmdIfd\r\nSyKwNGXl+Njw+0lHs3wqupgz4ROCnrCB/3xklEEObups0uLeNQ3F/Idj5lmw\r\ner+mPpEp9fbTvf9OhLkwNkn+ThzHMmtrVyqff9WRmsfrGtu0itIC9cWxcHFL\r\n/8/qV7uTC5tGIWKvDVfzS98XAquIwrAqlM9OLuBDq2CsHaDvXyBOycOeoCbe\r\ndDA7ffx+Y0rNMu4fqlDYLbi5ZdpxAItXmYx/m3q+TbL87EhtJJrW0N2pIuyG\r\nclHqqAIYc4nrtHB1i3uFZap++7c+oKRQqWW9vPPxr2QZ6n391BZK3bowoQQ2\r\nRZ5WCxnv/lbCtStZsOSf9sUFa0qDBQf5WnHyv/vAqB67tWGRXjXcBhkbosdW\r\nIYdAa/zrRFHrcfyHXiEO/z6THhgTzpltSKLlGkBKCPlgm4CkrVIlR/CPFsib\r\n4fciJoECGmNkHqxu/6ziDOUDoWhKnOhVR7CDSww2QUDQwh5jBOUwN5bNGRMZ\r\nWFrj4jNIO/F+BDzQ4S5s7HQ09kzJ01UkGXdgTMX9sy7L42o8e35EJAyp1380\r\n6f5wwYCvCTUhp83WwHYPGOsgTV0p/Nmk9VY=\r\n=hBYk\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.5_1656668737338_0.8168874372446935"},"_hasShrinkwrap":false},"0.24.6":{"name":"@sinclair/typebox","version":"0.24.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.6","_integrity":"sha512-ziqHFbpqzAuXtDFx4hwwPR1fm6SyfzhQoYXkmLZq4rFzRob1TDtjhI68rV84V7voqhb0yrwVJSwbOc3nm+0avQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.6.tgz","_from":"file:sinclair-typebox-0.24.6.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-ziqHFbpqzAuXtDFx4hwwPR1fm6SyfzhQoYXkmLZq4rFzRob1TDtjhI68rV84V7voqhb0yrwVJSwbOc3nm+0avQ==","shasum":"ea71148b019cd40cc1a51f644abac33cad81a2d2","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.6.tgz","fileCount":33,"unpackedSize":193388,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCKN0bG5cJL43s1VLwarIvnZuewnrKZq4Oc1KLbwLDGdwIhAKGQBdQu8+uY4N0cpKHVZa30nUa1uI/rufP728HPhdT1"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiv8gRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqlGQ//Qr+Ur+NAa4XmyXaMSRAhSM/kIp9JLxLwGDY3QCAhJrDU9hyN\r\n9Q21dOTx825jFwU0qOJwJil1hMod30ulWbvfvf09tKBR9Skp5lPAfVoyxKMZ\r\nKDqgMeh6/7Lgq5Z0Nv+H3qfPv81sRhL5uiujDx+1Q7G6PQhiqSxlG0wwnRq+\r\nCkPAvzkTTBaQvdPWudDt6U3T8ljn2VPr/YbN/FEZWAgMLiqDhn3QZEf5G2iZ\r\noZ5tjLpzq6JdTD61U2H2u4GdU8sk/dq2WCjrqyEsTUqGZ8rvCd9dKsZn+J9A\r\nGblZJ+ethJM+bTZMBVFunFY9URwhmwuwTfc7fWAnYcy7pnwdyPrRPQozpiju\r\nz18ytisESPuxXVFhf599HFAxrz2I5R6rGXA9fyF6hMHFkF4C9VfU5A41NJWO\r\nZDwF6NWH/m13Ld/AP02sd0BcE7r+TxFeGzGT86PoS5Q1E0JZRfkHFJEYSGbR\r\nAEUL+rb8qF/D+PuJt8UbSvhParA/V1VfSiV5rUembRk5M/3MK+QNNXOB6ZdW\r\nQHNQGSNmBTwXMxS2vFtKDDSEoijQUrNVhw+ZVYaES8uO1OCfCfyL0zd9DZLE\r\nUTCRIPrNYh88D7MjKGxI22J+HTAxXTqWTnNgEJzext0fEM8W3pYyQoz9xsqN\r\nBRISCPq/fiuC2/uMp9qLw52uhAS+eBKR+aU=\r\n=gB5O\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.6_1656735761379_0.011198753759123159"},"_hasShrinkwrap":false},"0.24.7":{"name":"@sinclair/typebox","version":"0.24.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.7","_integrity":"sha512-K/sf9yfEU3Z8rmd2t4HCPLsatI5Fovzf+aODyCez5RMqgy/ZLv1bHLobFnXH90UAi9UBYUXWCxYBsUznSqZYkg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.7.tgz","_from":"file:sinclair-typebox-0.24.7.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-K/sf9yfEU3Z8rmd2t4HCPLsatI5Fovzf+aODyCez5RMqgy/ZLv1bHLobFnXH90UAi9UBYUXWCxYBsUznSqZYkg==","shasum":"633f3f223db742469bc59221bd636f18bbc2a964","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.7.tgz","fileCount":33,"unpackedSize":193494,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCB9wrQ8/LxOzdYmpneugCs+tNqMVZT4JKt/yYdymDIIgIgVEE6SQvKRoO/0anJm2fExCNazqo6XY5T+kyK2lcj9Nk="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiv9XKACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp0aQ//cZJjrJ1h2UwsxDoCE0avROYupIuP3q8kiBSaetiLrNxwTXG5\r\nEuiMYcbTKX+AqfblCgSUo/dBAoKdDzGdIwoC1RtsjQ5o3p/cZU1p0sVkcrAQ\r\nYec5YfJY9JLLF0+3pkaxezHXdRli/KkeTUjBiDYVNjKtvZCso4Fyw0eztH24\r\nt7OOT8Nv+ERcbcEuBxH9LdJZq9mDPmE7fO5Pdu0CsH+I0kCTIayf8yxTA0Ev\r\n/UhY9VtGPb/Zb7IdcllBfDfXIyWhV1Yix4xG1YoVPqXlfQOuby6jVxF4ljox\r\niRIdvXqt/gTvT+meoODNuwOm4h/lXDtWImsheCg51Jn5EJg7G9K5bEJayGaj\r\nMTsYz9MVHEcUt7BlgPdik5LclOyd3Nq/WoBeatmrywrNDYh7AcijjwS9bPYh\r\nO/VOL2ofKJP2G4fRtWaNyuhN4moBi/zPK4r1OAj59hdomOm6/h80KClkiFzz\r\nzshSI4pJPcaV0+hczw+Rhjio8padVUFYrdCuSy1H3nHfrah9UQZdCTFqo6vt\r\ngD88lMCwun8kB74ftQubgY4g/wiHb4Tc3/+jBhUJQY080onVoSp9qtVB8kyX\r\nAVrx9w6TOEImqW2KXIuDblMRLqD53GYVgomOb9KUU8t/hCJjzGjsOHY+zEs+\r\nbi9vQbmBg4MToDoYPms4ULQwsCMszf8nLt0=\r\n=oQLP\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.7_1656739273782_0.5094830765394163"},"_hasShrinkwrap":false},"0.24.8":{"name":"@sinclair/typebox","version":"0.24.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.8","_integrity":"sha512-4Cf8AFKViEeTifdga3mQxNmWbLPQJ0Ab5nAODCWulf58rWEqFEiBBsqc/RoRdugW0QyMwl0pZTKDyrVhGEYOYA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.8.tgz","_from":"file:sinclair-typebox-0.24.8.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-4Cf8AFKViEeTifdga3mQxNmWbLPQJ0Ab5nAODCWulf58rWEqFEiBBsqc/RoRdugW0QyMwl0pZTKDyrVhGEYOYA==","shasum":"2e41fb3b48f1985749aee8fe7ca16c15a5b021fb","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.8.tgz","fileCount":25,"unpackedSize":180874,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC6VNO35KurAv09WDQ5X69fTOY/wQNb+owmpi9oCJ973QIhAOD/vL+5BY7WP11l0HNoZitgolwOkmlfNYNRcKUdgcvh"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiwoFwACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrorw//dZ/P0PqXVKypC/+WlUAX628Zm+sNX2Urm81Q8air+F03CXXE\r\nC9XAW3sQhibwSzwDn3rmwTAHeEtHsp8RVSA9aMr3eXG25spxoFCdMzoXsYNp\r\nEyGqNe0PSZ9/aYHRslx19bUQPEKj7w8kM0qS4z60t7BXyK6MAMmRdyZuDYIx\r\nMhKzP/CRgKQdy7ao+aVDNN+OGxZTgWN+PJDtenbNEGdxbhJ7Kegamh1OPEk8\r\nQ7YO8Fkl2mmT1hORfzBfJ0g7EBWKkYhzG/umgj0Rk8Sa3dIwRVyrGfRI1J+M\r\noUiyPC37iDHfM9axORjc7ZhHLB+7kGU3T2DXHRSxJeFEJmdR9w41dDWvp37o\r\nxTdACt689dXQ91t/aH6+hzPoPVZTSOOFPT0r7wPdpqYYwjlrICNgTuzvHNFe\r\n4wUWIvZ4adjRHV2zGd8A4dvmcO8HzLzyshq2ZmQgce4qnM6IkkWPnC5cQD6u\r\nsKh3M5060V0GIb+l498/VuCD8t+RUXV53eInxv3zkVPR+nl2WmbtL7SVWTC6\r\nYgSeHZMytcH+8gKkMaG6UaG8ri+JmG/HAlNN9emjV4vF2lwJ7Us5X5FW4HDu\r\nZNM8FJ/hPD+PzRFLZA9+jZnqi1ev8UxUYlmaVl5pk1P4UEzBonpECvWYHFHd\r\nwUtbywjSeWEjKX8C+OpdckZj9d69b5wHMsk=\r\n=bqtD\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.8_1656914288705_0.38293575683211767"},"_hasShrinkwrap":false},"0.24.9":{"name":"@sinclair/typebox","version":"0.24.9","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.24.9","_integrity":"sha512-ID/my8r4g0fp9aefo+bmEApgEgG6Sid42i5bmBXXXGqOK00aTMjHTNwSV2zTt7ddJn0IcevUxS7JzFn0WjwrGg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.9.tgz","_from":"file:sinclair-typebox-0.24.9.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ID/my8r4g0fp9aefo+bmEApgEgG6Sid42i5bmBXXXGqOK00aTMjHTNwSV2zTt7ddJn0IcevUxS7JzFn0WjwrGg==","shasum":"5e66a3c9adff81efe06a80dd189fca2810987588","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.9.tgz","fileCount":25,"unpackedSize":181066,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDeag65dWFb0CvUHlF+qXznydLS9/67d3q6BjpKGmiGygIgXaDmeUOEj90SI+sfMncM59KY2K5r8tv2ZL+GSKdAfmU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiwtHyACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpsnQ//YTyfe1oCsL9uFGdMsgGxQv8c0+h3PsfngUBrvcC02FHuSe6O\r\nUb5bUCbrikUnNEaFEENapXeJnKyT+Rgml09Y09uzcdQ29Pv+gKoTczFT8Xxh\r\nbyYCSVOAhT7/drsV0Z0gxkvX4NeT8wXJU8n+y35f08mS8CDrs6bHRooB6Zcx\r\nlxHJIj5MR598TJKb5rRuEDQaOLrV7MEC7f4pfc1YyYsOREABh9uJIblLxBWD\r\nBqDFvuBKzsBcCP0B1mDH2ZpIxAz+BU17TxBRNBu83ZO3Borh1soLQgMJKjK6\r\nWJ9eDM4UMMlBucZVp3vHI7OsY4k1pisZbGcUTnPfhPMD4FJcDruft51mUeha\r\nzNT70I6naLVWb27W3mgJm4obWyd7yMEejwP8Ix51hahH2O0bmKqkSlPUk72/\r\nPE5jt/7FGdoXOdZ5Ffu4K2Zp9rdrmaAV3wzWKRCaTNR0J70A/1V/ipE6ZVpR\r\nJXf1RsIHGKA0hATA5ltEV3BDoScN2yjzSTccgC2eURN4zwAPwjFbB5wLrHxz\r\na/4X4LVI+xaIygrSEuEyfve7jL+kJGwN/Aq5qEBx5mFqDXTRZYWnrZ2b0IG4\r\nz7MIWnZE6BtKu+lTquQbotbN7bKOdtELEFsWrd2khkL3xv3QYsPXQ+9XMVa8\r\nDFMJya8LpUvkhAqLyY62Muts2tI23IKfseo=\r\n=Ni3r\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.9_1656934898640_0.5637896161342006"},"_hasShrinkwrap":false},"0.24.10":{"name":"@sinclair/typebox","version":"0.24.10","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.24.10","_integrity":"sha512-+0jinSndYKPW9xGO/hj8M/y+i8g9c7RBiXp+st9ZWaYe9Fn2yNC1uQ1JwSHhm6hyQPdriC4R069K9AGGP5ChYg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.10.tgz","_from":"file:sinclair-typebox-0.24.10.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-+0jinSndYKPW9xGO/hj8M/y+i8g9c7RBiXp+st9ZWaYe9Fn2yNC1uQ1JwSHhm6hyQPdriC4R069K9AGGP5ChYg==","shasum":"a2459ccf83cfe83085022563b13d119ba5df73b6","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.10.tgz","fileCount":25,"unpackedSize":182254,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGttb1goRSOxeujig1od6IOYqeuVJl/uoqHe6/lnpyy1AiEApq0NZ2iBF8hmTKvLRqIYxbGXKfVKMb/URRWTE1/q1/A="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiw7njACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp3yg//W2Vj8Q6ZAVpDkh24tKb7fsPRRHFjTsqmyyRuTQicPfMI6ZUs\r\nq5gszuGejKIsDHj6IeFH+iJK6fv8NFutQQPTC+Whlb7nnItko84KqHrK2Ajq\r\nlNpExi6wv7ZafvZ7uFQVmuaqBW4/k6AWp6kakUzM0kV4+AHG1POUYtkT02Ke\r\nTU8kP49i0z/RKey8laDwynb2Ic2yXu1C3sZzsm+XrFqrKP1s6hBE2ksyECww\r\nfb6Pe2J876QwpQXGgboIVj/1iMAUBYRfNvUCqEMKThyJFmIjShEfSy/l8YnL\r\nycgXXsFpFh+A4vcD5FB+ZpGmQ1GZpLvW3vhMkOjhMLCMr+cu5JwCXX+zSoMk\r\n9JkiDl8Ry+yiiVLfmXeHYWwttfM157wZ3FbBmd2mR5UNwPhwXzOOmCzr+9DE\r\nVp2al5VsidLGnnb+Qcr2n3l2ou/S/1jhWY17oYO9XtUl+ynP16eIGCe+iojr\r\nSnUlDbbQ7SetnCF/qa1NGCmdUfnbbtXsodfBTe+xAEZ5YImRzxXBpmNEIsMB\r\neA6FaCX2KQrVt8OoF9UbmOPm+sbcK2Eye0PQb7ifwOG9ymMQzPT13ZqpkCC1\r\ncNYiJceVQKRP9VY3wUNT2usX+FjgjJg+0jyNFyVp0IYqiSIHLJNRFsUgcFQ8\r\nM920+h5pQsQJghnLAGppyr6PBlr+B3vutNc=\r\n=ha1x\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.10_1656994275698_0.03916689453030098"},"_hasShrinkwrap":false},"0.24.11":{"name":"@sinclair/typebox","version":"0.24.11","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.9.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.24.11","_integrity":"sha512-oHAgeyktMgCNPu4+oDAlwgqcHYn8piH8Nw0OngLeu2HIJM7EFxzU4VrK8ACrgbXAiXWedXL4nrfMb+bALMWD6w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.11.tgz","_from":"file:sinclair-typebox-0.24.11.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-oHAgeyktMgCNPu4+oDAlwgqcHYn8piH8Nw0OngLeu2HIJM7EFxzU4VrK8ACrgbXAiXWedXL4nrfMb+bALMWD6w==","shasum":"e9f4aa5056e367ed419ff60c26808f385688b521","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.11.tgz","fileCount":25,"unpackedSize":186678,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHkomZfzpXLcIIDnaa3Fw9Z+q+4YVZeQC8+V7lqvQWKMAiBTVmA/OaE3e5UMXHEbCuN1vveBNwW/mEe/htXapkNBmg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJixnxPACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr3HQ/9GAUX3gj0IR0/Ndk5nWfVc3DpeTlYWRLElqzE3cLXNlOPxawO\r\nkjk3W+cNV83pS554P+FUpVjn59fBU16x+a/o5OurrM031CvgSoPR1Cym8Md9\r\nKOC6q1CBkvzRlCuZlbctCqh2uZqtgey+FO96HGqIVC3jH4qka1M8eD/vMmle\r\n1oVu82W34UvBtwxNP8Rs03V+GyboY0fcL2DUXuDm5nlczCz/X3pR+jo2KVy6\r\nkyGNy6ZnWxXfmYNz4a6iB5BkVZT7SbL2avwhRXyq0gvM+f9TAlATpw2ILKkV\r\nMCbeFHtLVfrP8/0dyn/866WcsNEqCNBn4O66pKIgRkIF4uv+/PmEuNzIPKXa\r\njeAy+Jup8vWFwzf7Vy0EF8nh/gez8VF5S9IRYEqYW3PExyOVIaAN1NyETs4j\r\neJ2+DeNjskbopGqS2Ehzz0kcO+eX1m3eRHc+dS+xercYjbd2hglwhhVCGS/S\r\nrOcrsJKBmocKvfRWt9EbEP3CzlyfEZDb+9R4NKDMCsTppltFjh1cbwwefmr+\r\nAztkVWECWkk+dfZAK/TVuzOzkTPfGR50RLwj0nW6rBjykxIvEXfBeDhKJE7q\r\nsNV3X+79No41N/yqKWoinqa987flhhYFnOPardN186D2zxNB6nwv90tlzLG3\r\ncGukVyCcm79EqwQ3JrWke4FGJuZjzbwbP0c=\r\n=4HgG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.11_1657175119472_0.19069613441115174"},"_hasShrinkwrap":false},"0.24.12":{"name":"@sinclair/typebox","version":"0.24.12","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.24.12","_integrity":"sha512-FZs52BqpKMXNzUPCLpyWjMVVkNAuN//YpgARUp8wWfBhFyt12a2C9hAITyD9Ursiju4XsP4Lk6GNJcNllHwbgw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.12.tgz","_from":"file:sinclair-typebox-0.24.12.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-FZs52BqpKMXNzUPCLpyWjMVVkNAuN//YpgARUp8wWfBhFyt12a2C9hAITyD9Ursiju4XsP4Lk6GNJcNllHwbgw==","shasum":"0b964ab272909a41bc45d8c0454d2b04fa259b1a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.12.tgz","fileCount":25,"unpackedSize":191450,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDd5+4xgY7dzc0OLtG3tsDdYZpqRUIR9UG4R2xDm3HLCQIhAIoOsy56rAeiPCKLixa7ssPSPq3gMgdkuLqK7020hM18"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyAGlACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqmnRAAjJC9IvHwtd+iKY3pNdTcf+TlZcAPnS1wZp9UiRx0m1u3woOx\r\nd+8OC9e+AJsYd2ho4Y1gzRpaNmpXxycLszltMYVBxGtIz/zMlupiX2wCtVwq\r\n6dSxGHPPp9z4p6XsYHzzMCd4CsxawLl2yTWmOYpPidc8bB5UNVk/VeGacjsN\r\nJHb16jXB5nxuVHUOI5IU0Nmbmv/S/sV9IsyNaYs8vWW7+crVDUfM7T+mJoH1\r\npRlDUhU+RjAYV0JZL7hGEu6cWelLqOdgGVjotn7i7s52ohKSe9qPGqCew72F\r\n01JI4bFozSqV7Gog87VdwDDAFQYbJmawLVG0tet5RHzCMsuvIb7JHW4wzkA6\r\nkHMK8+w5MVOYin7glHuZ8WaIwQ7wi365a3Te5KI2KOaE4Lfqo1dzY0YS4SEV\r\nAomMIQ0WEBFB+CamBluocIWFvF6qU3xdIM0OthF5yFyfVHAHgUglCRaCLoIA\r\n57oGF5BvUEwnGP9qc8OEmJTN44baQe4KwSlNaEd90j4Npd9BfkU3ti2+/7HK\r\n4uc8eDZIrPm1zuWpbJDPAOvoYjGmUu6+23mj9eRHq2cZ7ezQ1i+rcO/DPJR/\r\n9az3Epip0Y8H1ZBTiWjM0sg7s718HvGZtN+ThChksbJJfAsQwdA9KkFJDNws\r\npMy0vw/G7Fm+lzWVdMV1hWfpD4q3MFL7Ta8=\r\n=4JHL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.12_1657274789279_0.4967427577895378"},"_hasShrinkwrap":false},"0.24.13":{"name":"@sinclair/typebox","version":"0.24.13","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.24.13","_integrity":"sha512-MzpUqze7Gmj1ZNNanFov1QtyXu+aPYV6KZILEqgKnKlbMTgS6HRZ6aAlaEmrFPHSN4KG+yoOACDkJqA+/oXwFQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.13.tgz","_from":"file:sinclair-typebox-0.24.13.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-MzpUqze7Gmj1ZNNanFov1QtyXu+aPYV6KZILEqgKnKlbMTgS6HRZ6aAlaEmrFPHSN4KG+yoOACDkJqA+/oXwFQ==","shasum":"4705841912ea7ddfb8795bac3db8df17948f5277","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.13.tgz","fileCount":25,"unpackedSize":191450,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF4lFoUxk47Ho+ndqajgMZOs39ZuB9PC1OZLqlk2YEQNAiBVCucQoOJnsJqRuHfq8t/fnTz745oV83lN+pqRIfWAvA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyYBsACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqQdRAAj26CLlsPKq2oPZ5kUfP1CcoZwVLMlAEdc3kFySgyx/qSluqU\r\nOcCbohc1VzjoqdpwtH2KPtSjRYA0i7EQMcpWMWEv8O5T/+t+sFjGcW6SLePq\r\noj3v5PtIoVHy14tpL9cvqzB7MiOWGX67/EOSmhesh6EbY6wum92v0xXE0/ES\r\njvLqM6MwCNaqPvdMBoUQivZxuUZP9/kXMTZXUIaMy3oxjUwuV6YvvfFYqRep\r\n+jokHI+PpNdGupNmv/146ZEGWLBr6FNa7Gztu9A2rhXwlBQsL3C/rpuLUoAQ\r\npFNM32u9NP4XVY6z8z7aNnyCYwJrk0ufAHjxYnEZ5scJRP+vlUT9/YG4QmI4\r\n2Rnm3s1Je8q3jH6TM0uaKGh3FMTsNlW4Pk/Ly54UCch2zjlEFrXNKSB9Ye5+\r\nH+Y1P9gdEqySyfO9Q081QKIlQ87o65t9qlNG1KHNE+C8/q3UWBiBU4yKk8IO\r\nGHjZkMtK6FtQjvdTi6aSurdzqnZFnr3tROaR84d+pgTPo7pKTBuoYnK0XZJ1\r\ntWK61IlSbXdM2XSzCKAWTPs9jYsnRk4rWjwyNhy3VJb3JvLpHO+zm/OXMM8l\r\nlf9SzkQI2pbKoANEE+BRVgkJuYFs1HFHCByieaowdTLf2fL99ZaMKoJY9Y+O\r\ns9VdOtk3KJ6yQveV2ygJAYWaKJta94tabes=\r\n=7SUO\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.13_1657372780221_0.027267967886738687"},"_hasShrinkwrap":false},"0.24.14":{"name":"@sinclair/typebox","version":"0.24.14","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.5.5"},"_id":"@sinclair/typebox@0.24.14","_integrity":"sha512-+dld7HhmwiDD8nEYqdUQ/OpCMmiFnuu0huWbZ18hY6RL7ByIc4tdvvEDXPJJyCbbyaKR0R7P6gWmmdpv4btX7A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.14.tgz","_from":"file:sinclair-typebox-0.24.14.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-+dld7HhmwiDD8nEYqdUQ/OpCMmiFnuu0huWbZ18hY6RL7ByIc4tdvvEDXPJJyCbbyaKR0R7P6gWmmdpv4btX7A==","shasum":"463720b9209ddf519454ba46e27f86915c8f1b04","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.14.tgz","fileCount":25,"unpackedSize":191609,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAMcREXjuSw5yez4kjEOLVOvhOTn6CyMOua7O3qca22vAiAXV9bOYBW+jmdAzfwI8+ueDI7wFJ2FllvUhdZKXUB1DQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyocMACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpJGBAAkHRMG4DxyDD+gDc4jZfwXCo72TGfsEEgdacp92cerbC//dZr\r\nKnFBW97V9JEhfEW+y8T4n3fta/cst14Y5UTeRZK4ZitXjvrdMjlomtbUQi/i\r\nHITmxCBuvYGilAANbueM6MU+rGXTWDS/bLEnU6/eEGiXHYueHXARjZKLWOjT\r\nSnfNky1euHn9+aB0955h2bPsIs/gGYtN9Muw4VmE8rUOa0eqJRSAVZW+Frwq\r\n+bZgxnRzS4dkZGbeY5V8loxintHdXQb5hvc1YsUOgO6R+Q6Z5O6bVKviwcJ9\r\nYws/tlXDLdv8n1WsuXCJwzWjEdlaTd9ARq0trWl8XzaIgOB5HhxozZOZwLsX\r\n7rvlw2cZLCl1iU4zxXytxnfZx8jYGOaz7zckHeekU2TvlpF0N0yEpTvoH9M2\r\nvl0SivrDaL8xRuLKFvzNjKeY0EySHHiHGZXV5R1rkkoMj/ufwErzg2YrEb8u\r\nECm0EsS9w6BfFka/Fngsgbl7EkMaGfP68G9zKJzEW6GFLxYFtTSrFlPLNDbN\r\nUONsIvXHQD2bd/1YcSBGBze+Jeof8gZ5U2Y7UVT9oq3YEv3qb8xcCkfR3wpT\r\nvuspl3DJWKmS3PQIkbQ5OYzjjC8Xbh8/w/uCVIJN3ANWv1AvBTCegdvb5gaB\r\nokOKjUIckDKXg8i1KygDZ2TYZRNQyPBrJ4E=\r\n=GqKK\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.14_1657440012523_0.5778926619289857"},"_hasShrinkwrap":false},"0.24.15":{"name":"@sinclair/typebox","version":"0.24.15","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.7.4"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.15","_integrity":"sha512-VtII20dRdDzJy7hk9Zh2u8wbNhFeOm7P8S9dpVIagkP7cJLDeOP5YRdSWbiZF29nkxFXhI6Axj/pZbRkT2lTTg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.15.tgz","_from":"file:sinclair-typebox-0.24.15.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-VtII20dRdDzJy7hk9Zh2u8wbNhFeOm7P8S9dpVIagkP7cJLDeOP5YRdSWbiZF29nkxFXhI6Axj/pZbRkT2lTTg==","shasum":"423bc636cf47d039aa79f20cf5fc248576931290","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.15.tgz","fileCount":31,"unpackedSize":234352,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCCJqe7yf+NS7qjFz4r2NE/EVV8A5BzhjS3yCwvZG+eywIhALqtE9sU0QoXzsGYRvcL6nwi+IIjPHAxV90q18F/efvD"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyv/fACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrVww//dH2o5oAFEGIJ4LiJpJUHlOQkZ4Gymx4rq10OzthyN8hIreyc\r\nTArwdMwLdSdKgFqDmrf3ucnwwENNySnB/3YWtiAJhBTpErYB91Bll+OLDt1e\r\noMWzeHRl8CFNPH07dw5ShSGdA/BXBbLpAc7Qj6bfxwdyuKgvV80E24EEFtPy\r\nd4udTJm+Lt4dqF+0YF/0k7IBFH62u1n2+5SQAzN5C6IXxjksT9K8jvyrIwIf\r\nA5Q4Be95mrIDfWRph0SMYlK8eUd2+z05+Mos0/wLFtajOewxQc0PAsUkU0Og\r\nRRWDJc73WfFggnp9DmnwQaXU1fyeTRNtKkEh7uuFZ41YRZ5gTMhunCniLnu4\r\nEs8DlPJIHAYr2xWGSN/1oIm9oq9m3UeF/99ej0tLkdRn7od27fOQJcJqbCR5\r\nxJAVaI84yXwgUgXP5DxwcmKNJi3wQucrq82CysPRa389EPqnZYF/dxeNgsjU\r\nhgosxFeDCDQsfFVA7Xpq3OlSuADtbkLMjA4U8xduuA9uq03WEkV7YA56Iyp+\r\nbFtCiHOmfn986zZBYAm/VKGGsPYSGgVPiJvggqCx/baKnEDV4f9VOcou1nkD\r\nno5qKmDfsTxICoZbU5kv2UxgzLkIGtlhErXLbTR0u2VZHwDk6NCC4qOzJ0Y8\r\nUMgFWc7leValyjmat8/jyKtjjXsyduN26lc=\r\n=3yOv\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.15_1657470943181_0.23398543355131052"},"_hasShrinkwrap":false},"0.24.16":{"name":"@sinclair/typebox","version":"0.24.16","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.7.4"},"_id":"@sinclair/typebox@0.24.16","_integrity":"sha512-aWqQhrghjG38ymiiIPDhH5M2skStc5CepTBC6m0tYIdKqm5CDDPf0niJ8gC2vrRkCW6tjmJnoMucrp2j+dJvkg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.16.tgz","_from":"file:sinclair-typebox-0.24.16.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-aWqQhrghjG38ymiiIPDhH5M2skStc5CepTBC6m0tYIdKqm5CDDPf0niJ8gC2vrRkCW6tjmJnoMucrp2j+dJvkg==","shasum":"d911c31b9b604084c725385369a4f1de52382517","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.16.tgz","fileCount":31,"unpackedSize":234366,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHATABgKqARmOoFFnckE9dIKpnksX0iea/cGb2wKKv7JAiEAjngjYuK+EZAYQK6vbPyUlm4tt4Z3UGUqWCXOY7aOlZY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiywMVACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmomtBAAlzHHEjJGABsKXGC3aJNt5TViurWJK2q1ZKnCRH3htX/Pv/QS\r\nAL5Kw7Y/vEJBORWNf4wPFaym+gpZraI+oO2J5J1biDTucaEAtQ1645X67iMh\r\nNYNy1MLyc4tqAp2bB5yIwvQX5OdjEiCBiQwz8bW/r+JYHguq4DbuTw0lvP2X\r\nISuL/soiljRKnbRmtOtlW6orVq9m0sRYgzaQoheRN7cw1ahM9iv7OL5CEQX9\r\nqMF1EcDFJQ42Egmi6neJeEwFRARODxEGeSm5gmwFtXizSvBaGb+k07g0h4Cw\r\n/CAXUeu/WkemBocMK/z1kdPA2pu758qP4mNWQXllygrUaaYXlxSm4O0n6kkB\r\ne+FGoaPa+mi9an4EzeSUvfKdWLM2WhmtoId86FtXuUSQJh6IH9xV3IL+mOEG\r\nxMbm700YcoueTylicaw2yuAbIzTz68jXDy0EO4RHaMmlFaLwBsCTO+a10GNS\r\nVOMpXJp1eLFNRcH855GjolRtF6ue0p6rOTGCJZlaIIP7JVUYWuo8Eo55J0Qb\r\n/g6LJUCTGH8qTV4ICTLR3CJJxUalwPS0I/O9E8gL2rXwDeuMQZy2g71TT3AJ\r\nNWCFPU0syHjmYKVzAhXgR4pzX6DuxSwUEzOMhpF4HErAo2/fRVfGV/+bjTuQ\r\n5URPCvU5W/88VbM7OYjK89OsBTXHoeagit4=\r\n=8Yee\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.16_1657471764960_0.4763035063154706"},"_hasShrinkwrap":false},"0.24.17":{"name":"@sinclair/typebox","version":"0.24.17","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","tsd":"^0.19.1","typescript":"^4.7.4"},"_id":"@sinclair/typebox@0.24.17","_integrity":"sha512-KyXzbBBYly+wSwbhPTKecqIWFST/anAXTlA2o23rDUMzVnFUrDyC0Gk96yL8zQw5O5OqdqALomdih6wwSdRc2Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.17.tgz","_from":"file:sinclair-typebox-0.24.17.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-KyXzbBBYly+wSwbhPTKecqIWFST/anAXTlA2o23rDUMzVnFUrDyC0Gk96yL8zQw5O5OqdqALomdih6wwSdRc2Q==","shasum":"5e5ac39cc54bdcbb002555a0bdfc79f5188e63e4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.17.tgz","fileCount":31,"unpackedSize":234719,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFLbCUiUsaiZqRYEbP41ZCx8/nxfVr8tSJSTbOfKQxogAiA4RP6raklDf4B72FaCm6G6357xD8GwV3NCloPAVmy4hw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiy/pfACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq6+Q/8CvaRajYsUHzd+B8apiv9zrJgeTTE1j7jKbUCEo7l+PqKp9rW\r\n/0sgF+nslxre/+ItfSW2Szg3z74qVhH7XaXikL0/0GXhAVrtyU/5yWzS2U73\r\niJYoOAuYb6C9W9lwxFIHLbrp82aeLqLuH+6HCkJXTOVuqmXzfz3cPf25dnC7\r\nx/YWXP8yjN71d9Qx30cqkyKakrByOndhDNWKnWlCe8a0bbouVH8q/TTBqNvg\r\nG6nlUrWrYzXLuyA1MdrJ0u2+nYgF0nuLuwlpyxK6/2K91Q8zHA+c00fm0DfY\r\nVP8K8OPac8VC1OBEID7MSBKqq294Jou9VhyT/d0FOru3nGk/YSMTpsF63mq0\r\n8LdZPleHSQ/v/Hnfr/mJAjktQ1IfSnDbveMw82ZrcAGR2Gc77JBrW8eLS9/9\r\nJnIkZ82QpoIlKsD9NMuvaJNGIp+PyYY86qqEbEZfmxRlN2LmttOvb0jEgOE6\r\n7M2C2tDLipCamihkM5Rcy1zxg0Gh7TyUp+Wv71kZmkHSXbIqMKC0GQ2niz+M\r\n6aIeZ+D40Q6KWMhVOFKHaFi8Zrm17OM9bCs2pohD7J6X0bjG2q9oTg/QKOYt\r\nqQ1s8Zbdw3uuJQBHpG6b6MRQBpaUXFvXBc9mmY2oLpvlKhi0msh74MbWJD3O\r\nM0f51eDVid6OFFaOuw/XQaNsXk9i3FfCZCo=\r\n=hUOf\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.17_1657535071738_0.24289360767777013"},"_hasShrinkwrap":false},"0.24.18":{"name":"@sinclair/typebox","version":"0.24.18","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.18","_integrity":"sha512-H16DM4E7fyY5X6ggtYDViOHCrHLKs8/khz6akaJ3FN+l2a/pAp1lLy921KqwR4eP40tJWaaDogU+stCnuurahQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.18.tgz","_from":"file:sinclair-typebox-0.24.18.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-H16DM4E7fyY5X6ggtYDViOHCrHLKs8/khz6akaJ3FN+l2a/pAp1lLy921KqwR4eP40tJWaaDogU+stCnuurahQ==","shasum":"962c259235908047cf4367df31bec953a2e0d1c2","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.18.tgz","fileCount":31,"unpackedSize":235932,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCBubFmNfcjoOgB8aq+rKmfvXWIAyQLUGRR3aUcVV7GYQIgAtXa99ipTeRD83YhVqPKRKChnydIbukCtt9YuXXCCaU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJizSNUACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqnIQ//c4qxC+ggsst+nKAX/Z0NReviLA2dh0DQpNtnb02sXY+36wdq\r\nWKQnSWMGwknfndSMjKsSih64/ON4CTKBehYBVtC1Hwe1UAFVGE9raxbb8Un9\r\n0HC/wV7IAikgYYvxSjf7XbEFBxx7EyWZMD2eA072FxJYvlzzQknBPcFd1FC4\r\nLGWaGFSf8WzvweuLlqVttBcmOrgGymMQi476Buszmirr8hN4YfrXIFquOPxS\r\n2h1p14CyjuTzvYpsNqlvmeGpecuffhL5wjNkhH3mXVCuRmB5hcm2XODxzgiS\r\n2eNsaaS9p+Y8Fa02gHKosQAFIoAKYcEL74b0WNbHbxYCPBMgLAL+Z4XnELu7\r\n2mV3CU1TVtkWuwpuxorb3VW6xpKfFNHkJQQ+TNefEk8rINW5jwx+80oMDbUX\r\nedSVoeGSUc8YMQaplvjOKlrApaJ406XkrxlKNuj9BNqkiVnh/zq5SnoWF9Y6\r\ncpa4qtFDM5jNcW9M1O7w0rU71m6qZ8kRs+u0zUzI9S6qD6LPPuJWGea4mrn7\r\nBvRuPNL3dNKvJtWO3qTv3jgbxWGAYpOjhjVnbX2lcUPqeQGMXHkI+iricOvo\r\n4osY3kS4AlEfot1Z0lXWC+l33CQOX45dV/MjjEQffD2jXi0TOjuYvgUA2DKb\r\neKzmx68VaDyAke7UqxHfeLTlGDi6R7nvUdg=\r\n=iA1D\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.18_1657611092323_0.33665250524951484"},"_hasShrinkwrap":false},"0.24.19":{"name":"@sinclair/typebox","version":"0.24.19","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["json-schema","typescript","static-types","runtime-typechecking"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.19","_integrity":"sha512-gHJu8cdYTD5p4UqmQHrxaWrtb/jkH5imLXzuBypWhKzNkW0qfmgz+w1xaJccWVuJta1YYUdlDiPHXRTR4Ku0MQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.19.tgz","_from":"file:sinclair-typebox-0.24.19.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-gHJu8cdYTD5p4UqmQHrxaWrtb/jkH5imLXzuBypWhKzNkW0qfmgz+w1xaJccWVuJta1YYUdlDiPHXRTR4Ku0MQ==","shasum":"5297278e0d8a1aea084685a3216074910ac6c113","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.19.tgz","fileCount":31,"unpackedSize":236716,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCLCvUViYXd9lJrdN5qX+DZJIEBBcHQIef5KJ4UmqNE8gIhALy+SjrWuw0QC4qHmRnt5CRJREuRu+fWGIhw4D+unESM"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJizlCXACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoddBAAn71NPfMAES6UuJYlgcUHJgmKruyc4tXeKbvk2aJK1OWZ1Rgj\r\nRFTlQ7HxiKTyCRHAuT/LZNfX1sYYKsJa6FLX01xzGMk1FJ/vN8Bhb10N0hHJ\r\n4NHDSZgCBPxVttWWNeiG4Es20LvOemVXX0rPSGLfU6MQ3W21mJu6PXb4rIIN\r\nHOqgbTzZaYM9r2A8snrgSaw5yjgUN+Tj15DZ0v4uM22H/EzX4GB+vhwgBX6/\r\nQ3/54WTNWc3raEYpDaNOsZZx5duLfrK2Ontceyx/dxMV6OmLPcIh1jpZNajH\r\nIWTp7K0g6vHDh0qTfj+6jbcCzwRL8iRqoQ1HrKFiobbr9zqxaY4qwmEeHjRJ\r\nOk3NCH7ng1c/pI4c/FUZXJkPbaBL8lxrcgZ1MB/2vqqjXz47L09aBJHBGiFX\r\nO5v1a4Kes08zPA9MQfsuo0NYfdXLAuY3iGVJDLm7+oEYD9MYF+PYdXsWnAMx\r\nG2APLPizoK0cx05Nq1xy/RdI8CCf/BhQcECVLkYItklc7zCgkpAA40x9K+pk\r\nZzh06qR6b/tjtWygMPpH6V9sXckQ1+9wEJX37bKCrlPYXTWXvh3sK52OjbzX\r\n/eNNxhhCe8OkKY0vMl0+XFRys+lmfXG6h+HdJCsBE0e6CXnRVTUa/VXsPZGc\r\nc5Unbpckb0I8ZwOTN08nFQRjh8/xr/LOe2w=\r\n=yeli\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.19_1657688215343_0.586927087906"},"_hasShrinkwrap":false},"0.24.20":{"name":"@sinclair/typebox","version":"0.24.20","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"_id":"@sinclair/typebox@0.24.20","_integrity":"sha512-kVaO5aEFZb33nPMTZBxiPEkY+slxiPtqC7QX8f9B3eGOMBvEfuMfxp9DSTTCsRJPumPKjrge4yagyssO4q6qzQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.20.tgz","_from":"file:sinclair-typebox-0.24.20.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-kVaO5aEFZb33nPMTZBxiPEkY+slxiPtqC7QX8f9B3eGOMBvEfuMfxp9DSTTCsRJPumPKjrge4yagyssO4q6qzQ==","shasum":"11a657875de6008622d53f56e063a6347c51a6dd","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.20.tgz","fileCount":31,"unpackedSize":236703,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDUfwu+PC9uUIBAWCp7WMX8t6GV+7UhzwAsEztaB+B9OgIhAPkFmSTLlvh0pP5nAyiqy3/kK1vIDQ87YTBT+65/cfmz"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi0SqdACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqLJw/9HoQ9rQ1jbBd2aIC19xhN6lUuCRorT7GFwt1Y3ltavAGRtTUx\r\nWXHOgrs8So1fvBqF5sW7UEWs9WZi3t7j3OuIr6VjN1bXeOwn0EHmDRRKXp0z\r\nzvFdjiVK5zpBGVRxXZ27ybvq8vuz4BKAFh8hM6R9amjziv2wMomkJXY2abSg\r\nbHH6OpydLcHxzsbBYGzdBsBQSIk0KdafOy9pDixobV+Il97hrYSYymhFKzcX\r\npW66xIX7a2srIHp24qHYLS7IkWIZa13tsVwCY9Ur8lhKmXdCiRoNQlDdwz/s\r\n74qfnH6NIFtPbLehTev13Kn1grPL5IZ93UkV/adIIFsy8Dezn5ak3eJZH17r\r\nvcyVIxNFZwlvQSBm/u0XXRc7sYZSyjmwIeLBngJRY8XzHnwpdjsERamq54q9\r\nwTEoj/70u8/77iPMEu6Q8fjzGU5tQ3qIrg7VyppQfObNRVFmmyQUnkdECzXx\r\n8IqR4hKUwyddmmmVqc2XUL8ZsT0T5I3eTBp2v5XUxmMiZ404s7ZA7IglQoAt\r\nG3TMEiSUEZ3ww9VBhXmvHimCFKozzAdrupya/uFFKdE5FXBEGYE/TT2O+6pJ\r\naW2sIog0KjtJ093dX4jF6Gi2bn4pUSspptIwbub+DuLAyIhgs5qzhQkmXl4j\r\n35THR368zNc9RD9GE+eGyQM9vZ32EpOd39I=\r\n=eNu3\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.20_1657875101153_0.9598524901428978"},"_hasShrinkwrap":false},"0.24.21":{"name":"@sinclair/typebox","version":"0.24.21","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"_id":"@sinclair/typebox@0.24.21","_integrity":"sha512-II2SIjvxBVJmrGkkZYza/BqNjwx3PWROIA8CZ0/Hn7LV0Mv0CVpZxoyHGBVsQqfFLMv9DmArIeRHTwo76bE6oA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.21.tgz","_from":"file:sinclair-typebox-0.24.21.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-II2SIjvxBVJmrGkkZYza/BqNjwx3PWROIA8CZ0/Hn7LV0Mv0CVpZxoyHGBVsQqfFLMv9DmArIeRHTwo76bE6oA==","shasum":"f2e435ac4c1919ae89c2b693a0d4213d09899290","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.21.tgz","fileCount":31,"unpackedSize":236033,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIERP1HyGFgXOqDv7d2Any4QJmfL24MJoV6ehFvTbkSmOAiAZtD/WlnBnoIoCj+XXj3Q9dH0xO84MpfX8IMWeqqm6Xg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi4Qx5ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrNtg//ZBuSBE7OWUTs10nHNzR3eiZkUfHIMHrkcB0exslFbj8ebOjl\r\n4AKDblCIW97OyzqmL+7J0tV+Czwho57w8PUl9W8ors2OXQKfbhJH1tdbpDdN\r\nGWLxMRK3ROp81YRg8EO9iIQ2RWGKgZ70cla1nWISzvPcEiFgJbpDc/wKn1Ny\r\ns88iL8ngkHkUHTPwsLSYRdS+olqlJTXwfsGIExpe6iv7R9pXfrS/vLLKyhbN\r\nU4vfgSqG5qMDyx+RbLchh6l6lmmGw1H8fgP8rq7mrl0jsyNpRUkS4N5JlwRL\r\n0TqKiqW2+wVjY5V2vdRepTztZtRoF3AHS4oA99OTW+ALwX+yRT5EvaEZ8BTT\r\nIG90Wuk3a+nLcbccMGZGk/tdET5XwoKKDkDYRm7UIjJ4ELxPevgih2QvwnXT\r\netKnz9xwSI2s275NRGx8Jlaole+QV+jZTLux/5WF/altVU1OUvcqP2ZuAlMg\r\nSP6c2Ds6Kr+yWG68p/6AmzdBJS1Q26/YL6W9arWoEHI/lpQS8UlIH6urnVjW\r\nB75ykcp3Z4vyWySwhzMtYlhVzbRpkPWz3VGB3J2sRMRPl0KS4UbXGMsJfEQK\r\nE/HQQGOZO5PXCNkKA3qMOdDhle4MUp+Y6LPAbksQU6frQj59zLG4UeipzGNU\r\nhTyajUYSHbjm6wOY+Kv8GtvuGxk4LDrdSrg=\r\n=6DdS\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.21_1658915961048_0.05577125064089539"},"_hasShrinkwrap":false},"0.24.22":{"name":"@sinclair/typebox","version":"0.24.22","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.22","_integrity":"sha512-JsBe3cOFpNZ6yjBYnXKhcENWy5qZE3PQZwExQ5ksA/h8qp4bwwxFmy07A6bC2R6qv6+RF3SfrbQTskTwYNTXUQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.22.tgz","_from":"file:sinclair-typebox-0.24.22.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-JsBe3cOFpNZ6yjBYnXKhcENWy5qZE3PQZwExQ5ksA/h8qp4bwwxFmy07A6bC2R6qv6+RF3SfrbQTskTwYNTXUQ==","shasum":"0da18e6e75701d6609c7c68fe18002bb1f47345f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.22.tgz","fileCount":33,"unpackedSize":238928,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5h4JxeIITC1O0Y1DOLdnujPUTtrjT6WDGJ1Gl2Kje2QIgJaaCRJlt6ZtINTzujkkdTO7EJTMmDBeE1oCGkhsxaBU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi4zzAACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoSyBAAmdZW2kZX6PGTnTBR5gM83rrQQzlYYb8XdiqvT8HNXl1UMs3w\r\nu+SG2JvPYzQ64cv9qqko4i42oQWD0wrft9ov+wMvVuaRpVcLKh9pZ1XNWUkx\r\nCE9io3+KSREXPsZ8H2w1dSEYsOpF/bmGBF3sHrdGKozksAg+UVM7iCibG2E1\r\n6U2Zd3O7Yk25dx9d5iIZnxN7hhXD5gMLV+6SIVxOPufhqEUtFka5F9U87/pS\r\nbR9XQAqS3ar4zdX3aU0QN9DgulzdSdtBdLRB7NhoTfuOOaQBxblDKGTEXbAp\r\nDNKpv1SGLMARRmwt5fbIeca7ra7jWBOoICax2l3oMTeyA3QBUi6KAezGdDCO\r\nswynOXp0N7Wn7S5zXBUIdPcxHKtDK+tK76U6LkFvyXMvFWTf/mxhQIpQDCJQ\r\nX6EdP16/fpB/wohY6QgjPpzZzKoBGA5bXBBdf/N+D+GXbC0dcrddwfrayD5X\r\ncdgu9MDrJP98imsSqZZ4JqM4EO3bREoa1PPFDTrg9n/E0gWJgGHNglzm1efX\r\nnInr7AbuYFaturNuKVmWIrg/+hKY5gE7pJcZbSE5a9NLBrMn5J15pJP67ZCQ\r\n6HlO49rNRsq0ZB0zQVZPTOkd3djJvZ9iNNS77uYpq8AoiLPSsY9YmebEKMxl\r\nw9sN/vi20pBFO2P10endbxMZlg955QCG0lU=\r\n=tBP5\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.22_1659059392761_0.6928466614416711"},"_hasShrinkwrap":false},"0.24.23":{"name":"@sinclair/typebox","version":"0.24.23","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"_id":"@sinclair/typebox@0.24.23","_integrity":"sha512-dhpD3rztStcXgwuhJhg10CA2YJfwx799VlzZpuEi/8ijKriQST6rEpA8mDYlyaVkxWlTiVFme1s1fc6rx8+BhA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.23.tgz","_from":"file:sinclair-typebox-0.24.23.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-dhpD3rztStcXgwuhJhg10CA2YJfwx799VlzZpuEi/8ijKriQST6rEpA8mDYlyaVkxWlTiVFme1s1fc6rx8+BhA==","shasum":"ce30c80e93a69e8f18fd77f8995b3afdb6bb9974","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.23.tgz","fileCount":33,"unpackedSize":245389,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDYeXdPyYVcsHwV7npGN6sfUB+ddrnj3YfsXyvK8LWOjAIgLZWnsnoRtVWb1lkfJsNIGMkgRzq9f7OKAuEjQ0sjtiM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi56bhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrWCg//Q0jfaNhPTX/1dlgkeI+71e0mh11NGQ9P79j6czxbLxz7Q3Pa\r\n+vex+SZO9tUNs1hQWkIHCyii1EOyAZ+Oq8Tzq5LeL0e/umZqrNzovjBxN6LS\r\nqDIB1BG3cnjEpBI7VybNW32X6Fh0j90lZccuSIHcHi+cbC2qDm70tkvIMZIi\r\nidf4DCod6Ry0nyT8oB/SVrOqytgeek0CoYyk/2cICgWINPDm9MsN94EIhOoZ\r\nCFhrez16XL0bdGNKpQLdyiJCzX1cNGOZqsvoZjK/DcBvxP7uRSrbzKCp0cUP\r\nHR1+sScAepCf1KlPG9Vyt4nk7QCzABKFq7PFrz+0TquAMVP6FLYEIPQorM3V\r\nwBBBJp8ujU4w/rg7kRn1s6roBu+arBGBDCSvju7AF97sDFYfBRM4Hy8WlNh9\r\n1iPM9fDU59CV7Xek99jx0SoUrcUae3+eq2dRszq8/fmhwELFuuZiv/V02PzW\r\nJZbvz/Vwxgn6rQ12M7cq97hn897fzXjGAGFR3H1D+D/V/TFFl39YUOnM9FkN\r\np2oQuVOCDXprrz1R3Bo1NI0flTyrFsoqnfUWzLvthbN0Qo33Zx0vhBkFrPls\r\nM5bxT/5zK5gczWyP9+tmqP7fUp3Q6bl4jsgRbplr+lFz5SB6HgSL+VlldJb6\r\nAzQr/ayT3P1QBTBM+19pdgbRRgU+ZxigJaE=\r\n=3o5G\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.23_1659348705517_0.457725377235221"},"_hasShrinkwrap":false},"0.24.24":{"name":"@sinclair/typebox","version":"0.24.24","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"_id":"@sinclair/typebox@0.24.24","_integrity":"sha512-YaQ015FMwcveHbmI7w7X19f979CUCut2sf1gryWVV5nkAFr598jUhSpByKaC2BSBtJLT9lrDBfEo0Y2IFNipMQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.24.tgz","_from":"file:sinclair-typebox-0.24.24.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-YaQ015FMwcveHbmI7w7X19f979CUCut2sf1gryWVV5nkAFr598jUhSpByKaC2BSBtJLT9lrDBfEo0Y2IFNipMQ==","shasum":"1c201951882b0954b0689b0047584776e0053c1f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.24.tgz","fileCount":33,"unpackedSize":252476,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCfAPb+A7b9sSepN33K2eXQvIJwjcszIQ3ekFLiqaPtxQIgEBUE3vHzZ9FCmgJ2tqkVFEah5/jhFYFuFrYREISsbMs="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6AU0ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq4XQ/+Mi/8CiinL69kWeZunIpjGT3GFtMnAhD7UzH24xLWnUshujuK\r\ncs0WLNiFd6oRIcVaFKSi/6DeueL9qb6ZGzXjwuPo4jry1gw/O4lziHQnL/4J\r\ncMI+3mlYZyCyNpwTP2MhuFlxUkwh7EUxwnSSDbW+dTZVA1PC2vFe0VUtB4TR\r\nEgYlamoAZh9bUMp7TBXvJ/0vx+NYjVNRVWPPN2t78I+MvRM7vKzKVbl9W68g\r\nThEypkgIl+Ic/XGtdOaHzDcW9Ob2EJ6uTQFwEkaW/BBfPUZM504vyHq49Vgt\r\nszwvs4FDvhk/9bQRAMRQIDSeymbkcoLF+y1gTSKw6G4Pua0A9NjzdoNpaxWc\r\nisSF0NQteGWaLi1Ipz7gO/dFNSRFf8G5mK7AXE3Y72090r4uEMTnneD8DYD1\r\n2cWbigf1GoUmnOzP4iUWFG0bMWXG/CGlWxFy7fUkifFvGGLpKViYBt5aq0vg\r\nNOf0uXeGdptuzc1I4s+6sglvdiQADDeGvBFhg/a/SSl2oe67x0fq1sIw7d2u\r\nWyr4VpaJddI5hxPuFTXzygDAO1VU8vs+RgCeKvaXHJ8cZsbPVy9tS6+ptVyp\r\ndv7pRnAk+7QFaW/b5Gne125vYj6+HlCGnOwKVdo8F03UDzhYGXSHNcXO5WJe\r\nt67hotkzIjmUL+VuCUmOy+Hv7L0qDIRvYqY=\r\n=aw+t\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.24_1659372851814_0.4984057280664649"},"_hasShrinkwrap":false},"0.24.25":{"name":"@sinclair/typebox","version":"0.24.25","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"_id":"@sinclair/typebox@0.24.25","_integrity":"sha512-Z0b1gkfeHzRQen7juqXIZ4P2nvI6vZV+m/PhxBlVsNH/jSg2FuqJ+x4haFFIbbct6LMA7m6x2sBob/Giecj09A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.25.tgz","_from":"file:sinclair-typebox-0.24.25.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Z0b1gkfeHzRQen7juqXIZ4P2nvI6vZV+m/PhxBlVsNH/jSg2FuqJ+x4haFFIbbct6LMA7m6x2sBob/Giecj09A==","shasum":"61234177664cf161b621443a18f9e6714f757e2b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.25.tgz","fileCount":33,"unpackedSize":252327,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHHNpI4pUGgGx4y6z5u7dX/lQG5fr6RMx3/zevFEf+EcAiEA7n7Coceh1kYEZduHpjvwMG0PEgBvH5QWqDt2DY2CanM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6A82ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr9tA/+JFER9efO370cJLwIP1QsCyPgwqMcv/E7KiowxSkdc1Ikr5nr\r\nI2NEq1G4gAu1gjtoCqwq8DUB+ud38K/tNEud1GF16D1gcM7yDeDoc4kjErLT\r\nidJ1mCTSKmNTF2lZ2Fy1HO/2jSbyEZigeJIu2KAMIggry/c5XxpSButAEu/+\r\nnf5alkFA97ZXReMZ9SQG+e7FK7auZdfoKHT+nOFUsq/3op/iJoC1+DCyaZtS\r\nIdnxy21QPuqK+I5pjRqFASiXlHaucAc7o53FsIAcEJ3buAwHejsEkQmD5Sjj\r\nvCpQqUecNbdi/HXKL227NRh37yRDiPI9lf3dijYlwP6TwsxkKQfmQ+3gT5aD\r\n3dK+4UMohMuYe4GfxmJn3dk9Y5cccddsnAwxIQzV6NF+yYAOqXlUZpGZPjTt\r\nEq7KbN59Oaq3To4vauzWfX7tvGRAFODAMILM2ty4iXOyFbvPfC8W7i0UYlDw\r\nr7TLwn7MbLDda5AnDCAdbU/fs6GGaI/vuwvl9xKt/Klwwk6qDl+zNqCjrM7N\r\ndI11+2aRETxHJ24oy3XZx2+F5NdQibm7xXXb3FhdP7RVqqKCWUsEUJZC55mf\r\nIfyDGWYjGkywz+VdzbVaL+p0Da/Gp56xzdWY/CGjH/Jhn4j6wbAyCcWqoYLH\r\nfqw9Ni0SBhFfqo0RTHPLxe5uENMW2nzC6ec=\r\n=a4Q9\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.25_1659375414468_0.08659865534070899"},"_hasShrinkwrap":false},"0.24.26":{"name":"@sinclair/typebox","version":"0.24.26","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.26","_integrity":"sha512-1ZVIyyS1NXDRVT8GjWD5jULjhDyM3IsIHef2VGUMdnWOlX2tkPjyEX/7K0TGSH2S8EaPhp1ylFdjSjUGQ+gecg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.26.tgz","_from":"file:sinclair-typebox-0.24.26.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-1ZVIyyS1NXDRVT8GjWD5jULjhDyM3IsIHef2VGUMdnWOlX2tkPjyEX/7K0TGSH2S8EaPhp1ylFdjSjUGQ+gecg==","shasum":"84f9e8c1d93154e734a7947609a1dc7c7a81cc22","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.26.tgz","fileCount":33,"unpackedSize":252497,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDcG2f3HNLqrnDd/yFVDT0r4kvl3viP+T6u4DBriy5nrAIgF+hLqTCjfB+2lhnknxIKvOn+rqaHXP7L+ebLGHzKYZs="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6KDzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpCzhAAj7x71/TmQ7FpALhLX6j2bvRFxFp0CC35qckitjZ5Nds31v05\r\nlSJtHfBxSUnUok7+G5Enk+fNHWwzl5iPOclevs1JSIquQE0fA+u/vQmyeETu\r\n2fBKFeLm0JwEPwca+jQaAD1CFlCfZHA9DRn2mhqnmtf9Umg9xxxx+RVyWhOZ\r\n3/lMLwE5xZSaQZ9vgydOAvu/79Z3dpujIdFy/ThrDvG3GekEzURO5f9AmDub\r\nE1kzlg4Dp72WPQYnueSFLgwWeJtjw3ZQtr86A7cA8sxv7rNkWSEaliSi04MF\r\n8akxZ45ifJbnmD6oGnpdtG5Zjm4Vh/toT+IyCfQvhxPBjXBkPYpDdDCVcA/E\r\n8AqsfEN2dspZA0dFm0ndoHeD+R5vTwRxeLHQsewUtfqYawtetkmQ0+NW/oqN\r\nxJD+4QvwcI+OohUjuqKMyAIvn+FJsNQRMxpjClk4liiJaSyp4P8mI+Dpp36m\r\n7fVCk5HWmDhIJrWCOSf7wHoZfJJcYdc5T2WmD/B3798pjguaEpktHXIDAyJt\r\nxUm0FaQdY9+c0eKF4wR6R5Q79dUc+rX9xvM2hNKFUn6Gs4gXVk2EuNg+TkN9\r\nX+sAkFreVVB7Oqty0anvpk8fk50AL3Ma9dq+pSRGJU+FDijV8OtlcYjhxU8N\r\n4FNz+aH88k5kQLoYeiRllmZlNz+RYf86y0w=\r\n=F+TP\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.26_1659412722826_0.890120941889464"},"_hasShrinkwrap":false},"0.24.27":{"name":"@sinclair/typebox","version":"0.24.27","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.16.3","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.27","_integrity":"sha512-K7C7IlQ3zLePEZleUN21ceBA2aLcMnLHTLph8QWk1JK37L90obdpY+QGY8bXMKxf1ht1Z0MNewvXxWv0oGDYFg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.27.tgz","_from":"file:sinclair-typebox-0.24.27.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-K7C7IlQ3zLePEZleUN21ceBA2aLcMnLHTLph8QWk1JK37L90obdpY+QGY8bXMKxf1ht1Z0MNewvXxWv0oGDYFg==","shasum":"d55643516a1546174e10da681a8aaa81e757452d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.27.tgz","fileCount":33,"unpackedSize":254554,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFEO71vbh40jtj85KLMc4rs0uClcfl/qxm9C5UDujXfiAiB5Z49lQlygThlMggvZKpGdC9Alxi0RkvVAvG6G+ZAB6A=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi64TvACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrhEBAAlkTKieGaBWccMCIEm09W8qcyARoQdooJou1a0UrDRxX6O0YU\r\nkCNHvaOJqSk0o5KTuBnbtqvUIs8UlMweKT0OJFYImj4ZLg0NFrki5rhtzNQ5\r\n4XJXlFKuiDymz9cVW2C+A+USPS46jFSEyJleuCxGzd7+x3Z8CWziKStTj+/a\r\nLW8+YPpFRGgOOKl3cmAOpWiIHunoScYk9w3QA6ZWQieop7xdRP3DatFmAt3f\r\n5bhQeCZuR81KlFKDDie0hNkIW44z5cFDeT2ACWSV6kS47VUj4ov0U8IKpS58\r\nkkUqn3+uwOzFKq612QbxsXxBqNTI9Aj6q8qELBWxxWor5HzvK+gP0ZxU0TsJ\r\ncmBaT2yrzBR/XDi43GGsEEPRBhYXWnkEUg8bmLSoqJTglgBO+lFd7220NGBD\r\ni3RR1EcNpM2hITtwJBIj0vc/ATz/AkopiMge/9iKV+BP5oZODPn1nRJMV9g+\r\nPHsK4r/tBabb3XvjJH6zKgiG5c2qzV/TopJB9SwXnmjZR6Y6d1WKul/FxOW1\r\ns4RKAMPsPwnkU4UuVXHxvsFmyejtGTQxV6h+AlgB8DoK7vCnEjOWMgXwG3n2\r\n3ci7aMDR96rGyg26rQq0cK30DggjYDVBoMTIiByu1ivOCSNx+G9iPqxmyUd2\r\ngUXIK/MhMwSjlQukMMx430NIHygMgi1ALRE=\r\n=iVzS\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.27_1659602158872_0.053863671780329136"},"_hasShrinkwrap":false},"0.24.28":{"name":"@sinclair/typebox","version":"0.24.28","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.0","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.12","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.5","mocha":"^9.2.0","prettier":"^2.7.1","typescript":"^4.7.4"},"_id":"@sinclair/typebox@0.24.28","_integrity":"sha512-dgJd3HLOkLmz4Bw50eZx/zJwtBq65nms3N9VBYu5LTjJ883oBFkTyXRlCB/ZGGwqYpJJHA5zW2Ibhl5ngITfow==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.28.tgz","_from":"file:sinclair-typebox-0.24.28.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-dgJd3HLOkLmz4Bw50eZx/zJwtBq65nms3N9VBYu5LTjJ883oBFkTyXRlCB/ZGGwqYpJJHA5zW2Ibhl5ngITfow==","shasum":"15aa0b416f82c268b1573ab653e4413c965fe794","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.28.tgz","fileCount":33,"unpackedSize":256085,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCRy62l1775TRWJL4yyvGryprLwG4BjPaxAEmZ57t//AQIgfYAoTfQyDQziT5MmJK0mzDhcWme0CgkKsakRbXYo2aQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi9oC3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrDMA/9F5ZrEBa48q6v4xSbMjot5wkPjAJkZY87uO3hpSH8Aw5gaCdS\r\nh/EMieK5gXzbmB0KoZy/a8Oo3DTQZBXX9DqjEBZl78MHSejZa6OZPihXIsR3\r\njpFKzmFdGNgNVuBFk+VLTPS0mt3FV4sN4uVWL7VXNXMUNcACE3jdwnCqWL+C\r\nVqFPt+W5GTc90qfbKcKxSjBptIDAbSLIfe/7qtoFQ6tj/wb38PpSzUatGhTP\r\nOVr1y3wguJ3WK2ukd1MDoMdRFAwHlxgufec+HZyujGWTq2a7ccI7T9BN2thr\r\ngCfeV0KJ+2ReGsRW9oykZqr+oEiDCXXOR2IBTjJc9LyT9qr4NRUZhdpZZ00A\r\nV+l6OzStdrUEb6eBlZnENeSY4QOS8BYOeLpGCdGPnoBRpuomVgY/FzHExLpL\r\nNd6c+63xIo6rFqfGZlbOimkHhZwIFizgqYLuHUJkGNwBJUrZ8ngjGnXkqzKk\r\n+ypg0+mx+Pa4KCwcsBljlBxA/EaW1TXH9Bxfm6PpfX7ZSsrMTj0fJHuk0IN3\r\nVDj0XIXEe/5qeW8LhDGz5MhJmdFaLrE67ijLgHlP9mozqJvo+JbVHJIedJZ4\r\nmXAw/p/xWOOwDhDb8rmvz0Fz9+ihnEFTrbD4Q3MqYO84DmEyGnaNaZV7DI2p\r\n1cuTlpHIbiFKXkZdxcZX+tnW0GGRZPpFYRM=\r\n=MHKt\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.28_1660321975386_0.24358698133975487"},"_hasShrinkwrap":false},"0.24.29":{"name":"@sinclair/typebox","version":"0.24.29","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.29","_integrity":"sha512-ohR2BnUhkCCUyiYnw3Rp/MspBLXImFMnrhSjdbCmkL7RgwfFwfLKJi7sPl7Ifq93UfZq7PCyFLcyO+D/qI5Jyg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.29.tgz","_from":"file:sinclair-typebox-0.24.29.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ohR2BnUhkCCUyiYnw3Rp/MspBLXImFMnrhSjdbCmkL7RgwfFwfLKJi7sPl7Ifq93UfZq7PCyFLcyO+D/qI5Jyg==","shasum":"acf9799f22e04cb13146e3946f71561d5e33ff5b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.29.tgz","fileCount":37,"unpackedSize":263083,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCrRJyfB3mBUIF90Gae9NXEdEc6o7byY3mXm/Vo9pIiAAIgOt2GlgBd6WhqvRjC+st5iZbKxQA8l7usqCAcZZCJIZQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjDSsWACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpABg/+PxC/056ekol0N0+DlhO6b9a7Vp/y1zM/kIeXHOfN2QCLyL3G\r\n8bu/opHuh/xGMiEDTiftra9i0jyNACSQ6/VXyVZ7Vs9WwrTf8iC2rTjE05wn\r\nNNkmZecuTYe5n5pbe3g54oFY+PYRsu+rmrXYinSVJjUVC8HAK96ZL9VmozfM\r\nq5Qr+mmCaCIaD33CcjKFjBPEFeniLmVtBTZPpVNXESeqM/dPVabDgR2W6fIO\r\niShP1wkgKpfdMPoNjIe2zM1AMh+QxDBLVEe+BgRGL8D19KD0wn9cyfqQShzE\r\n6usOnxnNLEanluLXPW0nqVGPgkCs+hH//cCzsAZuhUdX7GUw1ecTZlxzMwP+\r\n1169MszXsVoP94HGOtAqL4ekvhLsdG17pM9Qdr453wmPppi4Bg1ZZxwOF9UX\r\n8PBKx2LsFETK+pVIxDwFttRG3pLohwpN+3ikjyPHoQ8sqRNgE70d3BdEDC3P\r\n8TyKH8g+vZg9ByMIZq6ryW8hLVl3rf5T/wJXz2ZfMxv6Wts1Ia/z4+TEKjeB\r\nhVyI2PFxpYeP9z4QYA2nQJLpepDj2cFSRjcR6iw/DLzciRYHRPOpu3JBXtpK\r\nQiCUHFodj4nPxoYU1LT5VZu6m93eNylpwsp7sbdctBOeU8eRoS9E5wIzXYDw\r\n1Ht91ov2jEdkgP0Lad0OgKn/CDmWI/L9Tys=\r\n=WJId\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.29_1661807382053_0.9060904271778507"},"_hasShrinkwrap":false},"0.24.30":{"name":"@sinclair/typebox","version":"0.24.30","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.30","_integrity":"sha512-YTlUf5iAfDZEVmI4SWOBGcxpufY2XQhWqSwyLeR2Qg1pkjlM6+Pvc+9MA/+zUaiEFuuX3F3KdhqS5bcasgLc5A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.30.tgz","_from":"file:sinclair-typebox-0.24.30.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-YTlUf5iAfDZEVmI4SWOBGcxpufY2XQhWqSwyLeR2Qg1pkjlM6+Pvc+9MA/+zUaiEFuuX3F3KdhqS5bcasgLc5A==","shasum":"70d94661a065373b7330cc2dce79424bc8e957a1","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.30.tgz","fileCount":37,"unpackedSize":263394,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGkxDbkWyyAWmD13gWwqpS3KjF9LvPXhbe/EVCbsFIz8AiAMLtbEXfWXM+seiGtJ07NCiZT4FrdbA86Cg/4ber4fHA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjDS3bACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmptOhAAj0759hQSWmXLBsbw6uKJtR6tDL6QaMSHGa8K3IVSu4guxHhP\r\nEUEDym61SyzcaypS4VsxnQJtvY8Cuu4/LlkQlWPS2Okxa+0LkK7E4FF77j/u\r\nEKW99DyWKYawrSZw8gRuZcLX/U90DfIu7IGbsBXknWiyuDPBhsL6NUICXpyJ\r\nINfbfQExmeE72a89wlwohZ4eSXSjdl3xgG5fudElrI3NMWpU4O4oDPRHkhKO\r\nBUJUSlQfmFxHSE+PLZQYA6QyUVyDu+oi7+l4Er6G8cRmMiODmPEd4TeX9MjY\r\nSsKUg7O7ADAflz6btnuqnpZnYi4tdVQni5wCpaFX2ydZKAopWYW4OqJVjDqo\r\nbelEVVyPg9Oghr/IyljV+jj+aCR9R+1KxHzqg6JskkcotlpZBEEj+39E6roX\r\nAdMVAFuK91IJRJ2QHOFxsrGLaKbCyTUhaVvqVS7z+/CyqScrMNWYjiiJgVhF\r\nu5OeCTNimTT4YufOGqTCc7FUkSsonIkL2RyI0QVv1f5sHfHtKuZGdNLtLAE1\r\ngbfZvBZ1focjMKbF3tKQNhMCY4A9/24qA32u8MftpCDG7WDfVlIo8rLCmu9Y\r\nzt6k4nOwpXk8o5XEZ+M+LcFUCafYv5lmHnBXhG2Szv1D/KaYcUSFjueSfAeG\r\n1zti6WqfyEenVN+/Ydg6moVGRZwdwgqgz6Y=\r\n=QJnr\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.30_1661808091434_0.8675767253573601"},"_hasShrinkwrap":false},"0.24.31":{"name":"@sinclair/typebox","version":"0.24.31","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.31","_integrity":"sha512-uWZaAsh9WFhcY1rWLLcMU/omiIIAQ/PmgqplaF6UWY6ULPH0ZO8hupJRAydzlTQZJIK3Voz8o8dYlEx+Cm6BAA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.31.tgz","_from":"file:sinclair-typebox-0.24.31.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-uWZaAsh9WFhcY1rWLLcMU/omiIIAQ/PmgqplaF6UWY6ULPH0ZO8hupJRAydzlTQZJIK3Voz8o8dYlEx+Cm6BAA==","shasum":"3f3752bc830a9daa4a0185573f0bf870089c3222","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.31.tgz","fileCount":37,"unpackedSize":265754,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBhKRfKwsCvME4ilLT5xvx8nYTsWUEG28IBPqwoNbfM0AiAr3Fyn/pN7hBzl/PGpnX2fIKZtEqMuu5bge/LDCESKvQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjDdneACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpyxQ/+JhpYIZnF8BNh6VDqs7MtWdUdz0T+17kmLR00YzKR4G2lQbE4\r\n67ivl4g1YHBYbfPnLqXkrrmKSUW2N06IZPIztgtKdttUiJC2HDPe3JOhnPxs\r\nCtqAymmnuh7ctIpd10pH73u9wAIe+Ej9avi4/JCcptow39Ydcom0s/VXdeCr\r\njIVB272Ajt00w1ng4sTHYm4Xg9zwjHmeiR35FnptzyhCMjR4ts+1mss3Eyyr\r\nN4cqF+o4mmldRQYb3krkFoeswhjW8zsHxm2+hgL02acOw6HSkBEzzV63rb6y\r\nmA1L9LtbXT/LXZEM5QAmBEBxfaAKAa7td8jWwYDjimFVMymUm84ZnVgTRcsS\r\nDYEDGXy0yy3BYjgIk2ng/3XAstQFU0/G+OtzVDbxrZa5qgsb3KdMm1It3tKJ\r\n9nkW4pXkgYNOKhG6X1G1AwJcVtvhJUMgvK47pgTNF5jC5tyzXJ5RD8C6Y5lL\r\nvWcbXHg59OvuVwpaVioL07YQJ4CLxA7AxE6xZUb964qP/PAjTPrE5et9IvxC\r\n75FFpW7yXPA9SdQWL3Emlb+2pNqW2EC130NCMqf50KA2x5EMDCUJ/zCfc14U\r\nIxedwnvoadVc61ZVaFYpIl89pj5B/udx14KZf21UD3fBbX7XN+YhH9KW7LUG\r\nMDeCwQEw4oY/N1xdG3vAyHdbLpaKr+o64Uc=\r\n=ni1H\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.31_1661852125649_0.1806011388853752"},"_hasShrinkwrap":false},"0.24.32":{"name":"@sinclair/typebox","version":"0.24.32","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.32","_integrity":"sha512-NWNTW284AOFhxgYofPef5IqDq6Y7ghZkZAkWJcUBp1r9ljfrFOKBDsiQJnLNp9tLcaSXFK9OgsS72W4RXe0jvw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.32.tgz","_from":"file:sinclair-typebox-0.24.32.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-NWNTW284AOFhxgYofPef5IqDq6Y7ghZkZAkWJcUBp1r9ljfrFOKBDsiQJnLNp9tLcaSXFK9OgsS72W4RXe0jvw==","shasum":"214a03e430122d239a6414a5d5412c23964cafbd","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.32.tgz","fileCount":37,"unpackedSize":266517,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEoec/t9i7uvBaBz5ZMjGLKPZsvLx7b3GsRfB7ZFW3BKAiEAmYm/Eq8bWIUgwdevd0S3BN9ZlXsfMn6Ynl96azSRU+w="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjDwthACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmriHA//eehmNJORVlR/ewyGX1HWOfYZJABlEYcaO2C+4SvB4l/h5tWY\r\neQHfoC3PCWbgIMiSBtRoANTCQbJzuWmJ8rVQpurs/mXU0LnIpvXfuBT0ZX3O\r\nS+3WMyvLd9sCj7Jo0kjfenPcH5lIdmYkS+p+Pk4tYKHYo8vXNfcs1vNdftXX\r\nZA4VwkkHFhfjQmr36oC4l/P2Hpkt2S2iulUDEbfwEThl25yRa5dRQuimnG0g\r\nX/c1BEMQSgn3GL4jcqGfzq8t4MYhtzbfaKa2xM9lHB9OcFVgASSc3tl1+PL3\r\nztJgl1Hf1CCOVQCdCZfEb8OXAPHa3sfo8/52AQDl+AuB21GXCXa4n+njWMNu\r\nf9u4t1qfguVR8H+LySzd+WZEc0OAov7816xmxqI/fZpp+mEr2rZ8SFmJ1qSo\r\nmq5bQZLe7KDA/z1Fh6Ne5rtj8bh2iGc013IjfTUHsMgQfwSKnI5CVfMbthyd\r\nYISPBtRTOwzRvK1IlALZxGXwaWJNkJHPAHbPuZeBzDto7/JX+FTZ69vVvGKk\r\nmGWGQdAhwADG8dCIWpzgxIRUJf4iEwFHIgshyNTwc1n6GicoexyXXMHbPsqI\r\nasbqwNpa2BJ/Aav7I07bSb4RhDrUQ7mJhRz5Lk/xEigC9PI7jCmTLQp3sjw9\r\njmumtuk8e0KA6bykaK3UTb6uuDYSoA+nl4c=\r\n=ImbN\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.32_1661930337600_0.40031395568692063"},"_hasShrinkwrap":false},"0.24.33":{"name":"@sinclair/typebox","version":"0.24.33","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.33","_integrity":"sha512-c5p4Ib38ILOGfeYZWIu2Ms6EDdc2PGehzEYLevsvZ1njIt4Jt66E++4pjpBpgh+yJFj4ahnbKfYahOyLxvTBCw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.33.tgz","_from":"file:sinclair-typebox-0.24.33.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-c5p4Ib38ILOGfeYZWIu2Ms6EDdc2PGehzEYLevsvZ1njIt4Jt66E++4pjpBpgh+yJFj4ahnbKfYahOyLxvTBCw==","shasum":"e7852f8cdd2fd93a9ea4de17a2dccd788a8bf50a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.33.tgz","fileCount":37,"unpackedSize":266568,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDZ71+sKkpYQoMvhm9cd3hHizMXE/e+8oX0vxv8zyXSSAiAmOOGuKQJt7fYNwiJ9WYwRqaK8/0iHVkoehqWxP2ajKw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjD6EpACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoBiA/+IlE4ULynNmRuYOGvUK/GitkleCmJSTL2sNDKnZ02/Z/oWdaD\r\nwmqsEqc8T+/KcpVq9adrM59Hq42+qJCh9DALkf8NL2IIVk5j50PLExrPIxVl\r\n3aLgM7es9VgCQMji+J9TTVDfEg2t011Lc7rFQv/QcpYG9M1nv4X0U9vv5O0y\r\nSUBelL4hSkkC9JI3ta5ZohI9CSkn75ZH8SM4u9cvFllII5TxCicxsnj+Jbtc\r\nuuYem+lzjci1KU42uvBZqciSPxSxnZzI15RADhzPcEy1EwyW5LrH+VhN09eD\r\nG4OJwOljCWp0E0eEjg7vUPqH5dTkyR8iLMZE4xdwMWpEfab6V7J+KiT66ONm\r\nlLUbkhIJ5mU7yHXRiBXlQpqQBI1ssjulg2JDHS8ar+TTSf1VWHxZ3EI/U/DI\r\nTFjznWnuU9nJ1OZXevTPTvN0XfyePyjvP9kl1PUTtYfBS+Kym9jgeiNasHE1\r\neNCe3QGjIT1vwRPLMvZX3p4RKED0rNaxfAB0AqQci4wxdOkvUNSmHUr2hGRm\r\n/Z47cy1JmOf6G2Yu2tohiV1FNdjQx6EdK41MXFmStlgRIvBg1roagUi4sqlS\r\n1ncpz38mozJXFyuFk8M02O2umJoc4wH8XRFbccsM1tZ+YY1p6i5GjkXyT1tD\r\nMirvX4ETxmqrhNZSA08E5UXpCFFDn9ce1cU=\r\n=hCUU\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.33_1661968681124_0.7511750957402077"},"_hasShrinkwrap":false},"0.24.34":{"name":"@sinclair/typebox","version":"0.24.34","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.34","_integrity":"sha512-x3ejWKw7rpy30Bvm6U0AQMOHdjqe2E3YJrBHlTxH0KFsp77bBa+MH324nJxtXZFpnTy/JW2h5HPYVm0vG2WPnw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.34.tgz","_from":"file:sinclair-typebox-0.24.34.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-x3ejWKw7rpy30Bvm6U0AQMOHdjqe2E3YJrBHlTxH0KFsp77bBa+MH324nJxtXZFpnTy/JW2h5HPYVm0vG2WPnw==","shasum":"35b799cf98a203d1940c8ce06688f9a09fbc0f50","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.34.tgz","fileCount":37,"unpackedSize":266818,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCHwsHCnavDhYWbbB1B3WQaBsTk8HW7iwgF3p2+IXMx18CIQCqx5QSHN0kfSDWHRsMx0+Zjj6SV5yZ6BeH+YIszDwARw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjD6nlACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr3vQ//Zoz6t8jMEzGlOoQdLcCNBH0mSRFMb8QakJmXB2A+vTODPPal\r\ne4k2VFVvqcSue9LtdfxL3I5c2tHempyC9k+Zu5tize46QsR+ssk/KHqHIC3f\r\nemSrCthgyqArK583JF/DTmK7+kbGplMqMkOuXXaf+8UAjZEfAaRjpwiw0tgI\r\n46ia72oC+b5KNjEnZpKZdW39ROyVPJDKzW0Eo40K2uLt/yz6sjxsjw/2sbkW\r\n+9MxohvCcdc3tpFFJCe9FpeqZ53LxUAyOUOaWqQSP/Uv8riL8WSc9tkLhj/1\r\nN8y64ATL6q+BU4ztcCJufQ7bswS9yRv4ifI6zUet10h2ok1JNZdaqHpbVRSv\r\nf6QvObgsTWAJroM5UzMQ3pfCaip4r9lUbq6VRu+jp2Igfvz6w/iyZ6Jw+8D+\r\nYInU5z4KocvmlQ5iSUS6tYTdyoQH9B9zCE4BBjvItqk/DkRT+MBrFvPCJWpA\r\nlq8tJUUYnHupSS+asv5iTu00mQ7Gn2JSZcZmQkqeJbNh03xhsb9T12Nc3t8r\r\nwpCn8yxrKicgiMFxDur2+ysyFyWjgdUbdvpRPe7RtX3C2WN1igJA4pmNvXS8\r\n5eh35Ouem4M86zgLG6GPnNJ7a0GL1yN+KNjRxxt2jA2yGRQYVWpyvWmYv08Y\r\nYGhVUpQMXldGHphf78Z774dTVa0VKq04N8Q=\r\n=6dgv\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.34_1661970917660_0.845779932585563"},"_hasShrinkwrap":false},"0.24.35":{"name":"@sinclair/typebox","version":"0.24.35","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.35","_integrity":"sha512-iN6ehuDndiTiDz2F+Orv/+oHJR+PrGv+38oghCddpsW4YEZl5qyLsWxSwYUWrKEOfjpGtXDFW6scJtjpzSLeSw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.35.tgz","_from":"file:sinclair-typebox-0.24.35.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-iN6ehuDndiTiDz2F+Orv/+oHJR+PrGv+38oghCddpsW4YEZl5qyLsWxSwYUWrKEOfjpGtXDFW6scJtjpzSLeSw==","shasum":"7b5ca127aefe3ed482bb60f874bebbe3143e82f5","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.35.tgz","fileCount":47,"unpackedSize":292795,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEWdTwbor6UHWhmGGtk835ooP22PSEvsBRwIjlpEh0DnAiBrhsiCTIArnzQ/s/LYQsG901t1JRITctER/4dOXohZqg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjFMxcACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqo1hAAiEXrgEAMVI/uQnLBwr/+yieqUadhwNc0K5lkjm+BAVJ4eOeA\r\nAMnGPjSfByy9nJ5T5Xo/+iRCEps1OBclQFxGz109dDtSUmsWt2J+mKlmM0mU\r\nzNl3nK6l0Pz//5AGHw/Ckd2nGH6ZbfZkcmRIzzYh7aL6dt+K2Zn5UUC7z4CK\r\nlxshDmy4KudDtejqaaMRGKAgLf38REZIUABXEKxTHPbM2YBLre8M9KDNRDi1\r\n8L8kTdkJ2X36pqseWNgIw+nBhjTEFNc5Os5FWe7ha+elzqkextk13P/ZWNLF\r\nvHq2RIwTz9hxVEA6D+0yJhdibbEw8htx8CE7fE8nQYJFzVpauPuLLlu3WbTN\r\nvZ1EFnt+IxJFDeIoQAU4Xy92AzsA/aVsHBJfhRQR/7QlHA3XLnDGwS06txJz\r\nrEwNPHxJ3ydDz827fRDyeFq3lUcw9K1aXjZbYgjKh8aMUR8NXM8TeDna50bx\r\n9oF/iKgh031+eegQsLy1kRVMISG0O1btsGvvLBL9FPXBNRNLlrigGaZolaRL\r\nTdt4hp3gsatK7rfCO6SjVGNYmw0w0C1yj/6JF+dqFBeS7SiKX7B+ZKmzNXbp\r\nuvtCMz2gJh3y9UQ1K8J+nGaXpCX7EW8xYh0AToblwMZbisrmpwMztmb4JONt\r\nATPJjoo39bBfv7b2VHmQ5UGTFRci9unuYyE=\r\n=5GXb\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.35_1662307420328_0.637072737663672"},"_hasShrinkwrap":false},"0.24.36":{"name":"@sinclair/typebox","version":"0.24.36","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.36","_integrity":"sha512-KxQQnSP+5x+JbBbnz0ZwCK0KQ06Wsvt8eYCUsBkt+h80+iXaVJzfDQ9GmAcypfUk/HrQL+l1Hjz1Fjeznfs+Uw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.36.tgz","_from":"file:sinclair-typebox-0.24.36.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-KxQQnSP+5x+JbBbnz0ZwCK0KQ06Wsvt8eYCUsBkt+h80+iXaVJzfDQ9GmAcypfUk/HrQL+l1Hjz1Fjeznfs+Uw==","shasum":"8d44cf34fac7226c61f57b174c0b4b47652a2f8f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.36.tgz","fileCount":47,"unpackedSize":292937,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDtVJ2RZwcfmXmUf+0KSvcU+eCAvI1gDNb0+AmrTd7AHAIgOmOL3KYrCIBuYC2veYJHAvDe373fB+fm5hWvAA1Kp8Y="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjF6BbACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoTBQ/+J4Qa2B7Vjep+QX0l90B/Y8NbNMpoVBrcg1FRxQejg8RhcKDd\r\n4HlCIXuyz7dld/JOc3xymrIRUR8F5IR73Sy2pIviUDOMIMl+3SVeypA/fsvB\r\nxopP4itiTbdiRtkRlzIKnbuKHLgKWRjSg/ldlPHb0ILqYfNd3RdtnrDKN37a\r\nKoveaogmHSQqXW+0QjAy+/yjDnsS1/ZHRH/KApS1waOI5xX8Ey3g+gkk6sA8\r\nmvz0agCAdOvCXdSdSTg4nlRdlZ55tbxmbakKuCwvKNk86gTBQA3euBf7/ehK\r\nDjb52UJyCVjlb4Gq+G5/boQidC8U1RZC9LqDNxv0hAmnzp4j8iCAiRFVtolh\r\n1vFUyiYmidbqkuzdhM+QQgyh4RfDxwBH0rd5VyiO+szRKkNIWxAalNuQVReZ\r\nQ1oCbBpIzl1rKkXUiQV+OzCsbjynsJKTu5FOvMLTFEuhK81xqEPI2D0aobEp\r\n+QEqnt0s4eJdI6Wk9YIjP4BeFxRN+VO8iKFVsV+3YpBbKhbuWa98Dckq8Wxd\r\n9hfvwlSmU86PafDrjdcU1PHTcS5GeBQVgCYA/koXKwl9Asu1POj3JfBJa3I6\r\n3YYL4usDuR7QJgks5+27iuVBodsSd51xAfTcA6yUW+Ru8sziROVLbGuEFZ1P\r\ntMO+pjOWnmyNHkoZOiMpIpFF1vvW6sxpJ7g=\r\n=/t6D\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.36_1662492763720_0.5023570082155973"},"_hasShrinkwrap":false},"0.24.37":{"name":"@sinclair/typebox","version":"0.24.37","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.37","_integrity":"sha512-8xuD57tNMHs7R0YUzFp0xqIVOTJDbFHnEN/JTej5d5o/dTx4OSsURKTT9dkWl6ghMk4zs3AYe1bi7UK0NnJ4oA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.37.tgz","_from":"file:sinclair-typebox-0.24.37.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-8xuD57tNMHs7R0YUzFp0xqIVOTJDbFHnEN/JTej5d5o/dTx4OSsURKTT9dkWl6ghMk4zs3AYe1bi7UK0NnJ4oA==","shasum":"3ea4cf8f3cf8a943c17baf5bb7b33587afa5f76b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.37.tgz","fileCount":47,"unpackedSize":292878,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD343xn+FS2SRSIcKa8FcvbHn73E4NF5HAZDgMQLp2xVAIhAOc+grFWAjXt6KrTlzguJwii5UQItXjBOXflcAaAD02z"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjF679ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqYXw//bdGtY5zhN5yT6td0ljHbS/EDem2jGSOnQ071rJF9IK8cfwYq\r\nlUJ3ssQvQNEgr/tjRbzIO8hE3FbdEy+x8pGkde5Q8l4bKA08hJaO+31zwZ3m\r\ngWgZA9Gk4h1T51TIuOGo4I8u6qGd4U3bytHTRhCIWmx6+z6ykR1Gi1f7LFW0\r\n3T5hQHKHOPWRVViPdi2Dbxp8PhBqyQBt9NELcwnjAFMkPm+rWOfgw3GYAfte\r\nY8/feqpoJO8K/XhdhGygm8MagaugYFZhyhjuSEzDSR5tkhu0INRdNPq+lGeb\r\nUKfo8gYC0er9knyXPGnbNmoRcOiKETqE37cfHTVbqrcoA4gyMGGMB4oAfA+N\r\nzRioVqKfq1p/8y6YrEwrPXKzjEYo1VMGBH0O09EhMSLkqJCaU35VFKkcI9iK\r\ncwnMK0LCAYkn+UzwRFJg8EyFxLDz4/dUQzoB73amqNsWnWatJMXeO/Ebp3AG\r\nqVD8MDhdmttuch5WjEl3Vp0DbUQMKZJu30DudlPsDhg62vIjvzvY6HrsaXoy\r\no1NMqqIkBJERHtB7fdC/pAG0rBujgsDjQNqDxJcgjKoefyOip0nEPY4SzZ86\r\ncIhz8etT4C0tTo8WpU2vj89xRm5jFbwbloSjO9xA2AJfNbiKRI7KAzi8yoG9\r\nsrXsMvkFDmWHauRRxg6yr9QwUAwbSH7hEmc=\r\n=DfZJ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.37_1662496509637_0.761011118057821"},"_hasShrinkwrap":false},"0.24.38":{"name":"@sinclair/typebox","version":"0.24.38","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.38","_integrity":"sha512-IbYB6vdhLFmzGEyXXEdFAJKyq7S4/RsivkgxNzs/LzwYuUJHmeNQ0cHkjG/Yqm6VgUzzZDLMZAf0XgeeaZAocA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.38.tgz","_from":"file:sinclair-typebox-0.24.38.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-IbYB6vdhLFmzGEyXXEdFAJKyq7S4/RsivkgxNzs/LzwYuUJHmeNQ0cHkjG/Yqm6VgUzzZDLMZAf0XgeeaZAocA==","shasum":"7f68d9c5775c4c2cec0524b3b990263dd009c968","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.38.tgz","fileCount":47,"unpackedSize":292898,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEkyeuORD0ZOuNt4iVGv1nHFrakl3SKlYExRXAXt51g+AiEAuXJkDk0EYLgDmGjND0Zxzz3hKGG7N0opa4mILL7n+eY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjGF/hACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqcwg/+MwQ8ZhwR6GqtolxjTF770//+rSSla9dBxt0DVYklNjkwRPqy\r\nY7/wghjztALrmwYj5ec9UQfTI0Tu6zA/Fw79wsyx+CsI9zQ7tVOkGVsP0Igr\r\n/5nPSsmGW+f7AJEPDIjXC0kHhhZ1hpKXx9E8Q8AZ39jta8jPKlCyP1LxSRgZ\r\n/TaCSBKnFjqgIe9A3LhxEUSSc9/gjilZTLTDC4EKV86+Rcn0nhUwJwx7LaS8\r\nS+jnN4YVQ6b50Irkb5nkA8Pf4iyK8aAF2Cp6YcJ/CSQkqX/iHxfmhNYZyEpn\r\nKLgx9Wq4KsDXcr/TS9Xp0CEDaSq5SXFXAMedPA9Po4zwgV+L4/un8vphPL6e\r\nZ/8GOBXNvs/vEkSQO/KCvFB1R2i9PFdrLgThq1dpM/GkS4cjzG3nj1ojEhf6\r\nh+NWeEgVTcQxl3LNTb6gLy3gO6zxvBtCA0XlGaGftC6RzUo0hR2LmrLBM6k0\r\nPdAw2f8bbLEzHuGod8ApEq3E3KrrWr06gHDT1SO7oRD/Mfg/kXus8HmeChhq\r\nO3xZBbP3eEp9UKZehgi9AiouXN+q+eobrRyWV5y4ZQQxBgrLlmqJuONALngB\r\nq33cHtpGeDRXVMMsWUQFykgIiJs63APYa4hge0cherqV3flv54qF5JKB9DWi\r\n8ALgJEpT3MOhqS4CXjGiI/CBrGIn5L59/lI=\r\n=0j1k\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.38_1662541793172_0.5151982994861768"},"_hasShrinkwrap":false},"0.24.39":{"name":"@sinclair/typebox","version":"0.24.39","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.39","_integrity":"sha512-GqtkxoAjhTzoMwFg/JYRl+1+miOoyvp6mkLpbMSd2fIQak2KvY00ndlXxxkDBpuCPYkorZeEZf0LEQn9V9NRVQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.39.tgz","_from":"file:sinclair-typebox-0.24.39.tgz","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","dist":{"integrity":"sha512-GqtkxoAjhTzoMwFg/JYRl+1+miOoyvp6mkLpbMSd2fIQak2KvY00ndlXxxkDBpuCPYkorZeEZf0LEQn9V9NRVQ==","shasum":"21d0c56c295a00e391e20a88a48c11d4a1210ac5","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.39.tgz","fileCount":47,"unpackedSize":297755,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBv06bqeHgHzdVrKCapjosC2MapGPi4ByE+3BRicr4sOAiARrtchFkhbwy2WuBzxU6xM2Pp50ZafUo7abKFzvVxUPQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjGnVLACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoLrg//QfjxFIKwYpA/t5OJs94vBJ9ldtX8aOaORyaSKtgRDx1MM5ic\r\n0loQ+t7jEvljU46wCQ9TnpYS+HNxWMLN3vwJ8CxIP5Po/W5tHponl+fuiXfg\r\nv149+xzLkyH4iO5kM/0NfZO8qmbrQf7jOzt0+WzBRlcqnHSyUUCSZLrkrpbp\r\nuRuibBCvoLbmrGEc1g6RSyG+uua9R3ZD+jV0lqQW+wk3nZNVWQTntMQhHf58\r\nCYS5BaMXjP26ahYO1mI5iypB6GjU5PPIYeKnQFfwPh5Afu1Q1CD44rG05d3M\r\ng2yyOJgBUPZh8tQUr1mwliwXja/A5eGjh18L29VOyzdGQsG6hcn1myjjcO6/\r\nJ18kzv1V23jiM9aOfrlIOGJPp9cUJKTFZYZevwZegFM8W6FgCGcWTwNkDn9p\r\nWu376fQeQru+yNXgfT9xl4FuV0k5k3x7m9dgREH2Wf0yW5WMJA2E/37SI0vC\r\n4V1CXUYRl+tTEgDxLCf88O5HwwreLHyPKP2KJBcqthJBRtyp2GVDAQ/T9uXc\r\nHBkFO17KVUJjPK5rXe11zsvVEVcSGOcCH6sD8sMmPo3Qo1GXYIPD9AerJNP/\r\nRFhJ+Twj94XxB4PTsPQi6wyLnWVWL/dwO+W99dehCWWfJCPCumKlxA552uLX\r\n6HofAcbBkN23lU6z1zvNTKNXp6YchcEX4N0=\r\n=64zI\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.39_1662678347047_0.6267658698062895"},"_hasShrinkwrap":false},"0.24.40":{"name":"@sinclair/typebox","version":"0.24.40","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.40","_integrity":"sha512-Xint60L8rF0+nRy+6fCjW9jQMmu7fTpbwTBrXZiK6eq/RHDJS7LvWX/0oXC8O7fCePmrY/XdfaTv2HiUDeCq4g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.40.tgz","_from":"file:sinclair-typebox-0.24.40.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Xint60L8rF0+nRy+6fCjW9jQMmu7fTpbwTBrXZiK6eq/RHDJS7LvWX/0oXC8O7fCePmrY/XdfaTv2HiUDeCq4g==","shasum":"00ee9b48537b147f6ffc80ebc28ab16d6016ed5c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.40.tgz","fileCount":47,"unpackedSize":300185,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCFrZIrZhq31U992u7P7/jza4gaIqLhB0zsbLM3XY4ARgIgLXgC44iX6Lj4RP3gV7x3g58vxWYoYiTkWpv2HqQ9FIE="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjHPxGACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo54BAAku85q5ZGDG0cg1kQKtaGpGQWU0QO6LipA7K8TCb1IweKdHlW\r\nKZOtl9mQ2NEkLRNB8Fs7KyMz0o2TY+07ElTU726iLbykRAUtH6YgFzFOK6ym\r\nXyC1eFOBobGv1i5IAQEKPomveVGKPc+vn8zexOt0nk2udE/3XBS/sAhzQxXP\r\nfiqFKBVwdh/AttUQskqpZ2JEwNZLNllnUtrjZP3u9rB0HrjfGIuzeO/yJCl6\r\nBEF+SaCcLjgT7zNKiIEkgayijycbcKGFKxJ3UBzv8Fq0V+JBgYBn+IhKzWwS\r\n/t9JD+w2ODmHbe8nNHFwtMuvty4QmBBFS3Wen0ekRv4oXMuJwhd+ZHIVyOU4\r\nQzls1iebRNonCvdErsfquVxTi3pmp3H0Olg7uy7HBAhRukDnWuWfSaW1fR+v\r\nHzBMfeqmHUi+0CBRhZFAG34fmQGsDjCW0BmYnXJLRdlCdCvc79pF3GtFbs2N\r\nlJY61f4wy9OyVXB05KMZHDoqJS+/3124Z45MTMHxK+zPSN+tr8IPVu4XHbJF\r\nsq9zsaD4w0U2G5uLqCHAW025J6qDwzjBJpmWKAIPRwe75Xg9QSY977OATWom\r\nyq3zT+eILeSQVDri38ZCeIh+AQGs5uQCUPVE/8CuU5fvErkG5LylPxeX8lkh\r\nCKQkCyY5rtOLRyt8/QTF6yFg8kVddjF9FZ0=\r\n=Fx1P\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.40_1662843973863_0.42825022842374283"},"_hasShrinkwrap":false},"0.24.41":{"name":"@sinclair/typebox","version":"0.24.41","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.41","_integrity":"sha512-TJCgQurls4FipFvHeC+gfAzb+GGstL0TDwYJKQVtTeSvJIznWzP7g3bAd5gEBlr8+bIxqnWS9VGVWREDhmE8jA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.41.tgz","_from":"file:sinclair-typebox-0.24.41.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-TJCgQurls4FipFvHeC+gfAzb+GGstL0TDwYJKQVtTeSvJIznWzP7g3bAd5gEBlr8+bIxqnWS9VGVWREDhmE8jA==","shasum":"45470b8bae32a28f1e0501066d0bacbd8b772804","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.41.tgz","fileCount":47,"unpackedSize":302499,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEocW9EbiCK03LmfkjOjVSHADoFyZa3aXonYZdJpAaO8AiB5+7NE5KNtPUP3wu//C68HTA0OkMtg6DShya4QlhFUFA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjH34sACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqQxxAAjrQrB+0M0WQz9V5kQCqf/Rt/AAQgEbu5bTQhtk7Zs9cSekIh\r\nznUM0h9dhyJYbCKuX04RLLg0mKSi2fVaJ8x55RH1zKS/Il8d90maYOkVQ4GF\r\n5qWdXh/ZuwkkBHdUUpU4VBPa/WL3rLaFHUFO6LWXkj/5LMyo1UevVEG2BoUL\r\n4N15LR8Sn4Zz9l6Wj5cjIrQVe7bJzVaIEB1s1OzdnNh3YsdkF119ughmNaLE\r\nKJkpx3hMfmw0nxO1R5QigpqjXHlFKT4SSIe1TVAnwFHRTRu8sgCAxSBtMEnI\r\ngcHioHra6sHhTKx3mC5dtDRmhpoBLq0I1emoSK79eIDXpWhwD68/aaMXO0D1\r\nzAuYvAA9x+6jdXdl/OyphSzj5AFhmeQoHH2h4UKe3iFF1v038Kw6H7x5cKHA\r\nI4XuDIoa3LZ5JBg3TcGQ6i2YUOvaS3M+ev6qAt4M7cRfcXQHCtv9p46z5lM1\r\nku8rHFQZvR0hyHiEREv2EnxFQqwn/mfuC/acYu598sj0AoxN7eksYCxeUtKK\r\nPzuRlgPJQk2SH2jas+ElhXqchyAjV0ycBk6UNNUZ3NNwK3P0dA4YJBJWKuqe\r\n7xOxO/O0x1l+azfqAj2Rtdmg2G5TL9U7QMy/MohS/QOKToe68pEHOXw0Na+b\r\nVtvFyWukqK3yPyQsyaL/VMsm/S3U5aaXuzs=\r\n=nmD8\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.41_1663008300066_0.4697474671574682"},"_hasShrinkwrap":false},"0.24.42":{"name":"@sinclair/typebox","version":"0.24.42","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.42","_integrity":"sha512-d+2AtrHGyWek2u2ITF0lHRIv6Tt7X0dEHW+0rP+5aDCEjC3fiN2RBjrLD0yU0at52BcZbRGxLbAtXiR0hFCjYw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.42.tgz","_from":"file:sinclair-typebox-0.24.42.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-d+2AtrHGyWek2u2ITF0lHRIv6Tt7X0dEHW+0rP+5aDCEjC3fiN2RBjrLD0yU0at52BcZbRGxLbAtXiR0hFCjYw==","shasum":"a74b608d494a1f4cc079738e050142a678813f52","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.42.tgz","fileCount":47,"unpackedSize":303072,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH+EbwYMh7KMly+vPCUxAB1MCu4omnB+FLWLgqLGFIA0AiAKSWXW8MzViVpYVZtuz3ooAJIg9eTWMpzUef6DiIX4SA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjJXvYACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq4ww/+K5d8SpjiecJOwkupaBzdoYKaSVl0iy7rGtLB43AZtkK9ufyZ\r\niUPvJDEbPo2d6D8e/pzMkchTHNbj+6EIOqWjLB842qygiotuNl7BlazrKkrb\r\nIU5beqZlD/BpaQTr8UP6X4J40T9wT+C3nesqG6ht0Yyf1SE6pTKWnPlRADwt\r\nPxsaW2GeDeonTw7ixsLDi1el4UfU91UiV0mp2RIYPbD5rNZ4jEjlJ771R4nU\r\nUAdpVm7PUpXLT6uffgM8SuHPLJs/xXLtXy7aOjNe677+vLl60ZMq6YuYoEMZ\r\nRiEHCpsxqTFUzswJW4+mczgUkygl9qQd93z0PRaeShElUyQg4VmfduI/lqaW\r\n0zEsHLKj3vqxVXo9+DGfC8Ifz7mBMcvHkuBIqRZRrf188uzzVMuYso3RnnFD\r\nRrPeapVS5uhpJq2Vv6byJiUYFjZ29dUUxXd8w7+SSjWkAAPbckqX82GMGdHW\r\nvBRZ1Ddga8k5wTU3AUJ/EibdoLOeeSPui1xHFYqosMoyrasPU8JaKu55HXjB\r\n3ZVZf5aLQ+QOhjOV0H51n1CSYBAZ6tJqlE8XALBQltJAskiqY/eyX1wUoJjo\r\n4WAvwk4v09uTtT25JSM2b+Q47BWlKkWRtTPqbk9ACQsn+0nzfpt8RBHC4qKN\r\nOfjezI2iRxEmsSm0nGrKPuH6toDwHGCdWs8=\r\n=9/g+\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.42_1663400920184_0.6415183789971715"},"_hasShrinkwrap":false},"0.24.43":{"name":"@sinclair/typebox","version":"0.24.43","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.43","_integrity":"sha512-1orQTvtazZmsPeBroJjysvsOQCYV2yjWlebkSY38pl5vr2tdLjEJ+LoxITlGNZaH2RE19WlAwQMkH/7C14wLfw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.43.tgz","_from":"file:sinclair-typebox-0.24.43.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-1orQTvtazZmsPeBroJjysvsOQCYV2yjWlebkSY38pl5vr2tdLjEJ+LoxITlGNZaH2RE19WlAwQMkH/7C14wLfw==","shasum":"2e2bce0e5e493aaf639beed0cd6c88cfde7dd3d7","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.43.tgz","fileCount":47,"unpackedSize":303351,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHSrKo7HgiCLq5xypJb2l0+FGoiZY0lzHMJIaLvBOPm4AiBZve4vSquVUPLazkjEoI+22dGCU9EOg8ae9NKf18LeUw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjL09rACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmoycw//UVbCS1hZ4HymlQ4mDKOklNAs6mhF3L2lXQ4X8fjOzrpizdiU\r\ns33F64fZaouVMInaOBf+KTOscVIEZM2DLizZm8oHz9S5JuP3KdvLSAAcmzXq\r\nJ8dfBHKyNsIySBA5D58R6vVzvH5TgdELFTKGeQwa77cR2KMbGfZ4yYlo2HDW\r\nXdXJEUO9Qc0bM56z+c9ejhcpH5ZudkIAQi3PspWLJpJyxKN5F42O0UBlPjc2\r\nbNVZhsv6URLgaO0XX+WbxnpFzKc1z/GWVZIMkp0wxaMfCLSsMjX9DEdIzdoD\r\n/8cftFhDgbnQbmEBK3/kVzMsTSyJzwA26MsUWedLEHh9cXRrSNhcFVEhZe6v\r\nJHlK8cq1OD/nLhiJtMky3a1cVr6crHpD16NKR0HhkmsP0ta00iZabVueESBe\r\nxwRf8fSYAHINrfm257dQrxrZPSy0NcOiaYS6Gy0lM+wrrJZPvLofHh1qavGZ\r\nZ0j4ZgOfrxqaAcQy1TPCmPbFr61JkmG/BOdQTqYMHtxP289OzkQUdL2bC3r/\r\nrywvSbchhbTCgzJdaGDVIAadfJw9eCEqS7q65FI1hLxAzTUlB3PZPa6BjFpu\r\nDKp29ME1G6M4Ai/ltDb6k6cOqB20YalU9XbPOt8UiNCEgYRbvIqsEa2hNDnT\r\nd8LjJ55cSWbBno0QBphc6uS+deFWetKwf8c=\r\n=X05i\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.43_1664044907407_0.898384977300209"},"_hasShrinkwrap":false},"0.24.44":{"name":"@sinclair/typebox","version":"0.24.44","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.44","_integrity":"sha512-ka0W0KN5i6LfrSocduwliMMpqVgohtPFidKdMEOUjoOFCHcOOYkKsPRxfs5f15oPNHTm6ERAm0GV/+/LTKeiWg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.44.tgz","_from":"file:sinclair-typebox-0.24.44.tgz","_nodeVersion":"18.4.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ka0W0KN5i6LfrSocduwliMMpqVgohtPFidKdMEOUjoOFCHcOOYkKsPRxfs5f15oPNHTm6ERAm0GV/+/LTKeiWg==","shasum":"0a0aa3bf4a155a678418527342a3ee84bd8caa5c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.44.tgz","fileCount":47,"unpackedSize":303347,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCO0alHALqoRKvbwWexDpPp/dZ0gS9SP837tu4EiQm8bwIgPFed2IV94X7A0ZqQnReqZP9eUNpQtb/Fj6pOfHUisf0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjNKVBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqyrg/+Ji6fVPNuJFX2ViGHpgJnUeRa3t134zHT3+Nd0MuK+nmB5vG8\r\nnLzoASotJSH5dgVa2+l/uLwN1jbbVswZrbj+zaeCj7b6zycs8CfPzylN168J\r\noYdRuTOh/Uh/yKAIjPS9KXVYGYssymGqNrvuCnkBs8T1khmhKyGBF/umMFjf\r\nuQ0J64F5ozmKlxG+2yVM2DIeBlLme+yXJAJCxyuZibgqzSUI0+NVH/76WybF\r\n8SNNXDkcjJO3PIIxiBb6WXUg4BNzguIpjNb35QU90UQnkIqVNS2M7YFO4QaI\r\nbwYPbDrbXLNOwDo0zFXI0Lkb7U1N6Yht+Waq4srChipiVhkAmZmGQxmhnqVS\r\nnyLqXYk1qIUPGrhzxAPeZpiwOTrK0EAiJensVyNOaBnQwY44DC4MK1Ujhs/T\r\nxEqr7hnwwisLEvrDoUxYbzpGcw0DqPoCarhSiXQsRk47s/RxNaU/GLEJMPoA\r\nOED2FRo6VtasL+uV4zAPXzgEe+hVS95YEkAkL8DRPw3EDZEKICIve9hhedN5\r\nGL0APK37GViD3IfupGVVwswkRDUWb8ZkVTu4swMSCcxhPQooZxkDOE+wv4g6\r\nAVeEqrYMjoDsHaJvQOk0UaxHeAuJhe4hC4UmFXIBGdTc86AaIriEN+ujoeq3\r\n6tLDeQ4GnkwW3ApEcLyikDadGX4Xy6Ilupk=\r\n=8Zrf\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.44_1664394561505_0.19586846035770056"},"_hasShrinkwrap":false},"0.24.45":{"name":"@sinclair/typebox","version":"0.24.45","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.45","_integrity":"sha512-tD/Zg4RR7/pVVPjgHjnbCeBshwj/4FYfkSwIew8/YmMOalXPilcQiQIbif7DR/SM/e2sZAmy4qrFKDtTjAvz8w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.45.tgz","_from":"file:sinclair-typebox-0.24.45.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-tD/Zg4RR7/pVVPjgHjnbCeBshwj/4FYfkSwIew8/YmMOalXPilcQiQIbif7DR/SM/e2sZAmy4qrFKDtTjAvz8w==","shasum":"a2ea1d151276646e1c6498b06d4183c0b660d5c8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.45.tgz","fileCount":47,"unpackedSize":303415,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD6xOEK96lL+xY9TBLoU9hLq9HvBEHs6vjZYuXe8jz0qwIgGo1WGHIt7smQPyZQnu+xl+QHfkFU+PPjcLdHCyBEJ7w="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRnZuACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqf5A//Zk2ZegN7GI1bT7GlpY3MM2T4SndSXxyCdhAGAjQsPu5UxonS\r\nrD/29Tikvym3mLVHcopQBq/S2lTt7T+AeoRAgnKystMJinF2GG1roUN4sNHg\r\nfNNcJj5m854oau24ZeHcpXJSWHaHh2oiHg08tX3v1tjhuPbj++elCiOp+A+j\r\ntELyAONI1y4ljLiaektyoCl8QEeLuU0UQ89aWBCJ/GO5HfyBBZxNZKU4U7GT\r\n71wBqG8gSbKqDITFiK5SxSwlVdXkvkMye/+TUmyG+Ngz2QBfQjIo37SoZ8qJ\r\nTyDf5TsMOImnsYWduIyyNddbHtkgeP67IOrbPYuNDjtqN+jaApz3Rb/aAbjV\r\nMlioJtlTH1rrUZemvoSP+M9sFtEXEc/W9UP6lQoXYixQVicceDdlWnHdGQ1N\r\nf70gagNRYDxC9hCBlctnV3M8Td+g6T/DGxV1QeinRoNTtA0nihXKYTWx1uZ2\r\njvzEquOoM00+ww7S0rq8sSDAYPvWBCyOsFUG+ds+Wj7imNzEJae6XguR1DiQ\r\n2nBtT5djvqB1+XkJGuOLOCIrXNazKjE0ohkUJVN+KM9A2pJckUBixkSy2u4v\r\nvNpqiHuaCRazzRA/WWluFw/lTt35oO2OOgLCO4nN7bXYCMKWcA1oPZSChDU3\r\njk0m0ARZuG4r1i02HAEuh8l3f2AZCkAuhDo=\r\n=cRes\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.45_1665562222401_0.04729360562723528"},"_hasShrinkwrap":false},"0.24.46":{"name":"@sinclair/typebox","version":"0.24.46","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.46","_integrity":"sha512-ng4ut1z2MCBhK/NwDVwIQp3pAUOCs/KNaW3cBxdFB2xTDrOuo1xuNmpr/9HHFhxqIvHrs1NTH3KJg6q+JSy1Kw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.46.tgz","_from":"file:sinclair-typebox-0.24.46.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ng4ut1z2MCBhK/NwDVwIQp3pAUOCs/KNaW3cBxdFB2xTDrOuo1xuNmpr/9HHFhxqIvHrs1NTH3KJg6q+JSy1Kw==","shasum":"57501b58023776dbbae9e25619146286440be34c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.46.tgz","fileCount":47,"unpackedSize":303929,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHQBkRky0krUhB4vEzW5BVfEkBX56cI/WXdAFsgZNsXGAiB/v0bQ3qBt7F77XvNOhNceQYZH/XpIM0p7G4uz+s9hpQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRoHgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqhtg/+MJOMXJlD4y44PWPBMpq5IqRwp48HwlfkUmK6NSm61FE0T+2Z\r\n4WuBIpysWPw1ARTLVpSmpA9l5fcoxsnKfadNYrAY71N08YcHm+qg2AMDNL42\r\n8szSUk8KDjtm+qSf5HOe6ddwi4/Nb0Efwodglp1gKaiIsHp+9BdwmR4rYVv0\r\ngLdBbaYcjbQJNpDD8LwFt0f290hmlHu34Ur3pfUFzFOB5fEuwogsKLelFXq7\r\nP4NATZ0pketROJ/Jrav6Nty+yAqeUODi0Zq7AtP4kW0U6WaLaM3wyJgJadRU\r\nkYQYr+Yc8JrWiEPx0e+zF0xhHSJgOYRa01n38SavXr/VrShsSNSBl2yzLRsR\r\n0s0DMyjWNXo+bEqzuZYTTJKujDONbkj5vqF3rX8TPB9TgIrkq2/+vOwlApF0\r\n3os17IGqo5WnsHGvg41CKbfBHZUK27l0eOkMCGQb+wfYoN6NU7Y03AwYwXBp\r\nlXkm2l5OW2yF7T2kbo+PpFCJ077sWDv8OFt9pa3Y9IcKHSe/yiC7gJhTHPcO\r\nyMEFxqxymNuN/DxI7FFX9vISvWGnQzW2xrdfFH+7PziYLBnEVnThrvZRq9S9\r\nEn9X0oAAxAvQr7sSiT7ZVgioByNIYn013ThKWpFER3yZ7DXm1LemYGNX9Z+j\r\nBVpNtrQ5SdGTvxJMj3tm+23gkIgLThH/z70=\r\n=1Wj/\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.46_1665565152309_0.15009511973909162"},"_hasShrinkwrap":false},"0.24.47":{"name":"@sinclair/typebox","version":"0.24.47","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.47","_integrity":"sha512-J4Xw0xYK4h7eC34MNOPQi6IkNxGRck6n4VJpWDzXIFVTW8I/D43Gf+NfWz/v/7NHlzWOPd3+T4PJ4OqklQ2u7A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.47.tgz","_from":"file:sinclair-typebox-0.24.47.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-J4Xw0xYK4h7eC34MNOPQi6IkNxGRck6n4VJpWDzXIFVTW8I/D43Gf+NfWz/v/7NHlzWOPd3+T4PJ4OqklQ2u7A==","shasum":"530b67163714356f93e82bdb871e7db4b7bc564e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.47.tgz","fileCount":47,"unpackedSize":303947,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDOriXCpNtTk9kd7lGaNQa+NJVlpE9o35j8CIG6x7fVfAiEA4YZo62njXRWs/QwxNI2KgUjqXJU78MIOmztouSynjI4="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjTr0nACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrS+A/9H/JbIPwhUSZs831nBfVbVxEGv6+SlCScUbPFwNF0lymSXyg5\r\ndt+rBPPfZKN9CBzpKKB1vKmzptTlixSOqVdXGyMywVqo6C6wXpCSeP35ylfq\r\nThCTDOmU2ysPLCoAbvi9D06dhTnyBXiiAj2eOvi94t6qXyAKizEk1TmfRiz2\r\nJm1xfcJhQSlJBX13T9gtodJB7dcXbFcJDEoqbflLiaEdQAc1DHQ11nB1Gzg+\r\nf/MBr4bSHFrWK70NtWw8pqp3dClbWEwOo28DTAV6X6Hpc3A4Ynm8LoRjjh8n\r\nRqlM9CkGKRHUMz/va1tgANfaUn2JelzFJHcc0sfWjyiIHBHJ7Ai+9gB5+qMT\r\nWgu6r4i1vYFEYG1khexcrqAquQaER6h1rDq4vF1W4cjWn8x/Onz92uHk/ABc\r\nw0oMkwaOshQfWxDNy2Rqt2/Hf90HfV8Uz6yMK+chUo1buTTz9cbjSE0E8xrN\r\n7QEYJBRuYrNzSwejkeYAay4rj2stJ3cv9KqdKKRrHZcQ6JiU9gW9SmcWUG7+\r\niaCBWYuLxsdNfJAeH6dWZRGxzXH775d7VGDb5rJ8i846cvVEWYXdTjgTK95D\r\n0es3jp/c7JXFlUqrRKbGLAXQQQekx5d8aj7zrTVBIVB+JyZCAKBk2jM5dTNX\r\nk9kBfUar65TrWrAp2EmdnLgdrjEmHd658+k=\r\n=bsWd\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.47_1666104615693_0.5433373763742027"},"_hasShrinkwrap":false},"0.24.48":{"name":"@sinclair/typebox","version":"0.24.48","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.24.48","_integrity":"sha512-WPGpRNHbkOsfBDmh8QHU7a5NWzEuYNThST8x1cISvX0RpP+1+V8zjuJqNwGJkHGIlhdIIhv6qVYqXz2q5/gjAA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.48.tgz","_from":"file:sinclair-typebox-0.24.48.tgz","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-WPGpRNHbkOsfBDmh8QHU7a5NWzEuYNThST8x1cISvX0RpP+1+V8zjuJqNwGJkHGIlhdIIhv6qVYqXz2q5/gjAA==","shasum":"bd558c6059df563d49a4d94df8e8e0510b662e3f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.48.tgz","fileCount":47,"unpackedSize":304588,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDt+T2036Ad9IeS1IestiftKrMaJvN0JVtuktMTSSS2DwIgGSBjQuzRlIxUJtcyCN5yOjYfLtkksyqjfQd+MWHhr/o="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjUzFSACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrQ/RAAhZwukjMvCBVxNpCK1KqlCDXiGx1boTgBvk+OkYrHlmJBYmjd\r\nHcnbFdQfG9qOJOsSuhuGcgyG6QGewV5E43ZLSjwt77u1bjIW0gH2xuQz9098\r\nKmizutiFKzXy1xhfuexyhZZXCKUKtjT4GQmY/xRIdrywpsRbWN3mF8AoWms2\r\nQBSfwJUOPbjGNYucKTF7mTjuYwZRTUxMKULCdgds1Qwe11L1H41YomjgrRIN\r\nHBrg1iZeCHqwWpvLXRd5YVnDnPsMMaI4/oEiMh4Puf90BPYle2Q8svjtAHGK\r\nA/Ybrl4xTfEXXW7yD5OcoRY6vYzSeHwMPy/R0uWW+1EoJFG47rwqujowZUyd\r\ndN8AykxPLgAnC00hF1yofZrB8sn4//TbYTFcLo9hJpnWt33TzgTjGtyBlRxp\r\nbAkK3Iha7a89M/v1zp4lD0CZwZAayW0mYvdP39zQslLN0WiTG+X5dotXcpLO\r\nv/sJwxIuU/1R3+pSCdmuMNIaDbA/F3kN+UzpSWAW69YcojPoLY4MALoKalcV\r\n2jJsSkZ9ZV0Y/YpjUnSoKY9g82xM95EZTkijQStE0fORPT0kldS3VcecYzuO\r\nMIp87iKeN/SnATP+HtKDNSD6XmT9pLEirGW7nb7MHk/MEZAyzdW6Q+3wmiV7\r\nnQ/DJq8sko1sZJy9d3Epi5AHePkCJhrWVDo=\r\n=WZQR\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.48_1666396498631_0.49574597891436323"},"_hasShrinkwrap":false},"0.24.49":{"name":"@sinclair/typebox","version":"0.24.49","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.49","_integrity":"sha512-qWgJVeCThMWTJSAZHyHDlHBkJY0LARFoq/96RH4oIFAwJptMwB3Isq62c4zRVRIAF2r4RMOc2WOhtOLj5C4InA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.49.tgz","_from":"file:sinclair-typebox-0.24.49.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-qWgJVeCThMWTJSAZHyHDlHBkJY0LARFoq/96RH4oIFAwJptMwB3Isq62c4zRVRIAF2r4RMOc2WOhtOLj5C4InA==","shasum":"7a3a5569fe9e4faa47d8019246d37541c2d7a058","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.49.tgz","fileCount":47,"unpackedSize":306658,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCebd9sm7O6pVYOpJjjw3hzkGJEBRBLNHzton+A0LG+wAIgWAUps97giKiBnAVA+mrPZsmqu39Wbr13Ke9AmZmQyHw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVPs+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqUtg/+Mk7XKwXFJUV1Q2rwMWUW1BSKBidmaWoFVOglzU6tPNmtr9rS\r\nuomJeAu2LVje2mNXpjdBdc2tcV1w3+ktoMCMTL3LmsraF+1q7D8sXNOkKXTC\r\nLYi3gMCShi1tEu1TDh+5YDJwTvyPvkVfV0Ub+Wuvk01VzIhQZQCecM5SsE/5\r\nUFkCm4nFRqu3gRmyQY5NSfyk1oO4UAI9Y0qPvf+6c1nchmCn2yCuKovv9LYA\r\nnleZvX6Tniu2BLOaev7w9tyFaIj2EFw87NuXVxy1pE19kw/aLuZjSg9PvUJX\r\nYW2OsCFQIo6gy+vgBr5/brAMeEKtaspIeT0kr+PLRjXcu8LZfTyI7dj93tOS\r\n/J705h3IyYEPqGjU2m8NhfUP/iePGazKyYmnHzuoRPuXkamPNc8hj3K+6Q0D\r\n9wDBXRDu65FqZVvMTH9hE1TnNR7ML3i5J3hYOeSDQgc+dyzNXKwL/3RwSx19\r\nrXx4NJcHB81mFTKd3y3bkbe9Km3ekQeHlqCAYFsCB2nRDikqhEpT/i04FXvk\r\noEdevjRB+mjcq1hd8umZDVI8taJkstMjbmmSJCrM6mTtwVAASTuVKb7CUa8W\r\n/oyzP/nPLPuyVmWlOYUJRPRsXE0X0G4d8RLNkQ6+AtOcJ2oadmry0Z/5LmTT\r\n52qAYTcp5j8yNLwq8wVfVn/FOOG5WOX0nYk=\r\n=umi6\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.49_1666513726610_0.7686200519134401"},"_hasShrinkwrap":false},"0.24.50":{"name":"@sinclair/typebox","version":"0.24.50","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.50","_integrity":"sha512-k8ETQOOQDg5FtK7y9KJWpsGLik+QlPmIi8zzl/dGUgshV2QitprkFlCR/AemjWOTyKn9UwSSGRTzLVotvgCjYQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.50.tgz","_from":"file:sinclair-typebox-0.24.50.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-k8ETQOOQDg5FtK7y9KJWpsGLik+QlPmIi8zzl/dGUgshV2QitprkFlCR/AemjWOTyKn9UwSSGRTzLVotvgCjYQ==","shasum":"35ee4db4ab8f3a8ff56490c51f92445d2776451e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.50.tgz","fileCount":47,"unpackedSize":306456,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDVwofogb2zjH9L7yo5zImnubkcPt2Q7qX0nBUkXKdXcgIgercR9qHagm7nHBmpJzhR1kgoHv4oP4oyMdAAd5jFuXc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVQMeACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo07Q/9GJnfDtqcLJjt+/mjAqft4CvnVNQ3bNRPg+AtFPG7zNUQVr1C\r\n/7/vqxAyknrGrLPnCja7ujvzYevrs4u1RfGtT9AMo4R82UHOmlXxXWMh7Q//\r\ndECy47+zmBM5d2oHH/IwdFU5sblB7Nu54R5UQouiJyXognlBRuZLTFTRjgqE\r\nyUEFMA1d9pH89RZ8tJ74ygkzcO7Azftvw679s9r4+zNgyVnmoKJi+UlU3M8o\r\ntcZdeiHZuCgAN3+4uR+oUOmvdZIWNcI1IDwTc9+GqyWueyZlW6NrLZSlPwMo\r\nrP+pd9HWkZwsUVXmfleEmPCaeOpCr38i2bx1sf+Ce0MLUDS+rPxjSDH5O9k0\r\nV4SXBb6MwrgC7Wysrgp4H2JZuPqsI0Ofn3ku4sWlMa7OoWHB6iGQ0q0kwu/v\r\nPV2FR89fMsdDcV5abWeWOZ9G3KfKoVscWs3jj3eB3v8nfpMrPELBsiS6CsGs\r\nUKXP3ltbR8sKsRfskSpgTbt5+HO/cOGsA01Iv+UTjMQ99iPP2DiXtx6JnhKN\r\nNOc16ri7NFWqqaKD5b11/NUWMeIOfxvBLFpY3SBzOAk3bToB4IULZkJUhnjO\r\nYB7zAM21D7cm7LZSV48P6yifPD3r/oYceYDCf8AIsxfoD/Wp1ECpDa+7rTOM\r\namySKXvzOt4cgbTDxoJTYXsXd3E3cWu3DL0=\r\n=ukpf\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.50_1666515742111_0.05366137589442843"},"_hasShrinkwrap":false},"0.24.51":{"name":"@sinclair/typebox","version":"0.24.51","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.24.51","_integrity":"sha512-1P1OROm/rdubP5aFDSZQILU0vrLCJ4fvHt6EoqHEM+2D/G5MK3bIaymUKLit8Js9gbns5UyJnkP/TZROLw4tUA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.24.51.tgz","_from":"file:sinclair-typebox-0.24.51.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-1P1OROm/rdubP5aFDSZQILU0vrLCJ4fvHt6EoqHEM+2D/G5MK3bIaymUKLit8Js9gbns5UyJnkP/TZROLw4tUA==","shasum":"645f33fe4e02defe26f2f5c0410e1c094eac7f5f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.51.tgz","fileCount":47,"unpackedSize":306477,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDHxAvxvDZkk84HH8iIqi6TrwNOoXyFL2rzhVCMcA94mgIhANfQUSaVMKQRWdJHrtnkhEE46FQ48O4vfJkyqLe835cS"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjWMPFACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqK9g/9HorIM/ptNmcfxGxKSUw2pypoaiEHJ7ApPy9GT1FbfdgjAh5p\r\n9/+xKnq9mSzW+jL04Si4ix8zYbS0sVk2qMJqPrumlH4Fs46Rg8MZhbdEoTnv\r\ncYlo7N6CnlIfZpV52vP9PUOx7QGaeV9Rlo78Xxps9ihAuLJrqRWXGyV9tLyn\r\njO7bXieFG6vKTq2FmMX1XG6t1sT1ayvp+mKg8I6Ke1xwYumbJ3WPfc9bcX8r\r\nxL5peVeggd5y8jognUEIXiEYoVMCVh0s1R0VzBg7eJwlZqqePzeondFMFfMR\r\nJzMjrwNyg1ybE08p9PT9wDfB/JISctNJG4WVa1FwjO8xGBH+7QegSZwVkQeM\r\nyvVorwa4ILFchWHbo5+gsjs8lY6Drb/x8VXA9gvifkKTpgxWAGoRuhFr0iQ+\r\nt61f02VTcvsWNpCidT9msP0Duz5VFgtbT5rQ9Rl11dnIHQd5uqWFemTo+BpJ\r\nY4E8R/I4dAuOM4acsdCSFYoCCM8z/u+9f377HCa5HWd4eWgHSF3RJQx81rxb\r\n2KZKHz94qjjxHNiMIvZ5R76UdwWgSwU8DBHkw94uHwsQFH2ogyRruWGlDHc9\r\nNMhDegFX8DGtnyMruwBKwRLRYyy37fkkiGTdGw/3XwiZg23HXGxoN75de9Ic\r\nkzt9Y8BdZvCR6TUYsiXpdcF5tvb5m0NmmvU=\r\n=OE2D\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.24.51_1666761669175_0.6081455350384823"},"_hasShrinkwrap":false},"0.25.0":{"name":"@sinclair/typebox","version":"0.25.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.0","_integrity":"sha512-Eb0KGwpkjo2JGj3FM5X6HjXzTONm12RsWUNInY+pa53EzV3MlwFEOBvuhY2tW7wNWrkR4XIKoRgonkJZk4lG5Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.0.tgz","_from":"file:sinclair-typebox-0.25.0.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Eb0KGwpkjo2JGj3FM5X6HjXzTONm12RsWUNInY+pa53EzV3MlwFEOBvuhY2tW7wNWrkR4XIKoRgonkJZk4lG5Q==","shasum":"90babb116b331fabd7ac598092c21a4679ee3ee4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.0.tgz","fileCount":47,"unpackedSize":319254,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCh8jaz1cj8+ulYU6hcOhQ0/mrefOhtxDYu7Sbu6Z7anQIhAOyT5D349dzuarFOduRXMp/ujbMt0WolFx8vv+CUcvE5"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjXDVNACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpF1Q/+KTw+9dvuIoIYysAC6Rw2EaHShjGkTu/MhWfPG6BLVj180UNB\r\nWEUP23WX3FIFsQeCarSfiDYUyLciReM8A02RQhdrBdQhAZGuZuZFVXTVZZDS\r\n61OKIkIEIOQhx9LFPgg0f55WlKjo+/G6KgUDASVrSpTAFvpz67zC1l6xkU96\r\nNMIW6MkjiWhaG0HM9kbc2TMZ7DFdcTH5zRwV9HKAgMSj/Q9+sd2uqDGKnbr4\r\nu171I19maLEOFu4Fzab7DL/Ld7JjeR+g13Q+1vxQyRO0PnI6ACx1IlZL/kz+\r\nS4MnRK6ooh7lGhezWiv6G+WihxOPQtdL6v3Kug2xT20lKlwanlZX7zvTC9jg\r\n6rCvNsiGhdaavXTzIFIlCcNp2vyGEculmphJlS2q6KxDgXvWv3NRRmtSpuYa\r\nAXJyml4IvDjTYnuOchbYHNnmNFiH0ZpyXXA2wWujYZHIbWPy/a9C+Vm4ERHb\r\nHnsBBQQgtpjhbVSOI0aHrW0mnZrc046b7n6LF2xfeOKiHMAHhE+/RJrqjFq7\r\nUuogmhfw4Qk6a1eRG62Mt8gG0vclUpOuwjZMj+UgpP0fXhIPkYOwPWNvCwEj\r\n7LJuuh2ss8mKixU3m3MmBuLNgrD6qmAYXtAaKD8xUqlNJZcQguec2aoA97OU\r\nTroc4BwfFFzo8Kd87yf5sBPa1Rf30bwmJEc=\r\n=E8IX\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.0_1666987341238_0.993780588977329"},"_hasShrinkwrap":false},"0.25.1":{"name":"@sinclair/typebox","version":"0.25.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.1","_integrity":"sha512-ij7duiwNUyqplvhAqBXJAHNAT+ozsyUhmC5mLO7PqyHOAk1G91d3ITF2h9LIDbYLP5PSTNYpcxYstU+4Y4i3aQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.1.tgz","_from":"file:sinclair-typebox-0.25.1.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ij7duiwNUyqplvhAqBXJAHNAT+ozsyUhmC5mLO7PqyHOAk1G91d3ITF2h9LIDbYLP5PSTNYpcxYstU+4Y4i3aQ==","shasum":"8caa80c24e0be5f909ce2439a0600dae3937c23c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.1.tgz","fileCount":47,"unpackedSize":319398,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC78Bch4jn3+h8je/7FjJUBnb6FiG0oecVaI/ya+alDGQIgMMY82VfHSlikplg8ExUGKYRdkmmO5PPIQt3yP1DXdfY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjXEPpACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmoa6g//S9vlkBy9S6Q9IKl6Ksy4bt9/VZWQpteVCgx4SyJyG1OR6ZIj\r\nMTiqi0ZqVVAE365F8EvaAlzdLHuvA5MBGxcNRtVn3rfMQHWY2CiEUGIhvdKT\r\ninzlKugpB4ESKA+x00BvABKlUJZQVJkXwJ442bqv/U34j/22wZ9hhEgECYvq\r\nMQnRVgrwj9u6fZ8nwZRMbrFxZJn0ITyi3JTzxt91oqySZbb1QijuEGnkoUe3\r\nXBgm+1Z3Mcxc2F61QDVG8QASI4FJavxJuJx5zS4mdPtUgEz4NtTHv4irZorE\r\nDYzvJlKTCUCnDzY/eO1LS6wHdsFOmR+yrYKWnIQmDPUpglwIQRCyvqYV2Q0l\r\nQAOKsDj02gz1TWhxUwlyUJqtmvZATDD12lW0B2xfFAzkT2pQjRlYAfbT8/k1\r\n7jQj46RfxRhxk4Ykv4mwvH2B0hh7brKgjsvRZig0uUT7KCfCVgkJc92Tt+Rl\r\nCaCbDU+SusttpuK+wpfbPE4kpiESDHc2eHz3ZO7lONKallssXoDEHdQh9v0R\r\nMRphtLpmU+3aAoTnvEc2qNBrhzvf1nczZ6oN8hWxhm2BqazS1B5vqVyHC2ZO\r\n0YOkubREflUFj7YWwkkHsaz26QD4ca8/o9h4M7r5EEeUv0GNaWyYhNtXjL0S\r\nDQr3S4WfcrO3AXwR4feCScrl8+iwKwHIybc=\r\n=gUts\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.1_1666991081635_0.5035445488242405"},"_hasShrinkwrap":false},"0.25.2":{"name":"@sinclair/typebox","version":"0.25.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.2","_integrity":"sha512-QWjo2shO8oUWM6rSwIz7tUY8+WxP0fhUYQvaFA5eq+sECaQjQaRZIBXgWhWzzsB+lbgjljB1zRFfyX8mudn1gQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.2.tgz","_from":"file:sinclair-typebox-0.25.2.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-QWjo2shO8oUWM6rSwIz7tUY8+WxP0fhUYQvaFA5eq+sECaQjQaRZIBXgWhWzzsB+lbgjljB1zRFfyX8mudn1gQ==","shasum":"8de5684b8ef7c46444d3ee54f6711d6f4e74aa6a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.2.tgz","fileCount":47,"unpackedSize":319405,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHUurzHF+tdYMKls8TwQGdGkKE5NcM8cqHfK1oRt0AGNAiB1nbDzQ7tl8skpcI901DeXW+LFRSSJO11lTwVSaq2vOA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjX8BcACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrcMg//ajQ85mL9TWAi6wQ2rBV1YUrQGFj+yHJkYc7mowywl3dxfG2U\r\nekTWIQ/+r4pxGx6PO7Ywlp7NbQQJafL5kRETVCQKwqoaWGgXVAsnfGWV7XPT\r\n5JjoH4atItD3PjVh7vpzC7xVy5ahXhWgEpzHsuGEQLGrcX9iz+Cbo3+nbXB2\r\nY5p5YY0HZogHAKF/mJedmfebfu7ipKAG8L9UgCRSeMP0PuaYePdCS2WcD6A1\r\nkZusnno0twEph9dOPweId1VgO5/RDTQ7vmaXjQs7XLL7somjF0LrXIP5CcYX\r\nLSRclZt640TswiP0QAsOxVZ3MhPzvvVzVPw6rx6SqZn4i45li+c7aMa+IMS4\r\nEfdrMC5AE0aX+rE7y8A73scQvZLqOmcnV2IhZKiaY8fpOJJLjWD3pvbRa1a+\r\nKoVsq1iY4NaL4WslFHuJUCejRGTJAJvKmKjAlOpjP6QxHDsbnukJRL+X13fm\r\nNEjUtpXIP7CtSbAmyy6nFLyu3gSbYLe9ozaWRo3+i5awyyOF9cXpreopMg9A\r\nrkc81mfDjJCpITk07ZVZRD8Qc02FyaEL/YPiG5MMt+aXVm2i2p+lhEbtD/Sc\r\n3oLAu8/1btlce+mSlvwuRb6/lAwRvwAweCzBkqRyqce8rmUNdWT8RuHsSVDP\r\nj7vPMlnBFhFmgV8IjMTToQ0/Ik7GtkIvttg=\r\n=892R\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.2_1667219548150_0.8859022009937798"},"_hasShrinkwrap":false},"0.25.3":{"name":"@sinclair/typebox","version":"0.25.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.3","_integrity":"sha512-zIxm0hEDwflBaa/hPjiRulXK+67sPp22V5jUwb3T58MitHBVGgM+cutxneeXY2vgj3990c4L06A0oKeZT+1hhw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.3.tgz","_from":"file:sinclair-typebox-0.25.3.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-zIxm0hEDwflBaa/hPjiRulXK+67sPp22V5jUwb3T58MitHBVGgM+cutxneeXY2vgj3990c4L06A0oKeZT+1hhw==","shasum":"84517e087003ad1156807dc6a48422a1ed32d65b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.3.tgz","fileCount":47,"unpackedSize":319276,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDVZ+IF0e5WZjl96eC78cu8DqhWJLnJ+fbSEKqoz+daUAiAOJ6Ib39+jKn3vhPLCuQmCUZHD+yz2C7TW5MKDlGl1jw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjagO0ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqGMBAAhQzUI76KX4fpXGqjIkDfAun86fBjURuZzPMteK2RV8pK8YN/\r\nV/GsBUq/gZGpnhQ4Xo5eCIhdNs3cVbEawfMVjDDpjoGCTHiPLEcw7wTEqQs8\r\nalo7ciExFz1oeVTPWCV+jr6L33cW/mkPG8rsRPXW56kWcktAYa559vgrkopk\r\nOrVqoX7r4Xea40KgVqNLwDwkCA2tlbixT0VhOblpajBJQeex8RWD6GNjMyZX\r\nUmM9iFb2jboSdI7m0R3uWdEkcrRRBvnfSaAnVE4fJAN//s5y1ijlRcjrgjYE\r\nx6sLVDL1LChcnaqub4cQTnoamm9SquIenYvimzKoFJar7hNOhSxwky6dk6c+\r\nWmVMk2S5doAQ1wFSdOESY7llTUfq2ibzCG3yy8TeTt7DtdHz8ceUgUCtnqM5\r\nZNmiO0H7dacBjvAZbPPIXrfiNd2OtFebwo/YUD2KR6OfJke9PW/dRn8aSpYx\r\nIu+lggBMabQKqFoHImORicL6wH8ySB1Y4063teNs+kr0N5CzP5b6AnS3Gr+a\r\n15SoVOMnm7ZN+AN2Vj2HymqykQ1jCtTUyiI+PtbcU3J3rB7VX6VYFh5M5kdu\r\nGa5nit/lzQCNa6uvd0FUsCJdvsiHXGJQl2LBVi8ZdWdrQNiHbUJ2cc8osIaI\r\noHhEAA7xYMrCshthSdKHwUXNwxstCwmC47A=\r\n=q2DS\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.3_1667892148418_0.016709778667588937"},"_hasShrinkwrap":false},"0.25.4":{"name":"@sinclair/typebox","version":"0.25.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.4","_integrity":"sha512-4orhjT9lSj61BBH77hz3whIKZRnxNGiO3nKVheNfpXhmhUEWEMBRw5Go1IFRERYqH3afFlXJzElJOZpcG5b4Sw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.4.tgz","_from":"file:sinclair-typebox-0.25.4.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-4orhjT9lSj61BBH77hz3whIKZRnxNGiO3nKVheNfpXhmhUEWEMBRw5Go1IFRERYqH3afFlXJzElJOZpcG5b4Sw==","shasum":"6ddb4fd0ef420bfd32b6b10460dbfcfe87c2b897","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.4.tgz","fileCount":47,"unpackedSize":321883,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIERgrhtB8/YaQ724gWSi2+o0EakCakHf0yn7npzPR9q7AiALdj6BO892PoK4hGzRnBuNfM3YaykCt0xWsDM7f3zkNQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJja2Z4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr58g/9EmOTa1cTp/Gx9h9pfo6p5TpDMVzyoPwQT0hb49UIWuemy9UN\r\nBbS40Fq3AW7SQDkFxo9fw6HEnhaZkTM7ATwu5JwD3FNvUcd0AixZBcu4NaXt\r\ngOppfNyLAOoxUj+cfpOBHgb5JEiCYwseoyu2UWUirnH+J0c4XK1krzsbSJrY\r\nKvKDEhBjV2IMnjuJGeBElc06oWWyxwHbcGNGTlOyKKdAIEhH1uZNCKLtxzhf\r\n6MvNOWFNxxQJJhsjn4VNl79Ai+5GfUcgFNBfAcR2L8AwBMcMpqIeV8/Caq9g\r\nW2RJhXHyBo6UUfy7yX7JqMZj63RQV4Dq7XA9apxq52vl1l8FUpt+g701egIU\r\npsXVpecoHmEuD+tR8OzAQA9ARVtFJWoAa634Ozs/KiNJZetzB5b4bRhn8o1C\r\nVIonrfEaijTYcSHUD3abrmpsb9fiZmXJBskOMsZjAKm2F27AhP7zGOOSGCF1\r\nX04K1nch/iAAoUOCSlv03PB0DNNrcvhcORilfqr+a2idj2vuocQkKlqk4twi\r\n0mStyC6o+k8fkjSoo/71oj0TiZfj9TEVJANbJxysR+L/b9BQhxazwCn4kYEd\r\nKVhvHL/8jIvk+TBwHEyAgAhxZ9ZEsq9NjRJphvTJmSOzYPPSxJgSiZHMZzjE\r\ngZIrah7BPw443hM4mahT2pdDekDeR+9A+CY=\r\n=kHgs\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.4_1667982968451_0.914500510756804"},"_hasShrinkwrap":false},"0.25.5":{"name":"@sinclair/typebox","version":"0.25.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.5","_integrity":"sha512-cjauXt7Has9yaVcQ0c/DEckBTVimsty3ycyzpAJfQM/zTcfC4r6+CF8J/Ax7AHNxAhDA903OSe7Fs5TPFdLiLA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.5.tgz","_from":"file:sinclair-typebox-0.25.5.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-cjauXt7Has9yaVcQ0c/DEckBTVimsty3ycyzpAJfQM/zTcfC4r6+CF8J/Ax7AHNxAhDA903OSe7Fs5TPFdLiLA==","shasum":"8f8d6650efbe318db20616687278f7d2d37f7164","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.5.tgz","fileCount":47,"unpackedSize":322643,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDRwcMfK5VtUv1/bbgo7jdlRE6m0DJJIH07nY9ZwWZ2QwIgA5y3lZnqq3Vcdv3HPVkUKUwnJDwH3ckMIa1M2BKxTS0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJja3KPACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr/4A/7BbjDx8dvuOTUtuKa+4m30itsbWAX6c7xcB7ZcT0QxbWUgkiA\r\nAnYWJnoA8BOw6JmVbLKIwlR/05khUEGPZovvUZeUygwEWpi2nbbg7hGLk9b2\r\nXwDwP3aXNZ+0bdCRiJ5UJStUov2Gi8Y5FxoGMng8fN/yemZWutklwH1Hig3h\r\ndfzUUd4rWp+u2yFPla1qO208y+oDIXx2LJxRQr7gJV0bMdAsKjyzJ2E2iY2l\r\neNmoOvTj1fmrNSnmIAG9PrjeaXylv+0cMl+EoXOEtuKisJPEzYA4SdJELuVD\r\n2+IHXLAVpUX6i7xCn+oLCnJ/tLS0a5XcoDpyfJ7kv2QRLWtHkGXqVCYfdtaC\r\n3YN8nLCz/QN/4Bly9jWW7HAGY+jTlw4/tIlbQEbVK9XnK1j1LA22owYKDtfg\r\n67jaC0aydhMgXYIAdTPBrdl3MOrRHJyIK6Gqg2lEEDCHpiYBsvYXQLvTdrBq\r\nj1A8WMU7KK+stAjOy5kVNoc6+YoTblq1hZ5Wt3/z+hwLiw5owPWZlvpidPJW\r\nrDxz2dMLbZ+uhdHpEx27hMLzsNAHwG63FnhRJVu/4VBIxA06ySxXLBDqsvPl\r\nkQBheZb8b3VXFdNBzmhNI/xohE4SqlPoQYxdKY9d7KD6w4svhiLFpy+GD/DF\r\np7p1xfZZeDpzsKmcbuBdDvEvam+ZXYRaKu8=\r\n=gqzF\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.5_1667986063039_0.8602852731781716"},"_hasShrinkwrap":false},"0.25.6":{"name":"@sinclair/typebox","version":"0.25.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.6","_integrity":"sha512-ZX6NlLpBZ13bovy93T2eEwnar7SzpKtI+ezEFa6g9o1ztYXMOCQaDfS/7PQuPH/8FNRGGU4o4Nv7i4eN77M+3w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.6.tgz","_from":"file:sinclair-typebox-0.25.6.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ZX6NlLpBZ13bovy93T2eEwnar7SzpKtI+ezEFa6g9o1ztYXMOCQaDfS/7PQuPH/8FNRGGU4o4Nv7i4eN77M+3w==","shasum":"1631c286161cdfeacf65e11654898c62a5b4a338","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.6.tgz","fileCount":47,"unpackedSize":322861,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIA+K8Bav/VnS3ITrde0nNbBqpLvnjh/gYGzI7+2vStddAiByElRKqASURbcQYxKwl0kZAcG43GmMm7MvzVYfV4nizQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjbN3bACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoKHA//SF8uMg7MCjjYJ4TjVg5rl1OmK3CKNSRe/nIYmPso+qv/NUC9\r\n1hevscakg1jq+oGWI15cYqplvGnTCUL5gmKTDK/ERe5oH6DMetp++1frWwnl\r\nMYZu0Ka1K5D2U5GjEGh74mSK0yjszeJgR0ERAprxAWVH7GAW/FyCsE+B8+o6\r\nVbjBfbsThVdRqcf85qlbsUVPiE+Y/PVB662fkRYEblIWss+vKshWUuoSCzTD\r\n+UDF9rxBw/ZyOrAoBWrAVaqYFmcggvaRqyn/V9CtOO7Cr7XK6j6V8GliF0+3\r\nXpEfiax32RmprsQKSD/U3oT0aMocCc7fJcSzZeWtON6Vng09PosOhFq8L9cU\r\nSdXk8j2W+vkXtelebjs+coTXxe64f4cVpJtLjTgBaZT2/zvsH7O/iTbCF6WP\r\n88esbYyVO3dDkzNFCfy2Zu1XfzFSRuaBbggHvjWP1YEZiWLP+AsiS2vbIqRT\r\nOw+jXn8S5JgvnF2m3LoFg5NDCSDtH+TZ71LGXaxpvKgLRgcNHtHC2CDgktjT\r\nwPVm0VVA+5eGyuHDSmM7EcKeIQKWUivZ++fG+wlUTS4xL9hc/1cHhfUfXFSQ\r\nRqXiHQoe82476I6xCweA5R/xAAVzW14ezPfTIuwIwJ7bF/wH4DUsfLDF5CBc\r\nexcH0CUNXnpexSFBqeKbu3VGEFkkXUtScXo=\r\n=N8Ue\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.6_1668079066728_0.20150445556475294"},"_hasShrinkwrap":false},"0.25.7":{"name":"@sinclair/typebox","version":"0.25.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.7","_integrity":"sha512-P1akWHXV7H4gl4mxM6ln/4Blk74QRbCW3kmiYkNai3nDpClxF2/rwElyuz/YjBfwgdcOiSiEcrQEtoNrUnUHgQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.7.tgz","_from":"file:sinclair-typebox-0.25.7.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-P1akWHXV7H4gl4mxM6ln/4Blk74QRbCW3kmiYkNai3nDpClxF2/rwElyuz/YjBfwgdcOiSiEcrQEtoNrUnUHgQ==","shasum":"91653bc8e7d85c5c7d657a8baceb31b2e1db34b1","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.7.tgz","fileCount":47,"unpackedSize":323000,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCmHfT3giY7PXHoPj4WW/tNRlVoVXL1tFewucs1HushdgIhAJDVAdmzqUyVVTR4Vq2jsRBMP2AwKkmV4kiA+tKjatxW"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjbOMAACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrf2w//XAQ7KdrMVQYiqhUnmPygH9Iy1OB4EEpeB7iv+OBqZBvUe6rN\r\ncVPQfwpJFlgIRlPNvuzBCZ8piDSouKblpx2zd6F0guu2TrNLjqPneU7SjCYD\r\nWl5p13pXK9l0meKJccEDPno2VJpOs2slK3gDa42qDbVBGPETjf6jw5p+tSDZ\r\nBKAZbdaEqBsy01pxEWvT0P67hVbDAaskaBep9a/vVtNcA8/v/lM9KOX06t33\r\n34riIgmF5fWTyF1kWY2I42bLBWPErYxugDFaYUTtdAyneUmbXVALPgE9vneA\r\n02QQ7mwO/FypDYMeAuQu4aR4cH2ntTDgxFdc9TIq9h6fzqERRTaLJeUBrbbS\r\nnHJ+iSUwAIBcJT0Fy+sq6VeZF2EHqogVny5dg9aeVvbVyCAjEb4QmBVzwObf\r\nWUgp/5xJWZ+olC4YDXVj7c8FPUdyzFYKbHal6v5TdEZpG3mddJhBwjpHkRE3\r\n4lICPueNxRbZyrbxeVRMoX7GVv26GvMVQZnSLQGQpRfz9V862PJgR20f5F4V\r\n857qo2WkLejOAnuJrCuDpwId9JcLPxZSNvXGp77lNMXGfXAXr2Eor1zeZWL2\r\nOFwkW4o2hBJqqvo3jGaPZcBEVNOHNpFyIoNXqZDjRFro35hOK+jLBerAJam3\r\nP4tgP8/XxPH6AmqT9dlZnMK1qHQkhgFkciI=\r\n=sUXj\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.7_1668080384388_0.378414048388116"},"_hasShrinkwrap":false},"0.25.8":{"name":"@sinclair/typebox","version":"0.25.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.8","_integrity":"sha512-/7GXgMOCfnxpIov52cPetqQ7bxRBaTBJAgp04Se2UQB1J0vUfEOIMpn63cLc3S5JXDUflCWxELKDV8eiPpmUTQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.8.tgz","_from":"file:sinclair-typebox-0.25.8.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-/7GXgMOCfnxpIov52cPetqQ7bxRBaTBJAgp04Se2UQB1J0vUfEOIMpn63cLc3S5JXDUflCWxELKDV8eiPpmUTQ==","shasum":"882d969dfc433cbd362f1876f8ea29b743dc32d3","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.8.tgz","fileCount":47,"unpackedSize":323285,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBBxcZFD+JVkSwGx6P06uwJLPO2tjb19gsvNcfIysAoFAiEAjRuVV4H+oCZyDPQpWNKJUeZ9jL/krKpQcUwCSZjnDH8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjbcu9ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq59A//d4s4tOrWbsWPiSPVZrP0uOWILsTcPfu6BJsms0vRv6gnAV5Q\r\ncZUrYCYN2B5XAk9g5H0oTs4GN9xuej+MuN7ztDvAL3gnw6+ykPtobrS5wpy1\r\n2JkvOlK+DwlhK62WvJuXsi6rK53VZ0p28YTqJ93T4w+qWoL+5KKK2/wKNtj8\r\n27xPof1RQOqzgOL3x2BjWVwGl/KqwKq55fFWP87SqagDmqp/sRzKEWsxT5Vh\r\nH06kA6KqUZ6JV9c2aR+Ww067QZe6QGMTUXGnlovcGLNIrXFSAb/I4p0b5js5\r\nYAyFRklTEUdim1H4sMMmrGYZwpfsmI8Sr0t1yX448eaYCC4+kwOQLSLTA4Ze\r\nS4f0wKQZqjY6t8wJdwXeDHywk+rnG29zMLmgZo1Y3ITWoFnZo9oDHcuVO0gu\r\nyfn0S8jm39uD5p73ix96O2P1LvbVhTxgMTiRUc9rowAc+6YiwvJ2rjznRRu0\r\nL23nejVCYmpoT66nm8/FJOreN485vRZsnWK5QdNXbqTdU5DKqcyaleYoPTCA\r\nsLy2SsmwqHfO2T2WpGTiMGTZUs5JcHdz636OtPKUueXRqqQDruYg/2Vrq5ri\r\nzu1H94DZAhZz65C/cAup93yrPqIrDitkOGNWvVfGA585aLxw09bUrRpn/nuC\r\nqtW3o2fFUq7VFhW+iH6MxALvSd70AmXZyxQ=\r\n=1SlL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.8_1668139965070_0.04553424337229672"},"_hasShrinkwrap":false},"0.25.9":{"name":"@sinclair/typebox","version":"0.25.9","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.7.13","ajv":"^8.11.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.8.2"},"_id":"@sinclair/typebox@0.25.9","_integrity":"sha512-FDfpDJJ589OME6W01GUbPoNDovU72N8LPtCTopmRttzWpeDVNFefWzzJVXmL9lw7712kXgPfcyb3/AkGZfHNeg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.9.tgz","_from":"file:sinclair-typebox-0.25.9.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-FDfpDJJ589OME6W01GUbPoNDovU72N8LPtCTopmRttzWpeDVNFefWzzJVXmL9lw7712kXgPfcyb3/AkGZfHNeg==","shasum":"e36fe28d002cb17d1ed245da465733d0b045b94d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.9.tgz","fileCount":51,"unpackedSize":333319,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCWqcWGbew2KNdh7hF2FcA/9LB2TMP0hBdnds18OuJ6GgIgP8OKWVCg1Q+fIxyw3wizx/h/sJ8aq3okpaw7y4C7AV0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjfMb6ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmobYBAAl8OiAhXylDnjhZ/nctRGMPGCtWXXz8sR0Yi2pQiS/3jOOAqR\r\nnMqYMskqGG6kAbSZI7okk1AP/dvCNj3jvYHdzZgNrqg3Ie1iZNNgavP6mNew\r\nMw+AhUy6ZDvNUfo/3PWeFMJxAwaxvl7rxcqIbUphyib+apIFvTvkgA8BP/ZK\r\nQCUk6StL3l9qJ3xGO2WscNXfhZxQqFGO98+Sne392bz0a/BulOxPY4jPsmHs\r\nzt6GSppdRXaXhK2++JXXj3DRbpTn2vxcdgqtw1rfOIxKvMr4s1ksTU1U2ZKo\r\ni1KhhN8vcGuEuBui5oUeTq4HZXTDgVdV1TnaF6JVAY2svB/47W/2azVECjmH\r\nW1aDh7s4vtT2eKTkmRo2ReCMRujtSRrXLM99O7yLOxyFcEfLOOv2/5nhsrgD\r\nqbuvXqbm2b6oyqL8ayKJgfJEtH51398/cMc+SPFpN+XkRSoZCWq9JkccE6BU\r\nHlOngt/wCnhJBIjAQbI6IvcsSbpFkLQAvyVZPFdPwWm/KQzvR37k3iW7QvTj\r\n5AOXgzLsrtHxflYt5fg2+2Wjq5Ul/GQj9koPyll/+C7iskebvaJuDXutR7bS\r\naYbeSCGQ/0Nyy2+tUKyEpj+ms0066MhTjZcAJT7m73bUEj6vTBha23VHw65h\r\nPRBZ9pgl+jP4o9vZyTQqCBQDLRxyCPxHD8I=\r\n=r69P\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.9_1669121786421_0.02569458297374183"},"_hasShrinkwrap":false},"0.25.10":{"name":"@sinclair/typebox","version":"0.25.10","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.10","_integrity":"sha512-B7yEaT5yPZUS7kL/Ogh94n7Rb7p1DJEjCqOaPMuwAy4XXnlZchFrxIeE5pbrPsHOn5NMhWZtOnKtksaNQzCq1A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.10.tgz","_from":"file:sinclair-typebox-0.25.10.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-B7yEaT5yPZUS7kL/Ogh94n7Rb7p1DJEjCqOaPMuwAy4XXnlZchFrxIeE5pbrPsHOn5NMhWZtOnKtksaNQzCq1A==","shasum":"98b928abc37c57bafc98147b02a1e5ae76950163","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.10.tgz","fileCount":51,"unpackedSize":334600,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEY0zpsUfGAAd19QXdz05P9GvhwVDuRygIqk+OSrfAH3AiEAqfF5ws/rFD/KMNqZpqGs818d0QiMpI6HSiecOHvY8fk="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjgFdjACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrqKg/+PwoD4MjoJ2eyYgLLZ8udv7hGyl4Q2a2sxH8lFcAm16zL3Zn5\r\ng9yjl27DDljJUNfaQbTt3zRbN8D0FjXlWVYn3WBGSOxIjxZcjC9dHqLd6+RS\r\njKMkJkpZVI/UWJ2Mwh7LdBaDDM3NgYtSbG1R1Z07K38eK2ilb9Mhx33deDgQ\r\nZ9G7eJsIkTit63IpeGEZqBKJpf5mKFXXgW/XZZvxNRfQ8GWKZerrpZuMEax4\r\nILWlxZmzpxRZmJrTwXmbMjNLCMiE34XwzMXdMae1w64sCqy2jTk1ScObmkUK\r\nEQbS9JM6fjsz6eYvFUeZVOLPnX8jSuz9phWSYv4Ucz1vn4nAp40yNF3b+lFv\r\nt7nUV1z7EZFmfnrJK6GK5pr12Q/r2udO/HO2hP+lDap4cCH+mQajWbY+sQ+w\r\nUJc+AL08Tq+K1NABzC4fH8AUSM1ezhs90ak2mfhbzfDhaQInhxRpAugFc/Gi\r\nBKq7HLT1M8t2WWVYG98vakgmLjIGbsaV0tdJLC1tOY6qZrqVXoezQfvtLFHk\r\nOGxS5qgQmdWX7SdIzNzDIHkRAvR7wpvm3m/XML3mhr0ElSYipb1FY/Av2qwk\r\n5ODMjOGLx5ReLsEXSR3WkVzP8IWZT7C7R3rsCy4LuYc1dHfPaqH7rzeR3b6r\r\np2IYwjE7/B5dUVCOnCx9A3JwBDJCxrPouKE=\r\n=4814\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.10_1669355363228_0.6727215363154413"},"_hasShrinkwrap":false},"0.25.11":{"name":"@sinclair/typebox","version":"0.25.11","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.11","_integrity":"sha512-GgUJN0Drvh74i8gOl2S8SkHuAgkZJtzzd6EmfBVxpNDB6QmzXdZ3tyUt02Kr42X58as5I187CKiWpLCMJmdLbw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.11.tgz","_from":"file:sinclair-typebox-0.25.11.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-GgUJN0Drvh74i8gOl2S8SkHuAgkZJtzzd6EmfBVxpNDB6QmzXdZ3tyUt02Kr42X58as5I187CKiWpLCMJmdLbw==","shasum":"476bad310092de48af7a9807ecd75019ac01f3d7","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.11.tgz","fileCount":55,"unpackedSize":345255,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBKf56TmOWfceD0q2gqlM4uESdlCtvtszNS/4YTIEl4RAiEAj5lmvJKSHFmxsk6q164VPFPXPbfDi6BMMXnM68921Uc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjj4LDACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqGeQ/8C1V2I3lerUC8El34Rxyk0PstPP0EGLG072O34CXdPurhAhpC\r\nYGftc+VGjbGdpQvpGvlQEgsVJU7K9D3GBjuLoleMywuvIaoRoJd76G79Cr63\r\nnYHQnT/VEAZ02XRsu7c0krz26MLkN9LKFS3IQVtlk8xUCYgENOXR1hNe90d5\r\n9gI9crLw+RzGkOuUOG5dWvDQjKwuGtk/elM796lj+k4gPOOmpVc28pM9PGiz\r\nl0cdwpCCCjQRlWNXDRzxGfP1lvqevbvxc1yIKCwZ/MqvBBEP1ary2yaM803T\r\n8mzVqz+7J2DvUHsXCE3iMqaCFne84ziB/5HYt3jOpWXiJNG0wN3jXufRDLuz\r\n7vSR5bbjsndKLhyLG4vPDDqkAUcBR9KT7mYnU6vBRnuoZCMCW4a6CTtIYNMd\r\nSztwlYHNTKkn2w7C2v7w2Opur4pmIMfUzYrBXUMcCskf1JNRlisu8LNOcfT/\r\nezY6DdUtByx0hB1Z22HMZ2hOelVDZMoxVMs6y4y9Aqj2q5PvUxJNcaUNR1lY\r\nSftLg+tbA+yrCS9VTfFCy8cVicc9z9sOGai2xIaAz1V59KB/eSLqegEFVBsC\r\n28S68EP40ynqQz/itGKqXowSpmalvYPH/Ru8na84C935PGmVCXdG+u3qGGS+\r\nj0tn8pkaDG97P8dZcSxvjwku9KZxvTCMFeU=\r\n=rlzn\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.11_1670349507251_0.02501615056276907"},"_hasShrinkwrap":false},"0.25.12":{"name":"@sinclair/typebox","version":"0.25.12","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.12","_integrity":"sha512-xm46HDwYz69z8xcNh9esHYKpvhXmA02sD+K9cur6XZvwjZTSBJ8PNbK5xeSO0IYZqRzpxkXYsbpsF/hF0WdPew==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.12.tgz","_from":"file:sinclair-typebox-0.25.12.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-xm46HDwYz69z8xcNh9esHYKpvhXmA02sD+K9cur6XZvwjZTSBJ8PNbK5xeSO0IYZqRzpxkXYsbpsF/hF0WdPew==","shasum":"3157d3be38a1df18f784640bb19739a38436366c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.12.tgz","fileCount":55,"unpackedSize":345395,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCs+7fArmRUVGn9WWAI3AKXv6euaSoQWCTbo+tzk+mveQIhAK7sbpuXuEitB9neO21CT+z5rkUyojwNOrMxcMQhtIsf"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjkySfACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrEeA//XefhejB8TppDhDJK5BPi1hjZnTpuA9Q97QFk0kOrg4JJfxoO\r\naPbNRlSU5KmXDkzzVrXT+tqxPCLNJ4zMl+qT+36H4dFFrOsKlhYUiBxt8Gm4\r\nYHkPlyRyHUjg7lQEdkEv0UIKWwhjCotEh8Cf1boSc4PFNzQigA+tVN272TNs\r\n/ya9soKFGkSNTlG1P883CwLkys5seAnpSy6pcm2giH0+6QX3O4XEPU7yi20V\r\n11wIASb7XsYlMAp+u6Bo642Y4amHD8k2fNb5sTWH5zGE8l04K4G/pOKJZ9zk\r\nfydOvCH+Ve6mHrxH3ef7dTyRymLvt+pjVjvmduBhYRWlIqcDZ0ai+kApaDjx\r\nvogYeBguTug40ofJLVqgJ47GRloiNR+KkSxbri6pon6G6bieJ7WAAdESUoVQ\r\nHm7/wr5iCyg4kuwqORzB0E9t3GSwphsRJO3I/wkSCH+z4fbfeCtOpRTm74GP\r\nYnX7pxZ4HuVNvpvNw1VW/EB+KRZHWKoHYU4SsU283inWOxag+Ceaz6omanit\r\n/mwkBk1IMV3LL6+GkHF+pmS60c/TthLLapbUyCXrg7WO6JFKy/Z58a00Lik8\r\n0vQgvfa3U/00hZeIQJpr9n3DNW5oAviJ/ejYxShx6fuyP7q429cPxQlZPHon\r\nXzw0Hf8u7xHsMWUrj4CqsdojQKCLBDGdWpI=\r\n=dXA7\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.12_1670587551634_0.5722623185062437"},"_hasShrinkwrap":false},"0.25.13":{"name":"@sinclair/typebox","version":"0.25.13","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.13","_integrity":"sha512-XiEwzYpUwE5y/k333Cy0Ujmxvw/mA4zIyEmwUyA0EDDik7ba8S/HClvz3ylOsABfYSj+/skQq4QJl0k/Z1eDLg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.13.tgz","_from":"file:sinclair-typebox-0.25.13.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-XiEwzYpUwE5y/k333Cy0Ujmxvw/mA4zIyEmwUyA0EDDik7ba8S/HClvz3ylOsABfYSj+/skQq4QJl0k/Z1eDLg==","shasum":"c12956684a9c57271bdf10e4686b8f85531f75af","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.13.tgz","fileCount":55,"unpackedSize":345597,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCNxM3GHLcKh1O2n5DYkxHJfPM0d0mqYD8MGSxWobDmFQIgOKrznFZkF/ha1BZIKOLNotygVMtkVNiNlle8NIoi/tE="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjlZE9ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpSmQ//fccY7XUcqTu2w/A5zHg0BWuIdQxQxLRs1uCV+Gmyjy/XGYej\r\n8cQK8Uw2aIhLncRTSKdzj+iYiDZ6CCm7foIbrzl2mhXN7SQfDMiegtbhBaC9\r\n9TEBkkzFmwfK2juArf9lzMTCRS7AF/QntrQ1Pgt/GxEgTV/4hisA50p193uq\r\nTMfI0CTHeJXq1o1IOifJk0Un2/6TX6bww1ZcymgzghBIH5W/DybwIOLm1THJ\r\ntWvolYvVABhsk3PIOIavZhR78GyXJzvjdE8liFbuS30RuQG7YUIDVRzthJ+l\r\nAbxmKtkfz405yecVH4SFfuXredZsCXfLvKbh+IMRywWZhDZ5hV9bCkI5ez2N\r\nTukQ8m83i2URcYKvTH3wHCfQq8Hws9ObnWBMLcia9MQLxUE6ODpNKs/Yrp9i\r\nk20E7CV6pe/FSpvj9+5JdsnGNni7bxruU235DcKuRp9KR6NDy1cpD8Q2dbfz\r\netvRrB80c0+ufcKCOS4blOTt5oUZeopzuLURpZVpsdIjhEDVW3RkPqhVFULz\r\npNrEgBCM4yD0c7qFqATZV8IYh3gZhv0dLZnkGpoCw+AisSX07j8I5Oj8FG20\r\nVjBQRgjNN89pgqs92KFfMVxXlsPSorLCee5PJ39CV4jx1Sd7gP9EfOjbsL8H\r\nj4Sj8bXz/Y3O8oG9s5v5L/G++h+RvNg5q0w=\r\n=HG7n\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.13_1670746429585_0.9806831578766027"},"_hasShrinkwrap":false},"0.25.14":{"name":"@sinclair/typebox","version":"0.25.14","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.14","_integrity":"sha512-QHPtRqD95nGnJZHWolgKFNmpuY8gpqVEfyasUSJO78X62f4nKmxPbDjd8FpMmwj2J8d0gQWChLtuBtH4yw0qpA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.14.tgz","_from":"file:sinclair-typebox-0.25.14.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-QHPtRqD95nGnJZHWolgKFNmpuY8gpqVEfyasUSJO78X62f4nKmxPbDjd8FpMmwj2J8d0gQWChLtuBtH4yw0qpA==","shasum":"2063552e614b77d5d4f2ae404449084d7e90172c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.14.tgz","fileCount":55,"unpackedSize":346127,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB4uVb/czLwqkkKX41IWBFPX4D2jimmxGCps5wnce8U7AiEAnw+lbOP0s612mAXKG+1cu8V87dMjY4q/iUrv8/ImViY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjoGxZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpMxA/+OE02Aisp+LE94vs23vNRyKVEJZrm3XSBnoj367IqVnbrNCxA\r\nwATCpzk13U/0SgYjchB/+eB6qvTjQfLsX+/kJ7d8nu01Wa9kUDo5Sopm50Um\r\nFC1ZdCuY5/W+sJDjoCwiGn4aKhZHwVL5CbtXPb3X/9SOXoNtBSs9WPH5njM/\r\nAreDd9oVXwF/W48W/grkOHZSCDoLvrAkcwiybEqwADF2tgNOKtX38sIKGmSC\r\nzPBAfpIVjpuXIEY+9OnrvIIYdeC1ft5Rx1aGvQig98lN2KmayHQUkqeyufnu\r\n/iNlFri2NZldDGEKAwtgNTHg1N8iGfJFTx8BwFpc2Lmi/UHtAth+l1e7nI3g\r\n5fFUjQvxSHXSKgz356B5EKE5EQbQUZaz/a/l1+Kmgs36WfnKPt2+FGVdUZPE\r\ndLwEeebM/jRlHh4oExZRFhMyOc55exhM5S0P4M5snOs0AsPtGgJ5sG6YK+jB\r\nMNun0hK/PKiDkoSHuXp8rcAxRkbabqTT6AZC7jATKOUlokqsryr4gnVO8UKT\r\neO4NnVJz/J2lLbMfuugtTH4dodhSASjXzKeEYJN8gts1+E4hKO6gMBeNyQp7\r\nFLmGvOIB+Y5oGIfo+xBA1XuWGuykA3I8mbBFVsjEP+NtwA+zYmXYLSYmCrUI\r\nYg4FyFyHeUn0JP//ExAZfME6mNa7wUl+OMc=\r\n=Wk9A\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.14_1671457881070_0.005727986855571965"},"_hasShrinkwrap":false},"0.25.15":{"name":"@sinclair/typebox","version":"0.25.15","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.15","_integrity":"sha512-J0C9JoAFbuRx37ofnpv6ZDgPMFogUBgtVPiHyq69ictcS1E3onLWBrzxTJuByV5ngUyLEXymtYMf3TppNbJWLw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.15.tgz","_from":"file:sinclair-typebox-0.25.15.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-J0C9JoAFbuRx37ofnpv6ZDgPMFogUBgtVPiHyq69ictcS1E3onLWBrzxTJuByV5ngUyLEXymtYMf3TppNbJWLw==","shasum":"38d60f82e3b092043ea0fb52007de82ec040c35a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.15.tgz","fileCount":59,"unpackedSize":353896,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIQCypcX1kJP8S2CxHXvmrYkSFGi+jJaQtbGFMtdxCABccgIfHxhg8D/VP9KJwy2UpDoiTf6VDKa+9ow8zxYaD6zXmw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjoSIzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpcEQ//eDv296/ogMymYITiQ85cjgZ6IbrN9ygiVI3GTxgJluEdc1qm\r\nqYzVQ/3JYKmbgR+Fj5SiQHnnJAUZbD3TlE7Jyoth5MNcD2RadoxDpOiL9dtY\r\n7A1iBhbaVTVzBlLqeXFbLexrt34iqMpnUjuC7hinRpuGfiLSWuYOtdG66d0e\r\na2+EGOe8wLwT5qvcP+wF2UiWWlVs+7L2w4hsGEyxmYTbfIciufNJH4823w88\r\nVdjfqsoxXR2yX2bJUFd93CmhwhmEORJQhHRWLfyJCgjXZaectZzaxieISoJz\r\nzmkPIaZtvzrWfXDANulX/X4vNmaelClcHnnD2AlTKEv1sYxGynmZO9ei+DdR\r\nvX6ZqBtug2slyhY11fhoWzLumxL7KVztgFQ52a0B5ACc/XSuiWDMfrUlYTna\r\nswg5E8U7DFfLfpwLCsGdBV6cjMsQHuxf8HyANfyfByyKWuNhTi/IUl6PbfSV\r\n4A21WTmTUPe38Vwq299VE1CdPh4mWprNuExEgysQ6oWZoCCG4dlKEtwSQ85T\r\n7fi7sAMCC5YghwJBQQf0BWVbWJp/8SevTkZFqoZa+diaS23qoAetMS30CYFA\r\nQLFr1sUt9ZUkhBPvW330awLTUq0kBvghHf+vWw2KMOwIY2MgnuyU7VE/9pIi\r\nT9rjGyct5ig55iaSHNQzQltLTkpstbf9pm8=\r\n=qrUv\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.15_1671504435626_0.8804388901004891"},"_hasShrinkwrap":false},"0.25.16":{"name":"@sinclair/typebox","version":"0.25.16","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.16","_integrity":"sha512-5sclbtYBKQ0W5hY8ovF/cBbQV+FWBZArd738hQpLgWUdlWyuOA0HOuYN178jUJRz0pXuL1+UYR+LCMvoR47osg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.16.tgz","_from":"file:sinclair-typebox-0.25.16.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-5sclbtYBKQ0W5hY8ovF/cBbQV+FWBZArd738hQpLgWUdlWyuOA0HOuYN178jUJRz0pXuL1+UYR+LCMvoR47osg==","shasum":"daf07d14d93897d6f7849159d8242808b956b069","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.16.tgz","fileCount":59,"unpackedSize":352942,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHlfOCaxC79at/LMsI95ujTaptTaSiFAW/JuSNjko5TQAiEA9OlQ3OwtyfiS8Ws4DoOPVFQeR3W4hI+bRnHi3q96m94="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjo1HgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrDuA/6Aj2Fd2RouSFNMeds5Gw5XdEeU9/w7TCptuqPZ0fA7tAaGh3D\r\nA0QpJkzqZ6P6YownC3fVS1l8e39Smbn+b7aS9Bo8WkM5SSymj3x+G4Wwj93L\r\nKUMmv1F2RcQB2ahEuDi/yzlJoXWIrpC7KpUWrrA2WCWg9P8p8HwmCFJJmlKy\r\nlA3OW7j++VGz9Uy0GfxCQ+dJW8kpl7S0JbnANNIJ3rvvYOPThy9nOjoM9VXw\r\nfMmfuNMyYlKPXWST4Wyu1fPxlcSNe5FginQSGi79CGe+l4GbO6D0zno3A88y\r\n5wduUZXqxclMyqDE5lDN68xt+22uaNCuimX5ORj3OjWgwe07S5yaPZzXSqdv\r\nquGfEaWtVUgEV55JibEZk2gZzwfFIogj46ncCjEfEQGN14Ll8+nPpTqMQBuQ\r\ngEzXPCVPH3xtOyCPY8+QGqHkku3VdX/U+AiwALImTXfDr5atr5djjkYqw+qx\r\nMCqiLxhP97nt0urK8szOI48cVs+fFscR+z5A6kB5fmN6rlCXmUT9etIAXbBi\r\nilGuV+RW1RSmOCwG1MTXANRdQb7uVPV7vltnjUgcG+gO7auHiVTkfV/ftpLX\r\n7N4s+15gVsHle//fVHvB8p4VUYWEQA0K2c7F6gw7goUun41iQM9L5SrbHQIf\r\n4fNHiOY4BV/HN122sylWRLv0dXECAsV8rVo=\r\n=cfot\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.16_1671647711794_0.5478055902673016"},"_hasShrinkwrap":false},"0.25.17":{"name":"@sinclair/typebox","version":"0.25.17","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.17","_integrity":"sha512-OLQlcfNZn2Qy59LE7Fzt2dLAxvVx3F7GsAGpQPKWq1nsdzPpudaSNjwhrjc1HgtbidSxxJmSe7RNTbedFlSqkg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.17.tgz","_from":"file:sinclair-typebox-0.25.17.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-OLQlcfNZn2Qy59LE7Fzt2dLAxvVx3F7GsAGpQPKWq1nsdzPpudaSNjwhrjc1HgtbidSxxJmSe7RNTbedFlSqkg==","shasum":"77661d05d203f027745edaf92d3ab621c426ddc4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.17.tgz","fileCount":59,"unpackedSize":352940,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBbXCtaHtxLTOMKBxQeoVqgv+l2EMFzvgE5TaTIiRHFQAiArXhQbux1aS/DNlx2BQGeYgwTqfKHuJFZ+4NBer3P/zg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjuW39ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoS5hAAixfo52DDKbO3O4LIjjb9/e2u5N9XM3ihWz/ky7qZOGmzDA3l\r\nsGfxyGnam3QaXSt5FtyjK3Mba2AlwAfD6f1eEjnOyPvPIMIIpLCdpWbZMQHz\r\ndu/Drt/4CZ9E8KizQhpLb0i93OXHGYh2fnW82Ul8eDN9hIZaT74gAh9C12px\r\nP3hMz4J8AgFmxiI7QhRar7mU1Y8i24hgSOntF2gYcIAafuctGUTBW9rJR7F0\r\nRaGRPo6uAORQYxrldvf/S9LwJwIiK/Yz7DvWQWMCAnjuYoEgNT8yi11xhYTs\r\nYP3rgv8pzYmGTW078f0cDuuPx9JM8fMUMumm+GRQRXnfipgHul4zG9WbKt7o\r\neUs5uDhggLdbmPRPm3vQgc0kdFvjnCIbb1IILuMxAvqZhYMZ5yIjSBaxbeub\r\n6kHT2VzxNtbG6Z021KPYUjVt9sOIZi7WOnSOwBkzh6SMBngmHOb0c5PcjsPc\r\nLm37z7e2ABaGcVWFZqBw7q/M5bEDu4QdFjRyqnmthkyzoCV5ecyU7fgt/Ebe\r\no5GpnlvSIwzIoNr0P4U1/uU0WZ81EGWDYFHCMCGTJONktdPJmiiTNEPKIMj9\r\nW+4Z1mHSezZ7IG868P592BBX40Kh9LAAupkNRVhQ7UuZmz75HNOk6B+EB34i\r\niFpyIE2jG1ZL9WK9yLYDTzc6UCGrOTcdBVM=\r\n=+y6s\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.17_1673096700958_0.6526373102814131"},"_hasShrinkwrap":false},"0.25.18":{"name":"@sinclair/typebox","version":"0.25.18","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.18","_integrity":"sha512-kJV6/P2PZmvcOY0V+Nm0pazyHMYYmuuKzTUZjnsyJHRdHRPQX/G53AwpA+39CP5k4rx2BIz3hJzRG0c8KtzLGQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.18.tgz","_from":"file:sinclair-typebox-0.25.18.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-kJV6/P2PZmvcOY0V+Nm0pazyHMYYmuuKzTUZjnsyJHRdHRPQX/G53AwpA+39CP5k4rx2BIz3hJzRG0c8KtzLGQ==","shasum":"e21e025d085ca3ecd41884c06f13cd3ebdad5c2a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.18.tgz","fileCount":59,"unpackedSize":355680,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDlDezbv9FtC9RdNNU24djRcQGva4joqFG4Jug9CxpC1QIgGzR0b8g6ETMSt2x5rnEXV9rU+yj7nENkNqV/XZ10NDQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjvADcACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmra0RAAknhIAIKdfzl0QMzHFB0qD/cItDAqSf+9YBWaY8YScCbhx8P/\r\nw/CazL1cUd2pp/cnW177zRFkyGqJG7ouBYfvu91dWioWKrYTX5hZ38bU1ntU\r\nFYaQFYyhkC+b5mAZNNmuuKoVlleYFM5+cJ+qYWH+72aV8F+aGfCAdUDZAvCY\r\nYkiXDCmYZvb7EsZ/1+0MeA+CeiKyOnM03yNz0mMEWu5Q+4vjEXRM17CbeHrY\r\nvDTf9ErTmEJ5q+Z2mT7DnH2NiW9cgdmAkbwXK4qjwseiNEMArtsc2eS3r5nS\r\nWhbnb1FF16tZYCzLVsJnP3apoXIH0N8y4T1M8obEHxcSM36rrQU1RuQUdaN8\r\nPe0ci+mudWE+lXt1uPxsjWQYW+NIHI1vSq8cz3s8bXjjRfPwklxjXpf82prG\r\nt/mcsr8g2dnHhS+11wkqQcq77HWMC1JGrKAf/fO8hRpfHu7LnUjuGCacx3cm\r\n3a7NYUUAXrVZly7i90fOCn7BMTCYHsWeuNwYs5oFRCEJqkV4+I9MYdrKSB71\r\n6rccLEYs2jzkZpI9Oz0Zho6zd6oN3Ll9H3QMapZ/g8v0/iM8I6hBKkj0Y68R\r\nLhxEow83I0AM8iZLfxsJfwBt617hI4HZ3xE1QBvlTWVypzhTJZbs7Cu+jDiq\r\nyNVicEp61EL8Tr/QAXbhiVd5VpajKZ5+hXE=\r\n=T67j\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.18_1673265372739_0.05607049293827315"},"_hasShrinkwrap":false},"0.25.19":{"name":"@sinclair/typebox","version":"0.25.19","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.19","_integrity":"sha512-q99nbqFtmyn/3mP53ORoG/hEQIh+zK0dR5nUr2eSor/SyxsNE5qHNuZHrbMXPYnv2MAZ/F+YyVOtGFqz3uY4rw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.19.tgz","_from":"file:sinclair-typebox-0.25.19.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-q99nbqFtmyn/3mP53ORoG/hEQIh+zK0dR5nUr2eSor/SyxsNE5qHNuZHrbMXPYnv2MAZ/F+YyVOtGFqz3uY4rw==","shasum":"714a62f4b6b4385dc89c7f8ff9aadf122f33feb0","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.19.tgz","fileCount":59,"unpackedSize":358987,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDTLFqPTRvcSGTV4LEaWCCGhBZ74loyeQx5++43k7Iw0QIgNVG+yqM549C4mfYJg2UT9/xugkEtl+XWWgqn0AX8CL8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjvCS3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqF8g/9ER9UqE5qz2KO1STP1VpIJPQMp1KnZy5mKFgfAATyObRPl3cW\r\n9KDe1PRaivHlxdJK9sHvVUNGX6HsPUAU1ZAVpfRJzW+UFPVkhgZ3ZZ/s7wHR\r\nwJ4G4Ri4tHMb4/0PoVMhULtJuSueJ/OGmxsqZrErsRwiqLtBor9mOT7KI99p\r\nMlmleP25xRss2bpCVlrZetwyfPXTqK8K1NWsB4ARCO8W+NSYB7x2k9qt0VYu\r\nh4860VQCfZRtY+m5Z//1QxSiUmzOnOqq4k4p37IUfPTaJWhPa6yNP/y2o3DS\r\nDAMu9e4TAi4YvvvKcu5VJqf7NboBh4X+1rI+9OZCKpLcN8T/MybC0ozOJ7jE\r\nj0F39qsdt1jjYiZysDGsEk6KAM8rmx5m7UXA6PN8MVprbqnH1PcpoEfev5EO\r\nVG1AfFMzSYUQpOyzUrY9amQ5Da3L6zxodi1/ntjfoT+IHgLRcokBvVXt8k5w\r\nnI75PukcEpbOkwpjMS21E8hHq/L/9yNqOk8GgZa1I7gVWCKIxeOkY13Zz08r\r\ngbnoHgusH3rtmjr8YULnmFYBxhnFUtvoiNkDv816vbMqT8k6RUGWt4RJyVUM\r\nx4psRc2GuWc5tqae/PApbv97hWX1yoaMvPT9Ijn5e+ufSRliVtrkVw/wlj8i\r\nJVYZDiXocO8HXdILC4BwauwzQPqEOx1Gxew=\r\n=cbzW\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.19_1673274550837_0.8368252918825929"},"_hasShrinkwrap":false},"0.25.20":{"name":"@sinclair/typebox","version":"0.25.20","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.20","_integrity":"sha512-7cPrp+XyulftbrBIH0MjUvrn0cFgLe/Tpqi8WPE+iigBiyKCItWKWfY743OI4nLcNbZkz9t0u8Tb3r2t5csE9Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.20.tgz","_from":"file:sinclair-typebox-0.25.20.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-7cPrp+XyulftbrBIH0MjUvrn0cFgLe/Tpqi8WPE+iigBiyKCItWKWfY743OI4nLcNbZkz9t0u8Tb3r2t5csE9Q==","shasum":"6378757820642d6a56d9fdde33ab8abcd603df66","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.20.tgz","fileCount":59,"unpackedSize":358973,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCF2iKR3TypCtpzDDa7hH0i4LxzuvWh3AICe4ycFjqirQIgccUVRyNtoMk0sxEUa1yj0/nVpX/tydi9zj1K0RkzwYQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjvCXsACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqDTA//bMXGNe6Ad4sbDHsj760L7HxclYJ23yv7Adckd++4fBAlRrBs\r\naXsa6ERANyq7lQW4/T24W1C8BIEB0oZDLDr+bswoh/DvHJrdcKjTBWF9nbDi\r\nZ+8JP8XxAkFu9bA9F20l/0YFv5oM53shEY8nTQmtlLf2MCdd+c5G5VjEDtTz\r\nIT3w+/3Fke8W1RmNUijUjUoJP/BOgFV58SEdXmNxxXVK3U+aJE3TNZ8SzJ+S\r\nC5V4ZUZ/hmGt5KJEHOysalwaEDWHf3HDc9lStRVuo63JSaqc0DxONzSzTXR3\r\n5GTtpkkQu3IPldwbTXJfWZqyIxBsc5CVjSaJv0GmcqvYIqcJV1er1U+Zdxvj\r\ncltHHYAjKdDVeiG50r+PJZW4VMvg93AmzKtEZKMis+pW52IgYNSl4l1u6aPZ\r\nvY0chPEkKwCbI1i6UaQCx2oT9RK7M5w9PuipB67WE/Ve80o6oOJYV8PbCWp3\r\nKIlwTqzfGdJz0K1jP8Ff1OjszR0BP/lDBzEhqkA6bQ/MJ3SLz9QU3VP1EaP7\r\nP7Nsv9rc2/cGM5f1iDCuZ+/b5DJsRePTsRoEUcH7WbbP6mG7mbonhoB1Rtbj\r\nA4g6wDMleExJgCC+wrMCLJSPdf8s5eybOeYIV1Sy8+H6kEIfcXkHWkTnuszu\r\nnjLbwP8xaw8PgPw6uxWGGuehq+zg6rvRUis=\r\n=FDOD\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.20_1673274859971_0.02779927896990797"},"_hasShrinkwrap":false},"0.25.21":{"name":"@sinclair/typebox","version":"0.25.21","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.21","_integrity":"sha512-gFukHN4t8K4+wVC+ECqeqwzBDeFeTzBXroBTqE6vcWrQGbEUpHO7LYdG0f4xnvYq4VOEwITSlHlp0JBAIFMS/g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.21.tgz","_from":"file:sinclair-typebox-0.25.21.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-gFukHN4t8K4+wVC+ECqeqwzBDeFeTzBXroBTqE6vcWrQGbEUpHO7LYdG0f4xnvYq4VOEwITSlHlp0JBAIFMS/g==","shasum":"763b05a4b472c93a8db29b2c3e359d55b29ce272","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.21.tgz","fileCount":59,"unpackedSize":359118,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCUXXVKtdjkynyuHhljS/tvPBuJteWRXRjvjg4omauipgIhAIgfvgd1m4vl4FmpDgzO4Z2IOMtiVfeLlUqlLWx/wg3F"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjyOJJACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqfnQ/+N78giCgFZvyDIm/ShuN0Kh9Jj/ezYvyf193yMqHk8+6ILXic\r\nVmDTFnkgJlWdsjqRbwG8L0rGaTbmm6rc+NMsX57qwNV94VQrQq+ByWag1Mm/\r\njuRjl/caDvKeUWxB/mO72YKZOkS77BhNWadvDMflrGv5P3TkzjQy5zpphY76\r\n9l3k1G7mUoITqX+gJTE77VzlXN15oEC5A5xOFHTpuacA69sOFcDvViQZ6Zce\r\nkqlTf5EEv1c6TKzPJJaAWvZSmMGzkYJEadS3Kl/VbzSU76PoTLVNiB+r3EOf\r\n0YpMkXC1q2OJM8G2OqsXKFPONqeopMId2zSUwsdsFipdgorvhTvShQMCFRGE\r\nD/xcXrtXjiJ2HhgAs2NCj83zftczTzuzvYrVdBtQFJueXLZzxRQq8LroRkJm\r\nfczNEi1KPk0PH6vs4zrakp0K1u5oYfi1CH4WXJ93i5jkpvx1VAvqPdd37JkD\r\n7sKmZsmQFMralqEs+A8nnYB/k6O0MGxn7xeKzQKdfPqS+O8vYK0Ty3lK20LF\r\n6kIh/aFP20Addeocbg9eNfOXdgRMGWfFfzuibDdIRKC8IOLN931tWI51vyKH\r\nl2oMOIwHa2DBbXYRm0ju8IvX7VLtMpPI/s8B1xYxKAv9cWVjnq99vsTCscEj\r\nuhxnN7DnA/VuHDiV9UHXla5Hv3lmnEbfuc0=\r\n=Lre3\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.21_1674109512899_0.18768693784600465"},"_hasShrinkwrap":false},"0.25.22":{"name":"@sinclair/typebox","version":"0.25.22","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.22","_integrity":"sha512-6U6r2L7rnM7EG8G1tWzIjdB3QlsHF4slgcqXNN/SF0xJOAr0nDmT2GedlkyO3mrv8mDTJ24UuOMWR3diBrCvQQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.22.tgz","_from":"file:sinclair-typebox-0.25.22.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-6U6r2L7rnM7EG8G1tWzIjdB3QlsHF4slgcqXNN/SF0xJOAr0nDmT2GedlkyO3mrv8mDTJ24UuOMWR3diBrCvQQ==","shasum":"2808d895e9c2722b20a622a9c8cb332f6720eb4a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.22.tgz","fileCount":59,"unpackedSize":360589,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCmGQIIujm/BP7h8yMKZ3kFpSlad+oWryalJdA5ozbc6gIgIGm4dXuj4XKRJk4iHk1Bm2DBFBOceWFBLWXZvSshFdk="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj7IMNACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr7bQ//esH+becIrynyKBwP6swXTLsdnDrHsMw+NZej2YV98oLtHdEw\r\nC/gWAhWbROSXO+cAXIDsecvMttt+o3nD2ZHNC6MT0HLJjSbJErzXnb2+Dq60\r\nhjAa/LLGS8ruAqP/7AuORLZIeQgkW9S6giBd2nmkcWgDdAnwM8dvLxozSXuJ\r\ntckZFpzLDFIgM0HIPBEpWKAG2xMXafK7PSl5b0RGWL8UWwfMPIp77SecERaz\r\nfHzcxoVYM79DZ8o8j67GKnxqo5uSfe5ESOzzWGJbKTDw8095QpHI2kKaA49s\r\nHIm3MqQZAhu7MJPkl+3bSJxR39N3fGKXJeQkxW5YieO3nwBBp7PlXZQVhrJe\r\nWtCEoA70tPSHzXpumwxeg2udHzG+Ev6CFC+ucWBp32iSsLR90XvnbElQ49Zw\r\n3iejiwoB5IMdZ5oQItHHl3pwPmb7FfvI6ZZ5CxmU8f8su6bZbAfI4qJpBf+W\r\nzGhrjmuBGX1UmcS21Z70d0ppf3lumKrfb9MnG5lsJbwBVvj6ZC8Pnfdx6pSZ\r\nQyue6J3HLBueVXk9OhewV4R4EHjDMUAqNQjvzyGRcCHs81X8/0vhZs+9eju4\r\nUzEJcZHqQm63ZupRw49p0M72N4NhVxI6nYaPFeVNgTjin0viq05HTtLziDRX\r\nhjzeQ3Q0yWvjWmQI3LRI0q62YrDXARq3JZA=\r\n=XKLB\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.22_1676444428763_0.15672591255167512"},"_hasShrinkwrap":false},"0.25.23":{"name":"@sinclair/typebox","version":"0.25.23","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.23","_integrity":"sha512-VEB8ygeP42CFLWyAJhN5OklpxUliqdNEUcXb4xZ/CINqtYGTjL5ukluKdKzQ0iWdUxyQ7B0539PAUhHKrCNWSQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.23.tgz","_from":"file:sinclair-typebox-0.25.23.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-VEB8ygeP42CFLWyAJhN5OklpxUliqdNEUcXb4xZ/CINqtYGTjL5ukluKdKzQ0iWdUxyQ7B0539PAUhHKrCNWSQ==","shasum":"1c15b0d2b872d89cc0f47c7243eacb447df8b8bd","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.23.tgz","fileCount":59,"unpackedSize":360675,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC2uzXYF5CxKSzQlWf4c5Tskan7om7JjTCzGEMHxHbYFAIhAMqzzXkwnMjVGLg1mDCx2HCX6ALPvsef4hHknxd+lFyC"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj7gs4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpmXw//fwHx9+LIkWckvMnX9VMEugx7aXrHPcJDfi1fjJUwm/NSEfUh\r\n9D1wqHtH0qc0v+6NhQhrwzUZmYhawYItPu442bfWWdJW6nvgR54tUBbbw+fq\r\nHpoviNydqjKbTWWSkV3M4ilEYVPXR8sebC0eN1sWTATbHc3SqErQwdhVbMIC\r\nrkTncO8ad/uhTXEpQ45XAe1iva5JAOvb02H4q8P7eI5jRXZ0l5+j8VDlMRZ3\r\nB4EALWgVpWjCHFD8gYGCYOuwnF6YIz2lfiinIWgqrY96tsYHRtc1cT/jHQL0\r\nbPdOXwACyNFm47k3qfBYKJlHmirSNfLtU1ZE2ZtpXXbtd/Fo4A0WnmWLzt/y\r\nInwQNrTjvuVTrZhz60s5FL+IF9TOWv7c13DCdxYIPy4spoCtPGbKnx/mTHeE\r\nD2NTr9ahnqk7mPkA7ZA0kl93hSqP7Vf0rys9PCP351DcLttHOWG0paqu+L7y\r\nLmz+r0wE9Q6pOqPI3dIfbFzlQOxWPybqn2dxu+cMCO6IDk33+VeefM9U4KsZ\r\nZaZoowshpZBMluKZUPsH7mGTn4xpbyGUtOyy4rNIagCL6ARUVafRDhAJwkSM\r\nYai5RlijmZ8AHHtO5M7MjAUwjnysFuSZ1BVh+Qk+0wNxtkFKgCGLSWWdzkkC\r\n3VhomDU64amBMU3LEDyQRYEAxhSOzGHrEFs=\r\n=emnJ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.23_1676544824274_0.4543425226292541"},"_hasShrinkwrap":false},"0.25.24":{"name":"@sinclair/typebox","version":"0.25.24","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./conditional":"./conditional/index.js","./custom":"./custom/index.js","./errors":"./errors/index.js","./format":"./format/index.js","./guard":"./guard/index.js","./hash":"./hash/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.25.24","_integrity":"sha512-XJfwUVUKDHF5ugKwIcxEgc9k8b7HbznCp6eUfWgu710hMPNIO4aw4/zB5RogDQz8nd6gyCDpU9O/m6qYEWY6yQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.25.24.tgz","_from":"file:sinclair-typebox-0.25.24.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-XJfwUVUKDHF5ugKwIcxEgc9k8b7HbznCp6eUfWgu710hMPNIO4aw4/zB5RogDQz8nd6gyCDpU9O/m6qYEWY6yQ==","shasum":"8c7688559979f7079aacaf31aa881c3aa410b718","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.25.24.tgz","fileCount":61,"unpackedSize":361600,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDwMBHysAz2n903btIlVcXQCMKGK4Jbks9sg3IyvbeWUAIhAJyZbGTxStScI1N9q0bKCS1iQIyPiV282BI2s/0gQsqb"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj90+1ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr97Q//ew6aSGqptNb4Op2f7TIawROTM9fJaBcSJDUFd8bOQLqblufo\r\n+RNPM4aJpUpOYrREaEKxB/8v1m0WfOTO8kDYi07RFmyUDqwtnVQj2x82qjb6\r\ntN3ewwt4POtib/GiU9SaHYErtf/k4XXMHuaniyR1BJs8PmZVV6iyK0J3ysdS\r\n6k6gpaz63mg5tt9zy63H/EbPS+BpqXEpceU6S2r+/M+/n2hm2n8qRqT8ha1b\r\n/aCCi+cS3qYHNl5zVBWrVSpBEpGnuWZkm1QBgvUlAEgbKDRrr+XjbVZkUov5\r\n/346RcDFuto2wbbgaJyHBLoUAYHhe7GE1SxNSj7N92BH+y8tM3ADOdkMvGMo\r\nfb3weNwkXGANBy8a56xSVtWZIUcxsiKpWlmmsbqLkMPdvUwnAH0Dv93ATvJu\r\nJlIsnDYdwKSGcrszuEHUvSBaWLLvJ70dQwujQ4KghEVXNq2FxSSoFNh4hhLP\r\nKNIs2GD/wlzTK1UXGcvJ4gm95ZSxKMcb8byz4YdnRkYIGonNWQUfIw2F51wE\r\nVvis3yKbEPOtICWaAIkBg5EQQx3u7kuvS4SI0WOXGX3OP44kF5nbe+hMr8UN\r\n0FsvVVZdD2b1Eerxee6ilNZ5pQkSQbFjbTZ9ztQCxhXZECZmN/g4Vv7TZCnM\r\nAZHLY8VkUgyNOD+CpGpKPb2DHNtUq1EtkA4=\r\n=LyFB\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.25.24_1677152181374_0.5354045408887462"},"_hasShrinkwrap":false},"0.26.0-dev":{"name":"@sinclair/typebox","version":"0.26.0-dev","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.26.0-dev","_integrity":"sha512-CLrRa33JcUM2vBCKTWe8VGxhgeOoBMyeROc2zF8ofPfLQMDPxG5CK0whqC4I9AClELI2kyc4xJtgICjBvH7rNQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.0-dev.tgz","_from":"file:sinclair-typebox-0.26.0-dev.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-CLrRa33JcUM2vBCKTWe8VGxhgeOoBMyeROc2zF8ofPfLQMDPxG5CK0whqC4I9AClELI2kyc4xJtgICjBvH7rNQ==","shasum":"edfae6b019fa7efb799c1fe94de35b8debbe3feb","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.0-dev.tgz","fileCount":41,"unpackedSize":393090,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIByCd/UlGCh84WJRb3U3EBPDDPuceNuLjPRjWh1jZcLPAiAd2Ssof+a46iLfosw7hkFzS1f+CwgxaUdiLhb1J+FjfA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkFJIvACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoFHg//TAel6GlMllgy6esh4Z1tuPt9xKo8PDQeVTCzrvBUjANuMLvA\r\nzzoTu32rZYuhtvbJnEMxdFMqbPJVTZkt81Z9hVR6iL9LvqQ6IWDMzFeb+HYs\r\nsSQeeZ0WSPFNeK0PdPnrg7aRi7B8ePiAgAuaUlz4CldyTGIsTRaXKyLcptGH\r\nnttPh8ApVbzFDXu/5fpEs+/m3Cdx2pmkx6PtobX0oEnLmAeALWOUbW8z9Rfr\r\nycnm3AE6BSybTBYb4k0JKhnSt+aGiIR79WRb5v6fUBzvOHBYY2VIx6vk0zmc\r\nPgNeI1xROPzA5gaC6gwtz1f0YK5bVqFuwliIOPnbJExfoH0D1KYXd/GQBtlp\r\nUl5hax3+PdpjbpsofCJIAcMC5Kb8bThwLtp3a8ygPK8IUcNvPH4CE+2vWMcq\r\nyN+AHbv2QXpKVBNRLd4J47Zg2ktQPpUF5Bzc6tPZlsF2++U11XofESuki3OT\r\nemagvM9yZmohZmEyvEUXIRDMiVB7m93OrE2eAZXOdNS/WiL6Ifr258on4UA7\r\nCXZ4tGySgbJrgntYynAZ7c7rdKBVWn7flBjteD18drAJhxDg98UgoPGIiEXF\r\nm8ybA5KUgDmCZDHgx/zUaduEYaN7LcysG2E1Z0MI4KJQX/fP/b/G+ug6JtG2\r\nYGFrQKJQxlJCKTPuIPyqkrs1ZUMmxGWopP4=\r\n=wBk2\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.0-dev_1679069743308_0.3441310875842185"},"_hasShrinkwrap":false},"0.26.0-dev.1":{"name":"@sinclair/typebox","version":"0.26.0-dev.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.26.0-dev.1","_integrity":"sha512-hS1IAUsBrSwUcsSoYqo2JKJQDj6nsv7yPuxwWmthO/5j/Xh8jBqP//dfrokEkcfMU8f9F4DtxbDV+j5I6XuhZg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.0-dev.1.tgz","_from":"file:sinclair-typebox-0.26.0-dev.1.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-hS1IAUsBrSwUcsSoYqo2JKJQDj6nsv7yPuxwWmthO/5j/Xh8jBqP//dfrokEkcfMU8f9F4DtxbDV+j5I6XuhZg==","shasum":"aa8ea8b0a359923f269171ddc60e577e2cbef0ef","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.0-dev.1.tgz","fileCount":41,"unpackedSize":393505,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFSv+D1BVcNpaaUX3jf5MT8+C8o4S5Rycw6f4/HhWRGwAiBPaL1VyKqrvojAHc5HQh/9MpO2PQOGgCEe5+LRw3X+sg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkFVzOACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrzKA//SBsWIksk9Y58kPLptApwNRn9xJX9FAT9AQFO71t5yyuGCmwg\r\nt/dVq/oxHknskVxFfEyLTFgF7xpikWJ4wsbDcF+SMA06ea6X0UTWnmEa6vDk\r\ngLYKRIU8hyUoYy9WX4DVveWHCvIRDXqj3rkkSashmrT8q0kN8jmfmDAdg4Kq\r\nP0M+Mcly5piPdT8/gMV2mv7YRxTbQttMUto25MWWbO28ogRMfmlo1tluFHZF\r\nKPRNl6ojCsx+j0KJ8TtnKtuiCQabqgOjUpWN5EkOw7/mQKGu9nOeWStYo4to\r\nYTrAsfBnjEpfwBNIEzNMvuf+376wO3dwLFOeIhmjKqDom27tydl/7qRfLzOt\r\nS4j7vbNlHlPmtuv3lJehy5CYu3sN19buHa2TmVMuDXGkKW05reaH9TnuMo84\r\nN5LfqItS2o5G3kaELg5Si2J7vkrOJztERheyBzEyOaxW2P/8fLg2PuVpUDZY\r\nb7ZyQSJNKoGVvkxyfpjFjFnjhgiPOFbXr5OLn/G0fK5CyhpRRiTGSiXmjGrd\r\ndgvNzgJEMJwfzkD28f+6fnnxEot8SUP0B9orQ+kn9PWu3/R40QzFDH3z/8Yh\r\nOFLnhR4r11dkza7dkosB25sm6+4YqnOyz6VWRMnHNN0oKbjVLGOs05ndspUB\r\nAqX/9RCaV41FBe88jXf7jNHUnr9rojEuY1k=\r\n=ljT2\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.0-dev.1_1679121614153_0.23910352672296353"},"_hasShrinkwrap":false},"0.26.0-dev.2":{"name":"@sinclair/typebox","version":"0.26.0-dev.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^4.9.3"},"_id":"@sinclair/typebox@0.26.0-dev.2","_integrity":"sha512-r5ZFF4gkBEko5XYeE0Xx5u0cELYP0ysJrHOo1NPNcJ7k83Xh6QA2AJuQBwFnAvxH2mRYkpFbJBVSmjf23xqI5g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.0-dev.2.tgz","_from":"file:sinclair-typebox-0.26.0-dev.2.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-r5ZFF4gkBEko5XYeE0Xx5u0cELYP0ysJrHOo1NPNcJ7k83Xh6QA2AJuQBwFnAvxH2mRYkpFbJBVSmjf23xqI5g==","shasum":"ad32ff42ace97962297dcbbbc9957c6dd09e1f1b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.0-dev.2.tgz","fileCount":41,"unpackedSize":396118,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGbUiVhRDNst/gDyhbZ5zO2kvkyu/+ScA3wlwy4nQDwgAiEA013P+TEfbV+rpr08EPC9AuGsipxLsEOJOECQLUlc+Dw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkFYdmACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoE9w/+L2xJPk8K+rPSSxUnDsl0OcBYePwLMB94TcXSVCfMQs4cbGF0\r\n9sl995xtelHUZdSMYx8a63YoAIh9hZk1tu1thcjKP1AzgJHzH3FyB786qXUD\r\nA98h8dqv1G0VEUam2d5U4FCQANAA7UdJc1l8PcyrCKmyBMo/vm1fsCauLO9E\r\nZqB4njpybIah5ZzmDyBAKpsz/YOROxYS/TCKwvKNfagnEPXoUHB19QW7+mwh\r\njVdPvIpvhwlEZf8ypWjSlbWB0pXppbGsLByK9lCiknYxJAhSTTlQbBb9kGIl\r\nD2SHRtxkpWL007Vy6p3cyY/gorqhpt0POY8wt4iGfa8qh0tx5oE++7cV1i8f\r\n6EiHdimdU1BvB9ZZTm7BHsOnZgIyb4q5k2ZdarxcpWgEmFaX8BvybcGRdHVZ\r\niSF+6WgK4HdFI0jFBLMtqWpITewRNIgHDwRptatrxD1A6/GtrJsXrdyGVKbx\r\nfmfDMeRPmFRYO+mjC5uX6G8Rus3aucDlR8/BEkZtDI0g2gEctfyC19fVhSBN\r\nqR/+GEvPqHnlUiwY+zFxUL6JePAobSqmduX9US0I8NXnytX0iZWONWV8PW+K\r\nQfTu9Gd4CaSydrrcV8grv/ShiZ9mo+Q6x2bJb92UUdECnrO/MNj1EY3kTimU\r\n6wblilGKm7XsCKZdxGMEdd3PqlfjAP6agsQ=\r\n=DNjL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.0-dev.2_1679132517965_0.737655923271626"},"_hasShrinkwrap":false},"0.26.0-dev.3":{"name":"@sinclair/typebox","version":"0.26.0-dev.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.0-dev.3","_integrity":"sha512-QfMYpAl5ES8xqmKJ3yGCWuBKluIeAXXqSJmbOwsTkwKsYBBYkAsVcPefzZLreyfvqsIcAOOToojFXkx2uTswyQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.0-dev.3.tgz","_from":"file:sinclair-typebox-0.26.0-dev.3.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-QfMYpAl5ES8xqmKJ3yGCWuBKluIeAXXqSJmbOwsTkwKsYBBYkAsVcPefzZLreyfvqsIcAOOToojFXkx2uTswyQ==","shasum":"cf5694e8ac3c0cb463110206da482d7cb1b7f79b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.0-dev.3.tgz","fileCount":41,"unpackedSize":388450,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCdst/GQpWlSt5jjfHOKm8dTps25cCczDNFNLogtrnpNAIhAMZg52/OY6KDb72qyJKW7xYdPONss4YSC46N4MHbWUqu"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkFolRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrp8Q//RJ8KtOHeQ8FoddCHwrO4wlRzaTRZwuI6TTZ0PDdVScQ0TJcN\r\nHCSgbDEPMQUYwKs6igZ9j0zDms7yhl4Ajz45QtdQG8X/nzSNiotZ1FUVRcnV\r\nWVcym3e7Rkknf8RCwOFdZTZT1xrv8aj5qZ0wFU5Gn57hMOJpsPvfeB1QBafe\r\ntYyL3kHZDXfyV6cnuH049M2/NAnBaxol+enTeaIt7ZBBjOFGO/JE54Dl3HsV\r\n3lBJ0xqYY4Il+S9rcdqbF6qUMB3ORGRUqBAcyeBeyPT9afWriRh45UGVU+55\r\nmzWvnfr/6xiSYhg6bANeUc8TbeNZfPYOVnnWqVlB685L/b56RbevkyCx+uio\r\nhKtV9ePY3arMmA3AfI5dGZQ0oFH45/wdgcr+F5XbeXEY3PXGQFHVwyzlWgup\r\nHFZ8yzZ8UHRdIbelVikQM8oj+SfVNCx+45TeCnjoiMdzejwitVlfXv/NUzrO\r\nKK8ejExmlBk0pFsAZCA7Ixl0dauKWcCWZ30FB6PlOLvYs7ufk1+CxCnPD/tH\r\n69yk/dNx5UAL0qqSkHXA3ZLIeOeEhwx/2eZ0U3/Ir+NaYMr5mkKyB7Q4evpX\r\n1mrndK3G2OT+K6EV1tPMcGtObKiLaviX/H2dDn9j2HKgR2qBHLMs7p/wUKOq\r\ntK9Yn85wGoQdbDrviyRngdIwNYBkAntRqTg=\r\n=cQ6a\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.0-dev.3_1679198545037_0.7240979723421632"},"_hasShrinkwrap":false},"0.26.0-dev.4":{"name":"@sinclair/typebox","version":"0.26.0-dev.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.0-dev.4","_integrity":"sha512-Ogxik7EzihqGDxkp8kBUU83Mq1OwymalXjof3bdxb5EN0HQHWqgoFiV3cfa2L2jWM+Kp7aYW0tsDcK4fWRYDXA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.0-dev.4.tgz","_from":"file:sinclair-typebox-0.26.0-dev.4.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Ogxik7EzihqGDxkp8kBUU83Mq1OwymalXjof3bdxb5EN0HQHWqgoFiV3cfa2L2jWM+Kp7aYW0tsDcK4fWRYDXA==","shasum":"31024cfdb89382647f2c38317871dbae3cca4c3c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.0-dev.4.tgz","fileCount":41,"unpackedSize":389609,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAOjfwnL9cCLl3rGgg5kSGBwCli168pgRwCtRoUELwRlAiB2rDFmk1tUI6DM5Jd4Sc1El0RsAbiEakXUh0qV6Rf8zw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkFuKhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmraKg//cBG5ZAY8XgOdkgQqJZTetjGM/LeTXd+V+ScSbShUQTqJht5o\r\nyqlTTF20dCscJ6R8zKJkduAivKlEXYo65+Pr2NwkgIl0IstT9D63gTuMQGft\r\nSpE4v863EyGWt3+Go/M9+A72YTkjyV/7Fn1pWoi1bHj/6SK61bUpD0hqxqoS\r\nVfkcm1oG79DQ9NF1KMkIfHMVy1AwCTJQckTagWru0dzgiAc3N5J0jajuN7Ms\r\nCpiiDklIz0gsCTa/RmaPsb8GXw/hlLaOoag0yCixFvGCp2plMGfgMj1XH4tT\r\nA+6QRP1oIeuj/m2Ak1R6L8k0bejPR+utHuGMxdKv8cBhoGBHH9TM1Vd2rnqX\r\n/Qkti4cNM/X0C91oVqm/XHL8KK2NNhGR+69o/wkDjb6CskmF/RDdkhBcoFPr\r\n1oSQjGFvXNCFSgC7vMUP1+h7bw2YJ2QBA0/RsZbglrqO6Rzorbfz1mVW6lGN\r\nZKzUi9+UzCHY2GswKC1ZA8q+GGzD1a4M24uZXzBwfV1/bfokvh/S31YXNFju\r\nfogUp22D3RyVUDM7Ktjvx/rZd8a1XzpEpZkSV7QlcS/gmSGaetYQGfZFKZNY\r\nRDpt4a6kpoRWyKbWbV0NdVTtBg3jrvVtbV8KKuRoeLCLeQS6pF6zlbDEVQjE\r\n8JZjOX38rbHu3dUwxB4i8DhE554UQ0s0+zM=\r\n=x77q\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.0-dev.4_1679221409627_0.2946865632078246"},"_hasShrinkwrap":false},"0.26.0-dev.5":{"name":"@sinclair/typebox","version":"0.26.0-dev.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.0-dev.5","_integrity":"sha512-DshtQKfuHxawadWK6YgEhF9l3aag/rlSI29EL2AeOks0XvohwR/RzGIiseeP8B7Y4ez9SgygJLiCI9ySXGzQJw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.0-dev.5.tgz","_from":"file:sinclair-typebox-0.26.0-dev.5.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-DshtQKfuHxawadWK6YgEhF9l3aag/rlSI29EL2AeOks0XvohwR/RzGIiseeP8B7Y4ez9SgygJLiCI9ySXGzQJw==","shasum":"ee5656823fb2eda6d495f5e43087ad31b8d28e50","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.0-dev.5.tgz","fileCount":41,"unpackedSize":400081,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDEHpQfYKTlyIqX9jCjJ1kSP2WBB+IAFQdI/5ZQLcNsxQIgK4OXzveHi8T1LnkmddIfgbAbMJho0FUxNcwf045J0nM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkGBpmACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrCOA/9GtUUWnjE9gUaedWwPE+bqZNdw0dQsuBB4ajd6xOp3cdzDKxK\r\n/DchOWh/sqpRrmzSamXuEGnKkTx88vxm9yq0F2Jf0FGq4d0Q7cKLo6ywTHq7\r\n4RF5OnmjDw8MXd3lvm70eymqHF+QHnNyg+ba3YK2KhyJLYoQHe9iogGhBfrU\r\nULcb15XNbggQTMNz1nZKzQ2vSk2/uH00jT1e6Z17p09UlYNPRJFPRBzgSoVl\r\n6uD6OErdmKJdFlY7+dQaSO3bMhZ3Sz3NbKwMGyeRX9Kokxzat8ycBks068Qg\r\nR8RpsaF7K2MEsrgk7EpYSX8w6AY2zN/D4sGVsCBS116SaTHxpQ8ORl6KdJmz\r\nqxCNZ01TC3M7pdFQ1xcmCNF+vj4NpBItjGf73RypnsFzEhm2OvuwnHz9QLkl\r\nmShnm8+dUdSn+R6Cj3ohDBbN0PJDFjLfH+zMKWrgRjqV/lv/I5Aa0NMQlQFl\r\nfrwGzZ4gPjglpKBL3mz2xgKSrET75Y/Yrmc8kHeDSF5GMFj9HcSg45w5pxUe\r\njGG9rLhkStPNGYV9WdvsJ56u0+LZk9IVIvGIbbXlnphZ1Tim7ja9D+AhESlT\r\nktFVabs0ct6ktkBKIJOQ9cSM2M5RRuqLts2TVjMbIeSWdvvcbhf9VI+AgDjd\r\n2g5ke8ArS19SGWV/XuocrV5nj5W3WgCaztI=\r\n=2LqM\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.0-dev.5_1679301222356_0.08870351623844708"},"_hasShrinkwrap":false},"0.26.0":{"name":"@sinclair/typebox","version":"0.26.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.0","_integrity":"sha512-tpJrwq/npjYCZ5x//33zRKlgOg8lsBKuQ7MhmItrde/URJshRwDJsJzPwGSUqVetRCDDmcUP5P3Ux1XtAU7l1g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.0.tgz","_from":"file:sinclair-typebox-0.26.0.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-tpJrwq/npjYCZ5x//33zRKlgOg8lsBKuQ7MhmItrde/URJshRwDJsJzPwGSUqVetRCDDmcUP5P3Ux1XtAU7l1g==","shasum":"49b2b2f52147e4145486c778a727dcdcd65d4682","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.0.tgz","fileCount":41,"unpackedSize":401396,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCyYlgPw6DGlTCY4g9Bd6Ip9/oUK2624I/4v6dskqROQQIgV4bTmpGzI4GqKjlgB7B8fV/mryseqVAnUOdmu5ajSv0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkGdZBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpJPxAAmit+eCCHuro8/poAXgTFgTXGNoJglt552svOCwKI7jcN/L/2\r\n9nDcEyLIvFbWyVhjmAi/v7E7fYeSTMKrsAs2DImx7TfenX8X9thsUEGEYRc0\r\nAZ36yoPRUkuhehl3ycFImOvpy4q+pGq1PLSjxonpHZiFglnXCN1Y7ljrwMcL\r\n/kEHL/CbLQANgXPSG8cFf59E3aaD2WFrS+4n9DXXro3UnKLQp6ximwtB/zAZ\r\nzYF8oZ/OZdWrUJ/bMlxBugcteWq5y35nW81LSdgBhvDCscF4cbKFdRkiv2vB\r\nwOVnkisMLA+0eKHvM/Q9xp+ATr57otbv9cb0kLHEvzf6H+3oIfgpwDWkjYRW\r\nxqYw+lURpiswhVTZmXAZMzQp+TbAXW1aUOMr8aUeN/XLyNphbkjTkl9KBS98\r\nwKBzLteUZj84Qzij7KHXdvoKMcKBsJpDwVA3y5PGBK1yHnK4sU28ruHf5wzb\r\nvPtVjWbmrswPL9T3RCo9QfZzWUGtGqitLj67VLoJbyB0PDjGnULLLZLJZEic\r\nhhYD2dSQCezZ7YNF2luTW/3WCO5/vs3pnV5tDJ6hC8weOVMiIWV4tFUt4bKU\r\n4IGa/VLTptoOr/lu2yk/eiBEGse0y61CZlrSgLMN8Hjiex2KJeu2ViTtImba\r\njut3Bgp8WvjJGwVcqBemZOdZ95Io2Tg5t9Y=\r\n=YeCv\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.0_1679414849072_0.5486670804900116"},"_hasShrinkwrap":false},"0.26.1":{"name":"@sinclair/typebox","version":"0.26.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.1","_integrity":"sha512-6tJPRp4iDOLXvjuiB5O96Dgseex4B7at91koonQ000Fk+MC4Ix7B56ULS9cBJgakWb5P8QsytLigkAve17g86Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.1.tgz","_from":"file:sinclair-typebox-0.26.1.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-6tJPRp4iDOLXvjuiB5O96Dgseex4B7at91koonQ000Fk+MC4Ix7B56ULS9cBJgakWb5P8QsytLigkAve17g86Q==","shasum":"34c9a6c5356d5a54b6e9c74bb1b7229073d875a8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.1.tgz","fileCount":41,"unpackedSize":401155,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD/Kq2EeAo+1TIyRs0Wh+22KTVHPAXOsOBKsoPa81C7PQIhAK10P2LQBJmfum93vdjczd0DTI4s5pRFqH7iInfPngig"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkG1G2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo7Rg/9GmXNsJER9uCOEMEGuzc+jOGHdYKxkDszD2uewWxudkxkYh3E\r\nUmY22Z3eTq1QeP2QWId1YW7kz3ll7hQTVoTruBePXwuxbcvByEXvGKxX0bmL\r\nkqzTZzt4mpH4GAQArucZQ1fyay+nT2MIFA/rHN3NtyFWlGrpg3j9HIkSduUJ\r\nSU/u8zWSm1qMIEiYwqO1V8ARXEnKuqNlHTDQvgoMtWa+AePLoheIVaWi7lST\r\nNqYbJNEGPmkpq84xoJ1kHPRIYKkFdXX6mjkcae1kC2tad+kxCk6z7LFa0jgU\r\nOssvtu8tFSDk7zngSRpZuLDqtUDuO86YHivPctG17EVruSoEv752r95txrDD\r\nMOxGHz8kf0TsMDJuJvByaQ7zQ9yPbGXrkIvjYHr7XkMbxemmWu+zS0Q7NdTT\r\nn7UGVcMeQ+HmCs4ADg6xS2BfOwfTPamy1B6xmxqPEwlsP2UOu5rurvyU+pt/\r\n8lAZIc+/cR+gXKKwSTjgR40PYKEKS7stPE5PJ1WiN8ADvMu7kQBew/Z2yer2\r\nlNPadcBgFbkcW2QsObJxfneDeUOgW/F+k/+c3P/mbPa37cQXu15g7U/pNGnZ\r\ntVnHTWOWtVetysfJ6wGy19JiptgqGNPUiSQD3PwgwZD320Z1WFI+4U7tusj5\r\ng+02Z/QWJ0C+aODIHBORCsuW334MLBU2Rmg=\r\n=qktT\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.1_1679511990564_0.40399211925751666"},"_hasShrinkwrap":false},"0.26.2":{"name":"@sinclair/typebox","version":"0.26.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.26.2","_integrity":"sha512-Ltt0X5VwgBdDfgJ9j37jNMQ/QIsarKZqLUhcW7SpREcdGZZ8RupBhchWkJiJzhnwwnxq+nIhAi1EJzygwbEIFg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.2.tgz","_from":"file:sinclair-typebox-0.26.2.tgz","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-Ltt0X5VwgBdDfgJ9j37jNMQ/QIsarKZqLUhcW7SpREcdGZZ8RupBhchWkJiJzhnwwnxq+nIhAi1EJzygwbEIFg==","shasum":"4f60dc028629c3d91bdcca769053a7d00d3fcbea","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.2.tgz","fileCount":41,"unpackedSize":402430,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDQRWOkC+pPfvUjZm9AEn+w7ULhozx8mmXNk8JfJKK5SAiEAv9Txs2DH7M78Iu2fO4qYOQ8cz3nMmBUT88lI2f5Mvms="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkHAr0ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmovTg//UltOssn1mhgtB6f+/FcSt7q6dC7zIKcOFSCqzOFu5ii+U1G/\r\ngeF+25qGQA4B8gRmdaLqPlKKLiu9PijtV6QT04rUZXOUrQ+y+7avxAAYPxDE\r\nyh2098PFOPzIO6EpNU5jgkkX4Q6C4tQyBAv3oggzqnYNXDsukXHvCSTX2Y1U\r\nEy6sfhpw8Mt/8PayTh3pQ4XOiLqsNk9aJcdIDDXossC4GPYjy9cw4vK9GsVO\r\nzIku+VkKrPEGTWlp4J/DsDrGOGVW4lz2Rk7paWpZ6eqaCjZoz+0Kk24qTSGg\r\nWuGie5JnJsDXAbxOCicv9jLxjcWohVC7Rri/qA8UrQyRMbTnLuaAzbXsMxc8\r\nwL+pUF2pRK+m2DiCymBM5W86ML3ZNa9C9jEscu8n8GB17bhYgED4WffBomcP\r\nUqv8Mb7AbZiK8sFvH/gJnl7Xx2GGQstkYRyCjXH55puYm9duMm8WbArucklD\r\n5iAcocsMCq7Bk85lmeAnERr3bVLPlSlknG2r+JEOCN1Jlmyvhp4/LFPAr3bS\r\nYYSJkA8i7uotkDrW/silipxMiKezyqPPh1AzQHeT0IHpzgnVV2XEladO0u0q\r\nQDXG8f7JTXEQ9XXlgxHYd05tG6WC2x6HGDD9ahNFEjXmSFjkysuqC+m1FYr7\r\ndJ3rFqsr66ngArbq6OZ82tXIaSZbYD33F50=\r\n=iIug\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.2_1679559412147_0.6873424568984425"},"_hasShrinkwrap":false},"0.26.3":{"name":"@sinclair/typebox","version":"0.26.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.3","_integrity":"sha512-7ePab2ecv+Qsn2N9cKY31gQpXBd+jtQvT2lmknEbi4k0n5nwQQ43AOnhdy/TkECIO//fM+OdefPDc1eexeEN0A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.3.tgz","_from":"file:sinclair-typebox-0.26.3.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-7ePab2ecv+Qsn2N9cKY31gQpXBd+jtQvT2lmknEbi4k0n5nwQQ43AOnhdy/TkECIO//fM+OdefPDc1eexeEN0A==","shasum":"4f2d33038f9d7fa9514c1c00903fe641cdb59472","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.3.tgz","fileCount":41,"unpackedSize":404156,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEvYVjIurxhkiQngMDHh3vItq0DAiNSandR3YAVxw65qAiEAs6GTH6rjB2uchoRp6qOP0eNFTtFWAg2tpV3MFlvoHT8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkHS2RACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqghxAAida4b52NaUmZjFRObS4NVAr0rDDtTQoPuvowdDnqBoJAtZA7\r\nGyJFhTlONIS6EHfyA1HmjFSoBJLCk2UgSYo6wZ8s57q3UE1xBWAiVZI0q5fn\r\nqyRAG2HO2g56DAxb1dWTEDWmBiOYnRljPySbRBD68a2lad6omV4CuqQ284mO\r\nR4Vf9araBgrmfBNPJS08LookRdfrYAnY7eytG5yVFU97SYIWfK8iXHY1+ORa\r\nzGMCDHI21nizCKrARzFO/rV7THN0y6AwB0cTEuoTpLcaS84TvrFuOVVto5W5\r\nmkBG3GwSY7GbwMrdoVAueATouOibcZJ5tjHRDNmXJ9xoBO0FVWsSfElURosM\r\np8G9B6IA+oOkmJSii3L8X0PWmRM0RfX1NuBFgnyN0rN0O+De+V1LPQ37Hmls\r\neyIy8D25ysykViugiTPOPIc3CnmNaJ549ALXTywkE3AyeckzlQsl+AQQAoq8\r\nnWK3UVF5JpJAzebYBz3rBw44cjqahE80Bdui94QH3LSnh1PRspM+hVqBYpxy\r\nJaWvWaSKJHGI7Psyy7v3tJnTzo8sZxDRKlM32ezYWCe7G3YZrRPfExVJNr7C\r\nPhO8QAiouEGxChh+mrb8YLFyseXQuLIiFWNMJsl+1Fa4iIglQNee1m2zv5Sb\r\nJyAjc1ZF61twmdvGb5q3VfEBSdUk/a3e6es=\r\n=tOBv\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.3_1679633809270_0.03535487432492879"},"_hasShrinkwrap":false},"0.26.4":{"name":"@sinclair/typebox","version":"0.26.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.4","_integrity":"sha512-ZJgx9iRQ6ngcRevS/JrYfBYD1ZKT21c4MAvAUIQgzcHRuD2HJ3WwrSKxmVhfE/MbrGLsMBQ6Wpc3tMPVXOBYuA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.4.tgz","_from":"file:sinclair-typebox-0.26.4.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ZJgx9iRQ6ngcRevS/JrYfBYD1ZKT21c4MAvAUIQgzcHRuD2HJ3WwrSKxmVhfE/MbrGLsMBQ6Wpc3tMPVXOBYuA==","shasum":"ea23bee1f9121cd404134bbf891372e93ca61c28","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.4.tgz","fileCount":41,"unpackedSize":404066,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCgn/14NDbu6JTMtfPnPdcbf/kiYNYnH0UDST+cNiAtNwIhAOrjSV1XkLF2/a8ljb1yfys0DgvRwisGz//ZZBb0kDRt"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkH//PACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrAcBAAl+g1BTNP6XNUu7nfDsj1vk+fDnttN4fHY91cUB29BGjvSuRs\r\nIUL5RoLRwb48K9Ar0Bpun+VEojfrnkR5Dy8mATALKsQz1n1tjNCo+yfdhufX\r\nECihHFcX7VFT5xD9itK9dc3GGps2JMmWUFXa5mHzq3psr7I9k6K4objhv0ot\r\n+WXUZsvKBgdfUWWu4TcAUcHs/DZuo8lJodqsJd2NalS7ntXeN9rdBwxRe7hH\r\n4IPXdF+N1z6SGmTcr+4cpaNgwAHiXsyNyJgkLm3OBXPmg4+D6XiUzngTloDj\r\nUEbYvG39AM6aypc5f+cWd+siPF6M3NYeO1/DUdvpQlFWoef027HGyqhF799k\r\nuA0VFnnIIyYtzFkMCzV+UkvXud1X1o1+CLt7mjRH2p94mo1FrUzf3OaOnLLv\r\nmwhE3My7GORWim/pMM3r2YyB0gcfGF0tTSv/9IQl+2lLJ4fqt5PMiHufxXtn\r\n2mg39kdcSfI37F1lnRjM77ZveD5ve1INvOVlmx8/8nKpn/Lga7xTzGGW+ObV\r\ncDWjKHaMDr5hUURmWlG4U1qBD4jV/pquQ3itRtzpQwAYkjgUMomOrYthqGQU\r\naUGTi6fwcBN0so7X2ROWuggBE8Z4nXUIghdzetpLEO+bSW9kA4AqLxz4U9Ha\r\ncwnIUoJbsUS1BBa7v+yJHq+/6wcGNJvzno4=\r\n=LB57\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.4_1679818703438_0.5080452710070835"},"_hasShrinkwrap":false},"0.26.5":{"name":"@sinclair/typebox","version":"0.26.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.5","_integrity":"sha512-bCAUB2mTRhSCbDKjtlsqfmIAahNLdW7T854jnbruGHsH8p7CZKJQgU84x9b59HQ6NKvI9GUCimxBJSrp5f7fbA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.5.tgz","_from":"file:sinclair-typebox-0.26.5.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-bCAUB2mTRhSCbDKjtlsqfmIAahNLdW7T854jnbruGHsH8p7CZKJQgU84x9b59HQ6NKvI9GUCimxBJSrp5f7fbA==","shasum":"565335597bf1876197848b27335b518a043aab43","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.5.tgz","fileCount":41,"unpackedSize":404089,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG1NUmO55iifsOCgkjkKZzQ6CQgqTjyWNuuoSLRCzhlSAiEAi8UXv5kJ/OhEbysWcu1Oh8g3fE5E8+BAXwCVM9vYmOU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkIQ3QACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpCrBAAioeFuI7+Z3cM/bsCWkGDdsz++iJpfT7mEnRPFvxDD9Tw5/fL\r\no9LCe7cgtLna1RGpmdcgrSM3U360+mlqY/WdKRtp4I8lbb5j9UiQXr35AlPx\r\ngiDLYdlsPHE5ShIWm8YOqoCTIXWbj59hvJK/1dQ0MbQmN6+YXidP6awjKC9U\r\nGCqObrIYsMgM8zNZkRmfVRtXOcr9nU4oeiB/2CrzZn6avtd0hT73/M0+vbaY\r\nrfs3ZJ/sy67lmyNgqr65IjDfeedqfbppHwRruPFpyMHZ8UPmEbK88/Dy0Wmz\r\ny/nCCfgDcN/jw2B/YG5Sc8SJua7t1g9cA21O2dEdtLtuHX0zkiB2nGbHUM91\r\niy6R555tYPzewU33jMfIzMuxQ8fQJ4HrE7RnBurue7dnAv1JAEU5w+vJu6vf\r\nje66Knm6iQgCq4Mwx5kIgE8xLFZqW25lUApGwdxEwti1xZudx2975y7lc2FO\r\njmovXdhwImTFJXDBDqK3FqY45/tLVo0DR4Cm3VtdG3TuO8h+FTqFpkam2OCi\r\n7tvz80+JjSM2HgMpKYGfY8cvNUTQSdzdkGv58GsejcB6+30KGuxoEXqIp9FE\r\nFyk5uZ71vcjM2MJ9Ov/TNQxfgs1z6kuxTDIdixv4Yh2iDKLdH8Sseo/BQyEW\r\na84xKpzOKpdwr1C4VcgZq3V1PH0vbmLY3Nc=\r\n=tyQH\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.5_1679887824369_0.5914031809042886"},"_hasShrinkwrap":false},"0.26.6":{"name":"@sinclair/typebox","version":"0.26.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.6","_integrity":"sha512-7BT4sRfeCV5j/CK/+cXu05B2IxrNBhD1rR3HJ8XG3/oqZfJIA60GnNKo+N4VHA47JTg8zlXuYTLYMVxI3pwMEQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.6.tgz","_from":"file:sinclair-typebox-0.26.6.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-7BT4sRfeCV5j/CK/+cXu05B2IxrNBhD1rR3HJ8XG3/oqZfJIA60GnNKo+N4VHA47JTg8zlXuYTLYMVxI3pwMEQ==","shasum":"d66a26ce4e09af10a4a6a85a26dceafc956b6162","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.6.tgz","fileCount":41,"unpackedSize":404723,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCp5oyj8omM6AO2Gf7og6S0u1UVvmElPctCGCa+2DXGvQIhAKaUs5Hr75UoB841T2V4vJ2DEoBkT1baUwKYPCAfcpuf"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkIv8LACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpxmw//Tbz86yG2GK0KFUDerVylBHmuiS7El4UJzyw9ZQGJr2dbYrGZ\r\na3tFkTfJ3y2+J4AI7ihk8dcgDHsJp5pBEOlHkFGWOP09CZrIAX1I3gE1wxI1\r\n+GCHu/4iY9ULC64itD1WNcusj8OZDlQ1GHf6ddt14hyinYEKsK0IoriAztmE\r\n4y0atGQzvuFUJqWzfKUcxSi9nNdZQbdpQDmjwm+5cppJs93bbHcA3Kw09vn6\r\n+/pgN3w3bYXQaPRHs+GUThWfHTQNwBLxULG5XblOYY3aYd+CPVzXU/SidJZ6\r\noRQO6Yc/lO4P2pno3mBpOx2OFn/RLCbXdL0eqExbAoCzdCFF2O6rQ0G9L4Gq\r\nuniKUkR3k+kVm0Ky/27J42C0MSm6V7fFMqytZhrrRBqJwdibqA70WZaEyg5Q\r\nMFxYwv/MFSsxKQ/RwjITNqwgcmDCyhpl23lKQ44QSckP3yN59R8+huEh7fHN\r\n4ysJN8lmdRh9A38q3lKuoCiLAVa6LzBTbAKWwqk14d6EtdVRnzrSYA3NZyiD\r\nXWO3s2ioIhoxZR58hQWedYIVz0NB4RLJiedL0K/+7tf8+zn1ZuJgFjapqYY2\r\n6kM1f6gL0BOrno7DDu8MQs7TGVH4VClVF4uuj/HqUwME94H/UpWjLM0XiBoD\r\nbsnu+brI161mvKsWcTkxOQ69D4uluvTMQWk=\r\n=jZr7\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.6_1680015114894_0.9936326930420853"},"_hasShrinkwrap":false},"0.26.7":{"name":"@sinclair/typebox","version":"0.26.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.26.7","_integrity":"sha512-lDClq3usrxGZ30W/ILuIJyPNM27lhLDpMEKnKp7QklMtU3tmEfs5v8Qdlcw2JHmhlzsH5tKGCAkd28xp2jOOxQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.7.tgz","_from":"file:sinclair-typebox-0.26.7.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-lDClq3usrxGZ30W/ILuIJyPNM27lhLDpMEKnKp7QklMtU3tmEfs5v8Qdlcw2JHmhlzsH5tKGCAkd28xp2jOOxQ==","shasum":"34faf7d8beffefb5ed9c2d6de3900db6709cd6a8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.7.tgz","fileCount":41,"unpackedSize":405934,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5aDjfaGqo8MmhbPvkPGvY8iqakub2KfRS66pYr60JFQIgTZFHG01ujEuUSe+Ne9nidQF0GTVvqA7mr6sus1In/Fw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkI7yKACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq3lBAAgX8SrFqmUSJBaVxJkzMszzf+eP9xWrT8zqkDvOHn1OKS7xfB\r\nEm5uEDGEoZufm1hrogF/0JDkXPavSN9dklBJkHsBrhdhdydNPC+apTV/W+H4\r\nI2rCq8tRcAS7UQ6WFaHMo1aBQjIS7WK9xBth6Y/z3S1AhLnmpp3dPijIf4cj\r\nOpV4tNQYrPmGJHXlk302cTFdoeu8+qV0NdFDpQKqmT4lBFNkdiAcPYDzaHEJ\r\nU6Rn6JmJX6k14v4EnTb5YUgkT1iNkrmnnG/wdDl0rTLE2FptVVdcSsAM8Pq9\r\nb66ITtQtSqX05kPwZZe8AYYYFHca8EHFXaosBh+kfOjFuKe+hZo80DmS8r8a\r\nUfSvNy1zrik9wXO4VccAtMBJkQbixGso2cu7IVgsBD1FYzP/IPDO3lSMm7nX\r\n3bU3uCx01Um5VTMtgP02ICBmCRdkBitD8Lw1+6U8hvD9M2Og3V5sGTtmflQG\r\nb0Zett+sAoDK6nxsn2eW7pSIhmkJ7v6eQzppQBHmZhz+cRpmLCMtTLFYtjCh\r\n+c1f+VMNvmNvaxvs8REkp7LtqrKUps2+En4EPP4BsIqO0iSYKrdL/Pfr82Mb\r\n5u8rH3OrDEaqLPNmjTYv977h9dSQifxwvc7bhQIcSZ4ql5K0Xsqo5jeZbw5b\r\ntlX8gyRO9pZt+i8Oz2o5PtGgE4HeJWrEyR0=\r\n=0Mal\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.7_1680063626254_0.3986138887108903"},"_hasShrinkwrap":false},"0.26.8":{"name":"@sinclair/typebox","version":"0.26.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.11.2","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.26.8","_integrity":"sha512-fvAkOrUWndf5vjptkW+4TeTH84/bILWQHgk7rbbzT8trZxW+b84lr8dZQPM/r7cGNRFxDaJYsMjHCikEYyAHaw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.26.8.tgz","_from":"file:sinclair-typebox-0.26.8.tgz","_nodeVersion":"16.17.1","_npmVersion":"8.15.0","dist":{"integrity":"sha512-fvAkOrUWndf5vjptkW+4TeTH84/bILWQHgk7rbbzT8trZxW+b84lr8dZQPM/r7cGNRFxDaJYsMjHCikEYyAHaw==","shasum":"daea92a69f2903b1f1d9582b9539553f144aba6b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.26.8.tgz","fileCount":41,"unpackedSize":406336,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDuz0LQX3h0zzkFiEg+2CBtinv+AAK7uVgGbUwj7p9SmAiBQzeZG1l27aCApxBcP6bJ7ljlx9U6nkswXWtvHzv+p2A=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkJH+hACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmoh8g/9FUvdt6rDO9ApzW1BQb/BYXMphqi/ANPLGz47GX5PLPsuJ+zy\r\n2jcq4L+LeHMUcQ/TSXPPiSb7U/QrnH5SAq/Tc/dqvwNV1ONUOSfKE/FxFFOH\r\nC1lyQ7b3s3lr0dchLaFDWszUQlWizZq/J2tJXg3MzLrB82EOoe+AlSY55Z9T\r\nM2uUJu7K8x9ZEE85hOO5h3yXBmMgBRijITtNqkbNXt7ary3P9viNu9bz7CG4\r\npkxK91mn7DzoF71jyB8T45Z/zGOrUDIVDHwg8bAhR4E3oIT+kGqIKRw8eXGF\r\n6V+b250kU1KkVCSVlSixdYsc9/VKXFN2PaHNtTKB0PKo9a3UTFljn4LfPTVU\r\nvV0zLaE8JWCdivig090g3MK/8JTPbH/MkUZJrLQ8SnGcdUWVklGYpkS194wH\r\ng3pOFGFbPrt5Shi/15hOevOW6qFJLBul2e6d0LioNGA51iD1R9HY5co1VWJI\r\n3yZyAAWJ7VCFusoNUohKd7JpZmCl9XbYcBwhGlsTSYstzqXx0PQqkDAonYxS\r\nqjmMdKyCtmZiudRQ1pbXR65yk+tcH1OJOCFt4IcRKDaiMDNcsQaEJR0Tt7tL\r\nCHOoBddrgafu1EcuBd9pJ8WV4pdl+gpef1LgSFBpgUDCDZYebywgzXU7lLgI\r\nJiAspFGJBV+DoIQ8Fylc3WOTw1VKEdmcCNY=\r\n=g+CY\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.26.8_1680113568871_0.48686976653214553"},"_hasShrinkwrap":false},"0.27.0":{"name":"@sinclair/typebox","version":"0.27.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.0","_integrity":"sha512-nqCvfid613HckrkVcHw/OJv7Lbkd9PTQV3U/unOsUjdsoHhx9l7sEBNzdTfXxanreHOKV4tbmokLOGMXOQm4yw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.0.tgz","_from":"file:sinclair-typebox-0.27.0.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-nqCvfid613HckrkVcHw/OJv7Lbkd9PTQV3U/unOsUjdsoHhx9l7sEBNzdTfXxanreHOKV4tbmokLOGMXOQm4yw==","shasum":"e8fe35461a1ee1a2fd78ac56b8c40f4a18195299","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.0.tgz","fileCount":41,"unpackedSize":433948,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFLGCcKm4wOAZomqgGfA9tT2Qa8PLc9DWTKFxNUmz5XjAiAMGF3cqTp/miLx4Nuxw2fQjbDAhqu+OPHKiIzTO9n/kA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkMZKXACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqhig/+IavIOG8162ZrycQZvGIKhJk26uATd0upZDXk0v/WCCbn2YPt\r\nm4fGGho4kHfF0wTyMvQa+mepEptawGdsKOJXP/I1+dbzaPnl1MfSLhxlusUu\r\nXzyVkp0cRH+m8YJOYXCTBn8tfnGEJ3ZhLKB0SqW5M6pHl114cqpL6IZTXmZW\r\nja33BueusgtpXHiUk4JQvxuBj+W+jxsXofoO2J4B+PMZKv8JcX+6djbXs72w\r\ngSjXrAUU9u/6e9J8qnLisuOjC0rn6OG4Kzs8c+O2wbxLERTd8F8jcPFieZCZ\r\nGcy73P2V5NBkGsQsm75BzW+Zs9tynIIG7LSG4sTLJqnZw5vHdi6Y8AlusXyj\r\nvO1LJRgYkkHQ7iCokLiZi43A5MWZ9YINzwiT0DDJCo7aTltb3JROq5aOGqp2\r\nekNW4YZP+wUNjLes5mXnS5VGiQx23mi71YhTgkpSPCldjDrzdk1FFPoH2h25\r\nK3yBu4bpy6KZZkSMM3HvqFP+OFhVxGWle42GNOkVEEyIxnpj49VZPcNEJ2mx\r\nkqGdrTIEp33GnZHv2wr56DuKY3IkPqm8NQ3wUA8vdVBe/kD/nAUn6PbWvZeD\r\ntxuJ7t1xX3RjkGyDVnUXV3AxTBaJkfOWusXcqDBdjr3wBMXwEcW3k2uJ06AX\r\njTvOSBN2boTl5SC9SRYGYZsLbVT1J/2poSc=\r\n=YuLh\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.0_1680970391716_0.16761637968069132"},"_hasShrinkwrap":false},"0.27.1":{"name":"@sinclair/typebox","version":"0.27.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.1","_integrity":"sha512-+BzPidY3shay9ue8Qa2v6Z5HO4HWP0+irwMQcs6PEDWf//Iu7U7+b+W3+aXdovFFl/Sh3yyKKXlJhQ0h3zIMBg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.1.tgz","_from":"file:sinclair-typebox-0.27.1.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-+BzPidY3shay9ue8Qa2v6Z5HO4HWP0+irwMQcs6PEDWf//Iu7U7+b+W3+aXdovFFl/Sh3yyKKXlJhQ0h3zIMBg==","shasum":"99ace29708c8da1cdc323b1e685a36abafc5b987","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.1.tgz","fileCount":43,"unpackedSize":440696,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBVQKhJ6Ny+vv9kikb8QzVJ5Yp4VWBx4CCwAd4yD6+0kAiAniE1w87dVGB0Q+nHXliG93jqd/unpUxXr7Ccnlgbk5A=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkM/QaACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqlTg/9G5QPQfT5v98XsWTI6wQqQBSGVRUr4D3CIZn13raIqkxeK7Ti\r\n0OfL1vbyeA5Y07SNmdTTWrt43AZLp8dhsXOG1e9GQUhJKiCaXlkFj6ShSGUN\r\n4+Gpl4rbWUF/FzOwl7bcIAMbY74cb0tr3I1xMq9cYSOOokjDsIJQIKRMVOGG\r\nfWAQK2/qclZAvq9ivCBIDkopSuKRmySp2f0v67Pw91Tu1+1cWPqlfZUiEVo3\r\nTVQU0rUqAqDeXlHEN18WKk6aCMp7oZG0NHeiazcdcy9WXmLaVUUypA+YGTz1\r\nxqoU5ULLzLi7KRIKrjvKtIySMwLO+bK/t3752HgIy3gZATNvPc0HXgwigCOX\r\nFhn6GhlzqGoLr6ut4XDMQUYy/cTIzyaxVUrPCzuGcng9MXXeD0bd4fDspknU\r\nR6yu13zGGow5f0mj2kA3DB4zAAS6NrrMwXl70P6CwAGEE7oYBf2bHifh6D13\r\n0GKOuaPs87BkEixwFN5i+McXceMMMMCANhKclrUCrsSJKyOO99F7F/uAgz3p\r\nwz+eopi3YSQYA5X1GagUSwg/lbvai+J7PnF3ErJCQ0weeXy5BKPYKB9WsnX5\r\n7DS7oJsi3PSP0WgMlQe5rhSgkpQNsobMSXkvKf/qtNqkxPmP0mFBSJH95aXH\r\nd8op3TBLc6IGNh97CEuaqpxOBEefWWJ7GBs=\r\n=QEzG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.1_1681126425938_0.8257015919976811"},"_hasShrinkwrap":false},"0.27.2":{"name":"@sinclair/typebox","version":"0.27.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.2","_integrity":"sha512-nm4jY2hG2w51Qug+qSw8aSLatstdDy2JA3f6vpJRQttnXcZZ6k+EBzQWPdvW3+tBbw7NPoQ9N287F6PTzGVzMg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.2.tgz","_from":"file:sinclair-typebox-0.27.2.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-nm4jY2hG2w51Qug+qSw8aSLatstdDy2JA3f6vpJRQttnXcZZ6k+EBzQWPdvW3+tBbw7NPoQ9N287F6PTzGVzMg==","shasum":"d178f8b8845dc6da2d947706549d69fa7a9bf179","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.2.tgz","fileCount":43,"unpackedSize":440696,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC/BAX4HQsOtFzwarB4sSjm5AZWEMG8E0PD2qkdNslUZAIgQjEWh8lHunhGtARyMMaeu6gOOSOsCLqj+b7+N1ze0EM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkNIKHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpDXw/+KHaHeZlnaVof6j54Pl3Bcb2+UCiciSW8VrjZ8Z/r1sCLoIeV\r\nlCaNPnuFonXrUzn06ric9KpF4DEcuZoMXBShv3hnIVBO4vtrclOFqtwThNkw\r\nLvgSiBbGdaRqP6zD4yPMPGt5Qv+exbwuvrmDjVSGX2KVWJtZkk+bW177QEuv\r\nooo+n9669sE86RSHF5darEGzqmLO2tEvSMrT+HhCwx0qTyose306Yb7q+BWo\r\n/ptTRa0szAmqxPNFIi3tba5bQNBKCM0oHjn8fGNuFdt6lHHgKeigBXzitcoQ\r\ni7NJfsxfha2eftFf3tHVJD9C+4okcmOeO1+pMG1UTjRaCULT+G690hFAF3S0\r\n12D0650Y0SUjsK8RG3NRslFyvDoCxHev0tCJ68snF2Hzf0d7T+8Acxz2hgim\r\nzYHIvIVYWjT69EbcS76+Z2K+xSjYyNBO9Ms893p01OBQRTmd0yTssNwsWpDy\r\nvsG0wI8/iKXD0PiKthVyCUC/OICNkELwT0YFPFJx3T/6poeHfTBFb6sL7b9m\r\ns4LXwNWyrI15HpekpygrIeVtU51l/AfSFLQgeespCk1wnZUVW+02gg4WiXWs\r\n1j/Xxorg+48WYJmfmv1tWErLcbSblnE3hS8XAtnP4y97sZmnaGPcEIgX9Vnc\r\ndhuROvLWEFPjJ5ptoNpG7r2+K5bItxfFsw4=\r\n=RN79\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.2_1681162887482_0.828106181670214"},"_hasShrinkwrap":false},"0.27.3":{"name":"@sinclair/typebox","version":"0.27.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.3","_integrity":"sha512-mzSyMA75B1kVzw6P/mo9J9cBCOqtA0GvbIOhlSonRtDSR4jQyla1opsgNnHKzXuCqhVef/Nv+F+z2ueNrIVLVQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.3.tgz","_from":"file:sinclair-typebox-0.27.3.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-mzSyMA75B1kVzw6P/mo9J9cBCOqtA0GvbIOhlSonRtDSR4jQyla1opsgNnHKzXuCqhVef/Nv+F+z2ueNrIVLVQ==","shasum":"af668779cbead6b1f9e5df7ff8918fba3cbc840f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.3.tgz","fileCount":43,"unpackedSize":440821,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHDMKaDX6x1p8AB9DirsI59Ll6r0BpbIIW6+JZqinimQAiEAnb3XxwuQfrCWy5zSiErexcItEXx/SEe5qaIxP68AYUQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkNPOgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrbvQ//flVKILEAq8Pf7YY/+yZjaRmT9nBoU4Pi/BwCA0FKcm2ZwqKO\r\nwHyLsnw1SAL7utclx8a4YdlyXCSJyTYgswBsOXZCTknGSBPWxWnsi7mutB5r\r\nATjhlL8jBKYaUgyjqP8Jenb8mTa2Et68rO/s94ikXs+v4gQUmPGIdHJgP/v8\r\nVS+as3w8HZBtxIBL3OqMdehlmjgQhzVYV4n/Kl6cCz1XDtYKIGTc77OX47GO\r\njurdOEnJnPib5NRL7bwhyVSL9JjV/yIz+o0I/cN8JYBtLNFpNmib2JUnWmz4\r\ny0vdXExDjqKQH3fhd7jvnfmLdVwkhXUxvOfalyUmYFwRhvSZMjKivgsy6bO0\r\nKrzmIWUcbQ/8mBywyJUkKQcaR307CenvXI5sPnkzwhqWy2rK7iu+DUV7+dqa\r\nly/a17HZcbhlXrnXJ9ArkBmAED+Ha4X6Dhp7QhXc8yjrarIArI/9Mwl/5l/A\r\nYOoMUqJelGqLI/G/egttPgws0deECrOFSgYlohyvLRaVhRbW6VwgYm8nKoRT\r\na1Bwiv0hrB505/iqlC/6DL0if+6UXjndPoIr5SAoaVCCTrGG0dprbXxh/KoV\r\nj/MUh7Q8dulyIO/OWWoDgeHlZBenCQKC1EHWs2YtQkkg8t+QJuAnr2avZuKK\r\n0UnxhQ1JlWQZFGOV+wQN5O753r+DAtyRUYA=\r\n=ktXP\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.3_1681191839786_0.2745561800150049"},"_hasShrinkwrap":false},"0.27.4":{"name":"@sinclair/typebox","version":"0.27.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.4","_integrity":"sha512-PwDIJ41Wl/Rn8DbBC4tIEG8nONKyKfbf5P32frIvm6VrJqjukjqOs4VR+iR3khQVC91k9SopeRo4B+SrfNW2YA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.4.tgz","_from":"file:sinclair-typebox-0.27.4.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-PwDIJ41Wl/Rn8DbBC4tIEG8nONKyKfbf5P32frIvm6VrJqjukjqOs4VR+iR3khQVC91k9SopeRo4B+SrfNW2YA==","shasum":"ab9e302179f67254b21b330ca55bfbd755cc61de","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.4.tgz","fileCount":43,"unpackedSize":440821,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDgbnMup15JfYDej+0QtnYEpA7Rq3SuP6Tmz+ptO2epBAiEAoF4rjq9q+bwbZ8vMV0fwbG7Jz2HXQoT6QKlI7lW4nOM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkNqnfACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqL7w/+KV9zpXTXOWQC5tQFs9FjKY3RExXuYm1uSwjrLhMaWQtdYB8G\r\nlhnI88SG86zz3eZcFVCatk+N/73aA6rDK+zoTa54akIKuY358PIJMB42WXzQ\r\n5ERTSAppYPzfA67EHlajzlU0aMKJAM3uPSF/ZsaJkKaGhLw5Gabgth+y1CFp\r\nL5bDr8dzCWtGUbQPy28LeOx1/mqgxOCBmFN7GpGPg1jkuQJDF+ZWi55lrwIK\r\nsS6ybDygTAN4JFyGDn8N1vIqcrr6gual9iehxBNPQzypfF4kaktXhmmSblil\r\nRoLkbOr7mcGSq2rB8sViko97UDO/6aMvIsmbbkGhhqTRdelt/46vJrV/0/Ek\r\nThKeP2GSu19rJ2Lwl+2vIKObKDTHHpAiUPQ5uIR+iDAPjqcVVRyWRjwbES8C\r\n7VHJPiyjiwD/1dwPalCeKGrYQ6SrBogw1W9QK+/99+uelMmhzwcZsTyC0NXk\r\nuzkELQ8xDzRF03rohIZqNR4XkqZEJSdoImUJrELT0ab2ji5p/+zFwKACTubR\r\npvadrI+5spHbXNtDz+j3Im4gjd1gJ/VXEJ/fZ/yTRgQh57txlGbQrVdmMSeh\r\nP6Z8/9siHnI8VHKhKCe4DAT/03W1kVwIZUAFF3a2dMcqpBRS7fNkB0JMoVMY\r\nd/M9PQ+eYgokm5QdzjiMc6bWrsD/5Sm/Whg=\r\n=bkgc\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.4_1681304030918_0.20240948080889365"},"_hasShrinkwrap":false},"0.27.5":{"name":"@sinclair/typebox","version":"0.27.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.5","_integrity":"sha512-SwsnzCF2nqxuoXx+hhDWGFA37/x6V94SCcYUfYIqUunhvQka4ii0uCW7/dmtE6MQs3dk42TISf6gRUooiR5FBA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.5.tgz","_from":"file:sinclair-typebox-0.27.5.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-SwsnzCF2nqxuoXx+hhDWGFA37/x6V94SCcYUfYIqUunhvQka4ii0uCW7/dmtE6MQs3dk42TISf6gRUooiR5FBA==","shasum":"fb31a0068036def8466a3b6e5a6c999b6139b945","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.5.tgz","fileCount":43,"unpackedSize":440910,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC23Ml8fClCRxOQq/thwosYB4oyafM2EwiGJJa6Ge09qAiEAsR/K6Q2+r/NYxLUiKj9Lni4VFNflUwBGY0JSEbyVVlE="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkOLM/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoTrA/9HbMngJNc175JqM5HWD+YvZ+sFk1yTy8edc6g3SsQIV33j9QF\r\nKsi8G45O8PFlrU6grkRDvYXdQuz6WDQ/9f8kPPEobqbmPYY6UWi4OueizxyO\r\n8qg8mSgAES8xwoVpwipxMbEfAmwtiZkjHZ9lM0TPxCMKjQ8XaVxsJzCUeAkB\r\npPYqG5KShQWiNP488RghYnYU+r0uKDs38iHZihMOrSAcBpF/boRqD9lcP6nH\r\nyY7vXknGnpraqiiUDcN5nncTSbRrDEtCzT43PAU+WqKwM4CljrFOP398s9aR\r\nFaVsbZt43d2orD8B9cwL6WqbDPXl1plgc12j42Bx/EIm7rOcI3uZAdfIrprZ\r\nrHptfg60Uax7POoFDsiQi/iwJ2uu2aeuXRaWnpmLqtnxt7koOSD4g+opMREE\r\nrmum74aHe/VF8vEAtYiSEDyBMOPj8lDYaDIW28qUqnARz7PU/GtbU9rnajo5\r\nG/CkfFD8TW6TahLpYWQtu/VPNMD18gMiwhbfzomU2y6pa+ZRl/ADUyAG1No5\r\nH2yEN0V6NiwfWUCSj9V0dx15TZnks+KBHx8E3scAPk9zD+e1y9C0zOJciup9\r\nwK4KHKi+tfrd7uW7QWQnaNRUWKZIfxd1J4izdTrH40Uf1iuUR7ZTiAFKa7gT\r\nERHqD78zBiHswuIaUNe5isLO4rtdthInw7k=\r\n=3os4\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.5_1681437503155_0.2711753051399677"},"_hasShrinkwrap":false},"0.27.6":{"name":"@sinclair/typebox","version":"0.27.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.6","_integrity":"sha512-Mp7BRgoCKdukKBxCaSWf7kGMd0lA4yaz7fQTYTe4pTEwBBcXNih7/xynWApgOsFGMQe5fwJR7Av952E1BVQOtw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.6.tgz","_from":"file:sinclair-typebox-0.27.6.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Mp7BRgoCKdukKBxCaSWf7kGMd0lA4yaz7fQTYTe4pTEwBBcXNih7/xynWApgOsFGMQe5fwJR7Av952E1BVQOtw==","shasum":"21bc37a16b4032f1643545141c267a85fc65c71f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.6.tgz","fileCount":43,"unpackedSize":441284,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGaLx6ie118/QFcDIL3hzYsPLW8emWCupEf9UlGCW1kiAiEA8El7yzgwkqCtj4UakRbX30H7gtZjtgsFQUcbtlu4YVE="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkONLWACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrzbw/9Fee20pluCzSQrIwTNYfKHRVdCa5CXU8aTcitvfNsCeiTuCNT\r\nwuNK2ELfRi1WnbUmhjguFdQTaUHYIJZW18mS1xA55+zxiIKSnfCj5EaXQFWn\r\nPqxm9/X0IeUAY9F+zc+niZpFEuzgtP4ZsnEy0nekbqdY9DOqdAobxP78Rk3F\r\noujz4xgeDCLCUZbA+478EeJhgYac4PfFM6OA0AeSmrxjMF7JkrlKTYLB8h8r\r\nF9KC9tEnlrYv8/0vYFYU0ojtgkhTIkTgdC7dwm0EyRDdz5kiWl7WoyPOVVhO\r\nUGdaghIZ9Z7xbnPOrd5TZERsNH+S6gyC5A44Nn8w1qRqwjs4hwTWnoCm9QXp\r\nXnwXQJwgn269ZbppYe50DXYWFYGS+XgL6HXb3XwOx7pUAWqbW3zWZt0CC0tm\r\nwQ6e5swcbXKplEvrix6+mhclMsR0yrCHiMJFHeSPBpIoNpGfhodYNMl/dWzM\r\nVzZ7yFN2bm1NuHA2bgYZKbCzIbR5gbZTXYF9VF9zHiTzO83CxngcU+u5iJ2u\r\nojPEK4+Jida7KquQZ0HnbeRlgSGOI4BSpekYIAOOT6aHN5tS+CplES3WEYtF\r\nhmPBDZFjZBfAZvYJjwA82PmfIzhs5/l4g7Sp/6/UNwBRwzFLMaP2xp07BT5G\r\nvH3Q8zEeVvSzgeTG0Lpj7md3LFwWibrOBiU=\r\n=esVA\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.6_1681445590188_0.31040865002974183"},"_hasShrinkwrap":false},"0.27.7":{"name":"@sinclair/typebox","version":"0.27.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.7","_integrity":"sha512-sNK1gp9TPArdNMR5QWyNKhGYez2G/NXi6zXlOON9i88fLfGLiubYfkGVPpswPTqnJ4Y9PSnQfKWdwnE01qsaTg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.7.tgz","_from":"file:sinclair-typebox-0.27.7.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-sNK1gp9TPArdNMR5QWyNKhGYez2G/NXi6zXlOON9i88fLfGLiubYfkGVPpswPTqnJ4Y9PSnQfKWdwnE01qsaTg==","shasum":"85bc2d03d4a404a6fba98f56661a2f7cdbcd78ee","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.7.tgz","fileCount":43,"unpackedSize":441571,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGpGtCN7BNmU6bMK+AhAy3pCVcip8zr3XlbcQSU4LY6XAiAhOkCGE7BRNjYDpFsPQD9kFZcZtnmFY/jx/VTAKd2dJA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkOQp2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrnTQ/9HV4Omc0vOIA0d/5jmaYkM5f7/weXbtxQB4R99jiD/Qiz7g0P\r\nAFLHl4Cfz4hiArr2bLpSf1hBHlzaQAKqq6cyyDBO1i6HVydjsmB3rk8x77Kn\r\n7y+W3aH+2FCYBBlrvNeXgmpqzvnMDyQa4cbFBVQshqlBJjT3tLd5dVy3q96S\r\no16SP2FRiOLvsBzL71fKuoNjmlROVSNQ6UboKLTE76UIGMcbAg2oE35LzZ15\r\n1X0ArBmZk8+DIxfB5sQEp30D7tbKA0xvk+UTM83eKT1LCYVy2zP1u54I3H7d\r\nBY5KTaXqj15jmXjTM8F9rvTARgSOBbiV3oJda5ybBtGy0Dstf8ul0Y87+pUB\r\n2SHf75blgu3PFN3cl/ntla+6A1fsSYtxLORt1QX/NFsmJk+E6NT5kyWf8Epf\r\n4v7GPUvPngU2UcLUb/wyi+q7DSF7Ek8CNWhpHA8lTc9n+Sw3CLlSIu1nW+w+\r\n9jR+PGa5i+NFwSWmMX6QJqrr/J+3/nqUnlNPQ7zvtRRPVzyzCeTt32RF31Pf\r\nMfdj2MJKoZLnp+KZZn8v649S9Lv714DJOzT3/n96VCbJTTcGezJIKiHNYSA0\r\nN32MVOOT0RvCV983VSuisD9+k5OuYDB/duBBzNah0l+ZEtvmoImdr9bSKASN\r\npMYKNxrrN0RRjf5iRW4oL7MKnnf0pe0SWQ8=\r\n=t1E+\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.7_1681459830240_0.642138542463379"},"_hasShrinkwrap":false},"0.27.8":{"name":"@sinclair/typebox","version":"0.27.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.27.8","_integrity":"sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.27.8.tgz","_from":"file:sinclair-typebox-0.27.8.tgz","_nodeVersion":"16.17.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==","shasum":"6667fac16c436b5434a387a34dedb013198f6e6e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz","fileCount":43,"unpackedSize":442053,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDiJ2ERfcz+8I7gQ0ff9Hpgm9swbRGsz39PGLeROlW2QwIhAM+sbheTe0nebZ/zANs8GETvK3hyIEUDd3EVrBQ+wIaZ"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkOkDvACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrynA//TTgHQ5yRPfaQxJgATH/MZOj/SsS7Uj5X10B7glY588V+FDwG\r\nqj9xmaPfJyM3bXPow7TJRYVMmrfCcn8jH1Fqune9gbnD7vIopBJXMEQZIamj\r\nst1xBUeg4ryLpMrXLPbtbyNBJIQbiNWrTfByyulHZRCI8I4x1DM/Xt4Qcfde\r\n+R4H12x7f4RiXQCLGf5DmDfHRQEXwtQRFVxF1C64FsOUJ5ZF4S2MvqRKbkyZ\r\nSld9gisJBzVTPsLvYlPeNhxEW61JRyJQVyXKnz+BBONJJDM7P0sVmNxjPAQP\r\nr+oMXumlmpWFIip7mh9s5u/HwIfMkCmOo1p+WqwQ0r1duzd2Lo7wzpEixzC7\r\nikZBobF3BX9nHEXE2NdyXmqRSnYfTM2fiLkkoM/+pxeW0ymJ13TT5xqfSWhr\r\n0QZ99sTZ7DHFtf1UyRqOjqF14Er0Tec4aDr+VAGvGMli7uOcuQv5g/qZdZgA\r\ncpyaaNYq1YFc6y5807cKA9EMe/JP2LYD6ASAg8vbrhXyZq2T+EM54/xQPkuG\r\n4BUC2kQM1o2RfaZP/qzfKfT9h8DhBr9NBTYBCUZLz1MwzYhOd+KQhV3MCggI\r\ntQSuBxKuoblKfcqunacUSsvU/v80nHDua0RWDA5KEbLb0P1ESU8fSfselcNA\r\n+vePXUKxDn3CNqjhF0AMjj9OY8fW1zhar2U=\r\n=Xp7K\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.27.8_1681539311029_0.457375024648212"},"_hasShrinkwrap":false},"0.28.0":{"name":"@sinclair/typebox","version":"0.28.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.0","_integrity":"sha512-9Nk7ny/CiaManM7DZ+NAFqBpnNKEPjAzn+Fqb/xID2uaIYTlqsWrm6ph8x4wxhfQFdpDFF3qvToC6GD5xyCwsA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.0.tgz","_from":"file:sinclair-typebox-0.28.0.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-9Nk7ny/CiaManM7DZ+NAFqBpnNKEPjAzn+Fqb/xID2uaIYTlqsWrm6ph8x4wxhfQFdpDFF3qvToC6GD5xyCwsA==","shasum":"9b24037202c25fc11f148cf3e1d105923dcadc74","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.0.tgz","fileCount":43,"unpackedSize":452504,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCgm+WVThABirgWiSMSRT5CIVefEL7HA9dS5YikR9MAnAIgQer0mY6PWj0gdE8hEt+7Vs9vpwHKC2+N8tvDL4ljoFA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkQbMRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmptfw//Ua6py98NMc2QHvywR4CZE2+mHY4Cf4BNcibWxby7i5Ml4bE1\r\nf2sMjySUUGP+tU6cjixxHqpNkihu8r89uQY3gXrYlN1/O8GNsggr8oCc6nmB\r\n9f54UwdRHwiLQWwzURhpnktRgx+cera55fSwIccsHB9wFs/dLxHLc8DHCm0r\r\n1oGzOBPrjlIOvrrFVsDDs6ajP38Otvub3tk4kMSQ4RwEHJ9wa4Ru2k1bMVv3\r\nxtpN722PFuRmNhwCvX1SLCV/Uu2UdXnAKHThLprvX8qxyeFgYEsvN+/avW6b\r\nJWN1K4envOC0SlX+Tw2L4QbogVultv81xY5pvgikhSr1SmxLomDHom7cxuHo\r\neh2p3GK8VUSstmwgitrgmOggJbTaWhq/lIAsMlS9U1AFyaRgfoUKDfhyo9kK\r\n+PRca/gpfLeGdCJHYiBHFUgP9AmqhuW5KQHAhvsGhkOXEW6/N5tfsGG4acTX\r\nhRRoCbFR9gW8+uT4PYUBGYhzIWkYnBf7SB3mbs5Xc2hohECyZqBm/l5jvcKL\r\nNgl29yK2ZdkF/6xNyGCvm4M2dTryxn5bMZjvwx6u3jlyiv1mYfiwng7jA+AB\r\nIHQ+CKK58yVZTcX0jy87RmYqPeq1+79/1UhGvvo+QlNsQ1/+5BjC1DMQJbus\r\n24jxGMbi218nF7y9n5vxE1BaXL5aQNoB3Pc=\r\n=fWO+\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.0_1682027280870_0.6438497127374865"},"_hasShrinkwrap":false},"0.28.1":{"name":"@sinclair/typebox","version":"0.28.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.1","_integrity":"sha512-Qmrojy+++InUpF782bGcDYP5VFXiZzEN5EduD33TuESjTSLTljCdeeGWlIh42E37LMlYJB3jCpbABZV7lnVX1w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.1.tgz","_from":"file:sinclair-typebox-0.28.1.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Qmrojy+++InUpF782bGcDYP5VFXiZzEN5EduD33TuESjTSLTljCdeeGWlIh42E37LMlYJB3jCpbABZV7lnVX1w==","shasum":"51d72db9d0d42da23c2bbd4434eee33f3d601e84","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.1.tgz","fileCount":43,"unpackedSize":452513,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCj3s+AngcJxxv4rF9KFymZ1E7hKmfks1lJMgXxMCT1rwIhAI7COv+2/iIOv2apiI3VDbqybDcL7VPdPxSS6b9WBSgv"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkQckIACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqlVA/+KPNlWA5dSYgIHAvpFbCIgTjyfevg5vRxCcA4uLvEPKg0bqdD\r\nrbhH29GuAL5++9SU9hveyCAGKj5taCtK1qLS1RQR8w/JMcSxZFcG52qBqTHI\r\nHvIOX3C89J7VjPYQgvsfOQfn92y6vdwaWP0eN5tXPfKQNXRvibLYBezaExCu\r\nOyDLd1VghWTcqGPNCe+4olDt82aT4WtRgwfCMaOMwVS2AQGG7GqT+hCmc5wv\r\n8IxzzcV8U7wRhGeTaB9Ldtqm3l4Wi3tsPSWHttAm9YWqYkFRlfysqE0w48XM\r\nxsqsCQXXCUbpF9adg99fVYaw6q61utfCoJQ+/IhmEgGoVgfCVnzr1GF5LOSg\r\nhplMpFm9GzbERyVmYjwT1ixU660i29wGq2eI0qCH78gwPRlNbsNnYST+49dO\r\nH0gkBZWjsuAKHBJu8pssy1qjeOUYu8yTtHtf0Mt8IWmEswf8+Wsq3j9YKpdp\r\nCISckw0zLwyz0Dfu3ftV2yKlN+GGQxpVhDyJ7rnzeKog7ckuyDWaoN02qjE/\r\nK4hDwr/HQ4Wf1ayzqccJnPSm/NUMP+I6QGy1N9LyxLxGzOvlAptOtPSYa4Qi\r\nfTMEN0zuC9evk806s2TEAZQsVdWIxj7XIED02Id9UcDJPfmb177T5uUAoIBy\r\nW4WlJu9W4UFotr//qSuzJ/VAHI4jJ3EvOVk=\r\n=YLyZ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.1_1682032904696_0.7706299931177147"},"_hasShrinkwrap":false},"0.28.2":{"name":"@sinclair/typebox","version":"0.28.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.2","_integrity":"sha512-3CdUgXqd6ud7tKvEvo5h2c1lx87DsR9pwZeDJ1AVdG9fFK87uTXBR7/b5BeHowjkFgrPmvaYyc+xo407laUceA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.2.tgz","_from":"file:sinclair-typebox-0.28.2.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-3CdUgXqd6ud7tKvEvo5h2c1lx87DsR9pwZeDJ1AVdG9fFK87uTXBR7/b5BeHowjkFgrPmvaYyc+xo407laUceA==","shasum":"7d310ab33eb73729fed751469fc90147209b9d45","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.2.tgz","fileCount":43,"unpackedSize":452515,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFT0bFv3MrW1xe8y47cmV5ZALMwkIhRjoxKFHtHLe+e9AiA6zLTC1OXrBxUKhzu6V29/AITzrgm0iFAKcivr5rw/ug=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkQoVmACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp5cA/9FCQL8i/0L3uy0v7TzrnIJMSZ/yU2sN74DiFqpwjwvr/7FrZX\r\nej5wj7pRPd4WayxYRQEUg2nGm3lEyfi9Sw2TgDSO4tHZOXfdpt0+JcXJzDAn\r\nRokWkLb/wMVF3s2udmJWssBkpgv6f3Jl7DI30CEpsRNa/c3Vm8RzS4hVfZ0n\r\nYv7joEuRaa+lrDjy9/VgfuL0qjz2NAPzwV/39eTM3mCEufLQmBKRRcz0Sh9Z\r\nxdLY6q1yKKsttM8ID1oRQi92iYXzLVFXOcknTop1hOGwTWCOU78Q9gXFT/HN\r\nH921VrVBe2oPdHMocA2Crv+b0r4K4lW1ynswiPyCKJfSy7Ezl4ccYcx5l8rx\r\nb2XD+VTDzFNne6lFdbjXPqUcVoe9phpHxRdKvYP/7LcBF47X2VkCO4IbIKc6\r\n+hGtlRB/MxTo0uVihDalO09s13Jnp1EGMCX0LS3tjARJ6sAHtZIJDaHme3YR\r\nceQxxROJUwVY7Dl50HrKcmG69/iJNJn+SII67rwH52wQ6IAj2mWdNjlWUV7L\r\ncSqBcsytW1wgw8NH06ysmpaUqIQ9+EvAYf/Ju0/Y6gFFNwFQsXzVMkRRH8EC\r\njRlohP3UEmD5PltL5S6rV/unsAsEWdkdoaSVnbd5bJ/XzGvyS4QYqlrk7S3b\r\nVriVqT98BZMvDL4uUtQU6skABrcVjWA0F4o=\r\n=55P7\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.2_1682081125860_0.0926610422734575"},"_hasShrinkwrap":false},"0.28.3":{"name":"@sinclair/typebox","version":"0.28.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.3","_integrity":"sha512-aF0PAXDI5+jidu9WuhJumF6JEaQfIbM2bR0UbGc/UhHrHm7LQ76UenXGgvIcQNDYjghjoPssTxdx9ElNUaGG9g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.3.tgz","_from":"file:sinclair-typebox-0.28.3.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-aF0PAXDI5+jidu9WuhJumF6JEaQfIbM2bR0UbGc/UhHrHm7LQ76UenXGgvIcQNDYjghjoPssTxdx9ElNUaGG9g==","shasum":"e1261c202721b5b2b1178381e1d07b3214b3bf00","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.3.tgz","fileCount":43,"unpackedSize":454506,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCpnkWioRkiceSwiKwBh/vrOPCFg7ZIowb8n1gvoiwIYQIhAJZ8laUWg+Wi0XygN2N3hq//Ej5TLke+tvWexu4AHwQ6"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkQwBzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpEdw//WNqiZTYXNDAX8Q0Ukau24RMHpNfRQMuRK1M8aeoXPhz6cfOq\r\ne2pejoO0nbRPhVxlQPa4BgHD3FSiAhN/6KAGapHFvjbDT2n9WHXhCvsdBO8v\r\nuyfq+VoW1MI41tbUWBWrp3/N45lmdU6XXHSfn1jXnb25uM3Y2MQGVo9YzWRP\r\nCOUyOhDUk4LTIa3AruwrljL4K4PO4zXTUeFWzw/2xEDQTLTIhqFZTZ0rnSDa\r\n2xazWajTQKKDKRsR8RwSPLJSG/5TtPfFVtTi2wAZQTVGDqg9wO7w2wQuxat9\r\nwlWqe+XOOwrl5MKGQSjFlJtoyL5Ll9sXavEG8UNdCOk9aFOyPIf7+3wPqJvh\r\n7JpK6ht56gorXDlZdz3n5Anu6fE+b2SQtaxoNl4s2iSx+bX0eVzPoEknKI1J\r\nf7kvM0V9ZmwblE6Kc/CM0UPN10HV8sXGzVFHWGM8CPjUwuc+ZqFjiaHwUC4e\r\n/U+jfMvWBTtnPvk797eYePxNc04SDPwJBrI4pQ5BSDR0iKSOIdFYD77gEPJT\r\nQE1oSDcRyHrL8YZS/2oDh5Hr4+UXTfwNDjXrQXPUxlUNU1sWuih506VUWrqc\r\nzBm9EDr3rTZw4evCpQ1QZ4LKR/oVEKssJ/EDy59QMOz3msSJt1cc0gv5dHzM\r\nZJfHoHY7ERI/HfPKnnEhixF5El6cAUQBOZg=\r\n=midT\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.3_1682112626986_0.8397945073300612"},"_hasShrinkwrap":false},"0.28.4":{"name":"@sinclair/typebox","version":"0.28.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.4","_integrity":"sha512-Yqxz+dK/AFu9p03Q7XmajxDsNDLEfaQFFdEE4krqi+1otLkEgOrQD5IrWiq26Mbie5R6bPR6BljarufOdlCqQA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.4.tgz","_from":"file:sinclair-typebox-0.28.4.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Yqxz+dK/AFu9p03Q7XmajxDsNDLEfaQFFdEE4krqi+1otLkEgOrQD5IrWiq26Mbie5R6bPR6BljarufOdlCqQA==","shasum":"753a48f9b88e0a9589c244fd8c5ae86a3556f145","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.4.tgz","fileCount":43,"unpackedSize":455326,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCbpxBKjpPlourPwYDETN3hEIdM0cSTliGjg0PVlYAiAQIhAJfddyFNPMLhKKkqZTproACKAXLqRyHroDN1MJrQM0DD"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkQyFzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqEnQ//aMO+sKdDb4B46rzoBsf8w+4BrZIwp6yVlzuuUXnY/6IM4rSH\r\nSqDednhbiEmgIR5EW6wDo7c/NfrSo3v/v+X7x8eCnZBZGwtMbjHqKlg16niE\r\nAQ0ohtcWpN3ND8xKvuihn8rlGY+aKxA6+xr6Xv9Rg7ULGfJZZXdgrZE35xuT\r\n3UzYAxCFqzpQgaQeKTgGnvcSyOuykwIur8ep7cA3SxoBoqBBl/pF9T0kdt8v\r\nAfBHmI0l7TLu4T90ZLs8wS9F5Iy6+4TNMjMXbrfBZdZu4mdjIoPmddvxLgL1\r\n9BYn0Kfd3AOx1hJjyAxw88srD95kWq9LhFLxRw8t5zCU9IhjkYT7VkOLr1xH\r\nyZdaAquFoyH7O41qNmwaSC6g6GS9TbWSAmQSd5jY1IWaTFk7vIbxz42XGohW\r\nndFiFisgibhkhT7Do7oSCG7/kyUom/3Q5NNtNxa8O3GXNzKoN7Kap3nJv/ae\r\n9SCQAMhlmviUOrycivDLdlVkApPlY92M15EFC4a6W9xXX8KRyPd8vSfmsFWZ\r\n+38xXcr9svypmEwaKy1vLtGLRx0ahYb99KqMHdqIkCtxOsid7sp73QGoM5ts\r\ng02KH0zIEnN/8FIA0YgmLKzhfvR9uHanhse5jnp0SVPLOiGt2TIb0IKgk9Gg\r\ng8Wpr9IX5aDYWEIfiQyPkmC6pAzk29tj68E=\r\n=GE0Y\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.4_1682121075325_0.1179759392987445"},"_hasShrinkwrap":false},"0.28.5":{"name":"@sinclair/typebox","version":"0.28.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.5","_integrity":"sha512-3BjziLrALI2q+KpSKMwQdHP0MwmBpiu3oH0LM3mr7Aob9xO2z1hbGxjorTH7l5msuevXH7TU7YLt3Qs7U6Iokg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.5.tgz","_from":"file:sinclair-typebox-0.28.5.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-3BjziLrALI2q+KpSKMwQdHP0MwmBpiu3oH0LM3mr7Aob9xO2z1hbGxjorTH7l5msuevXH7TU7YLt3Qs7U6Iokg==","shasum":"5bb0568c9bca97a1f031c3a30ac625976d22d235","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.5.tgz","fileCount":43,"unpackedSize":456066,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBavepKqgnlxzOchOhUQO8XhLBd5Cj1CsFRkaRIYpuH8AiBOU3Yk7Ir7AytSW2/7cuouQxANjiDaT57Un1DFERqVXA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkRLkzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoI7g//eSIUfp8SbFvIYMwbXn1yTVrraOwW93YwI3cnOVmJLi3mNSXn\r\ntSqoW/uCFcjy6geQz16n0NQM54353N0BhepQnVe/QNxcT4M+t2Wa7pwCsY2q\r\nTi5oQw02coNXdaMdbrv6NehUtuq+pEE0mAcZTJtIhdiy/snp+qubTiMHw0/r\r\nhUYU7g3Ro36yNEnE1IuImI/24BY9WlPHWscLS9m71ocmnuKZ/tpRLce9tFJS\r\ncHFxVu8s/eL7HFZrcWZFK1dF8OgU/xINZKyImmrWplVy2d3FQxexpjtlkcPu\r\nC1ZSmb7U5+q9PDjFGzUVkG0xBn6+fvWhzI9avqUPpuQKFuMhdBkws2y9s4YJ\r\n0c75JMN+gYZZiTqU/TJu9WZ64Cfdxi6RGZ+3KubQkfNZfti9sJycSxnFgKHK\r\noX7UhN2jQClbsTq/Nghewry4flydYvc+s6TDKtu3SuttPqMSzTuE4lFtwsBM\r\nFBi1ally7JWC75jXVawlMk6H4DU+R4B140GVlZICjyLvQuJDABTuDOr5F8OL\r\ncZOWSjlUPOMtrmK86UX+Fd/Id1SiNp2Y+QoPFSUajgYzaNqY/DKRrK6sXNVm\r\nUvuX7p23lRQWUCI0SmTZ0JGsC/2MtvxcPLZP3feqO2oypp7nA4hmQW/QYqk5\r\nSHlRd/n5FG0JzY1Vp3q7bDYnydq5yVZaGj4=\r\n=k8Ak\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.5_1682225459473_0.04868811451395172"},"_hasShrinkwrap":false},"0.28.6":{"name":"@sinclair/typebox","version":"0.28.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.28.6","_integrity":"sha512-dIlAWjH0O0zK2w0YDhLX0vYy75sE0Ie+w9NL3hWCXbegQZMgTc7RVMeNLUem6PDwN1YvKo8oZIFXEsqTM7pVDw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.6.tgz","_from":"file:sinclair-typebox-0.28.6.tgz","_nodeVersion":"20.0.0","_npmVersion":"9.6.4","dist":{"integrity":"sha512-dIlAWjH0O0zK2w0YDhLX0vYy75sE0Ie+w9NL3hWCXbegQZMgTc7RVMeNLUem6PDwN1YvKo8oZIFXEsqTM7pVDw==","shasum":"a762715e46313afc0038ab5495b41cac76f40e1f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.6.tgz","fileCount":43,"unpackedSize":457145,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFHVdBYdUE1rjjAiWqF7JueuhTa9CMu8QM1UtZ8XN1dTAiAn+cXf8mUic0MnC0hroFqLilStZCaB9OJayt36n+TR7w=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkR6izACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq33w/+PBtOdPAwtFEZNjMfoBLID81+/+e4QeCuiGfuxJ7raURfvJoB\r\n/3+aTgYljUj5ZdIOLpJw5M4o6C0j9IPsYqvlLsMpzbCtcRCLnHdAIzq/BV52\r\n6v0R9PtPEJj4kwvLLqu+0fKFznmYW4pP4oXn1WQFrGbMRFbJES11ES9mW4Tc\r\nfZWfoXyUsUyheB5VH1/nu2NBUWF/qK+7pI/2FmO4PUldCEhrOmmRhxNI1gPM\r\nBRoHvOHxcmGMHm2d07jz12KlRJLhCTKAXrF3z4lqShuu2GuX0v5cSdxIrt+/\r\n71FIXuka9zMq0i+a5kXFd/r89cFfub9JdXdaEGOxtQeIAaDOOFzs4U4KRKrn\r\nFY7XSEGZHw+OOBhQaVF+iVUD4r6PHhyNbv2xDunDvR6fREnfe66EeWG0w/Dn\r\nrw6u6uq9B19NS+xflVP1n7Tl8N90esDOaldbZ0LdF3p3i33QyMdFjHVTvwS2\r\nKmPUrrE6ki1jcgGW0IdOBApd+eR2tcClTdhKO70It9MSovInBBIzYlVKaSv6\r\nT+6nyLv55IldcuR1pQJv1W/SX/VcTkdSuIM0XD3pn4fA1UMEQj+kipTMVGPR\r\niIfVNUZRlmg7BTYefG9A1hYjawKzh3eMjRmkh3ReCvf7cP2E2cINFT/PFDoF\r\n2E1AfUuF8IhV7kwuaIIaUvcUyiKtO3w8BLs=\r\n=DoCp\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.6_1682417842949_0.0631929121055268"},"_hasShrinkwrap":false},"0.28.7":{"name":"@sinclair/typebox","version":"0.28.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.7","_integrity":"sha512-Ubom8FLHLw0tKXpsbDrcljkGUJpD+FlcLdALsTx+cQNjv3NxW87JaAvqnmHKmLxvI7SQCmdxFcIPytW9Jal3Iw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.7.tgz","_from":"file:sinclair-typebox-0.28.7.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Ubom8FLHLw0tKXpsbDrcljkGUJpD+FlcLdALsTx+cQNjv3NxW87JaAvqnmHKmLxvI7SQCmdxFcIPytW9Jal3Iw==","shasum":"6ae0cb14c98917340654847c2969d02f58b72156","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.7.tgz","fileCount":43,"unpackedSize":457176,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCsKLbDiEK4DftU8FMk29YazGIvz+h786w2ccw1eSZ9dwIhAKcPZHbvn7K/BRF/dJOuK1HDQVBKALrG4umM5jtbWQZq"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkShnQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqP6w/+ME6h1XtcU1rQqJnCShUI9gUFwnoL9POcTULWXrq3dmC5kqdJ\r\na3Z58huePGE/mhtb4vhUlWpbuiVPNxUQ/15L9ZfdLlKSwmzTaKxADgP/pe3q\r\nBrrloj3xJXYw2kP+FLtAgmFDM/64JyAwe2mqZn3IDPQYogFZNXjYBIIBmYGh\r\n2DgbRKa7+5dNXIn7jMz+vrkdD+8KgGG2CO2Txy9/Vg6xrpbW9YIne2MwAYi0\r\nLuUaCruL3b7emSe6CgSV9ZyliwjzIbrInH/bRondmTl1vnzaHwNH1YsZgumE\r\ntSfzxMjyLzwnnzrRyLXZ/egM02SYoCsZx3bjkrdsJl16CHp4oTRDkojdUEgE\r\nn2DDFHLOtem63HawiqTPiFibwgznEc497VXn0eh2g0qNrMVH9Oiug4DqXEC1\r\nD/L8g3+vvOofKNri5s32YXm9Lk+u65Fq7vPqpBf2y+mwbP+GR68aZYWIxFdp\r\nAv8EuXS/bymT+IB+5r7EqP+A2V5KUENmaA7ETLJvvn7sTqeRkbydQsui5fbC\r\nVcGX9dJjUP3xvOt926KVMdF6rlYWq+GEKOfBYSN91YDRhme8AwVw3f1Qaz5n\r\nbV5k6Tltxz874YkHWYyo6CWJv5FVrH1169fhwC0/XHl7F330hyGEhZXeHoVM\r\nGsegB4uDPuH6fy/hBo0Syme7MyGvNZDRgl4=\r\n=c6qG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.7_1682577871859_0.20216079986839963"},"_hasShrinkwrap":false},"0.28.8":{"name":"@sinclair/typebox","version":"0.28.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.8","_integrity":"sha512-OerNjE43mIb2RDy/RJfjS+OHfJHq3caePlVe/GXkLwLzcYevA2JPzHWSFMkpGgfoFKWdQdckKRiMVMsz40yHgw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.8.tgz","_from":"file:sinclair-typebox-0.28.8.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-OerNjE43mIb2RDy/RJfjS+OHfJHq3caePlVe/GXkLwLzcYevA2JPzHWSFMkpGgfoFKWdQdckKRiMVMsz40yHgw==","shasum":"876fc57190cd3f169dbf054d66963ff4bf424fdd","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.8.tgz","fileCount":43,"unpackedSize":454445,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGS3qd7FHSOL75x8WMIOMCO+K1Rq/EampqYTNMTSxwxQAiAYzlWwJkQtosTqSvBnVZgX105uIB0NYoU02IX7f5HN0g=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkS4+sACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoZ1BAAg53EG8ykTBWSbb5+6N3+haeALKFvNrR917sJ0/67cnUImC97\r\nfTvViJrA6kURKIzTIC0O6UPvFjNG0v82XAhXFrA8wcjfhqWbS8ozgnzFClhx\r\n84duXKIUL9LZbdNNmuCZidCwU3Llb6DNFlbF+6LXLQwuxpiq3cGLzepvWtag\r\nrbqjbUsC0SSn86yBrCJYH+9wxP1H7XuPhQRy/0gx6/P2Tn4bPlQH69rzTFRU\r\nFpm85pP5Q30iCzhOcmjr/+ZCk7rMexLthmSwvxqYTBv9EmgcmOh9VBUqgiuj\r\nj5HdhdSyE3FLQmq1C228axvE1FnAtI9s7TbxiuXJGHmR/lWAWRh1OtXjRjM9\r\nIOy9h4e5WZFLF/6FYxCNvOHvDBBVwIQfoEhxVMYa1Hw4w+78X/xHVMUO+713\r\n/SEq562la2eObaiTUF+qU9Dgw3M3sBwRRgm55zI2mCuK5XkgUZh9Am0WLCzF\r\nVNc24h0ffvHMpexdHKovknj7zVgM8Xx/WfrPfZ9FQUqxyV3yyVvneNpTceOZ\r\njXiEZNuCXwHFePT4XqHSNVhnfUtfX5UJYdwp8AiYub4Y/hjd/LW7nUrMw8VI\r\nSehYjD38vo8sS6U1yowWQEpW214fQxdc8cKPLufM8omEisYRO9Ce7H1XBSCW\r\nFAJjreya6YTEJFk7XzrByy+Q9hvx9VDViu8=\r\n=kdVB\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.8_1682673580224_0.6107443338530492"},"_hasShrinkwrap":false},"0.28.9":{"name":"@sinclair/typebox","version":"0.28.9","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.9","_integrity":"sha512-m98m37J9CBZ8XinStjpss2ZOW50KG45XB4cAva2NGoQHiGPxhfNL2BzUXYCs6ahXdK7/F1NIjOGh+MPP5dK8Rw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.9.tgz","_from":"file:sinclair-typebox-0.28.9.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-m98m37J9CBZ8XinStjpss2ZOW50KG45XB4cAva2NGoQHiGPxhfNL2BzUXYCs6ahXdK7/F1NIjOGh+MPP5dK8Rw==","shasum":"594e4e752839868074be70a8cbb35f264de79d07","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.9.tgz","fileCount":43,"unpackedSize":459938,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDC3wuQobXE7btzHGSdKNo46MTzutQNNF4x3YELgOAjWQIhAJZAgm9TCG5F9RPEGO9+aeLYX2D+LDCElXpE9wYWV5kf"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkT8z1ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq03BAAkuYT5/ja+3mXe7d89Af4YzI8F5H0EMITxoM9jaG1S/xMRSgW\r\n9e8tbpX4jbDE5e56nAnHBah9HNVu3kvOWi/9d2BmyQUkS/5LTAe82GxBcCfj\r\nFiAMNk1YDrDLeOAuP+BOnsUIIFVq/e/StNej0E+K5FwPxbf0dn+yxuDcICJa\r\n2QjYeJ9ocUY9QjzOnqun4N2dZIUkRnbH78/WIqiVpdMnKgYsVuzGhwX+/kSc\r\nXAQEMc2RMFYjD0zP6HkGC18TWeIpSpugEgSklgHWHU92LTWrmIo4xBHI34Sb\r\n2l7YyKi7ah/cUmy1MdyY9tkOIuPG9bbH5v9piw00p7cYkk4KGws2LF5YwvXP\r\nVpFav6UWONN59KyQL/Fj+JMQsvr9/kCVPOpOvh1kTCwBo0a23di3oqfmetHE\r\nuT+1i/A2o+LQc/OQ9hsDWNoGdrYUS1nuE5s8tfoRJiysAIBBhQ0y+L/R5h2e\r\nc1aKRw3KbnZfBoELxdSQjaDnQTZXItvuPnRIYKV8IOHXN0MPzuyrQyD6M6oh\r\nLoUMTKBNujm6Xb7fDjGhG1L4Xkz3Sefk6F7XyS8hRZGQIfothmsJekFTBHLQ\r\nkPaZeatzjp63ZGdEpFfT9Kk5WmNngPnVyP9WxlR8wPkVnM5/sIl6zBOvS4GP\r\n9oUO1m4ksdDKSQf6mU98ZvEDmkBx2znia2w=\r\n=Nugc\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.9_1682951412838_0.9389784001271382"},"_hasShrinkwrap":false},"0.28.10":{"name":"@sinclair/typebox","version":"0.28.10","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.10","_integrity":"sha512-ZRpJZFpr2yq1vAenq2qspUKs34CBC97LOMghUuTTEveFONVExQAYEB8Tcjy9NlPj8oVlSysK15Hzkf7Ox6x3lA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.10.tgz","_from":"file:sinclair-typebox-0.28.10.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ZRpJZFpr2yq1vAenq2qspUKs34CBC97LOMghUuTTEveFONVExQAYEB8Tcjy9NlPj8oVlSysK15Hzkf7Ox6x3lA==","shasum":"dddd3243c3020166b52d46d2ced8073ed89759e8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.10.tgz","fileCount":43,"unpackedSize":460836,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDTtNLpSAWe3lkzrBbY61IZrawjF1ZXOb9pTwrPmZsjxAiEAsuVvxZdsjJ7yB8ERTkgtXLqBc7kbhYqkZMBJuHOj2+s="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.10_1683993972980_0.8615084344613271"},"_hasShrinkwrap":false},"0.28.11":{"name":"@sinclair/typebox","version":"0.28.11","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.2"},"_id":"@sinclair/typebox@0.28.11","_integrity":"sha512-8QPhkOowccAdXa/ra54pq+UVYvzbKjYMuojxCOTFq+yyEfcWZJSdlIVdivTRrIq7Mgjx1n4E37t8Js/RXwyvUg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.11.tgz","_from":"file:sinclair-typebox-0.28.11.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-8QPhkOowccAdXa/ra54pq+UVYvzbKjYMuojxCOTFq+yyEfcWZJSdlIVdivTRrIq7Mgjx1n4E37t8Js/RXwyvUg==","shasum":"f094caefc315e1a9b4e649056f661ddb20fcea97","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.11.tgz","fileCount":43,"unpackedSize":461145,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDyuzemn6KZlgN+7gnqOxkTeKlwN1zdbMG1OR3cN/odegIgZLpqVnZNaQFcISM5fCG46eutUzwD34nAbiXdtmXKoVk="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.11_1684294039059_0.8682479788384345"},"_hasShrinkwrap":false},"0.28.12":{"name":"@sinclair/typebox","version":"0.28.12","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.4"},"_id":"@sinclair/typebox@0.28.12","_integrity":"sha512-v/jftJeCY+qsfAY3l75tmEJ+3MlCkWG3gO7tSFwg+g5/Sfh8rdA278DFIRezt5JX/T0LB+TNmHnSXnMo5ok3Xw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.12.tgz","_from":"file:sinclair-typebox-0.28.12.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-v/jftJeCY+qsfAY3l75tmEJ+3MlCkWG3gO7tSFwg+g5/Sfh8rdA278DFIRezt5JX/T0LB+TNmHnSXnMo5ok3Xw==","shasum":"b84895fdc96ca8d32a2f241a6eaead268044ba35","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.12.tgz","fileCount":43,"unpackedSize":462063,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCJhGCKiwmmS5Na8ylcSX7FuS8q8AHUlHDblhRU3TxKPAIhAJaAK61Q5brDv69VtIA6zDHqDfWoXMfu6avY/XqZkvPK"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.12_1684993930311_0.15879279548934067"},"_hasShrinkwrap":false},"0.28.13":{"name":"@sinclair/typebox","version":"0.28.13","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.4"},"_id":"@sinclair/typebox@0.28.13","_integrity":"sha512-bSHHPYPB3UGMoa1n85cpzpMXksFabJA2ZUNojojg4gqfaSUgSmtAG+AbCAGJSylQYbk5slOxkQymqWXEv492aw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.13.tgz","_from":"file:sinclair-typebox-0.28.13.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-bSHHPYPB3UGMoa1n85cpzpMXksFabJA2ZUNojojg4gqfaSUgSmtAG+AbCAGJSylQYbk5slOxkQymqWXEv492aw==","shasum":"83bc090f29e0d7c1fdc27000c3ebbb990391a52f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.13.tgz","fileCount":43,"unpackedSize":462063,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIExFAJBMTQmUf9nczCLJaKgNf9K52DZ6EgyUbEykYD5WAiEAkWWhU7AVA5kJvDPz6y1RuV1fRSDEbdKas1JeBK7QuYY="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.13_1685075725991_0.9860249042663369"},"_hasShrinkwrap":false},"0.28.14":{"name":"@sinclair/typebox","version":"0.28.14","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.0.4"},"_id":"@sinclair/typebox@0.28.14","_integrity":"sha512-aB3ddagwMFz2cSLg0/gUt7yaUHJUKnT+rEHGdb/srtEFILB0zdL7a2mcbA7kskOCFHicAOV1POeeZdwoevFgAQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.14.tgz","_from":"file:sinclair-typebox-0.28.14.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-aB3ddagwMFz2cSLg0/gUt7yaUHJUKnT+rEHGdb/srtEFILB0zdL7a2mcbA7kskOCFHicAOV1POeeZdwoevFgAQ==","shasum":"31653c1ecb93af1eec673c771971620060dfde40","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.14.tgz","fileCount":43,"unpackedSize":462603,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH4uZsVSmeon4KTdddFdHyMMjIA+y9KbO6bBhJFiMlItAiA0LZqJy8BxuvpJqAdWZvjMX5Le3hWk4GBdjHAtqRGzqw=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.14_1685388202169_0.6524188764257999"},"_hasShrinkwrap":false},"0.28.15":{"name":"@sinclair/typebox","version":"0.28.15","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.3"},"_id":"@sinclair/typebox@0.28.15","_integrity":"sha512-IUHNXCbehBRC1yC1PVtzOHuDaqb30NnCquY3T8VFChu8Jy+wwl1l/XJ0VhC/EEUPi9MBQ8KTeWGT/KmbhztU4g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.15.tgz","_from":"file:sinclair-typebox-0.28.15.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-IUHNXCbehBRC1yC1PVtzOHuDaqb30NnCquY3T8VFChu8Jy+wwl1l/XJ0VhC/EEUPi9MBQ8KTeWGT/KmbhztU4g==","shasum":"44ef4cf4138740f0e17051cbf5217e0fed578256","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.15.tgz","fileCount":43,"unpackedSize":462936,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDNFr0ni9ZKfW4nFGGlBstKka2pcCML4FVTqkKFA0O4CAIhAOV42OmPb05IdkatzszC3+AqrqPFrlujxVYtyXC2UeEu"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.15_1686384602381_0.02191716081197881"},"_hasShrinkwrap":false},"0.28.16":{"name":"@sinclair/typebox","version":"0.28.16","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.3"},"_id":"@sinclair/typebox@0.28.16","_integrity":"sha512-0MqOedIj2ZjvCtUwibzubKdVzIDihAdCAEtoMAEDzuRpdlRtw/MlXbkNZaM+cjU8h0ApR0uctmakKgSY9kQqLg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.16.tgz","_from":"file:sinclair-typebox-0.28.16.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-0MqOedIj2ZjvCtUwibzubKdVzIDihAdCAEtoMAEDzuRpdlRtw/MlXbkNZaM+cjU8h0ApR0uctmakKgSY9kQqLg==","shasum":"4416f4a88c12eb9ab53f8473c0053f368a4cb328","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.16.tgz","fileCount":43,"unpackedSize":462956,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAdNSPLVxaAoJAf/FeIJkpfl3UyfIJ1h0RXSO7wGJEcCAiBvU4c1OG7MnJXiHxaQYcerOwH5dF4lykez5tJOCfUIYA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.16_1687245353206_0.8000202031127268"},"_hasShrinkwrap":false},"0.28.17":{"name":"@sinclair/typebox","version":"0.28.17","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.3"},"_id":"@sinclair/typebox@0.28.17","_integrity":"sha512-/twakA+gA4KgkXMiMjWwmV57xmDrm1fp+OaIMz01R3+q7AOSPhnTPZPwxqOzPDslfelxwzZx0Ttp3YdyS1+F4Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.17.tgz","_from":"file:sinclair-typebox-0.28.17.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-/twakA+gA4KgkXMiMjWwmV57xmDrm1fp+OaIMz01R3+q7AOSPhnTPZPwxqOzPDslfelxwzZx0Ttp3YdyS1+F4Q==","shasum":"b28f0d444f866500c4ce4674c3b9cb042a42a689","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.17.tgz","fileCount":43,"unpackedSize":463270,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDeXijXjQoSuTnjNyNsB3qHoiKMMp+VenCgKTkk7TheWAiEAqFh8ucVKITurSnIewA/1gjQn4EkPdAPkxcH4SuvfRlA="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.17_1687366646711_0.14255705302644794"},"_hasShrinkwrap":false},"0.28.18":{"name":"@sinclair/typebox","version":"0.28.18","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.3"},"_id":"@sinclair/typebox@0.28.18","_integrity":"sha512-I19d36CXlLAsm+nrl7VKsYyirFLtdebT2nlfV3Knvo0tnk8B8UKyt3DEqNJexEb/2pKPtdXNLcr72aJtfl6whA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.18.tgz","_from":"file:sinclair-typebox-0.28.18.tgz","_nodeVersion":"20.0.0","_npmVersion":"7.24.1","dist":{"integrity":"sha512-I19d36CXlLAsm+nrl7VKsYyirFLtdebT2nlfV3Knvo0tnk8B8UKyt3DEqNJexEb/2pKPtdXNLcr72aJtfl6whA==","shasum":"4a13c7ea3393d00e581717a8a750128e631c0831","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.18.tgz","fileCount":43,"unpackedSize":463530,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF5O+mRTNMKRRZLJxuvwRvgmMTujs7TLLopNyc/VO4CmAiBpMgf67Oy6DcuVHkevMD6L/yzWUfQG8FbGS4TWGP2NjQ=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.18_1687408941166_0.08137537353268143"},"_hasShrinkwrap":false},"0.28.19":{"name":"@sinclair/typebox","version":"0.28.19","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.3"},"_id":"@sinclair/typebox@0.28.19","_integrity":"sha512-J08onOXZeCXEwB/Kpri/1l3b8Fs1EzG301kDCEikf5+E0TH8SzY1Edfq8T4ebNzXFcs34gonv20LjMn4Bzthow==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.19.tgz","_from":"file:sinclair-typebox-0.28.19.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-J08onOXZeCXEwB/Kpri/1l3b8Fs1EzG301kDCEikf5+E0TH8SzY1Edfq8T4ebNzXFcs34gonv20LjMn4Bzthow==","shasum":"bcc9b0fb26082ea8d052e59cacadf096b60fcf81","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.19.tgz","fileCount":43,"unpackedSize":464629,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBEdFVMJVqqOSJ9VaINvvwFmlRwdJj+Gn4DcHW0TGP3IAiBXlHAP/S28UnrRqf+8vrXFNV9Lvf+7/wihnuENp8hGgg=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.19_1687807678899_0.4743302968422367"},"_hasShrinkwrap":false},"0.28.20":{"name":"@sinclair/typebox","version":"0.28.20","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.3"},"_id":"@sinclair/typebox@0.28.20","_integrity":"sha512-QCF3BGfacwD+3CKhGsMeixnwOmX4AWgm61nKkNdRStyLVu0mpVFYlDSY8gVBOOED1oSwzbJauIWl/+REj8K5+w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.28.20.tgz","_from":"file:sinclair-typebox-0.28.20.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-QCF3BGfacwD+3CKhGsMeixnwOmX4AWgm61nKkNdRStyLVu0mpVFYlDSY8gVBOOED1oSwzbJauIWl/+REj8K5+w==","shasum":"978652a10ced0102aec86e8e088837ab7d0d5871","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.28.20.tgz","fileCount":43,"unpackedSize":464629,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICffXjGphQlMXGNDU7Zq3j8QJShOvHycfFQqb4u7Zo28AiBFsenBexs6nV3SJUi1iFsafCgDjwZo3SFPmbPC/0rpkg=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.28.20_1687854435283_0.02745105650222257"},"_hasShrinkwrap":false},"0.29.0":{"name":"@sinclair/typebox","version":"0.29.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.29.0","_integrity":"sha512-htPaB6O/USun7JviXuzHnIchTbwgSdKijwt/ho8l9agmvbFcYnrSPOi2qNRzqNOBnHjXMUPoCXri4C6SwkOy3g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.29.0.tgz","_from":"file:sinclair-typebox-0.29.0.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-htPaB6O/USun7JviXuzHnIchTbwgSdKijwt/ho8l9agmvbFcYnrSPOi2qNRzqNOBnHjXMUPoCXri4C6SwkOy3g==","shasum":"a19842180595a9a77d57407091707a2739feb508","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.29.0.tgz","fileCount":43,"unpackedSize":467315,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC1qW7KQ8SFQEsY+KstY67DQpmaKSAjdUA/WXK7iJQ3EwIgCHQ3nkg9x9OwN/z3nsbi3aemzzs6fJiTxBQ/GiSTbUA="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.29.0_1688305512100_0.22106198380612407"},"_hasShrinkwrap":false},"0.29.1":{"name":"@sinclair/typebox","version":"0.29.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.29.1","_integrity":"sha512-ML/pdD3MnCijK8jzB+E/rTWtZ/2JAbwq196AzlsDBXPzLAjtCRHFAp5VvrWClmzJ8CVMBxOjeraoQX3s9XwXHA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.29.1.tgz","_from":"file:sinclair-typebox-0.29.1.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-ML/pdD3MnCijK8jzB+E/rTWtZ/2JAbwq196AzlsDBXPzLAjtCRHFAp5VvrWClmzJ8CVMBxOjeraoQX3s9XwXHA==","shasum":"28946ecc70e421f2e6b9c3eed55dc2b46a18c947","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.29.1.tgz","fileCount":43,"unpackedSize":468561,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICVou+zSEjZReuBqbcKaC3Nw8b/LODG2UKXeus/W4Yb3AiEA+wblBWf1yGqSzRmDJyh5FMY1IHrWIsevmytkcraZ9JQ="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.29.1_1688324358677_0.28638665236245653"},"_hasShrinkwrap":false},"0.29.2":{"name":"@sinclair/typebox","version":"0.29.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.29.2","_integrity":"sha512-dbQjPyqrfo7vC10e/iEfrGnuT0z8WJyCSXmAX7fpnPg3UjduU8mZmQp9HW5u4nfG7Jf5rFWPK51VudVJ5B4e3A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.29.2.tgz","_from":"file:sinclair-typebox-0.29.2.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-dbQjPyqrfo7vC10e/iEfrGnuT0z8WJyCSXmAX7fpnPg3UjduU8mZmQp9HW5u4nfG7Jf5rFWPK51VudVJ5B4e3A==","shasum":"f7316d26a3bcb8c6088a2885f9f39690bc970410","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.29.2.tgz","fileCount":43,"unpackedSize":470926,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGgFiMxA3lIPFDK+CvrduY83AwrLZEGnDZQ0fMeAapNNAiEAsBE8RcdH19phZMKaCGmqdVH1VOPQwlK6W4GcyXfbgbc="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.29.2_1688419876446_0.8912109746052437"},"_hasShrinkwrap":false},"0.29.3":{"name":"@sinclair/typebox","version":"0.29.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"clean":"hammer task clean","format":"hammer task format","start":"hammer task start","test":"hammer task test","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.29.3","_integrity":"sha512-j793DNq5m+GdEp7s8O4CUyumrjEwu9Kj8vsokAdeK/3aHQ35eFYOJn5WWIFexVOCWjLTZhWir04vsBLCaZM2xw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.29.3.tgz","_from":"file:sinclair-typebox-0.29.3.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-j793DNq5m+GdEp7s8O4CUyumrjEwu9Kj8vsokAdeK/3aHQ35eFYOJn5WWIFexVOCWjLTZhWir04vsBLCaZM2xw==","shasum":"26a8f5ee265ce487166568c3796723e1a9958f50","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.29.3.tgz","fileCount":43,"unpackedSize":470946,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCID9JsKAP/YmkmSj2cK+PCz0PgwRb1PpU5xN5/m7ljEdKAiBPG3m/hpDoRjwAhkJk4t6lEG7uzHFDhRI7eswCBRqk5Q=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.29.3_1688423547706_0.6284180650580198"},"_hasShrinkwrap":false},"0.29.4":{"name":"@sinclair/typebox","version":"0.29.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.29.4","_integrity":"sha512-XSEM1jjL9CPI4pZ0RZs84Oq+jcONXFHljufxrp70rTYTbslDuYDj1wnDCzDb3XC9Tf5C36sGO1Fu7VFXXDTgFw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.29.4.tgz","_from":"file:sinclair-typebox-0.29.4.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-XSEM1jjL9CPI4pZ0RZs84Oq+jcONXFHljufxrp70rTYTbslDuYDj1wnDCzDb3XC9Tf5C36sGO1Fu7VFXXDTgFw==","shasum":"88bcfbd6252ae935dec45022e2c98d6fd9d0c643","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.29.4.tgz","fileCount":43,"unpackedSize":471781,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDBiLRbxNDXNr8VuUY9IR+Xnl2oCAH2hyUrk6i2+ay1ogIhAKu/qU7RnEQtGQcKfa0d8o8CsJv1sonECx2aCWbgwou+"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.29.4_1688610729420_0.08153613499443546"},"_hasShrinkwrap":false},"0.29.5":{"name":"@sinclair/typebox","version":"0.29.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.29.5","_integrity":"sha512-hmwtss82axitE4y/koJvkvZ4e3xfWH+CcxlCEGZYrXC9p3YBkbtG98bs1WHQi+cpfr/Q6cXj8Mk3Fsq6tHK1JA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.29.5.tgz","_from":"file:sinclair-typebox-0.29.5.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-hmwtss82axitE4y/koJvkvZ4e3xfWH+CcxlCEGZYrXC9p3YBkbtG98bs1WHQi+cpfr/Q6cXj8Mk3Fsq6tHK1JA==","shasum":"95d666b799a2f52a3374a635379ce37bfe0ec240","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.29.5.tgz","fileCount":43,"unpackedSize":471781,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDfGgFfMc+wBHpZH4OgLW9/6dpJYCnctdQ/RFGQTpz87wIgeoLHiwMnEWD1PrvNPbL+kas86xUZXDQbmEgLOP7UpPE="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.29.5_1689700183703_0.17997743680384137"},"_hasShrinkwrap":false},"0.29.6":{"name":"@sinclair/typebox","version":"0.29.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.29.6","_integrity":"sha512-aX5IFYWlMa7tQ8xZr3b2gtVReCvg7f3LEhjir/JAjX2bJCMVJA5tIPv30wTD4KDfcwMd7DDYY3hFDeGmOgtrZQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.29.6.tgz","_from":"file:sinclair-typebox-0.29.6.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-aX5IFYWlMa7tQ8xZr3b2gtVReCvg7f3LEhjir/JAjX2bJCMVJA5tIPv30wTD4KDfcwMd7DDYY3hFDeGmOgtrZQ==","shasum":"4cd8372f9247372edd5fc5af44f67e2032c46e2f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.29.6.tgz","fileCount":43,"unpackedSize":471787,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGcM/6tFKWtQiq78aDHkdOoFDmHGHV6RBMHWGmF1XZh7AiEA1ymd+t/xcajd9mSii+6tpPYa+ei8kyZMNFsoq528jrI="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.29.6_1689701212880_0.982377218694056"},"_hasShrinkwrap":false},"0.30.0-dev-1":{"name":"@sinclair/typebox","version":"0.30.0-dev-1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>JSON Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n#### Npm\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n#### Deno\r\n```typescript\r\nimport { Static, Type } from 'npm:@sinclair/typebox'\r\n```\r\n\r\n#### Esm\r\n\r\n```typescript\r\nimport { Static, Type } from 'https://esm.sh/@sinclair/typebox'\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Static, Type } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory JSON Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type assertion rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard JSON Schema validation.\r\n\r\nThis library is designed to enable JSON schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Standard](#types-standard)\r\n  - [Extended](#types-extended)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Negated](#types-negated)\r\n  - [Rest](#types-rest)\r\n  - [Guards](#types-guards)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Cast](#values-cast)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n  - [Transform](#values-transform)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Types](#typesystem-types)\r\n  - [Formats](#typesystem-formats)\r\n  - [Policies](#typesystem-policies)\r\n- [Workbench](#workbench)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Static, Type } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as JSON schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a JSON Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are JSON schema fragments that can be composed into more complex types. Each fragment is structured such that a JSON schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox provides a set of Standard types which are used create JSON schema compliant schematics as well as an Extended type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-standard'></a>\r\n\r\n### Standard Types\r\n\r\nThe following table lists the Standard TypeBox types. These types are fully compatible with the JSON Schema Draft 6 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │      type: 'number'            │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │      type: 'string'            │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │      type: 'number'            │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │  true : false               │   type: 'boolean'              │\r\n│   Type.Literal(true),          │                             │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pattern('^xy$') │ type T = string             │ const T = {                    │\r\n│                                │                             │    type: 'string',             │\r\n│                                │                             │    pattern: '^xy$'             │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [...A, ...B]       │   items: [                     │\r\n│ ])                             │                             │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │                             │     { const: 1 },              │\r\n|   Type.Literal(2),             │                             │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-extended'></a>\r\n\r\n### Extended Types\r\n\r\nTypeBox provides several extended types that can be used to produce schematics for common JavaScript constructs. These types can not be used with standard JSON schema validators; but are useful to help frame schematics for RPC interfaces that may receive JSON validated data. Extended types are prefixed with the `[Extended]` doc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   return: {                    │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   return: {                    │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass JSON Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with `readonly` or `optional`. The following table shows how these modifiers map between TypeScript and JSON Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions constrained to type `TSchema`. The following creates a generic `Vector<T>` type.\r\n\r\n```typescript\r\nimport { Type, Static, TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nThe following creates a generic `Nullable<T>` type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                   // const T = {\r\n                                                    //   anyOf: [\r\n                                                    //     { type: 'string' },\r\n                                                    //     { type: 'null' }\r\n                                                    //   ]\r\n                                                    // }\r\n\r\ntype T = Static<typeof T>                           // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types are supported with `Type.Ref`. The target type must specify a valid `$id`.\r\n\r\n```typescript\r\nconst T = Type.String({ $id: 'T' })                  // const T = {\r\n                                                     //    $id: 'T',\r\n                                                     //    type: 'string'\r\n                                                     // }\r\n\r\nconst R = Type.Ref(T)                                // const R = {\r\n                                                     //    $ref: 'T'\r\n                                                     // }\r\n```\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nRecursive types are supported with `Type.Recursive`.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports conditional types with `Type.Extends`. This type will perform a structural assignment check for the first two parameters and return a `true` or `false` type from the second two parameters. The types `Type.Exclude` and `Type.Extract` are also supported.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T0 = string extends number ? true : false       // type T0 = false\r\n\r\ntype T1 = Extract<(1 | 2 | 3), 1>                    // type T1 = 1\r\n\r\ntype T2 = Exclude<(1 | 2 | 3), 1>                    // type T2 = 2 | 3\r\n\r\n// TypeBox\r\n\r\nconst T0 = Type.Extends(                             // const T0: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\nconst T1 = Type.Extract(                             // const T1: TLiteral<1>\r\n  Type.Union([\r\n    Type.Literal(1), \r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\nconst T2 = Type.Exclude(                            // const T2: TUnion<[\r\n  Type.Union([                                      //   TLiteral<2>,\r\n    Type.Literal(1),                                //   TLiteral<3>\r\n    Type.Literal(2),                                // ]>\r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with `Type.TemplateLiteral`. This type implements an embedded DSL syntax to match the TypeScript template literal syntax. This type can also be composed by passing an array of union and literal types as parameters. The following example shows the DSL syntax.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype P = `/post/${string}/user/${number}`            // type P = `/post/${string}/user/${number}`\r\n\r\ntype T = `option${'A'|'B'}`                          // type T = 'optionA' | 'optionB'\r\n\r\ntype R = Record<T, string>                           // type R = {\r\n                                                     //   optionA: string\r\n                                                     //   optionB: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst P = Type.TemplateLiteral('/post/${string}/user/${number}')\r\n\r\n                                                     // const P = {\r\n                                                     //   type: 'string',\r\n                                                     //   pattern: '^/post/(.*)/user/(0|[1-9][0-9]*)$'\r\n                                                     // }\r\n\r\nconst T = Type.TemplateLiteral('option${A|B}')       // const T = {\r\n                                                     //   pattern: '^option(A|B)$',\r\n                                                     //   type: 'string'\r\n                                                     // }\r\n\r\nconst R = Type.Record(T, Type.String())              // const R = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['optionA', 'optionB'],\r\n                                                     //   properties: {\r\n                                                     //     optionA: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     optionB: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types using `Type.Index`. This type provides a consistent way to access interior property and array element types without having to extract them from the underlying schema representation. Indexed access types are supported for object, array, tuple, union and intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.String(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Boolean()                                  //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'string' },\r\n                                                     //     z: { type: 'string' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A = { type: 'number' }\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'number' },\r\n                                                     //     { type: 'string' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'number' },\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'boolean' }\r\n                                                     //   ]\r\n                                                     // }\r\n```\r\n\r\n<a name='types-negated'></a>\r\n\r\n### Negated Types\r\n\r\nTypeBox has support for type negation with `Type.Not`. This type will always infer as `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Not(Type.String())                   // const T = {\r\n                                                    //   not: { type: 'string' }\r\n                                                    // }\r\n\r\ntype T = Static<typeof T>                           // type T = unknown\r\n                                                    //\r\n                                                    // where T could be any type other than string\r\n```\r\nThis type can be useful for certain forms of type narrowing. For example, consider a type that represents a `number` but not the values `1, 2, 3`. The example below shows an imaginary TypeScript syntax to express such a type followed by the TypeBox representation.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = number & not (1 | 2 | 3)                    // not actual syntax\r\n\r\n// TypeBox\r\n\r\nconst T = Type.Intersect([                           // const T = {\r\n  Type.Number(),                                     //   allOf: [\r\n  Type.Not(Type.Union([                              //     { type: \"number\" },\r\n    Type.Literal(1),                                 //     {\r\n    Type.Literal(2),                                 //       not: {\r\n    Type.Literal(3)                                  //         anyOf: [\r\n  ]))                                                //           { const: 1, type: \"number\" },\r\n])                                                   //           { const: 2, type: \"number\" },\r\n                                                     //           { const: 3, type: \"number\" }\r\n                                                     //         ]\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = number\r\n```\r\n\r\nThis type can be used with constraints to create schematics that would otherwise be difficult to express.\r\n```typescript\r\nconst Even = Type.Number({ multipleOf: 2 })\r\n\r\nconst Odd = Type.Intersect([Type.Number(), Type.Not(Even)])          \r\n```\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nRest parameters are supported with `Type.Rest`. This function is used to extract interior type elements from tuples which enables them to compose with the JavaScript spread operator `...`. This type can be used for tuple concatenation as well as for variadic functions.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = [number, number]                            // type T = [number, number]\r\n\r\ntype C = [...T, number]                              // type C = [number, number, number]\r\n\r\ntype F = (...param: C) => void                       // type F = (\r\n                                                     //   param0: number,\r\n                                                     //   param1: number,\r\n                                                     //   param2: number\r\n                                                     // ) => void\r\n\r\n// TypeBox\r\n\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.Number(),                                     //   TNumber,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst C = Type.Tuple([                               // const C: TTuple<[\r\n  ...Type.Rest(T),                                   //   TNumber,\r\n  Type.Number()                                      //   TNumber,\r\n])                                                   //   TNumber\r\n                                                     // ]>\r\n\r\nconst F = Type.Function(Type.Rest(C), Type.Void())   // const F: TFunction<[\r\n                                                     //   TNumber,\r\n                                                     //   TNumber,\r\n                                                     //   TNumber\r\n                                                     // ], TVoid>\r\n```\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nUse `Type.Unsafe` to create custom schematics with user defined inference rules.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string\r\n```\r\n\r\nThe `Type.Unsafe` type can be useful to express specific OpenAPI schema representations.\r\n\r\n```typescript\r\nimport { Type, Static, TSchema } from '@sinclair/typebox'\r\n\r\n// Nullable<T>\r\n\r\nfunction Nullable<T extends TSchema>(schema: T) {\r\n  return Type.Unsafe<Static<T> | null>({ ...schema, nullable: true })\r\n}\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\n// StringEnum<string[]>\r\n\r\nfunction StringEnum<T extends string[]>(values: [...T]) {\r\n  return Type.Unsafe<T[number]>({ type: 'string', enum: values })\r\n}\r\n\r\nconst T = StringEnum(['A', 'B', 'C'])                // const T = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = 'A' | 'B' | 'C'\r\n```\r\n\r\n<a name='types-guards'></a>\r\n\r\n### Type Guards\r\n\r\nTypeBox provides a `TypeGuard` module that can be used for reflection and asserting values as types.\r\n\r\n```typescript\r\nimport { Type, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst T = Type.String()\r\n\r\nif(TypeGuard.TString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid JSON schema; so in some cases it may be desirable to omit them. TypeBox provides a `Type.Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform common operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })          // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })  // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value into a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })          // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })          // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to produce a sequence of edits to transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                               // const E = [\r\n  { x: 1, y: 2, z: 3 },                             //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                              //   { type: 'update', path: '/z', value: 5 },\r\n)                                                   //   { type: 'insert', path: '/w', value: 6 },\r\n                                                    //   { type: 'delete', path: '/x' }\r\n                                                    // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply edits\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\n\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\n\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\n\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\n\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) JSON Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\n\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target JSON Schema draft 6 so are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for high performance compilation and value assertion.\r\n\r\nThe following sections detail using Ajv and TypeBox's compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst C = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = C({ x: 1, y: 2, z: 3 })                    // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is designed to serve as a validation backend that can be integrated into larger applications; but can also be used as a general purpose validator.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the `Compile(...)` function to compile a type. Note that compilation is an expensive operation that should typically be performed once per type during application start up. TypeBox does not cache previously compiled types, so applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the `Errors(...)` function to produce diagnostic errors for a value. The `Errors(...)` function will return an iterator that if enumerated; will perform an exhaustive check across the entire value and yield any error found. For performance, this function should only be called after failed `Check(...)`. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst errors = [...C.Errors(value)]                  // const errors = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nCompiled routines can be inspected with the `.Code()` function.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.String())        // const C: TypeCheck<TString>\r\n\r\nconsole.log(C.Code())                                // return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides functionality to define types above and beyond the Standard and Extended type sets as well as control various assertion policies. Configurations made to the TypeSystem module are observed by both `TypeCompiler` and `Value` modules.\r\n\r\nThe TypeSystem module is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeSystem } from '@sinclair/typebox/system'\r\n```\r\n\r\n<a name='typesystem-types'></a>\r\n\r\n### Types\r\n\r\nUse the `Type(...)` function to create custom types. This function lets you specify custom value assertion logic and will return a type factory function which is used to instance the type. This function accepts two generic arguments, the first is the inference type, the second is options used to constrain the type. The following creates a Vector type.\r\n\r\n```typescript\r\ntype VectorOptions = { abs: boolean }\r\n\r\ntype Vector = { x: number, y: number }\r\n\r\nconst Vector = TypeSystem.Type<Vector, VectorOptions>('Vector', (options, value) => {\r\n  return (\r\n    typeof value === 'object' && value !== null &&\r\n    'x' in value && typeof value.x === 'number' &&\r\n    'y' in value && typeof value.y === 'number' &&\r\n    (options.abs ? (value.x === Math.abs(value.x) && value.y === Math.abs(value.y)) : true)\r\n  )\r\n})\r\n\r\nconst T = Vector({ abs: true })\r\n\r\ntype T = Static<typeof T>                            // type T = Vector\r\n\r\nconst R1 = Value.Check(T, { x: 1, y: 1 })            // const R1 = true\r\n\r\nconst R2 = Value.Check(T, { x: 1, y: '1' })          // const R2 = false\r\n\r\nconst R3 = Value.Check(T, { x: 1, y: -1 })           // const R3 = false\r\n```\r\n\r\n<a name='typesystem-formats'></a>\r\n\r\n### Formats\r\n\r\nUse the `Format(...)` function to create a custom string format. The following creates a format that checks for lowercase strings.\r\n\r\n```typescript\r\nTypeSystem.Format('lowercase', value => value === value.toLowerCase()) // format should be lowercase\r\n\r\nconst T = Type.String({ format: 'lowercase' })\r\n\r\nconst A = Value.Check(T, 'Hello')                    // const A = false\r\n\r\nconst B = Value.Check(T, 'hello')                    // const B = true\r\n```\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard JSON Schema assertion policies by default. It is possible to override some of these policies to have TypeBox assert inline with TypeScript static assertion rules. The following policy overrides are available.\r\n\r\n```typescript\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystem.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystem.AllowArrayObjects = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystem.AllowNaN = true\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## Workbench\r\n\r\nTypeBox offers a web based code generation tool that can be used to convert TypeScript types into TypeBox types as well as a variety of other runtime type representations.\r\n\r\n[Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that provide general tooling and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from JSON schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-client](https://github.com/flodlc/typebox-client) | Type safe http client library for Fastify |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.0.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    232 ms' │ '      8 ms' │ '   29.00 x' │\r\n│ Literal_Number             │    1000    │ '    179 ms' │ '      6 ms' │ '   29.83 x' │\r\n│ Literal_Boolean            │    1000    │ '    154 ms' │ '      3 ms' │ '   51.33 x' │\r\n│ Primitive_Number           │    1000    │ '    160 ms' │ '      7 ms' │ '   22.86 x' │\r\n│ Primitive_String           │    1000    │ '    149 ms' │ '      6 ms' │ '   24.83 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    191 ms' │ '      9 ms' │ '   21.22 x' │\r\n│ Primitive_Boolean          │    1000    │ '    135 ms' │ '      4 ms' │ '   33.75 x' │\r\n│ Primitive_Null             │    1000    │ '    144 ms' │ '      6 ms' │ '   24.00 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1144 ms' │ '     30 ms' │ '   38.13 x' │\r\n│ Object_Constrained         │    1000    │ '   1228 ms' │ '     24 ms' │ '   51.17 x' │\r\n│ Object_Vector3             │    1000    │ '    380 ms' │ '      9 ms' │ '   42.22 x' │\r\n│ Object_Box3D               │    1000    │ '   1771 ms' │ '     30 ms' │ '   59.03 x' │\r\n│ Tuple_Primitive            │    1000    │ '    471 ms' │ '     11 ms' │ '   42.82 x' │\r\n│ Tuple_Object               │    1000    │ '   1272 ms' │ '     15 ms' │ '   84.80 x' │\r\n│ Composite_Intersect        │    1000    │ '    606 ms' │ '     17 ms' │ '   35.65 x' │\r\n│ Composite_Union            │    1000    │ '    560 ms' │ '     22 ms' │ '   25.45 x' │\r\n│ Math_Vector4               │    1000    │ '    824 ms' │ '     14 ms' │ '   58.86 x' │\r\n│ Math_Matrix4               │    1000    │ '    419 ms' │ '      9 ms' │ '   46.56 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    382 ms' │ '      6 ms' │ '   63.67 x' │\r\n│ Array_Primitive_String     │    1000    │ '    324 ms' │ '      6 ms' │ '   54.00 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    301 ms' │ '      4 ms' │ '   75.25 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1734 ms' │ '     21 ms' │ '   82.57 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1509 ms' │ '     20 ms' │ '   75.45 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    824 ms' │ '     14 ms' │ '   58.86 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1619 ms' │ '     16 ms' │ '  101.19 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    773 ms' │ '     16 ms' │ '   48.31 x' │\r\n│ Array_Composite_Union      │    1000    │ '    822 ms' │ '     17 ms' │ '   48.35 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1131 ms' │ '     13 ms' │ '   87.00 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    661 ms' │ '     10 ms' │ '   66.10 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     18 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     15 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Literal_Boolean            │  1000000   │ '     13 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Primitive_String           │  1000000   │ '     19 ms' │ '     16 ms' │ '     10 ms' │ '    1.60 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    150 ms' │ '     41 ms' │ '     35 ms' │ '    1.17 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     17 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_Null             │  1000000   │ '     18 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Object_Unconstrained       │  1000000   │ '   1001 ms' │ '     31 ms' │ '     24 ms' │ '    1.29 x' │\r\n│ Object_Constrained         │  1000000   │ '   1288 ms' │ '     50 ms' │ '     36 ms' │ '    1.39 x' │\r\n│ Object_Vector3             │  1000000   │ '    439 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2109 ms' │ '     52 ms' │ '     45 ms' │ '    1.16 x' │\r\n│ Object_Recursive           │  1000000   │ '   5337 ms' │ '    356 ms' │ '    162 ms' │ '    2.20 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    164 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Tuple_Object               │  1000000   │ '    744 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    764 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Composite_Union            │  1000000   │ '    516 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\r\n│ Math_Vector4               │  1000000   │ '    262 ms' │ '     20 ms' │ '     11 ms' │ '    1.82 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1089 ms' │ '     37 ms' │ '     27 ms' │ '    1.37 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    276 ms' │ '     21 ms' │ '     11 ms' │ '    1.91 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    228 ms' │ '     21 ms' │ '     14 ms' │ '    1.50 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    159 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5695 ms' │ '     77 ms' │ '     69 ms' │ '    1.12 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5701 ms' │ '    127 ms' │ '    110 ms' │ '    1.15 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  21267 ms' │ '   1664 ms' │ '    573 ms' │ '    2.90 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    702 ms' │ '     40 ms' │ '     32 ms' │ '    1.25 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3141 ms' │ '     68 ms' │ '     51 ms' │ '    1.33 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3145 ms' │ '     44 ms' │ '     35 ms' │ '    1.26 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2134 ms' │ '     68 ms' │ '     31 ms' │ '    2.19 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1197 ms' │ '     37 ms' │ '     25 ms' │ '    1.48 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   5323 ms' │ '    111 ms' │ '     96 ms' │ '    1.16 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '128.2 kb' │ ' 58.2 kb' │  '2.20 x'   │\r\n│ typebox/errors       │ '110.4 kb' │ ' 49.5 kb' │  '2.23 x'   │\r\n│ typebox/system       │ ' 75.2 kb' │ ' 31.1 kb' │  '2.42 x'   │\r\n│ typebox/value        │ '179.6 kb' │ ' 78.7 kb' │  '2.28 x'   │\r\n│ typebox              │ ' 74.1 kb' │ ' 30.6 kb' │  '2.42 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.30.0-dev-1","_integrity":"sha512-K6gloE8tUV3W73mbN+/N0lsUeTTs93ed8w9Lc9OUSazu+sRzI/tiXXw2m2pL2dLg7+iq5XdJzItwtFxZV6kvag==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.0-dev-1.tgz","_from":"file:sinclair-typebox-0.30.0-dev-1.tgz","_nodeVersion":"20.3.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-K6gloE8tUV3W73mbN+/N0lsUeTTs93ed8w9Lc9OUSazu+sRzI/tiXXw2m2pL2dLg7+iq5XdJzItwtFxZV6kvag==","shasum":"2d8e2f378df5cd3a343cd812fe9d85dbe92ecf23","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.0-dev-1.tgz","fileCount":43,"unpackedSize":474621,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC5olaHdtgm14EsPMRYR3bzY+yRoIpg+iA4AYPeI4X3QgIgadvAq7WdTWphHXnay6tEdE+wHK9OIPy4U4wmzr7qNv4="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.0-dev-1_1690560461697_0.5176429348681768"},"_hasShrinkwrap":false},"0.30.0-dev-2":{"name":"@sinclair/typebox","version":"0.30.0-dev-2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>JSON Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n#### Npm\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n#### Deno\r\n```typescript\r\nimport { Static, Type } from 'npm:@sinclair/typebox'\r\n```\r\n\r\n#### Esm\r\n\r\n```typescript\r\nimport { Static, Type } from 'https://esm.sh/@sinclair/typebox'\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Static, Type } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory JSON Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type assertion rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard JSON Schema validation.\r\n\r\nThis library is designed to enable JSON schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Standard](#types-standard)\r\n  - [Extended](#types-extended)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Negated](#types-negated)\r\n  - [Rest](#types-rest)\r\n  - [Guards](#types-guards)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Cast](#values-cast)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n  - [Transform](#values-transform)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Types](#typesystem-types)\r\n  - [Formats](#typesystem-formats)\r\n  - [Policies](#typesystem-policies)\r\n- [Workbench](#workbench)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Static, Type } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as JSON schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a JSON Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are JSON schema fragments that can be composed into more complex types. Each fragment is structured such that a JSON schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox provides a set of Standard types which are used create JSON schema compliant schematics as well as an Extended type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-standard'></a>\r\n\r\n### Standard Types\r\n\r\nThe following table lists the Standard TypeBox types. These types are fully compatible with the JSON Schema Draft 6 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │      type: 'number'            │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │      type: 'string'            │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │      type: 'number'            │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │  true : false               │   type: 'boolean'              │\r\n│   Type.Literal(true),          │                             │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pattern('^xy$') │ type T = string             │ const T = {                    │\r\n│                                │                             │    type: 'string',             │\r\n│                                │                             │    pattern: '^xy$'             │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [...A, ...B]       │   items: [                     │\r\n│ ])                             │                             │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │                             │     { const: 1 },              │\r\n|   Type.Literal(2),             │                             │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-extended'></a>\r\n\r\n### Extended Types\r\n\r\nTypeBox provides several extended types that can be used to produce schematics for common JavaScript constructs. These types can not be used with standard JSON schema validators; but are useful to help frame schematics for RPC interfaces that may receive JSON validated data. Extended types are prefixed with the `[Extended]` doc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   return: {                    │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   return: {                    │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass JSON Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with `readonly` or `optional`. The following table shows how these modifiers map between TypeScript and JSON Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions constrained to type `TSchema`. The following creates a generic `Vector<T>` type.\r\n\r\n```typescript\r\nimport { Type, Static, TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nThe following creates a generic `Nullable<T>` type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                   // const T = {\r\n                                                    //   anyOf: [\r\n                                                    //     { type: 'string' },\r\n                                                    //     { type: 'null' }\r\n                                                    //   ]\r\n                                                    // }\r\n\r\ntype T = Static<typeof T>                           // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types are supported with `Type.Ref`. The target type must specify a valid `$id`.\r\n\r\n```typescript\r\nconst T = Type.String({ $id: 'T' })                  // const T = {\r\n                                                     //    $id: 'T',\r\n                                                     //    type: 'string'\r\n                                                     // }\r\n\r\nconst R = Type.Ref(T)                                // const R = {\r\n                                                     //    $ref: 'T'\r\n                                                     // }\r\n```\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nRecursive types are supported with `Type.Recursive`.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports conditional types with `Type.Extends`. This type will perform a structural assignment check for the first two parameters and return a `true` or `false` type from the second two parameters. The types `Type.Exclude` and `Type.Extract` are also supported.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T0 = string extends number ? true : false       // type T0 = false\r\n\r\ntype T1 = Extract<(1 | 2 | 3), 1>                    // type T1 = 1\r\n\r\ntype T2 = Exclude<(1 | 2 | 3), 1>                    // type T2 = 2 | 3\r\n\r\n// TypeBox\r\n\r\nconst T0 = Type.Extends(                             // const T0: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\nconst T1 = Type.Extract(                             // const T1: TLiteral<1>\r\n  Type.Union([\r\n    Type.Literal(1), \r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\nconst T2 = Type.Exclude(                            // const T2: TUnion<[\r\n  Type.Union([                                      //   TLiteral<2>,\r\n    Type.Literal(1),                                //   TLiteral<3>\r\n    Type.Literal(2),                                // ]>\r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with `Type.TemplateLiteral`. This type implements an embedded DSL syntax to match the TypeScript template literal syntax. This type can also be composed by passing an array of union and literal types as parameters. The following example shows the DSL syntax.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype P = `/post/${string}/user/${number}`            // type P = `/post/${string}/user/${number}`\r\n\r\ntype T = `option${'A'|'B'}`                          // type T = 'optionA' | 'optionB'\r\n\r\ntype R = Record<T, string>                           // type R = {\r\n                                                     //   optionA: string\r\n                                                     //   optionB: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst P = Type.TemplateLiteral('/post/${string}/user/${number}')\r\n\r\n                                                     // const P = {\r\n                                                     //   type: 'string',\r\n                                                     //   pattern: '^/post/(.*)/user/(0|[1-9][0-9]*)$'\r\n                                                     // }\r\n\r\nconst T = Type.TemplateLiteral('option${A|B}')       // const T = {\r\n                                                     //   pattern: '^option(A|B)$',\r\n                                                     //   type: 'string'\r\n                                                     // }\r\n\r\nconst R = Type.Record(T, Type.String())              // const R = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['optionA', 'optionB'],\r\n                                                     //   properties: {\r\n                                                     //     optionA: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     optionB: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types using `Type.Index`. This type provides a consistent way to access interior property and array element types without having to extract them from the underlying schema representation. Indexed access types are supported for object, array, tuple, union and intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.String(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Boolean()                                  //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'string' },\r\n                                                     //     z: { type: 'string' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A = { type: 'number' }\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'number' },\r\n                                                     //     { type: 'string' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'number' },\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'boolean' }\r\n                                                     //   ]\r\n                                                     // }\r\n```\r\n\r\n<a name='types-negated'></a>\r\n\r\n### Negated Types\r\n\r\nTypeBox has support for type negation with `Type.Not`. This type will always infer as `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Not(Type.String())                   // const T = {\r\n                                                    //   not: { type: 'string' }\r\n                                                    // }\r\n\r\ntype T = Static<typeof T>                           // type T = unknown\r\n                                                    //\r\n                                                    // where T could be any type other than string\r\n```\r\nThis type can be useful for certain forms of type narrowing. For example, consider a type that represents a `number` but not the values `1, 2, 3`. The example below shows an imaginary TypeScript syntax to express such a type followed by the TypeBox representation.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = number & not (1 | 2 | 3)                    // not actual syntax\r\n\r\n// TypeBox\r\n\r\nconst T = Type.Intersect([                           // const T = {\r\n  Type.Number(),                                     //   allOf: [\r\n  Type.Not(Type.Union([                              //     { type: \"number\" },\r\n    Type.Literal(1),                                 //     {\r\n    Type.Literal(2),                                 //       not: {\r\n    Type.Literal(3)                                  //         anyOf: [\r\n  ]))                                                //           { const: 1, type: \"number\" },\r\n])                                                   //           { const: 2, type: \"number\" },\r\n                                                     //           { const: 3, type: \"number\" }\r\n                                                     //         ]\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = number\r\n```\r\n\r\nThis type can be used with constraints to create schematics that would otherwise be difficult to express.\r\n```typescript\r\nconst Even = Type.Number({ multipleOf: 2 })\r\n\r\nconst Odd = Type.Intersect([Type.Number(), Type.Not(Even)])          \r\n```\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nRest parameters are supported with `Type.Rest`. This function is used to extract interior type elements from tuples which enables them to compose with the JavaScript spread operator `...`. This type can be used for tuple concatenation as well as for variadic functions.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = [number, number]                            // type T = [number, number]\r\n\r\ntype C = [...T, number]                              // type C = [number, number, number]\r\n\r\ntype F = (...param: C) => void                       // type F = (\r\n                                                     //   param0: number,\r\n                                                     //   param1: number,\r\n                                                     //   param2: number\r\n                                                     // ) => void\r\n\r\n// TypeBox\r\n\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.Number(),                                     //   TNumber,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst C = Type.Tuple([                               // const C: TTuple<[\r\n  ...Type.Rest(T),                                   //   TNumber,\r\n  Type.Number()                                      //   TNumber,\r\n])                                                   //   TNumber\r\n                                                     // ]>\r\n\r\nconst F = Type.Function(Type.Rest(C), Type.Void())   // const F: TFunction<[\r\n                                                     //   TNumber,\r\n                                                     //   TNumber,\r\n                                                     //   TNumber\r\n                                                     // ], TVoid>\r\n```\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nUse `Type.Unsafe` to create custom schematics with user defined inference rules.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string\r\n```\r\n\r\nThe `Type.Unsafe` type can be useful to express specific OpenAPI schema representations.\r\n\r\n```typescript\r\nimport { Type, Static, TSchema } from '@sinclair/typebox'\r\n\r\n// Nullable<T>\r\n\r\nfunction Nullable<T extends TSchema>(schema: T) {\r\n  return Type.Unsafe<Static<T> | null>({ ...schema, nullable: true })\r\n}\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\n// StringEnum<string[]>\r\n\r\nfunction StringEnum<T extends string[]>(values: [...T]) {\r\n  return Type.Unsafe<T[number]>({ type: 'string', enum: values })\r\n}\r\n\r\nconst T = StringEnum(['A', 'B', 'C'])                // const T = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = 'A' | 'B' | 'C'\r\n```\r\n\r\n<a name='types-guards'></a>\r\n\r\n### Type Guards\r\n\r\nTypeBox provides a `TypeGuard` module that can be used for reflection and asserting values as types.\r\n\r\n```typescript\r\nimport { Type, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst T = Type.String()\r\n\r\nif(TypeGuard.TString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid JSON schema; so in some cases it may be desirable to omit them. TypeBox provides a `Type.Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform common operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })          // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })  // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value into a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })          // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })          // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to produce a sequence of edits to transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                               // const E = [\r\n  { x: 1, y: 2, z: 3 },                             //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                              //   { type: 'update', path: '/z', value: 5 },\r\n)                                                   //   { type: 'insert', path: '/w', value: 6 },\r\n                                                    //   { type: 'delete', path: '/x' }\r\n                                                    // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply edits\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\n\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\n\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\n\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\n\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) JSON Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\n\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target JSON Schema draft 6 so are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for high performance compilation and value assertion.\r\n\r\nThe following sections detail using Ajv and TypeBox's compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst C = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = C({ x: 1, y: 2, z: 3 })                    // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is designed to serve as a validation backend that can be integrated into larger applications; but can also be used as a general purpose validator.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the `Compile(...)` function to compile a type. Note that compilation is an expensive operation that should typically be performed once per type during application start up. TypeBox does not cache previously compiled types, so applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the `Errors(...)` function to produce diagnostic errors for a value. The `Errors(...)` function will return an iterator that if enumerated; will perform an exhaustive check across the entire value and yield any error found. For performance, this function should only be called after failed `Check(...)`. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst errors = [...C.Errors(value)]                  // const errors = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nCompiled routines can be inspected with the `.Code()` function.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.String())        // const C: TypeCheck<TString>\r\n\r\nconsole.log(C.Code())                                // return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides functionality to define types above and beyond the Standard and Extended type sets as well as control various assertion policies. Configurations made to the TypeSystem module are observed by both `TypeCompiler` and `Value` modules.\r\n\r\nThe TypeSystem module is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeSystem } from '@sinclair/typebox/system'\r\n```\r\n\r\n<a name='typesystem-types'></a>\r\n\r\n### Types\r\n\r\nUse the `Type(...)` function to create custom types. This function lets you specify custom value assertion logic and will return a type factory function which is used to instance the type. This function accepts two generic arguments, the first is the inference type, the second is options used to constrain the type. The following creates a Vector type.\r\n\r\n```typescript\r\ntype VectorOptions = { abs: boolean }\r\n\r\ntype Vector = { x: number, y: number }\r\n\r\nconst Vector = TypeSystem.Type<Vector, VectorOptions>('Vector', (options, value) => {\r\n  return (\r\n    typeof value === 'object' && value !== null &&\r\n    'x' in value && typeof value.x === 'number' &&\r\n    'y' in value && typeof value.y === 'number' &&\r\n    (options.abs ? (value.x === Math.abs(value.x) && value.y === Math.abs(value.y)) : true)\r\n  )\r\n})\r\n\r\nconst T = Vector({ abs: true })\r\n\r\ntype T = Static<typeof T>                            // type T = Vector\r\n\r\nconst R1 = Value.Check(T, { x: 1, y: 1 })            // const R1 = true\r\n\r\nconst R2 = Value.Check(T, { x: 1, y: '1' })          // const R2 = false\r\n\r\nconst R3 = Value.Check(T, { x: 1, y: -1 })           // const R3 = false\r\n```\r\n\r\n<a name='typesystem-formats'></a>\r\n\r\n### Formats\r\n\r\nUse the `Format(...)` function to create a custom string format. The following creates a format that checks for lowercase strings.\r\n\r\n```typescript\r\nTypeSystem.Format('lowercase', value => value === value.toLowerCase()) // format should be lowercase\r\n\r\nconst T = Type.String({ format: 'lowercase' })\r\n\r\nconst A = Value.Check(T, 'Hello')                    // const A = false\r\n\r\nconst B = Value.Check(T, 'hello')                    // const B = true\r\n```\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard JSON Schema assertion policies by default. It is possible to override some of these policies to have TypeBox assert inline with TypeScript static assertion rules. The following policy overrides are available.\r\n\r\n```typescript\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystem.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystem.AllowArrayObjects = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystem.AllowNaN = true\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## Workbench\r\n\r\nTypeBox offers a web based code generation tool that can be used to convert TypeScript types into TypeBox types as well as a variety of other runtime type representations.\r\n\r\n[Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that provide general tooling and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from JSON schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-client](https://github.com/flodlc/typebox-client) | Type safe http client library for Fastify |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.0.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    232 ms' │ '      8 ms' │ '   29.00 x' │\r\n│ Literal_Number             │    1000    │ '    179 ms' │ '      6 ms' │ '   29.83 x' │\r\n│ Literal_Boolean            │    1000    │ '    154 ms' │ '      3 ms' │ '   51.33 x' │\r\n│ Primitive_Number           │    1000    │ '    160 ms' │ '      7 ms' │ '   22.86 x' │\r\n│ Primitive_String           │    1000    │ '    149 ms' │ '      6 ms' │ '   24.83 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    191 ms' │ '      9 ms' │ '   21.22 x' │\r\n│ Primitive_Boolean          │    1000    │ '    135 ms' │ '      4 ms' │ '   33.75 x' │\r\n│ Primitive_Null             │    1000    │ '    144 ms' │ '      6 ms' │ '   24.00 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1144 ms' │ '     30 ms' │ '   38.13 x' │\r\n│ Object_Constrained         │    1000    │ '   1228 ms' │ '     24 ms' │ '   51.17 x' │\r\n│ Object_Vector3             │    1000    │ '    380 ms' │ '      9 ms' │ '   42.22 x' │\r\n│ Object_Box3D               │    1000    │ '   1771 ms' │ '     30 ms' │ '   59.03 x' │\r\n│ Tuple_Primitive            │    1000    │ '    471 ms' │ '     11 ms' │ '   42.82 x' │\r\n│ Tuple_Object               │    1000    │ '   1272 ms' │ '     15 ms' │ '   84.80 x' │\r\n│ Composite_Intersect        │    1000    │ '    606 ms' │ '     17 ms' │ '   35.65 x' │\r\n│ Composite_Union            │    1000    │ '    560 ms' │ '     22 ms' │ '   25.45 x' │\r\n│ Math_Vector4               │    1000    │ '    824 ms' │ '     14 ms' │ '   58.86 x' │\r\n│ Math_Matrix4               │    1000    │ '    419 ms' │ '      9 ms' │ '   46.56 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    382 ms' │ '      6 ms' │ '   63.67 x' │\r\n│ Array_Primitive_String     │    1000    │ '    324 ms' │ '      6 ms' │ '   54.00 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    301 ms' │ '      4 ms' │ '   75.25 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1734 ms' │ '     21 ms' │ '   82.57 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1509 ms' │ '     20 ms' │ '   75.45 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    824 ms' │ '     14 ms' │ '   58.86 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1619 ms' │ '     16 ms' │ '  101.19 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    773 ms' │ '     16 ms' │ '   48.31 x' │\r\n│ Array_Composite_Union      │    1000    │ '    822 ms' │ '     17 ms' │ '   48.35 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1131 ms' │ '     13 ms' │ '   87.00 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    661 ms' │ '     10 ms' │ '   66.10 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     18 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     15 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Literal_Boolean            │  1000000   │ '     13 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Primitive_String           │  1000000   │ '     19 ms' │ '     16 ms' │ '     10 ms' │ '    1.60 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    150 ms' │ '     41 ms' │ '     35 ms' │ '    1.17 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     17 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_Null             │  1000000   │ '     18 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Object_Unconstrained       │  1000000   │ '   1001 ms' │ '     31 ms' │ '     24 ms' │ '    1.29 x' │\r\n│ Object_Constrained         │  1000000   │ '   1288 ms' │ '     50 ms' │ '     36 ms' │ '    1.39 x' │\r\n│ Object_Vector3             │  1000000   │ '    439 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2109 ms' │ '     52 ms' │ '     45 ms' │ '    1.16 x' │\r\n│ Object_Recursive           │  1000000   │ '   5337 ms' │ '    356 ms' │ '    162 ms' │ '    2.20 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    164 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Tuple_Object               │  1000000   │ '    744 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    764 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Composite_Union            │  1000000   │ '    516 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\r\n│ Math_Vector4               │  1000000   │ '    262 ms' │ '     20 ms' │ '     11 ms' │ '    1.82 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1089 ms' │ '     37 ms' │ '     27 ms' │ '    1.37 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    276 ms' │ '     21 ms' │ '     11 ms' │ '    1.91 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    228 ms' │ '     21 ms' │ '     14 ms' │ '    1.50 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    159 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5695 ms' │ '     77 ms' │ '     69 ms' │ '    1.12 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5701 ms' │ '    127 ms' │ '    110 ms' │ '    1.15 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  21267 ms' │ '   1664 ms' │ '    573 ms' │ '    2.90 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    702 ms' │ '     40 ms' │ '     32 ms' │ '    1.25 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3141 ms' │ '     68 ms' │ '     51 ms' │ '    1.33 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3145 ms' │ '     44 ms' │ '     35 ms' │ '    1.26 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2134 ms' │ '     68 ms' │ '     31 ms' │ '    2.19 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1197 ms' │ '     37 ms' │ '     25 ms' │ '    1.48 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   5323 ms' │ '    111 ms' │ '     96 ms' │ '    1.16 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '128.2 kb' │ ' 58.2 kb' │  '2.20 x'   │\r\n│ typebox/errors       │ '110.4 kb' │ ' 49.5 kb' │  '2.23 x'   │\r\n│ typebox/system       │ ' 75.2 kb' │ ' 31.1 kb' │  '2.42 x'   │\r\n│ typebox/value        │ '179.6 kb' │ ' 78.7 kb' │  '2.28 x'   │\r\n│ typebox              │ ' 74.1 kb' │ ' 30.6 kb' │  '2.42 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.30.0-dev-2","_integrity":"sha512-155Dim6Deo1ntkUP5xZfFBYMiwhD+2ERJ/mjBicP43qUiDmNp/T2yebLG7ViFyWHfKqCfLSAb5VvrTjmc6V9JA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.0-dev-2.tgz","_from":"file:sinclair-typebox-0.30.0-dev-2.tgz","_nodeVersion":"20.3.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-155Dim6Deo1ntkUP5xZfFBYMiwhD+2ERJ/mjBicP43qUiDmNp/T2yebLG7ViFyWHfKqCfLSAb5VvrTjmc6V9JA==","shasum":"77d02fbb224e29c5f922c6190a3aa722c4062400","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.0-dev-2.tgz","fileCount":43,"unpackedSize":474078,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDzj31vf/fUw0tzJisu2Ee3+BNwgtdQrZC9PengmYfqBgIhAPGsyqSspHMlJY4wwuPeeSys729W8jnmDNjHBLOuk22m"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.0-dev-2_1690562544587_0.1543345304983419"},"_hasShrinkwrap":false},"0.30.0-dev-3":{"name":"@sinclair/typebox","version":"0.30.0-dev-3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>JSON Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n#### Npm\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n#### Deno\r\n```typescript\r\nimport { Static, Type } from 'npm:@sinclair/typebox'\r\n```\r\n\r\n#### Esm\r\n\r\n```typescript\r\nimport { Static, Type } from 'https://esm.sh/@sinclair/typebox'\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Static, Type } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory JSON Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type assertion rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard JSON Schema validation.\r\n\r\nThis library is designed to enable JSON schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Standard](#types-standard)\r\n  - [Extended](#types-extended)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Negated](#types-negated)\r\n  - [Rest](#types-rest)\r\n  - [Guards](#types-guards)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Cast](#values-cast)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n  - [Transform](#values-transform)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Types](#typesystem-types)\r\n  - [Formats](#typesystem-formats)\r\n  - [Policies](#typesystem-policies)\r\n- [Workbench](#workbench)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Static, Type } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as JSON schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a JSON Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are JSON schema fragments that compose into complex types. Each fragment is structured such that a JSON schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox provides a set of Standard types which are used create JSON schema compliant schematics as well as an Extended type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-standard'></a>\r\n\r\n### Standard Types\r\n\r\nThe following table lists the Standard TypeBox types. These types are fully compatible with the JSON Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │      type: 'number'            │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │      type: 'string'            │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │      type: 'number'            │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │  true : false               │   type: 'boolean'              │\r\n│   Type.Literal(true),          │                             │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pattern('^xy$') │ type T = string             │ const T = {                    │\r\n│                                │                             │    type: 'string',             │\r\n│                                │                             │    pattern: '^xy$'             │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [...A, ...B]       │   items: [                     │\r\n│ ])                             │                             │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │                             │     { const: 1 },              │\r\n|   Type.Literal(2),             │                             │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-extended'></a>\r\n\r\n### Extended Types\r\n\r\nTypeBox provides several extended types that can be used to produce schematics for common JavaScript constructs. These types can not be used with standard JSON schema validators; but are useful to help frame schematics for RPC interfaces that may receive JSON validated data. Extended types are prefixed with the `[Extended]` doc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   return: {                    │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   return: {                    │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass JSON Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with `readonly` or `optional`. The following table shows how these modifiers map between TypeScript and JSON Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types are created with generic functions. All TypeBox types extend the sub type `TSchema` so it is common to constrain function arguments to this type. The following creates a generic `Vector<T>` type.\r\n\r\n```typescript\r\nimport { Type, Static, TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types can be used to create aliases for more complex types. The following creates a `Nullable<T>` type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                   // const T = {\r\n                                                    //   anyOf: [\r\n                                                    //     { type: 'string' },\r\n                                                    //     { type: 'null' }\r\n                                                    //   ]\r\n                                                    // }\r\n\r\ntype T = Static<typeof T>                           // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types are supported with `Ref`.\r\n\r\n```typescript\r\nconst T = Type.String({ $id: 'T' })                  // const T = {\r\n                                                     //   $id: 'T',\r\n                                                     //   type: 'string'\r\n                                                     // }\r\n\r\nconst R = Type.Ref<typeof T>('T')                    // const R = {\r\n                                                     //   $ref: 'T'\r\n                                                     // }\r\n\r\ntype R = Static<typeof R>                            // type R = string\r\n```\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nRecursive types are supported with `Recursive`. Recursive type inference is also supported.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports conditional types with `Extends`. This type performs a structural assignment check against the first two parameters and returns either the `true` or `false` type as given from the second two parameters. The conditional types `Exclude` and `Extract` are also supported.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T0 = string extends number ? true : false       // type T0 = false\r\n\r\ntype T1 = Extract<(1 | 2 | 3), 1>                    // type T1 = 1\r\n\r\ntype T2 = Exclude<(1 | 2 | 3), 1>                    // type T2 = 2 | 3\r\n\r\n// TypeBox\r\n\r\nconst T0 = Type.Extends(                             // const T0: TLiteral<false> = {\r\n  Type.String(),                                     //   type: 'boolean',\r\n  Type.Number(),                                     //   const: false\r\n  Type.Literal(true),                                // }\r\n  Type.Literal(false)\r\n)\r\n\r\nconst T1 = Type.Extract(                             // const T1: TLiteral<1> = {\r\n  Type.Union([                                       //   type: 'number',\r\n    Type.Literal(1),                                 //   const: 1\r\n    Type.Literal(2),                                 // }\r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\nconst T2 = Type.Exclude(                            // const T2: TUnion<[\r\n  Type.Union([                                      //   TLiteral<2>,\r\n    Type.Literal(1),                                //   TLiteral<3>\r\n    Type.Literal(2),                                // ]> = {\r\n    Type.Literal(3)                                 //   anyOf: [{\r\n  ]),                                               //     type: 'number',\r\n  Type.Literal(1)                                   //     const: 2\r\n)                                                   //   }, {\r\n                                                    //     type: 'number',\r\n                                                    //     const: 3\r\n                                                    //   }]\r\n                                                    // }\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with `TemplateLiteral`. This type provides an embedded DSL syntax that is similar to the TypeScript template literal syntax. These type can also be composed by passing a tuple of exterior union and literal types. The following example shows the DSL syntax.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = `option${'A'|'B'|'C'}`                      // type T = 'optionA' | 'optionB' | 'optionC'\r\n\r\ntype R = Record<T, string>                           // type R = {\r\n                                                     //   optionA: string\r\n                                                     //   optionB: string\r\n                                                     //   optionC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst T = Type.TemplateLiteral('option${A|B|C}')     // const T = {\r\n                                                     //   pattern: '^option(A|B|C)$',\r\n                                                     //   type: 'string'\r\n                                                     // }\r\n\r\nconst R = Type.Record(T, Type.String())              // const R = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['optionA', 'optionB'],\r\n                                                     //   properties: {\r\n                                                     //     optionA: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     optionB: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //     optionC: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types using `Index`. This type provides a consistent way of accessing interior property and array element types without having to extract them from the underlying schema representation. Indexed access types are supported for object, array, tuple, union and intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.String(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Boolean()                                  //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'string' },\r\n                                                     //     z: { type: 'string' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A = { type: 'number' }\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'number' },\r\n                                                     //     { type: 'string' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'number' },\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'boolean' }\r\n                                                     //   ]\r\n                                                     // }\r\n```\r\n\r\n<a name='types-negated'></a>\r\n\r\n### Negated Types\r\n\r\nTypeBox has support for type negation with `Not`. This type will always infer as `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Not(Type.String())                   // const T = {\r\n                                                    //   not: { type: 'string' }\r\n                                                    // }\r\n\r\ntype T = Static<typeof T>                           // type T = unknown\r\n                                                    //\r\n                                                    // where T could be any type other than string\r\n```\r\nType negation can be useful for certain forms of type narrowing. For example, consider a type that represents a `number` but not the numbers `1, 2, 3`. The example below shows an imaginary TypeScript syntax to express such a type followed by the TypeBox representation.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = number & not (1 | 2 | 3)                    // not actual syntax\r\n\r\n// TypeBox\r\n\r\nconst T = Type.Intersect([                           // const T = {\r\n  Type.Number(),                                     //   allOf: [\r\n  Type.Not(Type.Union([                              //     { type: \"number\" },\r\n    Type.Literal(1),                                 //     {\r\n    Type.Literal(2),                                 //       not: {\r\n    Type.Literal(3)                                  //         anyOf: [\r\n  ]))                                                //           { const: 1, type: \"number\" },\r\n])                                                   //           { const: 2, type: \"number\" },\r\n                                                     //           { const: 3, type: \"number\" }\r\n                                                     //         ]\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = number\r\n```\r\nThis type can be used with constraints to create schematics that would otherwise be difficult to express.\r\n```typescript\r\nconst Even = Type.Number({ multipleOf: 2 })\r\n\r\nconst Odd = Type.Intersect([Type.Number(), Type.Not(Even)])          \r\n```\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nRest parameters are supported with `Rest`. This function is used to extract interior type elements from tuples which enables them to compose with the JavaScript spread operator `...`. This type can be used for tuple concatenation as well function parameter assignment.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = [number, number]                            // type T = [number, number]\r\n\r\ntype C = [...T, number]                              // type C = [number, number, number]\r\n\r\ntype F = (...param: C) => void                       // type F = (\r\n                                                     //   param0: number,\r\n                                                     //   param1: number,\r\n                                                     //   param2: number\r\n                                                     // ) => void\r\n\r\n// TypeBox\r\n\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.Number(),                                     //   TNumber,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst C = Type.Tuple([                               // const C: TTuple<[\r\n  ...Type.Rest(T),                                   //   TNumber,\r\n  Type.Number()                                      //   TNumber,\r\n])                                                   //   TNumber\r\n                                                     // ]>\r\n\r\nconst F = Type.Function(Type.Rest(C), Type.Void())   // const F: TFunction<[\r\n                                                     //   TNumber,\r\n                                                     //   TNumber,\r\n                                                     //   TNumber\r\n                                                     // ], TVoid>\r\n```\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports the creation of user defined schematics with user defined inference rules using the Unsafe type.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string\r\n```\r\n\r\nThis type can be useful to create various extended schematics, such as those used by OpenAPI.\r\n\r\n```typescript\r\nimport { Type, Static, TSchema } from '@sinclair/typebox'\r\n\r\n// Nullable<T>\r\n\r\nfunction Nullable<T extends TSchema>(schema: T) {\r\n  return Type.Unsafe<Static<T> | null>({ ...schema, nullable: true })\r\n}\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\n// StringEnum<string[]>\r\n\r\nfunction StringEnum<T extends string[]>(values: [...T]) {\r\n  return Type.Unsafe<T[number]>({ type: 'string', enum: values })\r\n}\r\n\r\nconst T = StringEnum(['A', 'B', 'C'])                // const T = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = 'A' | 'B' | 'C'\r\n```\r\n\r\n<a name='types-guards'></a>\r\n\r\n### Type Guards\r\n\r\nTypeBox provides a TypeGuard module to assert JavaScript values are valid TypeBox types.\r\n\r\n```typescript\r\nimport { Type, Kind, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst T = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.TString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid JSON schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform common operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. It's return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })          // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })  // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value into a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })          // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })          // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to produce a sequence of edits to transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                               // const E = [\r\n  { x: 1, y: 2, z: 3 },                             //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                              //   { type: 'update', path: '/z', value: 5 },\r\n)                                                   //   { type: 'insert', path: '/w', value: 6 },\r\n                                                    //   { type: 'delete', path: '/x' }\r\n                                                    // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply edits\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\n\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\n\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\n\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\n\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) JSON Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\n\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target JSON Schema draft 7 so are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for high performance compilation and value assertion.\r\n\r\nThe following sections detail using Ajv and TypeBox's compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst C = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = C({ x: 1, y: 2, z: 3 })                    // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is designed to serve as a validation backend that can be integrated into larger applications; but can also be used as a general purpose validator.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the `Compile(...)` function to compile a type. Note that compilation is an expensive operation that should typically be performed once per type during application start up. TypeBox does not cache previously compiled types, so applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the `Errors(...)` function to produce diagnostic errors for a value. The `Errors(...)` function will return an iterator that if enumerated; will perform an exhaustive check across the entire value and yield any error found. For performance, this function should only be called after failed `Check(...)`. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst errors = [...C.Errors(value)]                  // const errors = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nCompiled routines can be inspected with the `.Code()` function.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.String())        // const C: TypeCheck<TString>\r\n\r\nconsole.log(C.Code())                                // return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides functionality to define types above and beyond the Standard and Extended type sets as well as control various assertion policies. Configurations made to the TypeSystem module are observed by both `TypeCompiler` and `Value` modules.\r\n\r\nThe TypeSystem module is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeSystem } from '@sinclair/typebox/system'\r\n```\r\n\r\n<a name='typesystem-types'></a>\r\n\r\n### Types\r\n\r\nUse the `Type(...)` function to create custom types. This function lets you specify custom value assertion logic and will return a type factory function which is used to instance the type. This function accepts two generic arguments, the first is the inference type, the second is options used to constrain the type. The following creates a Vector type.\r\n\r\n```typescript\r\ntype VectorOptions = { abs: boolean }\r\n\r\ntype Vector = { x: number, y: number }\r\n\r\nconst Vector = TypeSystem.Type<Vector, VectorOptions>('Vector', (options, value) => {\r\n  return (\r\n    typeof value === 'object' && value !== null &&\r\n    'x' in value && typeof value.x === 'number' &&\r\n    'y' in value && typeof value.y === 'number' &&\r\n    (options.abs ? (value.x === Math.abs(value.x) && value.y === Math.abs(value.y)) : true)\r\n  )\r\n})\r\n\r\nconst T = Vector({ abs: true })\r\n\r\ntype T = Static<typeof T>                            // type T = Vector\r\n\r\nconst R1 = Value.Check(T, { x: 1, y: 1 })            // const R1 = true\r\n\r\nconst R2 = Value.Check(T, { x: 1, y: '1' })          // const R2 = false\r\n\r\nconst R3 = Value.Check(T, { x: 1, y: -1 })           // const R3 = false\r\n```\r\n\r\n<a name='typesystem-formats'></a>\r\n\r\n### Formats\r\n\r\nUse the `Format(...)` function to create a custom string format. The following creates a format that checks for lowercase strings.\r\n\r\n```typescript\r\nTypeSystem.Format('lowercase', value => value === value.toLowerCase()) // format should be lowercase\r\n\r\nconst T = Type.String({ format: 'lowercase' })\r\n\r\nconst A = Value.Check(T, 'Hello')                    // const A = false\r\n\r\nconst B = Value.Check(T, 'hello')                    // const B = true\r\n```\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard JSON Schema assertion policies by default. It is possible to override some of these policies to have TypeBox assert inline with TypeScript static assertion rules. The following policy overrides are available.\r\n\r\n```typescript\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystem.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystem.AllowArrayObjects = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystem.AllowNaN = true\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## Workbench\r\n\r\nTypeBox offers a web based code generation tool that can be used to convert TypeScript types into TypeBox types as well as a variety of other runtime type representations.\r\n\r\n[Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that provide general tooling and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from JSON schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-client](https://github.com/flodlc/typebox-client) | Type safe http client library for Fastify |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.0.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    232 ms' │ '      8 ms' │ '   29.00 x' │\r\n│ Literal_Number             │    1000    │ '    179 ms' │ '      6 ms' │ '   29.83 x' │\r\n│ Literal_Boolean            │    1000    │ '    154 ms' │ '      3 ms' │ '   51.33 x' │\r\n│ Primitive_Number           │    1000    │ '    160 ms' │ '      7 ms' │ '   22.86 x' │\r\n│ Primitive_String           │    1000    │ '    149 ms' │ '      6 ms' │ '   24.83 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    191 ms' │ '      9 ms' │ '   21.22 x' │\r\n│ Primitive_Boolean          │    1000    │ '    135 ms' │ '      4 ms' │ '   33.75 x' │\r\n│ Primitive_Null             │    1000    │ '    144 ms' │ '      6 ms' │ '   24.00 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1144 ms' │ '     30 ms' │ '   38.13 x' │\r\n│ Object_Constrained         │    1000    │ '   1228 ms' │ '     24 ms' │ '   51.17 x' │\r\n│ Object_Vector3             │    1000    │ '    380 ms' │ '      9 ms' │ '   42.22 x' │\r\n│ Object_Box3D               │    1000    │ '   1771 ms' │ '     30 ms' │ '   59.03 x' │\r\n│ Tuple_Primitive            │    1000    │ '    471 ms' │ '     11 ms' │ '   42.82 x' │\r\n│ Tuple_Object               │    1000    │ '   1272 ms' │ '     15 ms' │ '   84.80 x' │\r\n│ Composite_Intersect        │    1000    │ '    606 ms' │ '     17 ms' │ '   35.65 x' │\r\n│ Composite_Union            │    1000    │ '    560 ms' │ '     22 ms' │ '   25.45 x' │\r\n│ Math_Vector4               │    1000    │ '    824 ms' │ '     14 ms' │ '   58.86 x' │\r\n│ Math_Matrix4               │    1000    │ '    419 ms' │ '      9 ms' │ '   46.56 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    382 ms' │ '      6 ms' │ '   63.67 x' │\r\n│ Array_Primitive_String     │    1000    │ '    324 ms' │ '      6 ms' │ '   54.00 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    301 ms' │ '      4 ms' │ '   75.25 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1734 ms' │ '     21 ms' │ '   82.57 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1509 ms' │ '     20 ms' │ '   75.45 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    824 ms' │ '     14 ms' │ '   58.86 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1619 ms' │ '     16 ms' │ '  101.19 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    773 ms' │ '     16 ms' │ '   48.31 x' │\r\n│ Array_Composite_Union      │    1000    │ '    822 ms' │ '     17 ms' │ '   48.35 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1131 ms' │ '     13 ms' │ '   87.00 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    661 ms' │ '     10 ms' │ '   66.10 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     18 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     15 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Literal_Boolean            │  1000000   │ '     13 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Primitive_String           │  1000000   │ '     19 ms' │ '     16 ms' │ '     10 ms' │ '    1.60 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    150 ms' │ '     41 ms' │ '     35 ms' │ '    1.17 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     17 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_Null             │  1000000   │ '     18 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Object_Unconstrained       │  1000000   │ '   1001 ms' │ '     31 ms' │ '     24 ms' │ '    1.29 x' │\r\n│ Object_Constrained         │  1000000   │ '   1288 ms' │ '     50 ms' │ '     36 ms' │ '    1.39 x' │\r\n│ Object_Vector3             │  1000000   │ '    439 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2109 ms' │ '     52 ms' │ '     45 ms' │ '    1.16 x' │\r\n│ Object_Recursive           │  1000000   │ '   5337 ms' │ '    356 ms' │ '    162 ms' │ '    2.20 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    164 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Tuple_Object               │  1000000   │ '    744 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    764 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Composite_Union            │  1000000   │ '    516 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\r\n│ Math_Vector4               │  1000000   │ '    262 ms' │ '     20 ms' │ '     11 ms' │ '    1.82 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1089 ms' │ '     37 ms' │ '     27 ms' │ '    1.37 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    276 ms' │ '     21 ms' │ '     11 ms' │ '    1.91 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    228 ms' │ '     21 ms' │ '     14 ms' │ '    1.50 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    159 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5695 ms' │ '     77 ms' │ '     69 ms' │ '    1.12 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5701 ms' │ '    127 ms' │ '    110 ms' │ '    1.15 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  21267 ms' │ '   1664 ms' │ '    573 ms' │ '    2.90 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    702 ms' │ '     40 ms' │ '     32 ms' │ '    1.25 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3141 ms' │ '     68 ms' │ '     51 ms' │ '    1.33 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3145 ms' │ '     44 ms' │ '     35 ms' │ '    1.26 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2134 ms' │ '     68 ms' │ '     31 ms' │ '    2.19 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1197 ms' │ '     37 ms' │ '     25 ms' │ '    1.48 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   5323 ms' │ '    111 ms' │ '     96 ms' │ '    1.16 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '128.2 kb' │ ' 58.2 kb' │  '2.20 x'   │\r\n│ typebox/errors       │ '110.4 kb' │ ' 49.5 kb' │  '2.23 x'   │\r\n│ typebox/system       │ ' 75.2 kb' │ ' 31.1 kb' │  '2.42 x'   │\r\n│ typebox/value        │ '179.6 kb' │ ' 78.7 kb' │  '2.28 x'   │\r\n│ typebox              │ ' 74.1 kb' │ ' 30.6 kb' │  '2.42 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.30.0-dev-3","_integrity":"sha512-vN2HaqkAaNjED53FH3QOqDiANehLP+506SjM5r+NdxzEQKmpjQ6YfhD0pil/tIP6DqKUfzMMcJgCIwOVHvjlRw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.0-dev-3.tgz","_from":"file:sinclair-typebox-0.30.0-dev-3.tgz","_nodeVersion":"20.3.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-vN2HaqkAaNjED53FH3QOqDiANehLP+506SjM5r+NdxzEQKmpjQ6YfhD0pil/tIP6DqKUfzMMcJgCIwOVHvjlRw==","shasum":"8aa4d7fa62b6e35280195a5c4ca968c421acce6f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.0-dev-3.tgz","fileCount":43,"unpackedSize":475027,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCQlWrxBMbQ5ziUOYFeIg9mu6/mnkZet70Y7fTUoGjs4AIhAOXOR+sbjBMxXZo4VxX9kwaCBOCVjDHcb93Q58e3mNSK"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.0-dev-3_1690567519383_0.36335670387324015"},"_hasShrinkwrap":false},"0.30.0-dev-4":{"name":"@sinclair/typebox","version":"0.30.0-dev-4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.30.0-dev-4","_integrity":"sha512-zAC4tVTnIZlbahxDbqHkENnzbCeQVFHVU+IbwJwFFjqZaSgHCB1EzzWLvDEcHpqtDdtcIiqIWuf0ZYeZhrBn4Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.0-dev-4.tgz","_from":"file:sinclair-typebox-0.30.0-dev-4.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-zAC4tVTnIZlbahxDbqHkENnzbCeQVFHVU+IbwJwFFjqZaSgHCB1EzzWLvDEcHpqtDdtcIiqIWuf0ZYeZhrBn4Q==","shasum":"35e87e52bcef9849ab7c199c3518bc93ce17fbc8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.0-dev-4.tgz","fileCount":43,"unpackedSize":474957,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD8M8QQLXIJeEaNTx56VBicmqXx8B9yVydDIWFehHEjPwIgHVHcZTnktNji6q3jny5AtrNYrXOPU9zK3xpB0w67hVw="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.0-dev-4_1690574123221_0.12092975496664948"},"_hasShrinkwrap":false},"0.30.0-dev-5":{"name":"@sinclair/typebox","version":"0.30.0-dev-5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>JSON Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n#### Npm\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n#### Deno\r\n```typescript\r\nimport { Static, Type } from 'npm:@sinclair/typebox'\r\n```\r\n\r\n#### Esm\r\n\r\n```typescript\r\nimport { Static, Type } from 'https://esm.sh/@sinclair/typebox'\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Static, Type } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory JSON Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type assertion rules of the TypeScript language. TypeBox allows one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard JSON Schema validation.\r\n\r\nThis library is designed to enable JSON schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Features](#features)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Standard](#types-standard)\r\n  - [Extended](#types-extended)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Negated](#types-negated)\r\n  - [Rest](#types-rest)\r\n  - [Guards](#types-guards)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Cast](#values-cast)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Types](#typesystem-types)\r\n  - [Formats](#typesystem-formats)\r\n  - [Policies](#typesystem-policies)\r\n- [Transform](#Transform)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Static, Type } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as JSON schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a JSON Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are JSON schema fragments that compose into complex types. Each fragment is structured such that a JSON schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox provides a set of Standard types which are used create JSON schema compliant schematics as well as an Extended type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-standard'></a>\r\n\r\n### Standard Types\r\n\r\nThe following table lists the Standard TypeBox types. These types are fully compatible with the JSON Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │      type: 'number'            │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │      type: 'string'            │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │      type: 'number'            │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │  true : false               │   type: 'boolean'              │\r\n│   Type.Literal(true),          │                             │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pattern('^xy$') │ type T = string             │ const T = {                    │\r\n│                                │                             │    type: 'string',             │\r\n│                                │                             │    pattern: '^xy$'             │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [...A, ...B]       │   items: [                     │\r\n│ ])                             │                             │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │                             │     { const: 1 },              │\r\n|   Type.Literal(2),             │                             │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-extended'></a>\r\n\r\n### Extended Types\r\n\r\nTypeBox provides several extended types that can be used to produce schematics for common JavaScript constructs. These types can not be used with standard JSON schema validators; but are useful to help frame schematics for RPC interfaces that may receive JSON validated data. Extended types are prefixed with the `[Extended]` doc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   return: {                    │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   return: {                    │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass JSON Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with `readonly` or `optional`. The following table shows how these modifiers map between TypeScript and JSON Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ JSON Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types are created with generic functions. All TypeBox types extend the sub type `TSchema` so it is common to constrain function arguments to this type. The following creates a generic `Vector<T>` type.\r\n\r\n```typescript\r\nimport { Type, Static, TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types can be used to create aliases for more complex types. The following creates a `Nullable<T>` type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                   // const T = {\r\n                                                    //   anyOf: [\r\n                                                    //     { type: 'string' },\r\n                                                    //     { type: 'null' }\r\n                                                    //   ]\r\n                                                    // }\r\n\r\ntype T = Static<typeof T>                           // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types are supported with `Ref`.\r\n\r\n```typescript\r\nconst T = Type.String({ $id: 'T' })                  // const T = {\r\n                                                     //   $id: 'T',\r\n                                                     //   type: 'string'\r\n                                                     // }\r\n\r\nconst R = Type.Ref<typeof T>('T')                    // const R = {\r\n                                                     //   $ref: 'T'\r\n                                                     // }\r\n\r\ntype R = Static<typeof R>                            // type R = string\r\n```\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nRecursive types are supported with `Recursive`. Recursive type inference is also supported.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports conditional types with `Extends`. This type performs a structural assignment check against the first two parameters and returns either the `true` or `false` type as given from the second two parameters. The conditional types `Exclude` and `Extract` are also supported.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T0 = string extends number ? true : false       // type T0 = false\r\n\r\ntype T1 = Extract<(1 | 2 | 3), 1>                    // type T1 = 1\r\n\r\ntype T2 = Exclude<(1 | 2 | 3), 1>                    // type T2 = 2 | 3\r\n\r\n// TypeBox\r\n\r\nconst T0 = Type.Extends(                             // const T0: TLiteral<false> = {\r\n  Type.String(),                                     //   type: 'boolean',\r\n  Type.Number(),                                     //   const: false\r\n  Type.Literal(true),                                // }\r\n  Type.Literal(false)\r\n)\r\n\r\nconst T1 = Type.Extract(                             // const T1: TLiteral<1> = {\r\n  Type.Union([                                       //   type: 'number',\r\n    Type.Literal(1),                                 //   const: 1\r\n    Type.Literal(2),                                 // }\r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\nconst T2 = Type.Exclude(                            // const T2: TUnion<[\r\n  Type.Union([                                      //   TLiteral<2>,\r\n    Type.Literal(1),                                //   TLiteral<3>\r\n    Type.Literal(2),                                // ]> = {\r\n    Type.Literal(3)                                 //   anyOf: [{\r\n  ]),                                               //     type: 'number',\r\n  Type.Literal(1)                                   //     const: 2\r\n)                                                   //   }, {\r\n                                                    //     type: 'number',\r\n                                                    //     const: 3\r\n                                                    //   }]\r\n                                                    // }\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with `TemplateLiteral`. This type provides an embedded DSL syntax that is similar to the TypeScript template literal syntax. These type can also be composed by passing a tuple of exterior union and literal types. The following example shows the DSL syntax.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = `option${'A'|'B'|'C'}`                      // type T = 'optionA' | 'optionB' | 'optionC'\r\n\r\ntype R = Record<T, string>                           // type R = {\r\n                                                     //   optionA: string\r\n                                                     //   optionB: string\r\n                                                     //   optionC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst T = Type.TemplateLiteral('option${A|B|C}')     // const T = {\r\n                                                     //   pattern: '^option(A|B|C)$',\r\n                                                     //   type: 'string'\r\n                                                     // }\r\n\r\nconst R = Type.Record(T, Type.String())              // const R = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['optionA', 'optionB'],\r\n                                                     //   properties: {\r\n                                                     //     optionA: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     optionB: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //     optionC: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types using `Index`. This type provides a consistent way of accessing interior property and array element types without having to extract them from the underlying schema representation. Indexed access types are supported for object, array, tuple, union and intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.String(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Boolean()                                  //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'string' },\r\n                                                     //     z: { type: 'string' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A = { type: 'number' }\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'number' },\r\n                                                     //     { type: 'string' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'number' },\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'boolean' }\r\n                                                     //   ]\r\n                                                     // }\r\n```\r\n\r\n<a name='types-negated'></a>\r\n\r\n### Negated Types\r\n\r\nTypeBox has support for type negation with `Not`. This type will always infer as `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Not(Type.String())                   // const T = {\r\n                                                    //   not: { type: 'string' }\r\n                                                    // }\r\n\r\ntype T = Static<typeof T>                           // type T = unknown\r\n                                                    //\r\n                                                    // where T could be any type other than string\r\n```\r\nType negation can be useful for certain forms of type narrowing. For example, consider a type that represents a `number` but not the numbers `1, 2, 3`. The example below shows an imaginary TypeScript syntax to express such a type followed by the TypeBox representation.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = number & not (1 | 2 | 3)                    // not actual syntax\r\n\r\n// TypeBox\r\n\r\nconst T = Type.Intersect([                           // const T = {\r\n  Type.Number(),                                     //   allOf: [\r\n  Type.Not(Type.Union([                              //     { type: \"number\" },\r\n    Type.Literal(1),                                 //     {\r\n    Type.Literal(2),                                 //       not: {\r\n    Type.Literal(3)                                  //         anyOf: [\r\n  ]))                                                //           { const: 1, type: \"number\" },\r\n])                                                   //           { const: 2, type: \"number\" },\r\n                                                     //           { const: 3, type: \"number\" }\r\n                                                     //         ]\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = number\r\n```\r\nThis type can be used with constraints to create schematics that would otherwise be difficult to express.\r\n```typescript\r\nconst Even = Type.Number({ multipleOf: 2 })\r\n\r\nconst Odd = Type.Intersect([Type.Number(), Type.Not(Even)])          \r\n```\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nRest parameters are supported with `Rest`. This function is used to extract interior type elements from tuples which enables them to compose with the JavaScript spread operator `...`. This type can be used for tuple concatenation as well function parameter assignment.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype T = [number, number]                            // type T = [number, number]\r\n\r\ntype C = [...T, number]                              // type C = [number, number, number]\r\n\r\ntype F = (...param: C) => void                       // type F = (\r\n                                                     //   param0: number,\r\n                                                     //   param1: number,\r\n                                                     //   param2: number\r\n                                                     // ) => void\r\n\r\n// TypeBox\r\n\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.Number(),                                     //   TNumber,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst C = Type.Tuple([                               // const C: TTuple<[\r\n  ...Type.Rest(T),                                   //   TNumber,\r\n  Type.Number()                                      //   TNumber,\r\n])                                                   //   TNumber\r\n                                                     // ]>\r\n\r\nconst F = Type.Function(Type.Rest(C), Type.Void())   // const F: TFunction<[\r\n                                                     //   TNumber,\r\n                                                     //   TNumber,\r\n                                                     //   TNumber\r\n                                                     // ], TVoid>\r\n```\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports the creation of user defined schematics with user defined inference rules using the Unsafe type.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string\r\n```\r\n\r\nThis type can be useful to create various extended schematics, such as those used by OpenAPI.\r\n\r\n```typescript\r\nimport { Type, Static, TSchema } from '@sinclair/typebox'\r\n\r\n// Nullable<T>\r\n\r\nfunction Nullable<T extends TSchema>(schema: T) {\r\n  return Type.Unsafe<Static<T> | null>({ ...schema, nullable: true })\r\n}\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\n// StringEnum<string[]>\r\n\r\nfunction StringEnum<T extends string[]>(values: [...T]) {\r\n  return Type.Unsafe<T[number]>({ type: 'string', enum: values })\r\n}\r\n\r\nconst T = StringEnum(['A', 'B', 'C'])                // const T = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = 'A' | 'B' | 'C'\r\n```\r\n\r\n<a name='types-guards'></a>\r\n\r\n### Type Guards\r\n\r\nTypeBox provides a TypeGuard module to assert JavaScript values are valid TypeBox types.\r\n\r\n```typescript\r\nimport { Type, Kind, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst T = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.TString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid JSON schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform common operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. It's return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })          // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })  // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value into a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })          // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })          // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to produce a sequence of edits to transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                               // const E = [\r\n  { x: 1, y: 2, z: 3 },                             //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                              //   { type: 'update', path: '/z', value: 5 },\r\n)                                                   //   { type: 'insert', path: '/w', value: 6 },\r\n                                                    //   { type: 'delete', path: '/x' }\r\n                                                    // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply edits\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\n\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\n\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\n\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\n\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) JSON Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\n\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target JSON Schema draft 7 so are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for high performance compilation and value assertion.\r\n\r\nThe following sections detail using Ajv and TypeBox's compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst C = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = C({ x: 1, y: 2, z: 3 })                    // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is designed to serve as a validation backend that can be integrated into larger applications; but can also be used as a general purpose validator.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the `Compile(...)` function to compile a type. Note that compilation is an expensive operation that should typically be performed once per type during application start up. TypeBox does not cache previously compiled types, so applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the `Errors(...)` function to produce diagnostic errors for a value. The `Errors(...)` function will return an iterator that if enumerated; will perform an exhaustive check across the entire value and yield any error found. For performance, this function should only be called after failed `Check(...)`. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst errors = [...C.Errors(value)]                  // const errors = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nCompiled routines can be inspected with the `.Code()` function.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.String())        // const C: TypeCheck<TString>\r\n\r\nconsole.log(C.Code())                                // return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides functionality to define types above and beyond the Standard and Extended type sets as well as control various assertion policies. Configurations made to the TypeSystem module are observed by both `TypeCompiler` and `Value` modules.\r\n\r\nThe TypeSystem module is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeSystem } from '@sinclair/typebox/system'\r\n```\r\n\r\n<a name='typesystem-types'></a>\r\n\r\n### Types\r\n\r\nUse the `Type(...)` function to create custom types. This function lets you specify custom value assertion logic and will return a type factory function which is used to instance the type. This function accepts two generic arguments, the first is the inference type, the second is options used to constrain the type. The following creates a Vector type.\r\n\r\n```typescript\r\ntype VectorOptions = { abs: boolean }\r\n\r\ntype Vector = { x: number, y: number }\r\n\r\nconst Vector = TypeSystem.Type<Vector, VectorOptions>('Vector', (options, value) => {\r\n  return (\r\n    typeof value === 'object' && value !== null &&\r\n    'x' in value && typeof value.x === 'number' &&\r\n    'y' in value && typeof value.y === 'number' &&\r\n    (options.abs ? (value.x === Math.abs(value.x) && value.y === Math.abs(value.y)) : true)\r\n  )\r\n})\r\n\r\nconst T = Vector({ abs: true })\r\n\r\ntype T = Static<typeof T>                            // type T = Vector\r\n\r\nconst R1 = Value.Check(T, { x: 1, y: 1 })            // const R1 = true\r\n\r\nconst R2 = Value.Check(T, { x: 1, y: '1' })          // const R2 = false\r\n\r\nconst R3 = Value.Check(T, { x: 1, y: -1 })           // const R3 = false\r\n```\r\n\r\n<a name='typesystem-formats'></a>\r\n\r\n### Formats\r\n\r\nUse the `Format(...)` function to create a custom string format. The following creates a format that checks for lowercase strings.\r\n\r\n```typescript\r\nTypeSystem.Format('lowercase', value => value === value.toLowerCase()) // format should be lowercase\r\n\r\nconst T = Type.String({ format: 'lowercase' })\r\n\r\nconst A = Value.Check(T, 'Hello')                    // const A = false\r\n\r\nconst B = Value.Check(T, 'hello')                    // const B = true\r\n```\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard JSON Schema assertion policies by default. It is possible to override some of these policies to have TypeBox assert inline with TypeScript static assertion rules. The following policy overrides are available.\r\n\r\n```typescript\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystem.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystem.AllowArrayObjects = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystem.AllowNaN = true\r\n```\r\n\r\n<a name='transform'></a>\r\n\r\n## TypeBox Transform\r\n\r\nTypeBox offers a small web based code generation tool that can be used to convert TypeScript types into TypeBox types as well as a variety of other runtime type representations.\r\n\r\n[TypeBox Transform Link Here](https://sinclairzx81.github.io/typebox-transform/)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that provide general tooling and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from JSON schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-client](https://github.com/flodlc/typebox-client) | Type safe http client library for Fastify |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.0.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    232 ms' │ '      8 ms' │ '   29.00 x' │\r\n│ Literal_Number             │    1000    │ '    179 ms' │ '      6 ms' │ '   29.83 x' │\r\n│ Literal_Boolean            │    1000    │ '    154 ms' │ '      3 ms' │ '   51.33 x' │\r\n│ Primitive_Number           │    1000    │ '    160 ms' │ '      7 ms' │ '   22.86 x' │\r\n│ Primitive_String           │    1000    │ '    149 ms' │ '      6 ms' │ '   24.83 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    191 ms' │ '      9 ms' │ '   21.22 x' │\r\n│ Primitive_Boolean          │    1000    │ '    135 ms' │ '      4 ms' │ '   33.75 x' │\r\n│ Primitive_Null             │    1000    │ '    144 ms' │ '      6 ms' │ '   24.00 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1144 ms' │ '     30 ms' │ '   38.13 x' │\r\n│ Object_Constrained         │    1000    │ '   1228 ms' │ '     24 ms' │ '   51.17 x' │\r\n│ Object_Vector3             │    1000    │ '    380 ms' │ '      9 ms' │ '   42.22 x' │\r\n│ Object_Box3D               │    1000    │ '   1771 ms' │ '     30 ms' │ '   59.03 x' │\r\n│ Tuple_Primitive            │    1000    │ '    471 ms' │ '     11 ms' │ '   42.82 x' │\r\n│ Tuple_Object               │    1000    │ '   1272 ms' │ '     15 ms' │ '   84.80 x' │\r\n│ Composite_Intersect        │    1000    │ '    606 ms' │ '     17 ms' │ '   35.65 x' │\r\n│ Composite_Union            │    1000    │ '    560 ms' │ '     22 ms' │ '   25.45 x' │\r\n│ Math_Vector4               │    1000    │ '    824 ms' │ '     14 ms' │ '   58.86 x' │\r\n│ Math_Matrix4               │    1000    │ '    419 ms' │ '      9 ms' │ '   46.56 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    382 ms' │ '      6 ms' │ '   63.67 x' │\r\n│ Array_Primitive_String     │    1000    │ '    324 ms' │ '      6 ms' │ '   54.00 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    301 ms' │ '      4 ms' │ '   75.25 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1734 ms' │ '     21 ms' │ '   82.57 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1509 ms' │ '     20 ms' │ '   75.45 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    824 ms' │ '     14 ms' │ '   58.86 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1619 ms' │ '     16 ms' │ '  101.19 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    773 ms' │ '     16 ms' │ '   48.31 x' │\r\n│ Array_Composite_Union      │    1000    │ '    822 ms' │ '     17 ms' │ '   48.35 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1131 ms' │ '     13 ms' │ '   87.00 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    661 ms' │ '     10 ms' │ '   66.10 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     18 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     15 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Literal_Boolean            │  1000000   │ '     13 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Primitive_String           │  1000000   │ '     19 ms' │ '     16 ms' │ '     10 ms' │ '    1.60 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    150 ms' │ '     41 ms' │ '     35 ms' │ '    1.17 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     17 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_Null             │  1000000   │ '     18 ms' │ '     16 ms' │ '      9 ms' │ '    1.78 x' │\r\n│ Object_Unconstrained       │  1000000   │ '   1001 ms' │ '     31 ms' │ '     24 ms' │ '    1.29 x' │\r\n│ Object_Constrained         │  1000000   │ '   1288 ms' │ '     50 ms' │ '     36 ms' │ '    1.39 x' │\r\n│ Object_Vector3             │  1000000   │ '    439 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2109 ms' │ '     52 ms' │ '     45 ms' │ '    1.16 x' │\r\n│ Object_Recursive           │  1000000   │ '   5337 ms' │ '    356 ms' │ '    162 ms' │ '    2.20 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    164 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Tuple_Object               │  1000000   │ '    744 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    764 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Composite_Union            │  1000000   │ '    516 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\r\n│ Math_Vector4               │  1000000   │ '    262 ms' │ '     20 ms' │ '     11 ms' │ '    1.82 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1089 ms' │ '     37 ms' │ '     27 ms' │ '    1.37 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    276 ms' │ '     21 ms' │ '     11 ms' │ '    1.91 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    228 ms' │ '     21 ms' │ '     14 ms' │ '    1.50 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    159 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5695 ms' │ '     77 ms' │ '     69 ms' │ '    1.12 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5701 ms' │ '    127 ms' │ '    110 ms' │ '    1.15 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  21267 ms' │ '   1664 ms' │ '    573 ms' │ '    2.90 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    702 ms' │ '     40 ms' │ '     32 ms' │ '    1.25 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3141 ms' │ '     68 ms' │ '     51 ms' │ '    1.33 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3145 ms' │ '     44 ms' │ '     35 ms' │ '    1.26 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2134 ms' │ '     68 ms' │ '     31 ms' │ '    2.19 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1197 ms' │ '     37 ms' │ '     25 ms' │ '    1.48 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   5323 ms' │ '    111 ms' │ '     96 ms' │ '    1.16 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '129.4 kb' │ ' 58.6 kb' │  '2.21 x'   │\r\n│ typebox/errors       │ '111.6 kb' │ ' 50.1 kb' │  '2.23 x'   │\r\n│ typebox/system       │ ' 76.5 kb' │ ' 31.7 kb' │  '2.41 x'   │\r\n│ typebox/value        │ '180.7 kb' │ ' 79.3 kb' │  '2.28 x'   │\r\n│ typebox              │ ' 75.4 kb' │ ' 31.3 kb' │  '2.41 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.30.0-dev-5","_integrity":"sha512-AKj1g4O094yFQieQ/RDcuguUMA4T2WfZetcmttk8uVA/Cw+94SS2fMOraB3dfRJuyTLM20Z63p6jayWxlyHBug==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.0-dev-5.tgz","_from":"file:sinclair-typebox-0.30.0-dev-5.tgz","_nodeVersion":"20.3.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-AKj1g4O094yFQieQ/RDcuguUMA4T2WfZetcmttk8uVA/Cw+94SS2fMOraB3dfRJuyTLM20Z63p6jayWxlyHBug==","shasum":"2e21a2da583aa7f6ca4ed58c4d3e680f8307baae","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.0-dev-5.tgz","fileCount":43,"unpackedSize":477766,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDa33Y1krp2rH5eY+ndnjU/iYsY9RmiDvC3IaJBGlNAGQIhANa4b3UOkFAxw/bbftlKJ+3RjQLhhZ0vq7vrPQT8NXhl"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.0-dev-5_1690787321247_0.7262271003183987"},"_hasShrinkwrap":false},"0.30.0-dev-6":{"name":"@sinclair/typebox","version":"0.30.0-dev-6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.30.0-dev-6","_integrity":"sha512-DGMcWvxLJYOygHeqEX9cmEsqeTR5R4OepZNNHPykqbf6aCEw/6cZGYSc5WW7xu2EyWXD9HFbNlHppB9vNZ9tAg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.0-dev-6.tgz","_from":"file:sinclair-typebox-0.30.0-dev-6.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-DGMcWvxLJYOygHeqEX9cmEsqeTR5R4OepZNNHPykqbf6aCEw/6cZGYSc5WW7xu2EyWXD9HFbNlHppB9vNZ9tAg==","shasum":"ba14756b110f34fae377d0f53f86ea0b129fc152","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.0-dev-6.tgz","fileCount":43,"unpackedSize":478497,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG/AMSmUfaYvUvq++8PECoj0WXniuqX4DOnNBBFomMetAiB7if3IBYndsGWLtPn43l+NLyiLccqq0x0NOGuiCq9smw=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.0-dev-6_1690791404666_0.878776167597586"},"_hasShrinkwrap":false},"0.30.0-dev-7":{"name":"@sinclair/typebox","version":"0.30.0-dev-7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.30.0-dev-7","_integrity":"sha512-TZcJVBlSs4tFA0XBG/rkyEwJ1qcD0n21k1FPSwufr7SVTijAKIw9Zqknhscnzjf32mqxrfzkTUGWLYGSJo4ynw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.0-dev-7.tgz","_from":"file:sinclair-typebox-0.30.0-dev-7.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-TZcJVBlSs4tFA0XBG/rkyEwJ1qcD0n21k1FPSwufr7SVTijAKIw9Zqknhscnzjf32mqxrfzkTUGWLYGSJo4ynw==","shasum":"39b9fcb9427895ebca077c5db3ed861e6aef1650","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.0-dev-7.tgz","fileCount":43,"unpackedSize":478626,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGBVSK/ynQ091wGT94cXxMVC8MuG229tbp0aOMcAsk7nAiEA2C3mOPi/16eDNlIeO1vwSdLcmbLiawZQbsVqnSSDeyI="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.0-dev-7_1690812339986_0.09473113343279382"},"_hasShrinkwrap":false},"0.30.0":{"name":"@sinclair/typebox","version":"0.30.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.30.0","_integrity":"sha512-7v+I+UuRm7S8rV6u1rz3MkXO5skN1QiqlTeIY6ShiuvhcEnzRIrj/bqzHQNb9M2O9d8Q1mepW7lJ9cNUA1HEVg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.0.tgz","_from":"file:sinclair-typebox-0.30.0.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-7v+I+UuRm7S8rV6u1rz3MkXO5skN1QiqlTeIY6ShiuvhcEnzRIrj/bqzHQNb9M2O9d8Q1mepW7lJ9cNUA1HEVg==","shasum":"3ab85aaa4bce87b108bf3a1d4841ea84e0ae247b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.0.tgz","fileCount":43,"unpackedSize":478763,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDaTfjguWaOll3ef55aSNJLLYeyBfqYj26GGDxGSElMUwIgDgwb3rvxbq9qJPXFTJgWS/sUY3GJ1DNDKEC5kjb0fZs="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.0_1690873305700_0.2641088922239663"},"_hasShrinkwrap":false},"0.30.1":{"name":"@sinclair/typebox","version":"0.30.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.30.1","_integrity":"sha512-gEhL8rDxir3+Q0uYMeT9rQgp1g9YazEphp4tBdc10e0zMm/0pT3G1FlLHyN1DMZUI4Vk6nebZvtt1evB0nXdiw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.1.tgz","_from":"file:sinclair-typebox-0.30.1.tgz","_nodeVersion":"20.3.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-gEhL8rDxir3+Q0uYMeT9rQgp1g9YazEphp4tBdc10e0zMm/0pT3G1FlLHyN1DMZUI4Vk6nebZvtt1evB0nXdiw==","shasum":"e34963817dad11a39f18f704c533d3a641639fdf","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.1.tgz","fileCount":43,"unpackedSize":487456,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICbohcoe6sJEVwe8q4CzQrcvKKmXZG9FBg542w+HAn0bAiAShvJiULbsfbJxatpLxrJbdQRWcpydOQhljkdkN9r0XQ=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.1_1690972066124_0.6792638178712562"},"_hasShrinkwrap":false},"0.30.2":{"name":"@sinclair/typebox","version":"0.30.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.30.2","_integrity":"sha512-PNEojrBZGQL+llfGfGn6EZNHUXxyvA3LeySMUxMk+i+GrtuT1nBBP3BPzzgJKW9b7lUMa9KxHVx+CIPEy5bL5w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.2.tgz","_from":"file:sinclair-typebox-0.30.2.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-PNEojrBZGQL+llfGfGn6EZNHUXxyvA3LeySMUxMk+i+GrtuT1nBBP3BPzzgJKW9b7lUMa9KxHVx+CIPEy5bL5w==","shasum":"6036b17f2ccf0ef8a308d8c352e3081075c43c57","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.2.tgz","fileCount":43,"unpackedSize":487469,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDAVYNzF9jt2jCN2WfVeYSqphUi95hqp8oJa0LOiG03JAIgOa4+SsN5AqELcNWGrp+OaKOqYGH0KfmhqD26SObFdCg="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.2_1690974068622_0.9966290001682034"},"_hasShrinkwrap":false},"0.30.3":{"name":"@sinclair/typebox","version":"0.30.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.30.3","_integrity":"sha512-Cho1WteNnbVrd6jYVr1mLeGF6nVkUVgMJdYV0FeGI+I1iSNIUu1O8lQbfz+Gh3DczZT7qoYeOuZS/wck2rtO8Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.3.tgz","_from":"file:sinclair-typebox-0.30.3.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Cho1WteNnbVrd6jYVr1mLeGF6nVkUVgMJdYV0FeGI+I1iSNIUu1O8lQbfz+Gh3DczZT7qoYeOuZS/wck2rtO8Q==","shasum":"fedbaa4543ec80056f5df43c89253cfdc1d32b40","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.3.tgz","fileCount":43,"unpackedSize":488152,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE4KLeHQ9Qhw5hK6MziSIqv+ePqpwiL+1QLRLcNMi918AiEAxYosLOcEKtmMShk++89IsHYV7yLgwMxz6wsPOaWHLB8="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.3_1691224694549_0.8205580707831439"},"_hasShrinkwrap":false},"0.30.4":{"name":"@sinclair/typebox","version":"0.30.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/chai":"^4.3.3","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","chai":"^4.3.6","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.30.4","_integrity":"sha512-wFuuDR+O1OAE2GL0q68h1Ty00RE6Ihcixr55A6TU5RCvOUHnwJw9LGuDVg9NxDiAp7m/YJpa+UaOuLAz0ziyOQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.30.4.tgz","_from":"file:sinclair-typebox-0.30.4.tgz","_nodeVersion":"20.3.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-wFuuDR+O1OAE2GL0q68h1Ty00RE6Ihcixr55A6TU5RCvOUHnwJw9LGuDVg9NxDiAp7m/YJpa+UaOuLAz0ziyOQ==","shasum":"8c918bc127385272a9f988fa2bcf7d3259599e5e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.30.4.tgz","fileCount":43,"unpackedSize":488192,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFcPw23NHsBkcs5FXk9DpHv4F7qx+UMEsX+VW+anuxpEAiEAyNySPT0FlW10QAfY4eW/7iRIIYFq9YXs0pJ2jKwA7EU="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.30.4_1691239420930_0.135149747192846"},"_hasShrinkwrap":false},"0.31.0-dev-1":{"name":"@sinclair/typebox","version":"0.31.0-dev-1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.31.0-dev-1","_integrity":"sha512-Xu0ci9wK3HvjzO1wCJQ9SRyWGAEvLcsQhJeO55B9Yg9riBCDbR1Tawv4SUBqi6HzanTH2Az5NP5ay1ZVmaUIKQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.0-dev-1.tgz","_from":"file:sinclair-typebox-0.31.0-dev-1.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Xu0ci9wK3HvjzO1wCJQ9SRyWGAEvLcsQhJeO55B9Yg9riBCDbR1Tawv4SUBqi6HzanTH2Az5NP5ay1ZVmaUIKQ==","shasum":"a3c755b97d9db5e9e6a4f7767fe6d88235d605f2","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.0-dev-1.tgz","fileCount":47,"unpackedSize":533633,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQChX5F5AXYEPfAPbyr7oUvOHzNtArPNXvU53BILOh8AYAIgQB7POSVV3VIoJAUsXwqzFT36GhYZNNIlQQpmWvPUzEo="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.0-dev-1_1691532899325_0.440843669369682"},"_hasShrinkwrap":false},"0.31.0-dev-2":{"name":"@sinclair/typebox","version":"0.31.0-dev-2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.31.0-dev-2","_integrity":"sha512-Pp50GMRKmBjtB5cmCUFJxvy63R/xj2v2WhTwBeWBoMDmtATOskfUKxHiiYfpJC9/acjErVsddK2GSUGw9+ozPg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.0-dev-2.tgz","_from":"file:sinclair-typebox-0.31.0-dev-2.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-Pp50GMRKmBjtB5cmCUFJxvy63R/xj2v2WhTwBeWBoMDmtATOskfUKxHiiYfpJC9/acjErVsddK2GSUGw9+ozPg==","shasum":"0c256d48b44d6afb712fa67adad675d420800d47","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.0-dev-2.tgz","fileCount":47,"unpackedSize":532332,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD8NNDhaFENiagXVEdYiIZsdNIx6KHqiqtGYlrP29oN6AIgd2qZnceWFUjdLBmDRl+Am2fI7FXPAhf9dRJ76Z6p2uM="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.0-dev-2_1691535759005_0.9622796716288109"},"_hasShrinkwrap":false},"0.31.0":{"name":"@sinclair/typebox","version":"0.31.0","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.31.0","_integrity":"sha512-bL3KIy1cqi4wyKwJZ3szckq0k/IuLluwQ9IB8QMNS2ogHGiqkempV7uO52Tjr79oBgOnlRaOhIf5qkc8HH9KhA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.0.tgz","_from":"file:sinclair-typebox-0.31.0.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-bL3KIy1cqi4wyKwJZ3szckq0k/IuLluwQ9IB8QMNS2ogHGiqkempV7uO52Tjr79oBgOnlRaOhIf5qkc8HH9KhA==","shasum":"afd4478bf839b276be62e93b4df474d5b01eeb60","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.0.tgz","fileCount":47,"unpackedSize":533187,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCcCATp334WMwvwZRV00Pag8mXU8mXwhyMlBR4rXGOxugIga1ycRnYzh2TxLQ35X7HpehSxLI9eB1OPHsxtUIteH/0="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.0_1691789746220_0.6147373461731431"},"_hasShrinkwrap":false},"0.31.1":{"name":"@sinclair/typebox","version":"0.31.1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.31.1","_integrity":"sha512-oAGsVU6u4k7pNGfDZG1ujFuku25yV3lFmyxZXXLylm0Pf2Qh9pgGFpGwPbyyFZl9PYH4thS9qRcfs3C2Sn3/SA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.1.tgz","_from":"file:sinclair-typebox-0.31.1.tgz","_nodeVersion":"20.3.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-oAGsVU6u4k7pNGfDZG1ujFuku25yV3lFmyxZXXLylm0Pf2Qh9pgGFpGwPbyyFZl9PYH4thS9qRcfs3C2Sn3/SA==","shasum":"f9edccb4447481e62d93639361bf643c911dfa8a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.1.tgz","fileCount":47,"unpackedSize":533138,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDtQYueri5my4m2gkf5bc2nwSlyc9kJVa8tD7O32ppsrwIhAI7tDVK1UB4I8c9RhaTgsGfinDPPbTxKS0xb071WhuGT"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.1_1691984972683_0.05885190593091738"},"_hasShrinkwrap":false},"0.31.2":{"name":"@sinclair/typebox","version":"0.31.2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.1.6"},"_id":"@sinclair/typebox@0.31.2","_integrity":"sha512-+LlOCOcCcsq6zxt1Ld9VkOSTMY6189dBtHHxb2nUftYpiUFXX0mKuK/UgtX84haktCs/x8j8k29v//ohdjlToA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.2.tgz","_from":"file:sinclair-typebox-0.31.2.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-+LlOCOcCcsq6zxt1Ld9VkOSTMY6189dBtHHxb2nUftYpiUFXX0mKuK/UgtX84haktCs/x8j8k29v//ohdjlToA==","shasum":"88b998a269479e343718996d920938e2f7b30ed4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.2.tgz","fileCount":47,"unpackedSize":533520,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIECu6lXkrfrtD/wFnjKJM7g3NXc14C7GNMO5r407E3UdAiB8JDYNWq3/xCy/72v9vL88iRMurZFwDLn2iHfj+CH6mA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.2_1692732914608_0.7840422654140333"},"_hasShrinkwrap":false},"0.31.3":{"name":"@sinclair/typebox","version":"0.31.3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.3","_integrity":"sha512-9ie8Vuvtw+7CzFhTbwmqtnpTMuMl1TU1WhY/P3LZopp/oruyKHO7uO9FqDq/m7r0vAavZnsSmBI7EMOjtpaqow==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.3.tgz","_from":"file:sinclair-typebox-0.31.3.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-9ie8Vuvtw+7CzFhTbwmqtnpTMuMl1TU1WhY/P3LZopp/oruyKHO7uO9FqDq/m7r0vAavZnsSmBI7EMOjtpaqow==","shasum":"0ddee232d923704e5e4b9b70a28a34c6a30fc849","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.3.tgz","fileCount":47,"unpackedSize":534346,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBKWi2xqZZSc+rIYl81hzaV9m29laHzkqWWBedPMFgrYAiBsQGsYPX6PAuFiUECFSQFroEoKv5I9OS7JtZnWEGwDrg=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.3_1692948129652_0.1448890577198747"},"_hasShrinkwrap":false},"0.31.4":{"name":"@sinclair/typebox","version":"0.31.4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.4","_integrity":"sha512-bNZ4CwuZYxJ7yvCVE2zANanEsXUtPfdPQyLe3tT7i30QwfndMbVyVCK3wmHQQSybaK+vUu4SYWlxdAQqshIBHA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.4.tgz","_from":"file:sinclair-typebox-0.31.4.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-bNZ4CwuZYxJ7yvCVE2zANanEsXUtPfdPQyLe3tT7i30QwfndMbVyVCK3wmHQQSybaK+vUu4SYWlxdAQqshIBHA==","shasum":"d191cf12fb88cc987fecd439c6af7ec786b600ed","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.4.tgz","fileCount":47,"unpackedSize":534613,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCqIXjTikKrQ2T113GmQ8jI56h5rSB3lluH3cj9IAKiAAIgPxr7haBYrVFu+fVjPv7QkoS0kYOmh9eeXSDtExJbCoo="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.4_1693034773978_0.8455569852993023"},"_hasShrinkwrap":false},"0.31.5":{"name":"@sinclair/typebox","version":"0.31.5","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.5","_integrity":"sha512-4fbqH1ONle98ULTQakJFVNwGwSx+rv90HEnjZGt1GoApMKooUw1WXw3ub+Ew7rInmyDcwsjIxiHt39bkWzeCBA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.5.tgz","_from":"file:sinclair-typebox-0.31.5.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-4fbqH1ONle98ULTQakJFVNwGwSx+rv90HEnjZGt1GoApMKooUw1WXw3ub+Ew7rInmyDcwsjIxiHt39bkWzeCBA==","shasum":"10ae6c60fc523d7d695a730df1ac3dd9725ce207","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.5.tgz","fileCount":47,"unpackedSize":534613,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDo76QiKaiPX6iSlP586uXtHtz5m/NPDx0bX2d7vh0KUAiEAsJjOckAIm0PGrS/5Wf4jocreDBPoTxZAGl2heWmoYuc="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.5_1693116207042_0.7289156502756995"},"_hasShrinkwrap":false},"0.31.6":{"name":"@sinclair/typebox","version":"0.31.6","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.6","_integrity":"sha512-u6Y0wqb1VAO+WwfRgJTzxNsv5P8QmF50Q2tVTDSdyLZcEwhcTujibc9vfPzJB9pYMvLNQtQGKyvlcexUoHYkKg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.6.tgz","_from":"file:sinclair-typebox-0.31.6.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-u6Y0wqb1VAO+WwfRgJTzxNsv5P8QmF50Q2tVTDSdyLZcEwhcTujibc9vfPzJB9pYMvLNQtQGKyvlcexUoHYkKg==","shasum":"cbe60cc433595ba9c69f472688110526285e4899","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.6.tgz","fileCount":47,"unpackedSize":534428,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBViyD4X9+TKcN6Fxu9rtHe1YEDTz3Zll9X2cL0CeZcEAiEAr/Ibmit+Tg5MUp4WSMAiD6Ky3iZf7/v1hh/I0IngS7U="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.6_1693301295065_0.11727929055730257"},"_hasShrinkwrap":false},"0.31.7":{"name":"@sinclair/typebox","version":"0.31.7","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.7","_integrity":"sha512-cl6qKMXSK95aMwIzSQJeenKBtPmE1+hqts3vJe93EaSa7cIaNjz3A5yMKkgW/bAhjnOpa/yiCCV1pOG1bzzv0A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.7.tgz","_from":"file:sinclair-typebox-0.31.7.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-cl6qKMXSK95aMwIzSQJeenKBtPmE1+hqts3vJe93EaSa7cIaNjz3A5yMKkgW/bAhjnOpa/yiCCV1pOG1bzzv0A==","shasum":"758c8e6de5403f85cbdb377c19f92eab6e1fa076","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.7.tgz","fileCount":47,"unpackedSize":534429,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCIAqwr2TNmzdDxn/JtDlLLNY4M66ek1db872Pdhb+ZJgIhAKlpHGt/v230MSKfJHzovhj2VI59LZTQ4VVHTDcGEjZe"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.7_1693334778025_0.5379311470690515"},"_hasShrinkwrap":false},"0.31.8":{"name":"@sinclair/typebox","version":"0.31.8","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.8","_integrity":"sha512-1FdxgmuUqQWprlAHzGKTH3qSeNzbYnHXD65WIZOI037hcCZVw+r8SoFd8OIFUrbQxEI+MhHArCvKlndLvfw/bg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.8.tgz","_from":"file:sinclair-typebox-0.31.8.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-1FdxgmuUqQWprlAHzGKTH3qSeNzbYnHXD65WIZOI037hcCZVw+r8SoFd8OIFUrbQxEI+MhHArCvKlndLvfw/bg==","shasum":"61023e06173069e7fcadaeb8c0905d2a097e47ae","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.8.tgz","fileCount":47,"unpackedSize":534558,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICrpvZtBChTMdIszNjNEbv/Xpyc7ix0vlqCpoTAdDt9sAiBLcn50Pj2I0e0WodPqOe7mMJnqNU3O4T+x9gdpmq71AA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.8_1693428016234_0.10418235844936508"},"_hasShrinkwrap":false},"0.31.9":{"name":"@sinclair/typebox","version":"0.31.9","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.9","_integrity":"sha512-p73UG4m/1h/1hraNZtabquOkryCbqpqrwok9T3XqPwp8H7V4+t12mzeZLVzxSNvtasI/44f5IZxNwpwjPX+Uwg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.9.tgz","_from":"file:sinclair-typebox-0.31.9.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-p73UG4m/1h/1hraNZtabquOkryCbqpqrwok9T3XqPwp8H7V4+t12mzeZLVzxSNvtasI/44f5IZxNwpwjPX+Uwg==","shasum":"f6eebba4f3631624d0895283723116d3e1d8d91d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.9.tgz","fileCount":47,"unpackedSize":534744,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFNpVE8DG6P5uQoBsJFraUiIfaSwq7vMZ9m8vqpDM1vMAiEAgahFpX7ybxUxbJafHjShSWw+UE8ZwDoaDl9Sn8tqvC0="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.9_1693752879003_0.20649502754230475"},"_hasShrinkwrap":false},"0.31.10":{"name":"@sinclair/typebox","version":"0.31.10","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.10","_integrity":"sha512-d4xyuqhmWHQk3glt5hS2GXJ2IM9ZkUbMWJeKLpHbpQ1G80CGXZfem2smpbXlazQmbGSWNekjSrMVgCstiz1xoQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.10.tgz","_from":"file:sinclair-typebox-0.31.10.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-d4xyuqhmWHQk3glt5hS2GXJ2IM9ZkUbMWJeKLpHbpQ1G80CGXZfem2smpbXlazQmbGSWNekjSrMVgCstiz1xoQ==","shasum":"70fa2eaface2de6a16fa2965b64fa2cb261bfcd5","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.10.tgz","fileCount":47,"unpackedSize":534781,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDtKzEpoUy/32UCEB0HI1TmoB77Me+shXiVVskdJDMe/QIhAJhk5d5q9dUweFitjVpHsGlPCrAeuMW7gNfjdmZoQr5/"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.10_1693849932650_0.5600767668152526"},"_hasShrinkwrap":false},"0.31.11":{"name":"@sinclair/typebox","version":"0.31.11","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.11","_integrity":"sha512-jTrfYeIdeU0ZZ3M5b2Mbf86Zc+STPjsPU6TJAauapqWippeybZGM8GZEHM3r03jt+ggrnZrQyeYTzw1m9eT7HQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.11.tgz","_from":"file:sinclair-typebox-0.31.11.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-jTrfYeIdeU0ZZ3M5b2Mbf86Zc+STPjsPU6TJAauapqWippeybZGM8GZEHM3r03jt+ggrnZrQyeYTzw1m9eT7HQ==","shasum":"8f3aa21a672101036c177d7b9d98e9cec2b345ee","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.11.tgz","fileCount":47,"unpackedSize":534715,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBdxXRLaW2mKWaUPNsUEeCgdP6sA5mwT68zT8JfpcAJXAiAB/gVPVQuY4v4D4AzGKVijJH+ztZD7HG7nVG/Z5FAFVg=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.11_1693928926880_0.4989610280240433"},"_hasShrinkwrap":false},"0.31.12":{"name":"@sinclair/typebox","version":"0.31.12","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.12","_integrity":"sha512-XeIsBp4yYM92lHfVBCFyhImXlUt3EbyY+4FNCW+Lr7U+8pjli//9WVYo3tALrcB7frOOQxXiL2SOu0tY0mNYEw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.12.tgz","_from":"file:sinclair-typebox-0.31.12.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-XeIsBp4yYM92lHfVBCFyhImXlUt3EbyY+4FNCW+Lr7U+8pjli//9WVYo3tALrcB7frOOQxXiL2SOu0tY0mNYEw==","shasum":"672f66a4c7af4fd9d8f36c037c3df27d3419dd1a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.12.tgz","fileCount":47,"unpackedSize":534745,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGhmcSUhvF4Fvc3k6JF/m4/yoTNFtsd57X6KUezEuXfKAiAu1+g19f2GSoWcRY36yuZos8Vfoco/cKcdVI/kHeeGqA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.12_1693933075100_0.5416820601349286"},"_hasShrinkwrap":false},"0.31.13":{"name":"@sinclair/typebox","version":"0.31.13","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.13","_integrity":"sha512-V4UoNN1XlRiQd/s1iWlLUTmfGCKDB+B7KteI/m6OKPBXPsVeZ7bqTDrdD+9mAWwFXaXqYnX06+tzVjK3bcvS9g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.13.tgz","_from":"file:sinclair-typebox-0.31.13.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-V4UoNN1XlRiQd/s1iWlLUTmfGCKDB+B7KteI/m6OKPBXPsVeZ7bqTDrdD+9mAWwFXaXqYnX06+tzVjK3bcvS9g==","shasum":"e91b39b79c35b52e4eb56b1b89ec505b2e02b605","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.13.tgz","fileCount":47,"unpackedSize":535078,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHOVcYm2xVTfMf5vFP5BtjBvtzkmx15wf0WIGm/y5UZ0AiBJC59dmzsYAG3byIEgeF9Tkmk+deohuwE7XWj/x+dvVg=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.13_1693936359664_0.25284302427485184"},"_hasShrinkwrap":false},"0.31.14":{"name":"@sinclair/typebox","version":"0.31.14","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.14","_integrity":"sha512-2spk0ie6J/4r+nwb55OtBXUn5cZLF9S98fopIjuutBVoq8yLRNh+h8QvMkCjMu5gWBMnnZ/PUSXeHE3xGBPKLQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.14.tgz","_from":"file:sinclair-typebox-0.31.14.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-2spk0ie6J/4r+nwb55OtBXUn5cZLF9S98fopIjuutBVoq8yLRNh+h8QvMkCjMu5gWBMnnZ/PUSXeHE3xGBPKLQ==","shasum":"0c1f3f8dbb6c866088faab04af7fa7cda7f8e8c3","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.14.tgz","fileCount":47,"unpackedSize":534904,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC0ly4oHmKL/NVvlce95s3iOr2KnVbb9tqGbodPa30VKAIhAJ8FtoiRNLaOrWXAevgVsWND9xTBJLx4NtviB+QaHrUD"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.14_1693944954668_0.4943767959973815"},"_hasShrinkwrap":false},"0.31.15":{"name":"@sinclair/typebox","version":"0.31.15","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.15","_integrity":"sha512-gheE0Z2QWB/EuUwirniP+vq17N0MdQ+9bKyy2lPJzcBin6piBxOrazTYOB18N+oeBwVVepAmlqqo9KbpSl9DOA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.15.tgz","_from":"file:sinclair-typebox-0.31.15.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-gheE0Z2QWB/EuUwirniP+vq17N0MdQ+9bKyy2lPJzcBin6piBxOrazTYOB18N+oeBwVVepAmlqqo9KbpSl9DOA==","shasum":"182bff2527c2953540f0b5e8d1851888fb57b2eb","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.15.tgz","fileCount":47,"unpackedSize":535078,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCE5lhF6a1t4fNsN0VVY3FlJwhDMR3mo12oIzd6tJkvDAIhAOn50/ws2CSkLgbvYBZRpjTh43HTpB9hDdb9wSyG5YIw"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.15_1694675896349_0.7995434864007394"},"_hasShrinkwrap":false},"0.31.16":{"name":"@sinclair/typebox","version":"0.31.16","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.16","_integrity":"sha512-US3ytBkDVP1JqooE1pBXgh97c8ljW05RkZj0MM6eVAsnZOtjalurleXy6LwssfazPDqQk/Vy64Ood77L4jG7Dw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.16.tgz","_from":"file:sinclair-typebox-0.31.16.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-US3ytBkDVP1JqooE1pBXgh97c8ljW05RkZj0MM6eVAsnZOtjalurleXy6LwssfazPDqQk/Vy64Ood77L4jG7Dw==","shasum":"29e9b9644111d86bf4093c55c2337810a6ae7e21","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.16.tgz","fileCount":47,"unpackedSize":535223,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBXV9/ppS1n+1s1QB/aG9FwG6BTHSjJzfpZ8Il6HXWzYAiBefRJ1cmQ2Jol8rZDNCvIHReSg3pq7UrFaqG9dTsd/lA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.16_1695625181372_0.41246447406395026"},"_hasShrinkwrap":false},"0.31.17":{"name":"@sinclair/typebox","version":"0.31.17","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.17.1","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.17","_integrity":"sha512-GVYVHHOGINx+DT2DwjXoCQO0mRpztYKyb3d48tucuqhjhHpQYGp7Xx7dhhQGzILx/beuBrzfITMC7/5X7fw+UA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.17.tgz","_from":"file:sinclair-typebox-0.31.17.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-GVYVHHOGINx+DT2DwjXoCQO0mRpztYKyb3d48tucuqhjhHpQYGp7Xx7dhhQGzILx/beuBrzfITMC7/5X7fw+UA==","shasum":"f9ceed480957b919b203bb0b3e27bc559d1e8e19","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.17.tgz","fileCount":47,"unpackedSize":535220,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICU4IkJsMKptd2YdkkvRF2NjcJURJeLhg0H3yq+fyXVrAiEA3GndP6gTXTx+g2QdsQImtKy8pvICtsB42GdYSZ7BcBI="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.17_1695712949768_0.15572870385508786"},"_hasShrinkwrap":false},"0.31.18":{"name":"@sinclair/typebox","version":"0.31.18","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.18","_integrity":"sha512-p2JGz+SciGJVl1zokCIK15f7LYDrI2ZsxItcLhkAyx50hEYEj/Qdy7z30qRYiakzdIu8dV4DfBi+e6xEZuugiQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.18.tgz","_from":"file:sinclair-typebox-0.31.18.tgz","_nodeVersion":"20.3.1","_npmVersion":"7.24.1","dist":{"integrity":"sha512-p2JGz+SciGJVl1zokCIK15f7LYDrI2ZsxItcLhkAyx50hEYEj/Qdy7z30qRYiakzdIu8dV4DfBi+e6xEZuugiQ==","shasum":"556a3de891d5daa004875f6d86c69754084428a6","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.18.tgz","fileCount":47,"unpackedSize":535574,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC4j1FUv2OzDA9+LbDgm5HazTWWlZF32TtKXG5IqDgqKAiEA7/TmEOGLGRtbCjXuc8o3XKDVIMJH2n7vRmffK193csY="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.18_1697551093030_0.0032364591017253197"},"_hasShrinkwrap":false},"0.31.19":{"name":"@sinclair/typebox","version":"0.31.19","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.19","_integrity":"sha512-8GznR/3FgDgA20Its5gd+BZqbtE0amjEidsIX4T2stmDFcaAcQviGsBmzlBtJ0E1Gxk8VtHxL4rt4/KSc/UdxQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.19.tgz","_from":"file:sinclair-typebox-0.31.19.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-8GznR/3FgDgA20Its5gd+BZqbtE0amjEidsIX4T2stmDFcaAcQviGsBmzlBtJ0E1Gxk8VtHxL4rt4/KSc/UdxQ==","shasum":"99f7b9746546b2b38b9d02e1fbd5d07e558b04c8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.19.tgz","fileCount":47,"unpackedSize":536050,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDaFw4Yp8WTwSB9b146/9wlsdooqS6dmp6AjXsk579qkAIgRW5pPH38TUlfK4YfM0svwVCUXQAOoRsPbm0ZEGTydBY="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.19_1698258870408_0.2736483475559721"},"_hasShrinkwrap":false},"0.31.20":{"name":"@sinclair/typebox","version":"0.31.20","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.20","_integrity":"sha512-pqkf2X6fc1yk6c3Rk41cT8NYFKmzngl8TVHy375X7ihlONCsX7/YTReRLyZX7zZhuUUBx9KTZPFFDZo6AIERCw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.20.tgz","_from":"file:sinclair-typebox-0.31.20.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-pqkf2X6fc1yk6c3Rk41cT8NYFKmzngl8TVHy375X7ihlONCsX7/YTReRLyZX7zZhuUUBx9KTZPFFDZo6AIERCw==","shasum":"74e855ba87a795f10c1eb9d791c7316d930d292e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.20.tgz","fileCount":47,"unpackedSize":536196,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHUN+RnXvmXtIq0swFnyB8tX3KYZHuuf6duaGSKCYcF9AiEAyUYpp4JlnmHLqMhuFYTc7NYxjOgjTO/GZtFY+ffWTVE="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.20_1698312280235_0.11409787401523608"},"_hasShrinkwrap":false},"0.31.21":{"name":"@sinclair/typebox","version":"0.31.21","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.21","_integrity":"sha512-Wtq/K44EMkREaXytK+2c5DrygtYsH7ZxT0StQL8HMJz2BoOM7NZ/xfrUFBVuZxDrhJCoXf5Im282P2CCz5DHwQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.21.tgz","_from":"file:sinclair-typebox-0.31.21.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-Wtq/K44EMkREaXytK+2c5DrygtYsH7ZxT0StQL8HMJz2BoOM7NZ/xfrUFBVuZxDrhJCoXf5Im282P2CCz5DHwQ==","shasum":"d52d8e35f71e5651042aa0237e918e4b21fbbbf8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.21.tgz","fileCount":47,"unpackedSize":536494,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDVcRyrCGfMf4Gw7IamUsS2yP7nZBfZcK/MjmqoTGPeWgIgdB/SdWjExyptCTYvqIUfeMEoDYFwT9nrIKON5sP3H/c="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.21_1698580122964_0.44984771980197724"},"_hasShrinkwrap":false},"0.31.22":{"name":"@sinclair/typebox","version":"0.31.22","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.22","_integrity":"sha512-CKviMgpcXd8q8IsQQD8cCleswe4/EkQRcOqtVQcP1e+XUyszjJYjgL5Dtf3XunWZc2zEGmQPqJEsq08NiW9xfw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.22.tgz","_from":"file:sinclair-typebox-0.31.22.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-CKviMgpcXd8q8IsQQD8cCleswe4/EkQRcOqtVQcP1e+XUyszjJYjgL5Dtf3XunWZc2zEGmQPqJEsq08NiW9xfw==","shasum":"f13fa4050a7e883d252365902e38186fa0dc8ab8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.22.tgz","fileCount":47,"unpackedSize":536645,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHEo9Uky32yTsDigFIsMzUbyQnbYVf6CP7JMQjNnON6CAiEAma5d4vDXeLEuviSdMqjveouo/aPysAO6i3HaLw/pyQA="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.22_1698940182867_0.7848260405558538"},"_hasShrinkwrap":false},"0.31.23":{"name":"@sinclair/typebox","version":"0.31.23","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.23","_integrity":"sha512-ZzrzE8yCrWWU4mcBstBgdlBMjB8My3ESY9nZ/v996GptIJb4+MU1p7s1Qxrc2xvZeOiDDnAheLLmdHjPgZV79g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.23.tgz","_from":"file:sinclair-typebox-0.31.23.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-ZzrzE8yCrWWU4mcBstBgdlBMjB8My3ESY9nZ/v996GptIJb4+MU1p7s1Qxrc2xvZeOiDDnAheLLmdHjPgZV79g==","shasum":"5ae0235824e63b595952dceb001b813349688b1f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.23.tgz","fileCount":47,"unpackedSize":536928,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF+3BlCxLEXmGnsIw5GfYXb1Yx7Qe59TsDaT1ZxcTZGYAiA2yuOajVKXWFbQwLswBsexQ7hMZufxjZNZsd5qTN6big=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.23_1699371263183_0.9664026554798715"},"_hasShrinkwrap":false},"0.31.24":{"name":"@sinclair/typebox","version":"0.31.24","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.24","_integrity":"sha512-3zmHQ+4ta05eLGjm/gq+hkFWS4rfr3/zUw8331Yg1X1IdqyDnt5FvoRx5LkK/YdvvJuO04x+E+Y/09Kde588Ng==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.24.tgz","_from":"file:sinclair-typebox-0.31.24.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-3zmHQ+4ta05eLGjm/gq+hkFWS4rfr3/zUw8331Yg1X1IdqyDnt5FvoRx5LkK/YdvvJuO04x+E+Y/09Kde588Ng==","shasum":"3b718fbb4240953e83faa49be43b43ec9506adba","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.24.tgz","fileCount":47,"unpackedSize":537806,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCrGvp48OKeG8yGy6b4PFnYGB20Dxv+0vXZPPTXV364lwIgbxUyrS+5L0z+WLzV42NZP0qu0FvrIOIOvqNDsXOTXww="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.24_1700030003352_0.2159360944541322"},"_hasShrinkwrap":false},"0.31.25":{"name":"@sinclair/typebox","version":"0.31.25","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.25","_integrity":"sha512-tc075wfx6qCftSuNHq7kPNVTNhb5qBDf7B+c7pBdLkzxGsXdsqeinlRZQuGzrSowSh7nxEKvZKRUdbRGqy0GCA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.25.tgz","_from":"file:sinclair-typebox-0.31.25.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-tc075wfx6qCftSuNHq7kPNVTNhb5qBDf7B+c7pBdLkzxGsXdsqeinlRZQuGzrSowSh7nxEKvZKRUdbRGqy0GCA==","shasum":"6ad0dca016c5a4a8f4578118815c3e4fe340c3fe","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.25.tgz","fileCount":47,"unpackedSize":537805,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGciJIbXS6IM0fmdLn4Txzs41oiT8RrXdlZJasebp8woAiEA01/CoKUGhnwrhFBN56PUqQwCmK1s/7wUtvsvP8kwTFg="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.25_1700056121068_0.7892015606687566"},"_hasShrinkwrap":false},"0.31.26":{"name":"@sinclair/typebox","version":"0.31.26","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.26","_integrity":"sha512-0S5BGB/Tle1kVa1pT2k2sc+wHTCB28+ivuetmZDCRV8I0iFKaNfk6HbvVyLEFBzZy56dp0dw+YDJ9Ed+YAAL7A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.26.tgz","_from":"file:sinclair-typebox-0.31.26.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-0S5BGB/Tle1kVa1pT2k2sc+wHTCB28+ivuetmZDCRV8I0iFKaNfk6HbvVyLEFBzZy56dp0dw+YDJ9Ed+YAAL7A==","shasum":"f17fbefcfb38311e7ee2b9a3071f86cc62ab43cc","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.26.tgz","fileCount":47,"unpackedSize":537338,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFSImp+OFoHJMKFcQxukwMMWyXeuWm/nYydPBPbcwKjQAiARnqA/Hzvw0qNkJhjS8vYDkzns3uPui1urtwFkvi4QzQ=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.26_1700299362858_0.544186268354792"},"_hasShrinkwrap":false},"0.31.27":{"name":"@sinclair/typebox","version":"0.31.27","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.27","_integrity":"sha512-Gf/P/hssx1ew6VNA5yLw3eLQb+fuuo63mlobVUSQHNCrQLXx4OzRa7Yt/mTZNGImBSrJo1a0bWR1NmpVjrU6xw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.27.tgz","_from":"file:sinclair-typebox-0.31.27.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-Gf/P/hssx1ew6VNA5yLw3eLQb+fuuo63mlobVUSQHNCrQLXx4OzRa7Yt/mTZNGImBSrJo1a0bWR1NmpVjrU6xw==","shasum":"9776614f4c5ee4434043e0ba1499d297800b3d46","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.27.tgz","fileCount":47,"unpackedSize":538235,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC8KMMPrsjs/rzmBfuuY5xy0BWbNxhXMwb7GLL553Se0gIgPtTg5mJ2B5ESpjWLBm66qk7pjcnrf69xARyrYqg2j1c="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.27_1700423117480_0.17875870350417"},"_hasShrinkwrap":false},"0.31.28":{"name":"@sinclair/typebox","version":"0.31.28","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./value/cast":"./value/cast.js","./value/check":"./value/check.js","./value/clone":"./value/clone.js","./value/convert":"./value/convert.js","./value/create":"./value/create.js","./value/delta":"./value/delta.js","./value/deref":"./value/deref.js","./value/equal":"./value/equal.js","./value/guard":"./value/guard.js","./value/hash":"./value/hash.js","./value/mutate":"./value/mutate.js","./value/pointer":"./value/pointer.js","./value/transform":"./value/transform.js","./value":"./value/index.js",".":"./typebox.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.2.2"},"_id":"@sinclair/typebox@0.31.28","_integrity":"sha512-/s55Jujywdw/Jpan+vsy6JZs1z2ZTGxTmbZTPiuSL2wz9mfzA2gN1zzaqmvfi4pq+uOt7Du85fkiwv5ymW84aQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.31.28.tgz","_from":"file:sinclair-typebox-0.31.28.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-/s55Jujywdw/Jpan+vsy6JZs1z2ZTGxTmbZTPiuSL2wz9mfzA2gN1zzaqmvfi4pq+uOt7Du85fkiwv5ymW84aQ==","shasum":"b68831e7bc7d09daac26968ea32f42bedc968ede","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.31.28.tgz","fileCount":47,"unpackedSize":535697,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGMA2O7XDca6whXn19smqza979kXIXYkoiTDZpF2dIPgAiA6DCuu4zQOfxYcCKXQhFsDJFB92PFSMC3Re4J3fTrUKA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.31.28_1700485032007_0.8377792278241056"},"_hasShrinkwrap":false},"0.32.0-dev-1":{"name":"@sinclair/typebox","version":"0.32.0-dev-1","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./typebox.js","types":"./typebox.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./type":"./type/index.js","./value":"./value/index.js",".":"./index.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","install:local":"hammer task install_local","test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","build":"hammer task build","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^18.11.9","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.3.2"},"_id":"@sinclair/typebox@0.32.0-dev-1","_integrity":"sha512-w1FOdYZ7SvVMVFJvI7y0z9oK2c042rjUXTNEVYcyzsWBNppYp318sAg3vDAQlzDHNUeAXVLMxffrA6d8wjl+uw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-1.tgz","_from":"file:sinclair-typebox-0.32.0-dev-1.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-w1FOdYZ7SvVMVFJvI7y0z9oK2c042rjUXTNEVYcyzsWBNppYp318sAg3vDAQlzDHNUeAXVLMxffrA6d8wjl+uw==","shasum":"3edc8ab536bca3dd153045fb26e7d7da1f6ec947","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-1.tgz","fileCount":409,"unpackedSize":1000454,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGonyvbUUDw6ioDxJKnR1SmDsuHQRfDVrqJGTJ99nJELAiEAkGfE4qWiPGmmT9OZ7o47gmwb0FgYi9MXEJFymOvTqZw="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-1_1701339204704_0.9492457449975578"},"_hasShrinkwrap":false},"0.32.0-dev-2":{"name":"@sinclair/typebox","version":"0.32.0-dev-2","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./cjs/index.js","module":"./esm/index.mjs","types":"./esm/index.d.mts","exports":{"./compiler":{"require":"./cjs/compiler/index.js","import":"./esm/compiler/index.mjs"},"./errors":{"require":"./cjs/errors/index.js","import":"./esm/errors/index.mjs"},"./system":{"require":"./cjs/system/index.js","import":"./esm/system/index.mjs"},"./type":{"require":"./cjs/type/index.js","import":"./esm/type/index.mjs"},"./value":{"require":"./cjs/value/index.js","import":"./esm/value/index.mjs"},".":{"require":"./cjs/index.js","import":"./esm/index.mjs"}},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","install:local":"hammer task install_local","test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","build:esm":"hammer task build_esm","build:cjs":"hammer task build_cjs","build":"hammer task build","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^20.10.1","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.3.2"},"_id":"@sinclair/typebox@0.32.0-dev-2","_integrity":"sha512-89x/4VrgjDuPqftJm1O/V7g1N/x0u/efEKHW+FZzPoZ2ZzZ5EMtgD8jtkCWRbn07cACFYONn0vy96zKCck8uUw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-2.tgz","_from":"file:sinclair-typebox-0.32.0-dev-2.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-89x/4VrgjDuPqftJm1O/V7g1N/x0u/efEKHW+FZzPoZ2ZzZ5EMtgD8jtkCWRbn07cACFYONn0vy96zKCck8uUw==","shasum":"6aa3f8d2d218596d16acf9b941b3639d3913632d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-2.tgz","fileCount":612,"unpackedSize":1606768,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCexxo3m9R0JOeuPZz4+ft8IH/WlisemaphKP389a4fDgIgJmu6fJitXvLzac70bbQhKyXnVj20qbBkMl183eVzbTE="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-2_1701351674965_0.31282098806285075"},"_hasShrinkwrap":false},"0.32.0-dev-3":{"name":"@sinclair/typebox","version":"0.32.0-dev-3","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./cjs/index.js","module":"./esm/index.mjs","types":"./esm/index.d.mts","exports":{"./compiler":{"require":"./cjs/compiler/index.js","import":"./esm/compiler/index.mjs","types":"./esm/compiler/index.d.mts"},"./errors":{"require":"./cjs/errors/index.js","import":"./esm/errors/index.mjs","types":"./esm/errors/index.d.mts"},"./system":{"require":"./cjs/system/index.js","import":"./esm/system/index.mjs","types":"./esm/system/index.d.mts"},"./type":{"require":"./cjs/type/index.js","import":"./esm/type/index.mjs","types":"./esm/type/index.d.mts"},"./value":{"require":"./cjs/value/index.js","import":"./esm/value/index.mjs","types":"./esm/value/index.d.mts"},".":{"require":"./cjs/index.js","import":"./esm/index.mjs","types":"./esm/index.d.mts"}},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","install:local":"hammer task install_local","test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","build:esm":"hammer task build_esm","build:cjs":"hammer task build_cjs","build":"hammer task build","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^20.10.1","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.3.2"},"_id":"@sinclair/typebox@0.32.0-dev-3","_integrity":"sha512-uKa3O8gB7Z+mlrB2nH696SUKDWpVFmDSR7DlWjoyvmXMIUkDtewOmgBDdNSddpOYCHLBbiSCbUG4Kff63LKgPw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-3.tgz","_from":"file:sinclair-typebox-0.32.0-dev-3.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-uKa3O8gB7Z+mlrB2nH696SUKDWpVFmDSR7DlWjoyvmXMIUkDtewOmgBDdNSddpOYCHLBbiSCbUG4Kff63LKgPw==","shasum":"2bd2037dfef924b70986912e6bceeaa559447f4b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-3.tgz","fileCount":612,"unpackedSize":1607024,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHc51H8bytbXMze/knBNbR5KnJbympSQx2monq8tAwyhAiEAhfNZOoeOmhJBVxzDicvApzqLma6xM3lUVeG4v+81fsY="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-3_1701353789270_0.27843614283743223"},"_hasShrinkwrap":false},"0.32.0-dev-4":{"name":"@sinclair/typebox","version":"0.32.0-dev-4","description":"JSONSchema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","main":"./index.js","types":"./index.d.ts","exports":{"./compiler":"./compiler/index.js","./errors":"./errors/index.js","./system":"./system/index.js","./type":"./type/index.js","./value":"./value/index.js",".":"./index.js"},"repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"benchmark:compression":"hammer task benchmark_compression","benchmark:measurement":"hammer task benchmark_measurement","benchmark":"hammer task benchmark","install:local":"hammer task install_local","test:typescript":"hammer task test_typescript","test:static":"hammer task test_static","test:runtime":"hammer task test_runtime","build":"hammer task build","test":"hammer task test","clean":"hammer task clean","format":"hammer task format","start":"hammer task start","publish":"hammer task publish","publish:dev":"hammer task publish_dev"},"devDependencies":{"@sinclair/hammer":"^0.18.0","@types/mocha":"^9.1.1","@types/node":"^20.10.1","ajv":"^8.12.0","ajv-formats":"^2.1.1","mocha":"^9.2.2","prettier":"^2.7.1","typescript":"^5.3.2"},"_id":"@sinclair/typebox@0.32.0-dev-4","_integrity":"sha512-3jHO6XqEwcAlaZGuH9aMmVRP39SmwVVGCimOp33IHqtJ1KXCF6tA9t8s1pTVlJ5+GSq1H9I0PHqZ1Rqo/WlJtA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-4.tgz","_from":"file:sinclair-typebox-0.32.0-dev-4.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-3jHO6XqEwcAlaZGuH9aMmVRP39SmwVVGCimOp33IHqtJ1KXCF6tA9t8s1pTVlJ5+GSq1H9I0PHqZ1Rqo/WlJtA==","shasum":"edee7485f157bf11575d9a78173a69af4df803cf","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-4.tgz","fileCount":409,"unpackedSize":662970,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDD5r/MEDe4jzxctQ/PXnb6ebKgecPeIGoTZ/weV5+OzAiEAh/T+inDW0pPtc+az8St3TtbQ62fn3n13PxQRBcfrmqc="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-4_1701482715809_0.18275578254789315"},"_hasShrinkwrap":false},"0.32.0-dev-5":{"name":"@sinclair/typebox","version":"0.32.0-dev-5","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"types":"./build/types/index.d.ts","module":"./build/import/index.mjs","main":"./build/default/index.js","exports":{".":{"types":"./build/types/index.d.ts","default":"./build/default/index.js","import":"./build/import/index.mjs"},"./compiler":{"types":"./build/types/compiler/index.d.ts","default":"./build/default/compiler/index.js","import":"./build/import/compiler/index.mjs"},"./errors":{"types":"./build/types/errors/index.d.ts","default":"./build/default/errors/index.js","import":"./build/import/errors/index.mjs"},"./system":{"types":"./build/types/system/index.d.ts","default":"./build/default/system/index.js","import":"./build/import/system/index.mjs"},"./type":{"types":"./build/types/type/index.d.ts","default":"./build/default/type/index.js","import":"./build/import/type/index.mjs"},"./value":{"types":"./build/types/value/index.d.ts","default":"./build/default/value/index.js","import":"./build/import/value/index.mjs"}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n#### Npm\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory JSON Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type assertion rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard JSON Schema validation.\r\n\r\nThis library is designed to enable JSON schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Template Literal](#types-templateliteral)\r\n  - [Indexed](#types-indexed)\r\n  - [Rest](#types-rest)\r\n  - [Transform](#types-transform)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Errors](#typesystem-errors)\r\n  - [Policies](#typesystem-policies)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │  true : false               │   type: 'boolean'              │\r\n│   Type.Literal(true),          │                             │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This type will recursively reconstruct interior referenced types.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime conditional types with Extends. This type performs a structural assignability check for the first two arguments and will infer one of the second two arguments based on the result. The Extends type is designed to match the assignability rules of TypeScript conditional types. The conditional derived types Exclude and Extract are also supported.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-templateliteral'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax. TypeBox encodes template literals as regular expression string patterns which enable the template be checked via Json Schema. It also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access Types with Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, TemplateLiteral and Union types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value A is TString.\r\n\r\n```typescript\r\nimport { Type, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst A: unknown = { ... }\r\n\r\nif(TypeGuard.TString(A)) {\r\n\r\n  A.type                                             // A.type = 'string'\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides functionality to define types above and beyond the built-in Json and JavaScript type sets. They also manage TypeBox's localization options (i18n) for error message generation and can control various assertion policies used when type checking. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the TypeSystemErrorFunction to override validation error messages. This can be used to localize errors or create error messages for user defined types.\r\n\r\n```typescript\r\nimport { TypeSystemErrorFunction, ValueErrorType, DefaultErrorFunction } from '@sinclair/typebox/system'\r\n\r\nTypeSystemErrorFunction.Set((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T = { ... }\r\n  x: Type.String(),\r\n  y: Type.Number(),\r\n  z: Type.Boolean()\r\n})\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.0.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    216 ms' │ '      9 ms' │ '   24.00 x' │\r\n│ Literal_Number             │    1000    │ '    169 ms' │ '      7 ms' │ '   24.14 x' │\r\n│ Literal_Boolean            │    1000    │ '    150 ms' │ '      5 ms' │ '   30.00 x' │\r\n│ Primitive_Number           │    1000    │ '    161 ms' │ '      7 ms' │ '   23.00 x' │\r\n│ Primitive_String           │    1000    │ '    148 ms' │ '      6 ms' │ '   24.67 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    185 ms' │ '      9 ms' │ '   20.56 x' │\r\n│ Primitive_Boolean          │    1000    │ '    132 ms' │ '      4 ms' │ '   33.00 x' │\r\n│ Primitive_Null             │    1000    │ '    141 ms' │ '      3 ms' │ '   47.00 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1109 ms' │ '     30 ms' │ '   36.97 x' │\r\n│ Object_Constrained         │    1000    │ '   1200 ms' │ '     24 ms' │ '   50.00 x' │\r\n│ Object_Vector3             │    1000    │ '    379 ms' │ '      9 ms' │ '   42.11 x' │\r\n│ Object_Box3D               │    1000    │ '   1709 ms' │ '     30 ms' │ '   56.97 x' │\r\n│ Tuple_Primitive            │    1000    │ '    456 ms' │ '     14 ms' │ '   32.57 x' │\r\n│ Tuple_Object               │    1000    │ '   1229 ms' │ '     17 ms' │ '   72.29 x' │\r\n│ Composite_Intersect        │    1000    │ '    570 ms' │ '     17 ms' │ '   33.53 x' │\r\n│ Composite_Union            │    1000    │ '    513 ms' │ '     19 ms' │ '   27.00 x' │\r\n│ Math_Vector4               │    1000    │ '    782 ms' │ '     13 ms' │ '   60.15 x' │\r\n│ Math_Matrix4               │    1000    │ '    393 ms' │ '     12 ms' │ '   32.75 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    361 ms' │ '     12 ms' │ '   30.08 x' │\r\n│ Array_Primitive_String     │    1000    │ '    296 ms' │ '      5 ms' │ '   59.20 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    315 ms' │ '      4 ms' │ '   78.75 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1721 ms' │ '     22 ms' │ '   78.23 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1450 ms' │ '     21 ms' │ '   69.05 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    813 ms' │ '     13 ms' │ '   62.54 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1537 ms' │ '     17 ms' │ '   90.41 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    753 ms' │ '     17 ms' │ '   44.29 x' │\r\n│ Array_Composite_Union      │    1000    │ '    808 ms' │ '     16 ms' │ '   50.50 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1118 ms' │ '     16 ms' │ '   69.88 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    690 ms' │ '      9 ms' │ '   76.67 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     24 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     15 ms' │ '     20 ms' │ '     10 ms' │ '    2.00 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     25 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     21 ms' │ '     24 ms' │ '      9 ms' │ '    2.67 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    156 ms' │ '     43 ms' │ '     38 ms' │ '    1.13 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_Null             │  1000000   │ '     20 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '   1055 ms' │ '     32 ms' │ '     24 ms' │ '    1.33 x' │\r\n│ Object_Constrained         │  1000000   │ '   1232 ms' │ '     49 ms' │ '     43 ms' │ '    1.14 x' │\r\n│ Object_Vector3             │  1000000   │ '    432 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\r\n│ Object_Box3D               │  1000000   │ '   1993 ms' │ '     54 ms' │ '     46 ms' │ '    1.17 x' │\r\n│ Object_Recursive           │  1000000   │ '   5115 ms' │ '    342 ms' │ '    159 ms' │ '    2.15 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    156 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Tuple_Object               │  1000000   │ '    740 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    797 ms' │ '     26 ms' │ '     14 ms' │ '    1.86 x' │\r\n│ Composite_Union            │  1000000   │ '    530 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\r\n│ Math_Vector4               │  1000000   │ '    240 ms' │ '     22 ms' │ '     11 ms' │ '    2.00 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1036 ms' │ '     39 ms' │ '     27 ms' │ '    1.44 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    248 ms' │ '     20 ms' │ '     12 ms' │ '    1.67 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    227 ms' │ '     22 ms' │ '     13 ms' │ '    1.69 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    138 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5540 ms' │ '     66 ms' │ '     59 ms' │ '    1.12 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5750 ms' │ '    123 ms' │ '    108 ms' │ '    1.14 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  21842 ms' │ '   1771 ms' │ '    599 ms' │ '    2.96 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    715 ms' │ '     36 ms' │ '     29 ms' │ '    1.24 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3131 ms' │ '     63 ms' │ '     50 ms' │ '    1.26 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3064 ms' │ '     44 ms' │ '     35 ms' │ '    1.26 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2172 ms' │ '     65 ms' │ '     31 ms' │ '    2.10 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1032 ms' │ '     37 ms' │ '     24 ms' │ '    1.54 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4859 ms' │ '    114 ms' │ '     86 ms' │ '    1.33 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '109.3 kb' │ ' 48.5 kb' │  '2.25 x'   │\r\n│ typebox/errors       │ ' 54.8 kb' │ ' 24.9 kb' │  '2.20 x'   │\r\n│ typebox/system       │ ' 12.1 kb' │ '  6.1 kb' │  '1.98 x'   │\r\n│ typebox/type         │ ' 77.8 kb' │ ' 32.8 kb' │  '2.37 x'   │\r\n│ typebox/value        │ '143.7 kb' │ ' 61.2 kb' │  '2.35 x'   │\r\n│ typebox              │ ' 77.9 kb' │ ' 32.8 kb' │  '2.37 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-5","_integrity":"sha512-hxxK7BIb3oSQucvFR5hhAK9PnYiCzPfneQUZu2lnfFAUhVhGlzHyHMdViprGptDWD4qMmrhKcQeGvNByF+Oodg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-5.tgz","_from":"file:sinclair-typebox-0.32.0-dev-5.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-hxxK7BIb3oSQucvFR5hhAK9PnYiCzPfneQUZu2lnfFAUhVhGlzHyHMdViprGptDWD4qMmrhKcQeGvNByF+Oodg==","shasum":"30233fcc92cd02224dd13d39773f35aa7fbe543e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-5.tgz","fileCount":617,"unpackedSize":943013,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDGAcdXN57pJVSAKsTdky/lFU4Z1RtIA7VH5QP0dwPMoQIhAKOCNicknF2yYxdEagFhDskoTjIWZYA08mSVk2VbyzD4"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-5_1701489295395_0.9903728896571504"},"_hasShrinkwrap":false},"0.32.0-dev-6":{"name":"@sinclair/typebox","version":"0.32.0-dev-6","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"types":"./build/types/index.d.ts","module":"./build/import/index.mjs","main":"./build/default/index.js","exports":{".":{"types":"./build/types/index.d.ts","default":"./build/default/index.js","import":"./build/import/index.mjs"},"./compiler":{"types":"./build/types/compiler/index.d.ts","default":"./build/default/compiler/index.js","import":"./build/import/compiler/index.mjs"},"./errors":{"types":"./build/types/errors/index.d.ts","default":"./build/default/errors/index.js","import":"./build/import/errors/index.mjs"},"./system":{"types":"./build/types/system/index.d.ts","default":"./build/default/system/index.js","import":"./build/import/system/index.mjs"},"./type":{"types":"./build/types/type/index.d.ts","default":"./build/default/type/index.js","import":"./build/import/type/index.mjs"},"./value":{"types":"./build/types/value/index.d.ts","default":"./build/default/value/index.js","import":"./build/import/value/index.mjs"}},"_id":"@sinclair/typebox@0.32.0-dev-6","_integrity":"sha512-r/+LRfImMeYuBTgSjFvkyMPKTZj/xOtXitVGMr3WaKVyrRQlvcYIhZcLi31lrpMKP1jbKgsKUulRrRPIpy6FQA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-6.tgz","_from":"file:sinclair-typebox-0.32.0-dev-6.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-r/+LRfImMeYuBTgSjFvkyMPKTZj/xOtXitVGMr3WaKVyrRQlvcYIhZcLi31lrpMKP1jbKgsKUulRrRPIpy6FQA==","shasum":"ddbffc796d9f653887705bfaacbd3fc469e21564","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-6.tgz","fileCount":617,"unpackedSize":942665,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCyT4z5cUXRTy9gZyHjLw4eFQZMxTIKoP2fLjHRwBwNoAIhAPMM9JDD3UIREnlzU2BlAzyyuGI2k3P0p/7kC620U4V/"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-6_1701490428077_0.617708370803159"},"_hasShrinkwrap":false},"0.32.0-dev-7":{"name":"@sinclair/typebox","version":"0.32.0-dev-7","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n#### Npm\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory JSON Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type assertion rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard JSON Schema validation.\r\n\r\nThis library is designed to enable JSON schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Template Literal](#types-templateliteral)\r\n  - [Indexed](#types-indexed)\r\n  - [Rest](#types-rest)\r\n  - [Transform](#types-transform)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Errors](#typesystem-errors)\r\n  - [Policies](#typesystem-policies)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │  true : false               │   type: 'boolean'              │\r\n│   Type.Literal(true),          │                             │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This type will recursively reconstruct interior referenced types.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime conditional types with Extends. This type performs a structural assignability check for the first two arguments and will infer one of the second two arguments based on the result. The Extends type is designed to match the assignability rules of TypeScript conditional types. The conditional derived types Exclude and Extract are also supported.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-templateliteral'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax. TypeBox encodes template literals as regular expression string patterns which enable the template be checked via Json Schema. It also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access Types with Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, TemplateLiteral and Union types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value A is TString.\r\n\r\n```typescript\r\nimport { Type, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst A: unknown = { ... }\r\n\r\nif(TypeGuard.TString(A)) {\r\n\r\n  A.type                                             // A.type = 'string'\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides functionality to define types above and beyond the built-in Json and JavaScript type sets. They also manage TypeBox's localization options (i18n) for error message generation and can control various assertion policies used when type checking. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the TypeSystemErrorFunction to override validation error messages. This can be used to localize errors or create error messages for user defined types.\r\n\r\n```typescript\r\nimport { TypeSystemErrorFunction, ValueErrorType, DefaultErrorFunction } from '@sinclair/typebox/system'\r\n\r\nTypeSystemErrorFunction.Set((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T = { ... }\r\n  x: Type.String(),\r\n  y: Type.Number(),\r\n  z: Type.Boolean()\r\n})\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.0.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    216 ms' │ '      9 ms' │ '   24.00 x' │\r\n│ Literal_Number             │    1000    │ '    169 ms' │ '      7 ms' │ '   24.14 x' │\r\n│ Literal_Boolean            │    1000    │ '    150 ms' │ '      5 ms' │ '   30.00 x' │\r\n│ Primitive_Number           │    1000    │ '    161 ms' │ '      7 ms' │ '   23.00 x' │\r\n│ Primitive_String           │    1000    │ '    148 ms' │ '      6 ms' │ '   24.67 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    185 ms' │ '      9 ms' │ '   20.56 x' │\r\n│ Primitive_Boolean          │    1000    │ '    132 ms' │ '      4 ms' │ '   33.00 x' │\r\n│ Primitive_Null             │    1000    │ '    141 ms' │ '      3 ms' │ '   47.00 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1109 ms' │ '     30 ms' │ '   36.97 x' │\r\n│ Object_Constrained         │    1000    │ '   1200 ms' │ '     24 ms' │ '   50.00 x' │\r\n│ Object_Vector3             │    1000    │ '    379 ms' │ '      9 ms' │ '   42.11 x' │\r\n│ Object_Box3D               │    1000    │ '   1709 ms' │ '     30 ms' │ '   56.97 x' │\r\n│ Tuple_Primitive            │    1000    │ '    456 ms' │ '     14 ms' │ '   32.57 x' │\r\n│ Tuple_Object               │    1000    │ '   1229 ms' │ '     17 ms' │ '   72.29 x' │\r\n│ Composite_Intersect        │    1000    │ '    570 ms' │ '     17 ms' │ '   33.53 x' │\r\n│ Composite_Union            │    1000    │ '    513 ms' │ '     19 ms' │ '   27.00 x' │\r\n│ Math_Vector4               │    1000    │ '    782 ms' │ '     13 ms' │ '   60.15 x' │\r\n│ Math_Matrix4               │    1000    │ '    393 ms' │ '     12 ms' │ '   32.75 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    361 ms' │ '     12 ms' │ '   30.08 x' │\r\n│ Array_Primitive_String     │    1000    │ '    296 ms' │ '      5 ms' │ '   59.20 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    315 ms' │ '      4 ms' │ '   78.75 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1721 ms' │ '     22 ms' │ '   78.23 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1450 ms' │ '     21 ms' │ '   69.05 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    813 ms' │ '     13 ms' │ '   62.54 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1537 ms' │ '     17 ms' │ '   90.41 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    753 ms' │ '     17 ms' │ '   44.29 x' │\r\n│ Array_Composite_Union      │    1000    │ '    808 ms' │ '     16 ms' │ '   50.50 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1118 ms' │ '     16 ms' │ '   69.88 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    690 ms' │ '      9 ms' │ '   76.67 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     24 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     15 ms' │ '     20 ms' │ '     10 ms' │ '    2.00 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     25 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     21 ms' │ '     24 ms' │ '      9 ms' │ '    2.67 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    156 ms' │ '     43 ms' │ '     38 ms' │ '    1.13 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_Null             │  1000000   │ '     20 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '   1055 ms' │ '     32 ms' │ '     24 ms' │ '    1.33 x' │\r\n│ Object_Constrained         │  1000000   │ '   1232 ms' │ '     49 ms' │ '     43 ms' │ '    1.14 x' │\r\n│ Object_Vector3             │  1000000   │ '    432 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\r\n│ Object_Box3D               │  1000000   │ '   1993 ms' │ '     54 ms' │ '     46 ms' │ '    1.17 x' │\r\n│ Object_Recursive           │  1000000   │ '   5115 ms' │ '    342 ms' │ '    159 ms' │ '    2.15 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    156 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Tuple_Object               │  1000000   │ '    740 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    797 ms' │ '     26 ms' │ '     14 ms' │ '    1.86 x' │\r\n│ Composite_Union            │  1000000   │ '    530 ms' │ '     23 ms' │ '     13 ms' │ '    1.77 x' │\r\n│ Math_Vector4               │  1000000   │ '    240 ms' │ '     22 ms' │ '     11 ms' │ '    2.00 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1036 ms' │ '     39 ms' │ '     27 ms' │ '    1.44 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    248 ms' │ '     20 ms' │ '     12 ms' │ '    1.67 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    227 ms' │ '     22 ms' │ '     13 ms' │ '    1.69 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    138 ms' │ '     21 ms' │ '     13 ms' │ '    1.62 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5540 ms' │ '     66 ms' │ '     59 ms' │ '    1.12 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5750 ms' │ '    123 ms' │ '    108 ms' │ '    1.14 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  21842 ms' │ '   1771 ms' │ '    599 ms' │ '    2.96 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    715 ms' │ '     36 ms' │ '     29 ms' │ '    1.24 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3131 ms' │ '     63 ms' │ '     50 ms' │ '    1.26 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3064 ms' │ '     44 ms' │ '     35 ms' │ '    1.26 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2172 ms' │ '     65 ms' │ '     31 ms' │ '    2.10 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1032 ms' │ '     37 ms' │ '     24 ms' │ '    1.54 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4859 ms' │ '    114 ms' │ '     86 ms' │ '    1.33 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '109.3 kb' │ ' 48.5 kb' │  '2.25 x'   │\r\n│ typebox/errors       │ ' 54.8 kb' │ ' 24.9 kb' │  '2.20 x'   │\r\n│ typebox/system       │ ' 12.1 kb' │ '  6.1 kb' │  '1.98 x'   │\r\n│ typebox/type         │ ' 77.8 kb' │ ' 32.8 kb' │  '2.37 x'   │\r\n│ typebox/value        │ '143.7 kb' │ ' 61.2 kb' │  '2.35 x'   │\r\n│ typebox              │ ' 77.9 kb' │ ' 32.8 kb' │  '2.37 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-7","_integrity":"sha512-kXQqjqc6Gqg3tlekvD4WDV5uMX60qU4RDvYnnLhwnQ5LizfsnepGNk2SEMKjA7yrBczJTHheNLv3+ZHxle4f9g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-7.tgz","_from":"file:sinclair-typebox-0.32.0-dev-7.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-kXQqjqc6Gqg3tlekvD4WDV5uMX60qU4RDvYnnLhwnQ5LizfsnepGNk2SEMKjA7yrBczJTHheNLv3+ZHxle4f9g==","shasum":"9be1c821f0ddcfbddf150db8c37c66cc09dfa93f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-7.tgz","fileCount":820,"unpackedSize":1077020,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIElKSTmywbTvX9ey7SebQ7AN7jXucrESW0T9RhWJvWdRAiEAhuMiQwtjkpUtFYMfwZbw2wN95Bqybz5eLN+4tp5Cj3g="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-7_1701497420636_0.07099781757081036"},"_hasShrinkwrap":false},"0.32.0-dev-8":{"name":"@sinclair/typebox","version":"0.32.0-dev-8","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"_id":"@sinclair/typebox@0.32.0-dev-8","_integrity":"sha512-KdEUKCaVC8cWVOEx+GYxQbwe/SrfeLoY7dmSSVtmw6ddDkl+InwT3kPlHziNzHhOetyzDiV7isFekiXWUzj19Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-8.tgz","_from":"file:sinclair-typebox-0.32.0-dev-8.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-KdEUKCaVC8cWVOEx+GYxQbwe/SrfeLoY7dmSSVtmw6ddDkl+InwT3kPlHziNzHhOetyzDiV7isFekiXWUzj19Q==","shasum":"0de661481d98eeac1f2128c3ef9eb8c10c254b97","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-8.tgz","fileCount":820,"unpackedSize":1077060,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD9vUk7E+/R27oo7w0g+mLb2jirY/WHH7BTRVNKdXBsAQIhANIUpVxwu4GhJgPnWhVinUoH91B7zlBF2hP/nq0DxcA9"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-8_1701498329852_0.5090859952407734"},"_hasShrinkwrap":false},"0.32.0-dev-9":{"name":"@sinclair/typebox","version":"0.32.0-dev-9","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"_id":"@sinclair/typebox@0.32.0-dev-9","_integrity":"sha512-8bewiPy/yWFu7y2BIM4RCgOdaMd7Ei7bGxVMcTeeVMijbS1DNzMDqgbL6pVKVWcYtFXnqc5yiAQdMJ7MtT7qOg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-9.tgz","_from":"file:sinclair-typebox-0.32.0-dev-9.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-8bewiPy/yWFu7y2BIM4RCgOdaMd7Ei7bGxVMcTeeVMijbS1DNzMDqgbL6pVKVWcYtFXnqc5yiAQdMJ7MtT7qOg==","shasum":"54f1c18407d418a71e5189c6bc8b2a2b9ccc450a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-9.tgz","fileCount":820,"unpackedSize":1076435,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDCW213i3rfY/sIeZYHRxmU3gMPy9fTuGPYVK1k8e0SJgIgWkkLWYkkaRImtFbJNAKpMC0u+WCxskFWliclyUs5uZg="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-9_1701508003148_0.8089861599615353"},"_hasShrinkwrap":false},"0.32.0-dev-10":{"name":"@sinclair/typebox","version":"0.32.0-dev-10","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"_id":"@sinclair/typebox@0.32.0-dev-10","_integrity":"sha512-FYb+t0IhNIBRPLlK7OSm7kWJjuku7cMpkKyG9GVVgd57fDiBBzwxIS1v1lYCu3E/+t28CAupvIwbnlpIAC3H1Q==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-10.tgz","_from":"file:sinclair-typebox-0.32.0-dev-10.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-FYb+t0IhNIBRPLlK7OSm7kWJjuku7cMpkKyG9GVVgd57fDiBBzwxIS1v1lYCu3E/+t28CAupvIwbnlpIAC3H1Q==","shasum":"ec8744d9029cfa7000acf32d35c97aa74b458099","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-10.tgz","fileCount":820,"unpackedSize":1076496,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDeh8Oi3xR2pcrimdcbNFpTTZl8edt2IFWEruk9FdlpRgIhAM1Km/Uz2i+zkfpmhNbM/3DpJZ+ePMxHZrXMZU8hjf88"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-10_1701508816106_0.8616030386948672"},"_hasShrinkwrap":false},"0.32.0-dev-11":{"name":"@sinclair/typebox","version":"0.32.0-dev-11","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"_id":"@sinclair/typebox@0.32.0-dev-11","_integrity":"sha512-qNU9nI/7qGkNREpp1PGq2Pv5GNdOhOFRF548U4HqUBoIdCKnen3vUbesGjtcMoLe3P6tbrWU0gNXb52PtfB7Xw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-11.tgz","_from":"file:sinclair-typebox-0.32.0-dev-11.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-qNU9nI/7qGkNREpp1PGq2Pv5GNdOhOFRF548U4HqUBoIdCKnen3vUbesGjtcMoLe3P6tbrWU0gNXb52PtfB7Xw==","shasum":"55244d6d1cdec3b42b2d483460b5c2f025348857","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-11.tgz","fileCount":820,"unpackedSize":1077098,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICL5u0uJMmw5VoPEXq7Zc4gwd/OlSu77+RHVl9KK3pAkAiEAhKXA3bISWSbj8GIbce2Jq7nzPP2qcf1doOJPtoSEqOg="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-11_1701524144522_0.8767059968626214"},"_hasShrinkwrap":false},"0.32.0-dev-12":{"name":"@sinclair/typebox","version":"0.32.0-dev-12","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"_id":"@sinclair/typebox@0.32.0-dev-12","_integrity":"sha512-JpW4q+5kErpuBSK9XFNxaIC0OXJtK2e1zlgLyrgSzRhSSVl92gcL9I9GdQRiR+PWWYH4Trfz03t3Kp9H6t0/mw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-12.tgz","_from":"file:sinclair-typebox-0.32.0-dev-12.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-JpW4q+5kErpuBSK9XFNxaIC0OXJtK2e1zlgLyrgSzRhSSVl92gcL9I9GdQRiR+PWWYH4Trfz03t3Kp9H6t0/mw==","shasum":"040168caf430bc4bef3f629c4cc9d246d8c2b713","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-12.tgz","fileCount":828,"unpackedSize":1109496,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFdXO0eo+3jHCcUsqysK4VVAkMSENPmG52o27he+MXH7AiBtfiONrX61JxoK/KfngKa0n0zNjkrmTv4b+n0gY37Q6w=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-12_1701617086836_0.42992935497086693"},"_hasShrinkwrap":false},"0.32.0-dev-13":{"name":"@sinclair/typebox","version":"0.32.0-dev-13","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"_id":"@sinclair/typebox@0.32.0-dev-13","_integrity":"sha512-mY04jGlpuzF6rLoGs3ypVVoH48881HeOaoP2V2YBPdzwlktYcYRCjEBwO3bqYM+AhcAqL8E29E6cyhdUdhebHw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-13.tgz","_from":"file:sinclair-typebox-0.32.0-dev-13.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-mY04jGlpuzF6rLoGs3ypVVoH48881HeOaoP2V2YBPdzwlktYcYRCjEBwO3bqYM+AhcAqL8E29E6cyhdUdhebHw==","shasum":"c1b163a73ac7b7933bd09e60f10ac6150d75de4e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-13.tgz","fileCount":864,"unpackedSize":1134788,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDkNC10A99gJkD+ZznLzolV1O86iy4Y6zb+KU6Gf9f0dQIhAN0ymqpZ+d0dqDfmWno1nSwelgY7pLJvNx23bb88Zy1p"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-13_1701678614384_0.07321368713450904"},"_hasShrinkwrap":false},"0.32.0-dev-14":{"name":"@sinclair/typebox","version":"0.32.0-dev-14","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":"sinclairzx81","license":"MIT","repository":{"type":"git","url":"https://github.com/sinclairzx81/typebox"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"_id":"@sinclair/typebox@0.32.0-dev-14","_integrity":"sha512-qY/dg4OCxbkNl/5AWgzsC3FlqsUV3FpPwvUzQzayjfMPFf0Z9GHTlS78Tc8ua/Xxy+c4CS8jm+Jtols4h36b7A==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-14.tgz","_from":"file:sinclair-typebox-0.32.0-dev-14.tgz","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","dist":{"integrity":"sha512-qY/dg4OCxbkNl/5AWgzsC3FlqsUV3FpPwvUzQzayjfMPFf0Z9GHTlS78Tc8ua/Xxy+c4CS8jm+Jtols4h36b7A==","shasum":"d94de0600e5f3461ae8bdf041317e4e4d2ad5647","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-14.tgz","fileCount":864,"unpackedSize":1135898,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAoMUSRDoo49EgmIaZ53BoTSvii2cDA2bIOgEymvjVkHAiEA2nueajVh0xnHDo9li6dCRHCtNGndFJQ4iG/JIh9uVlA="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-14_1701786126823_0.6916619598532394"},"_hasShrinkwrap":false},"0.32.0-dev-15":{"name":"@sinclair/typebox","version":"0.32.0-dev-15","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n#### Npm\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Modular](#types-modular)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Template Literal](#types-templateliteral)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modular'></a>\r\n\r\n### Modular Types\r\n\r\nTypeBox implements a modular type system. The following imports the full type system (recommended)\r\n\r\n```typescript\r\nimport { Type } from '@sinclair/typebox'             // 36.5 kb minified\r\n```\r\nThe following imports types individually which enables modern bundlers to optimize bundle sizes via tree shaking.\r\n```typescript\r\nimport { Object, Number } from '@sinclair/typebox'   // 6.4 kb minified\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts a union of property keys as the first argument, and a type mapping function which accepts each key (`K`) as the second. This type can be used with Conditional and Indexed Access types to allow for generalized property remapping irrespective of property type. The following example remaps each property of `T` to be `T[K] | null`.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = {\r\n  return Type.Union([                                //   [K in keyof T]: T[K] | null\r\n    Type.Index(T, K),                                // }\r\n    Type.Null()                                      //\r\n  ])                                                 // ... runtime mapped as\r\n})                                                   //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TUnion<[TNumber, TNull]>,\r\n                                                     //   y: TUnion<[TString, TNull]>,\r\n                                                     //   z: TUnion<[TBoolean, TNull]>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-templateliteral'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports Template Literal types with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript Template Literal syntax. TypeBox encodes Template Literals as regular expression string patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value A is TString.\r\n\r\n```typescript\r\nimport { Type, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst A: unknown = { ... }\r\n\r\nif(TypeGuard.TString(A)) {\r\n\r\n  A.type                                             // A.type = 'string'\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.3 kb' │ ' 52.4 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.0 kb' │ ' 61.5 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.0 kb' │ ' 36.5 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-15","_integrity":"sha512-6qOG/AGmazd6CtkoHxhZiQn/VxBjfQZV2n3tyuokemCLfjOLPiFLhA1IKK6VHaFLnodTYw2O6+hg70au0JY+sA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-15.tgz","_from":"file:sinclair-typebox-0.32.0-dev-15.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-6qOG/AGmazd6CtkoHxhZiQn/VxBjfQZV2n3tyuokemCLfjOLPiFLhA1IKK6VHaFLnodTYw2O6+hg70au0JY+sA==","shasum":"57f446458f6805723b6e39de39021203f6193080","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-15.tgz","fileCount":884,"unpackedSize":1160297,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5w/QGrDZCLp0aByouvE2TNF8c1ExAHj5eCCRxp6AMzgIgE8zJ7wzcyDMTuPduBQpiLk0Ue90l9VRXVKgv/OTacL0="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-15_1701870711300_0.9724360760426025"},"_hasShrinkwrap":false},"0.32.0-dev-16":{"name":"@sinclair/typebox","version":"0.32.0-dev-16","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n#### Npm\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Modules](#types-modules)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Template Literal](#types-templateliteral)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modules'></a>\r\n\r\n### Type Modules\r\n\r\nTypeBox uses a modular type system and supports selective type imports. Using selective imports can be useful in resource constrained environments as the technique allows modern bundlers to tree shake unused types. This can reduce overall bundle sizes.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Object({                                   // const T: TObject<{\r\n  x: Number(),                                       //  x: TNumber,\r\n  y: String(),                                       //  y: TString,\r\n  z: Boolean()                                       //  z: TBoolean\r\n})                                                   // }>\r\n\r\ntype T = Static<typeof T>                            // type T = { \r\n                                                     //   x: number, \r\n                                                     //   y: string, \r\n                                                     //   z: boolean \r\n                                                     // }\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts a union of property keys as the first argument, and a type mapping function which accepts each key (`K`) as the second. This type can be used with Conditional and Indexed Access types to allow for generalized property remapping irrespective of property type. The following example remaps each property of `T` to be `T[K] | null`.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = {\r\n  return Type.Union([                                //   [K in keyof T]: T[K] | null\r\n    Type.Index(T, K),                                // }\r\n    Type.Null()                                      //\r\n  ])                                                 // ... runtime mapped as\r\n})                                                   //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TUnion<[TNumber, TNull]>,\r\n                                                     //   y: TUnion<[TString, TNull]>,\r\n                                                     //   z: TUnion<[TBoolean, TNull]>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-templateliteral'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literals with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expression patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value A is TString.\r\n\r\n```typescript\r\nimport { Type, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst A: unknown = { ... }\r\n\r\nif(TypeGuard.TString(A)) {\r\n\r\n  A.type                                             // A.type = 'string'\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.7 kb' │ ' 52.5 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.8 kb' │ ' 61.8 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.7 kb' │ ' 36.7 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-16","_integrity":"sha512-2ZU4e0Jy9r4+yN//XduC/JhijPM7XxUfsYxrw+t5DJfIGTqceLLBDYGmWE0hsRsP0APU+uyFwwqTRHxCElsoFA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-16.tgz","_from":"file:sinclair-typebox-0.32.0-dev-16.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-2ZU4e0Jy9r4+yN//XduC/JhijPM7XxUfsYxrw+t5DJfIGTqceLLBDYGmWE0hsRsP0APU+uyFwwqTRHxCElsoFA==","shasum":"39a096eef89dc0beddc077d0dc11527c4d494eda","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-16.tgz","fileCount":908,"unpackedSize":1175228,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHH03/iWsTdCB0teenFH+WtBmPV/J0XTcSJB+SLBGi2uAiBuveCTr+cSNJa4PQudoFNg0s9s8gIIYgyneMtDz4S95g=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-16_1701934907703_0.14809380003578898"},"_hasShrinkwrap":false},"0.32.0-dev-17":{"name":"@sinclair/typebox","version":"0.32.0-dev-17","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Modules](#types-modules)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Template Literal](#types-templateliteral)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modules'></a>\r\n\r\n### Modules\r\n\r\nTypeBox has a modular type system that supports selective type imports. Using selective imports can be useful in resource constrained environments as the technique enables modern bundlers to tree shake unused code leading to reduced bundle sizes. The following selectively imports a few types.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Object({                                   // const T: TObject<{\r\n  x: Number(),                                       //  x: TNumber,\r\n  y: String(),                                       //  y: TString,\r\n  z: Boolean()                                       //  z: TBoolean\r\n})                                                   // }>\r\n\r\ntype T = Static<typeof T>                            // type T = { \r\n                                                     //   x: number, \r\n                                                     //   y: string, \r\n                                                     //   z: boolean \r\n                                                     // }\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts a union of property keys as the first argument, and a type mapping function which accepts each key (`K`) as the second. This type can be used with Conditional and Indexed Access types to allow for generalized property remapping irrespective of property type. The following example remaps each property of `T` to be `T[K] | null`.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = {\r\n  return Type.Union([                                //   [K in keyof T]: T[K] | null\r\n    Type.Index(T, K),                                // }\r\n    Type.Null()                                      //\r\n  ])                                                 // ... runtime mapped as\r\n})                                                   //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TUnion<[TNumber, TNull]>,\r\n                                                     //   y: TUnion<[TString, TNull]>,\r\n                                                     //   z: TUnion<[TBoolean, TNull]>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-templateliteral'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literals with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expression patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value A is TString.\r\n\r\n```typescript\r\nimport { Type, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst A: unknown = { ... }\r\n\r\nif(TypeGuard.TString(A)) {\r\n\r\n  A.type                                             // A.type = 'string'\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/compile.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types. You can review this benchmark [here](https://github.com/sinclairzx81/typebox/blob/master/build/benchmark/measurement/module/check.ts).\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.7 kb' │ ' 52.5 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.8 kb' │ ' 61.8 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.7 kb' │ ' 36.7 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-17","_integrity":"sha512-OmvOC9TKFsGD7m+v+M23PQ4jsbodzFtIsjeGYQYx902kyDwiUbuomKrQ+ANs1Y/5elDQ+Q85DeDdBsvMIopfkg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-17.tgz","_from":"file:sinclair-typebox-0.32.0-dev-17.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-OmvOC9TKFsGD7m+v+M23PQ4jsbodzFtIsjeGYQYx902kyDwiUbuomKrQ+ANs1Y/5elDQ+Q85DeDdBsvMIopfkg==","shasum":"c078255189ca290eab7207b0deb79bcb4c878b07","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-17.tgz","fileCount":908,"unpackedSize":1923646,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBWqQge8Kk8beC+n09S23s8wVRll2HdhQW+y1wYtkXpDAiBs+wWUwFPJTpMMG6x2V5iObJEQWfQxJvNW7I0+0JlmHQ=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-17_1701938116742_0.8082912823199455"},"_hasShrinkwrap":false},"0.32.0-dev-18":{"name":"@sinclair/typebox","version":"0.32.0-dev-18","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Modules](#types-modules)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Template Literal](#types-templateliteral)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modules'></a>\r\n\r\n### Modules\r\n\r\nTypeBox has a modular type system that supports selective type imports. Using selective imports can be useful in resource constrained environments as the technique enables modern bundlers to tree shake unused code leading to reduced bundle sizes. The following selectively imports a few types.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Object({                                   // const T: TObject<{\r\n  x: Number(),                                       //  x: TNumber,\r\n  y: String(),                                       //  y: TString,\r\n  z: Boolean()                                       //  z: TBoolean\r\n})                                                   // }>\r\n\r\ntype T = Static<typeof T>                            // type T = { \r\n                                                     //   x: number, \r\n                                                     //   y: string, \r\n                                                     //   z: boolean \r\n                                                     // }\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts a union of property keys as the first argument, and a type mapping function which accepts each key (`K`) as the second. This type can be used with Conditional and Indexed Access types to allow for generalized property remapping irrespective of property type. The following example remaps each property of `T` to be `T[K] | null`.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = {\r\n  return Type.Union([                                //   [K in keyof T]: T[K] | null\r\n    Type.Index(T, K),                                // }\r\n    Type.Null()                                      //\r\n  ])                                                 // ... runtime mapped as\r\n})                                                   //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TUnion<[TNumber, TNull]>,\r\n                                                     //   y: TUnion<[TString, TNull]>,\r\n                                                     //   z: TUnion<[TBoolean, TNull]>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-templateliteral'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literals with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expression patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value A is TString.\r\n\r\n```typescript\r\nimport { Type, TypeGuard } from '@sinclair/typebox'\r\n\r\nconst A: unknown = { ... }\r\n\r\nif(TypeGuard.TString(A)) {\r\n\r\n  A.type                                             // A.type = 'string'\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.7 kb' │ ' 52.5 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.8 kb' │ ' 61.8 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.7 kb' │ ' 36.7 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-18","_integrity":"sha512-xf4IZEwDLDkEfqtQsTU8PN2mB2O7YqwtFGYGEVWkao0oaEXkGtsnvRyo9eGxwW2urFR93UcaA90v9fOksUNeJA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-18.tgz","_from":"file:sinclair-typebox-0.32.0-dev-18.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-xf4IZEwDLDkEfqtQsTU8PN2mB2O7YqwtFGYGEVWkao0oaEXkGtsnvRyo9eGxwW2urFR93UcaA90v9fOksUNeJA==","shasum":"97b8373b4b49180dad74c576d48f0165e3dadf2b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-18.tgz","fileCount":904,"unpackedSize":1335918,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHeg/1OKI3D6vS95BJNGqnoowHFqtPZI0NZS1XB6mBcAAiArDqIq6/VlY9l/VzkP3YWyyuxK+lruNpgEjyEyFFSvJw=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-18_1702022672297_0.022591453628886482"},"_hasShrinkwrap":false},"0.32.0-dev-19":{"name":"@sinclair/typebox","version":"0.32.0-dev-19","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Modules](#types-modules)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Template Literal](#types-templateliteral)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modules'></a>\r\n\r\n### Modules\r\n\r\nTypeBox has a modular type system that supports selective type imports. Using selective imports can be useful in resource constrained environments as the technique enables modern bundlers to tree shake unused code leading to reduced bundle sizes. The following selectively imports a few types.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Object({                                   // const T: TObject<{\r\n  x: Number(),                                       //  x: TNumber,\r\n  y: String(),                                       //  y: TString,\r\n  z: Boolean()                                       //  z: TBoolean\r\n})                                                   // }>\r\n\r\ntype T = Static<typeof T>                            // type T = { \r\n                                                     //   x: number, \r\n                                                     //   y: string, \r\n                                                     //   z: boolean \r\n                                                     // }\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts a union of property keys as the first argument, and a type mapping function which accepts each key (`K`) as the second. This type can be used with Conditional and Indexed Access types to allow for generalized property remapping irrespective of property type. The following example remaps each property of `T` to be `T[K] | null`.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = {\r\n  return Type.Union([                                //   [K in keyof T]: T[K] | null\r\n    Type.Index(T, K),                                // }\r\n    Type.Null()                                      //\r\n  ])                                                 // ... runtime mapped as\r\n})                                                   //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TUnion<[TNumber, TNull]>,\r\n                                                     //   y: TUnion<[TString, TNull]>,\r\n                                                     //   z: TUnion<[TBoolean, TNull]>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-templateliteral'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literals with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expression patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T: unknown = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.7 kb' │ ' 52.5 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.8 kb' │ ' 61.8 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.7 kb' │ ' 36.7 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-19","_integrity":"sha512-7euPCdhmlAVMl7ocKJGRf8OCtnG4p60F14rGiK1pynf4KSwAfYHrztonXzFYFv+KGzPqsNvhBYX61nSDtTUjTQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-19.tgz","_from":"file:sinclair-typebox-0.32.0-dev-19.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-7euPCdhmlAVMl7ocKJGRf8OCtnG4p60F14rGiK1pynf4KSwAfYHrztonXzFYFv+KGzPqsNvhBYX61nSDtTUjTQ==","shasum":"d9e6b34abf618799491e815029f26efe450ab5aa","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-19.tgz","fileCount":904,"unpackedSize":1338832,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDm9y/LWCSNmef9ZXU3uGgL8uAHywBHFoUKwuhIOLb4KQIgD2+pGBxA2BqHwYNaWFwsL3zMPsQyok/Hy8HW1RXfykE="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-19_1702030362425_0.5497631686403808"},"_hasShrinkwrap":false},"0.32.0-dev-20":{"name":"@sinclair/typebox","version":"0.32.0-dev-20","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that can be statically inferred as TypeScript types. The schemas produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox enables one to create a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to compose with the same flexibility as TypeScript's type system. It can be used as a simple tool to build up complex schemas or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Modules](#types-modules)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Template Literal](#types-templateliteral)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modules'></a>\r\n\r\n### Modules\r\n\r\nTypeBox supports a modular type system that allows for selective type imports. Using selective imports can be helpful in resource constrained environments as it enables modern bundlers to tree shake unused types, this leading to reduced bundle sizes.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Object({                                   // const T: TObject<{\r\n  x: Number(),                                       //  x: TNumber,\r\n  y: String(),                                       //  y: TString,\r\n  z: Boolean()                                       //  z: TBoolean\r\n})                                                   // }>\r\n\r\ntype T = Static<typeof T>                            // type T = { \r\n                                                     //   x: number, \r\n                                                     //   y: string, \r\n                                                     //   z: boolean \r\n                                                     // }\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts a union of property keys as the first argument, and a type mapping function which accepts a distributive key (`K`) as the second. The following remaps each property of `T` to be optional.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = {\r\n  return Type.Optional(Type.Index(T, K))             //   [K in keyof T]?: T[K]\r\n})                                                   // }\r\n                                                     //\r\n                                                     // ... runtime mapped as\r\n                                                     //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-templateliteral'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literals with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expression patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T: unknown = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Kind]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Kind]: 'String',\r\n                                                     //       [Optional]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.7 kb' │ ' 52.5 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.8 kb' │ ' 61.8 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.7 kb' │ ' 36.7 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-20","_integrity":"sha512-mwP83V9TA+aIBfpkCyM4EVYlOic5Y1BvcQEy/NEgCXzu6jPPoqLZbSDLA5mqQ251xpGoJU9ZgVoxLoozFUhXeg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-20.tgz","_from":"file:sinclair-typebox-0.32.0-dev-20.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-mwP83V9TA+aIBfpkCyM4EVYlOic5Y1BvcQEy/NEgCXzu6jPPoqLZbSDLA5mqQ251xpGoJU9ZgVoxLoozFUhXeg==","shasum":"11d3eba86a2f02bff8255f319980f4eaab517088","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-20.tgz","fileCount":912,"unpackedSize":1355443,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCbn/BzznFcRlJMD4iS/F/15WyAwVkgvVu2GIYxPKmStwIgHYcmKbMh2pjKnSC+1zjHK5AR7BwUZrmHzE6PIc9T41E="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-20_1702049584265_0.2553132108844789"},"_hasShrinkwrap":false},"0.32.0-dev-21":{"name":"@sinclair/typebox","version":"0.32.0-dev-21","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The Json Schema produced by this library is designed to match the static type checking rules of the TypeScript compiler. TypeBox provides a unified type that can be statically checked by the TypeScript compiler and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to be created with the same expressiveness as TypeScript's type system. It can be used either as a simple tool to build up complex schematics or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Modules](#types-modules)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modules'></a>\r\n\r\n### Modules\r\n\r\nTypeBox supports a modular type system that allows for selective type imports. Using selective imports can be helpful in resource constrained environments as it enables modern bundlers to tree shake unused types. This can lead to reduced bundle sizes.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Object({                                   // const T: TObject<{\r\n  x: Number(),                                       //  x: TNumber,\r\n  y: String(),                                       //  y: TString,\r\n  z: Boolean()                                       //  z: TBoolean\r\n})                                                   // }>\r\n\r\ntype T = Static<typeof T>                            // type T = { \r\n                                                     //   x: number, \r\n                                                     //   y: string, \r\n                                                     //   z: boolean \r\n                                                     // }\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literals with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expression patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts two arguments, the first a union of literal keys and the second a type mapping function which receives a mapping key `K`. The following remaps the type `T` to be `Partial<T>` using type mapping.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = { [K in keyof T]?: T[K] }\r\n  return Type.Optional(Type.Index(T, K))             //\r\n})                                                   // \r\n                                                     \r\n                                                     // ... runtime mapped as\r\n                                                     //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T: unknown = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Symbol(TypeBox.Kind)]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Symbol(TypeBox.Kind)]: 'String',\r\n                                                     //       [Symbol(TypeBox.Optional)]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.7 kb' │ ' 52.5 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.8 kb' │ ' 61.8 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.7 kb' │ ' 36.7 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-21","_integrity":"sha512-9UwbKjIIxp05SlEQV+ba3A6lUy1SsXd2neL46YUgdw2gks1vXfzzsPEdntTjIaxFLPDyO3GGU8xte1bjnVXVZg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-21.tgz","_from":"file:sinclair-typebox-0.32.0-dev-21.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-9UwbKjIIxp05SlEQV+ba3A6lUy1SsXd2neL46YUgdw2gks1vXfzzsPEdntTjIaxFLPDyO3GGU8xte1bjnVXVZg==","shasum":"16578f9373a2f4da1ae3bf3f6a5803be087be90c","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-21.tgz","fileCount":912,"unpackedSize":1361635,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD2DQ/1v69PtR632iwql0qpHPEQ16j91Dnh1NCBlDztuAIgZrXt9/0L6UTT9l1b4yRCMSf7nhn6ImROs1lmbZRS0iA="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-21_1702183933100_0.8610675907485126"},"_hasShrinkwrap":false},"0.32.0-dev-22":{"name":"@sinclair/typebox","version":"0.32.0-dev-22","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The Json Schema produced by this library is designed to match the static type checking rules of the TypeScript compiler. TypeBox provides a unified type that can be statically checked by the TypeScript compiler and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to be created with the same expressiveness as TypeScript's type system. It can be used either as a simple tool to build up complex schematics or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Modules](#types-modules)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modules'></a>\r\n\r\n### Modules\r\n\r\nTypeBox supports a modular type system that allows for selective type imports. Using selective imports can be helpful in resource constrained environments as it enables modern bundlers to tree shake unused types. This can lead to reduced bundle sizes.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Object({                                   // const T: TObject<{\r\n  x: Number(),                                       //  x: TNumber,\r\n  y: String(),                                       //  y: TString,\r\n  z: Boolean()                                       //  z: TBoolean\r\n})                                                   // }>\r\n\r\ntype T = Static<typeof T>                            // type T = { \r\n                                                     //   x: number, \r\n                                                     //   y: string, \r\n                                                     //   z: boolean \r\n                                                     // }\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literals with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expression patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts two arguments, the first a union of literal keys and the second a type mapping function which receives a mapping key `K`. The following remaps the type `T` to be `Partial<T>` using type mapping.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = { [K in keyof T]?: T[K] }\r\n  return Type.Optional(Type.Index(T, K))             //\r\n})                                                   // \r\n                                                     \r\n                                                     // ... runtime mapped as\r\n                                                     //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T: unknown = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Symbol(TypeBox.Kind)]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Symbol(TypeBox.Kind)]: 'String',\r\n                                                     //       [Symbol(TypeBox.Optional)]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.7 kb' │ ' 52.5 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.8 kb' │ ' 61.8 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.7 kb' │ ' 36.7 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-22","_integrity":"sha512-fYL6U/77HUyDSeXo+LAlIxAM6kcAmdxeEzCBUURXnmQatP9HugEK5MfvE7KfpuJ6FI+xtvLy9ny6IjniRKvXpg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-22.tgz","_from":"file:sinclair-typebox-0.32.0-dev-22.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-fYL6U/77HUyDSeXo+LAlIxAM6kcAmdxeEzCBUURXnmQatP9HugEK5MfvE7KfpuJ6FI+xtvLy9ny6IjniRKvXpg==","shasum":"f00f0b2c7d68de5beb01c8881783f914a0136b79","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-22.tgz","fileCount":904,"unpackedSize":1337064,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCUwdGisL2xcLR2f0SE5SG4dwOzPwdsW++1Hnr7TXEPrgIhAO9mPJRDhQPeAEVidHvuvER3fX4lfAGX+x5kCdpCqdu/"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-22_1702217724193_0.03962458512595357"},"_hasShrinkwrap":false},"0.32.0-dev-23":{"name":"@sinclair/typebox","version":"0.32.0-dev-23","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The Json Schema produced by this library is designed to match the static type checking rules of the TypeScript compiler. TypeBox provides a unified type that can be statically checked by the TypeScript compiler and runtime asserted using standard Json Schema validation.\r\n\r\nThis library enables Json Schema to be created with the same expressiveness as TypeScript's type system. It can be used either as a simple tool to build up complex schematics or integrated into REST or RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Modules](#types-modules)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Conditional](#types-conditional)\r\n  - [Mapped](#types-mapped)\r\n  - [Indexed](#types-indexed)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-modules'></a>\r\n\r\n### Modules\r\n\r\nTypeBox supports a modular type system that allows for selective type imports. Using selective imports can be helpful in resource constrained environments as it enables modern bundlers to tree shake unused types. This can lead to reduced bundle sizes.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Object({                                   // const T: TObject<{\r\n  x: Number(),                                       //  x: TNumber,\r\n  y: String(),                                       //  y: TString,\r\n  z: Boolean()                                       //  z: TBoolean\r\n})                                                   // }>\r\n\r\ntype T = Static<typeof T>                            // type T = { \r\n                                                     //   x: number, \r\n                                                     //   y: string, \r\n                                                     //   z: boolean \r\n                                                     // }\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with generic functions. All types extend the base type TSchema. It is common to constrain generic function arguments to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(t: T) => Type.Object({ x: t, y: t, z: t })\r\n\r\nconst NumberVector = Vector(Type.Number())           // const NumberVector = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['x', 'y', 'z'],\r\n                                                     //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype NumberVector = Static<typeof NumberVector>      // type NumberVector = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\nGeneric types are often used to create aliases for more complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Type.Ref. These types infer the same as the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Type.Deref to dereference a type. This will replace any `$ref` with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\n\r\n```\r\nNote that reference types do not contain structural information about the type they're referencing. This means they cannot be used directly with some type mapping types (such as Partial) that require structural information to operate. For applications that need mapping on references, use Type.Deref to dereference the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports singular recursive data structures. Recursive type inference is also supported. The following creates a recursive Node data structure.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literals with Type.TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expression patterns which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing, enabling template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime Conditional types with Type.Extends. This type runs a structural assignability check against the first and second arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\n\r\ntype T = string extends number ? true : false        // type T = false\r\n\r\nconst T = Type.Extends(                              // const T: TLiteral<false>\r\n  Type.String(), \r\n  Type.Number(), \r\n  Type.Literal(true), \r\n  Type.Literal(false)\r\n)\r\n\r\n// Extract\r\n\r\ntype T = Extract<1 | 2 | 3, 1>                       // type T = 1\r\n\r\nconst T = Type.Extract(                              // const T: TLiteral<1> \r\n  Type.Union([\r\n    Type.Literal(1),\r\n    Type.Literal(2), \r\n    Type.Literal(3) \r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\n\r\ntype T = Exclude<1 | 2 | 3, 1>                       // type T = 2 | 3\r\n\r\nconst T = Type.Exclude(                              // const T: TUnion<[\r\n  Type.Union([                                       //   TLiteral<2>,\r\n    Type.Literal(1),                                 //   TLiteral<3>\r\n    Type.Literal(2),                                 // ]>\r\n    Type.Literal(3)\r\n  ]),\r\n  Type.Literal(1)\r\n)\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports Mapped types with Type.Mapped. This type accepts two arguments, the first a union of literal keys and the second a type mapping function which receives a mapping key `K`. The following remaps the type `T` to be `Partial<T>` using type mapping.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst M = Type.Mapped(Type.KeyOf(T), K => {          // type M = { [K in keyof T]?: T[K] }\r\n  return Type.Optional(Type.Index(T, K))             //\r\n})                                                   // \r\n                                                     \r\n                                                     // ... runtime mapped as\r\n                                                     //\r\n                                                     // const M: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports Indexed Access types with Type.Index. This type enables uniform access to interior property and array element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript Intrinsic String Manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap String Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\n\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler modules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value module.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = {\r\n                                                     //   type: 'number'\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can type check its own types with the TypeGuard module. This module is written for reflection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with TypeScript control flow assertions to obtain schema inference. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T: unknown = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Symbol(TypeBox.Kind)]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Symbol(TypeBox.Kind)]: 'String',\r\n                                                     //       [Symbol(TypeBox.Optional)]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional utility module that can be used to perform structural operations on JavaScript values. This module includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This module is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nRemoves excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nGenerates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to cast a value with a type. The cast function will retain as much information as possible from the original value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type, or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type, or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // const A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // const A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // const A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // const A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to create high performance assertions that can be written to disk as importable modules. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox check values inline with TypeScript static assertions. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be useful in Json based protocols such as JsonRpc-2. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-RPC 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be used to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '118.7 kb' │ ' 52.5 kb' │  '2.26 x'   │\r\n│ typebox/errors       │ ' 55.1 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.6 kb' │ '  2.0 kb' │  '2.31 x'   │\r\n│ typebox/value        │ '144.8 kb' │ ' 61.8 kb' │  '2.34 x'   │\r\n│ typebox              │ ' 87.7 kb' │ ' 36.7 kb' │  '2.39 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-23","_integrity":"sha512-yfd7OK2sBv4ITjirkmgDpDnpEmq2IzpYh5hKzI/L8U/hVdW4Uncs45wtjFpNcSUQsOB74pg2cb39wxZB37KDLQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-23.tgz","_from":"file:sinclair-typebox-0.32.0-dev-23.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-yfd7OK2sBv4ITjirkmgDpDnpEmq2IzpYh5hKzI/L8U/hVdW4Uncs45wtjFpNcSUQsOB74pg2cb39wxZB37KDLQ==","shasum":"ac29755cbcc17d9bf0686dfc9691776af7c90347","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-23.tgz","fileCount":904,"unpackedSize":1337074,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAHAV/DAiM8cti/uXF0fKzOEcFogz4Z+QeY/J7bJ3VRhAiAeiwIM3DkFDrE6bqQqkmqo/VoKsfPqAnMN+6mXfuJAIA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-23_1702219093715_0.09320221532624906"},"_hasShrinkwrap":false},"0.32.0-dev-24":{"name":"@sinclair/typebox","version":"0.32.0-dev-24","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The schematics produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox offers a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library is designed to be a runtime type system with capabilities similar to TypeScript's static type system. It can be used as a simple tool to build up complex schematics or integrated into REST and RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Import](#types-import)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Mapped](#types-mapped)\r\n  - [Conditional](#types-conditional)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-import'></a>\r\n\r\n### Import\r\n\r\nYou can import Type to bring in the full type system. This is recommended for most users.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n```\r\nYou can also import types individually. This approach enables modern bundlers to tree shake unused types.\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any given type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with functions. TypeBox types extend the TSchema interface so you should constrain parameters to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(T: T) => \r\n  Type.Object({                                      // type Vector<T> = {\r\n    x: T,                                            //   x: T,\r\n    y: T,                                            //   y: T,\r\n    z: T                                             //   z: T\r\n  })                                                 // }\r\n\r\nconst NumberVector = Vector(Type.Number())           // type NumberVector = Vector<number>\r\n```\r\n\r\nGeneric types are often used to create aliases for complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Ref. These types infer the same as the target type but only store a named `$ref` to the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Deref to dereference a type. This function will replace any interior reference with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\nNote that Ref types do not store structural information about the type they're referencing. Because of this, these types cannot be used with some mapping types (such as Partial or Pick). For applications that require mapping on Ref, use Deref to normalize the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports recursive data structures with Recursive. This type wraps an interior type and provides it a `this` context that allows the type to reference itself. The following creates a recursive type. Singular recursive inference is also supported.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expressions which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing that enables template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types with Index. This type enables uniform access to interior property and element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // type A = T['x']\r\n                                                     //\r\n                                                     // ... evaluates as\r\n                                                     //\r\n                                                     // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // type B = T['x' | 'y']\r\n                                                     //\r\n                                                     // ... evaluates as\r\n                                                     //\r\n                                                     // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // type C = T[keyof T]\r\n                                                     //\r\n                                                     // ... evaluates as\r\n                                                     // \r\n                                                     // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports mapped object types with Mapped. This type accepts two arguments, the first is a union type typically derived from KeyOf, the second is a mapping function that receives a mapping key `K` that can be used to index properties of a type. The following implements Partial using mapped types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst P = Type.Mapped(Type.KeyOf(T), K => {          // type P = { [K in keyof T]?: T[K] }\r\n  return Type.Optional(Type.Index(T, K))             //\r\n})                                                   // ... evaluated as\r\n                                                     // \r\n                                                     // const P: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime conditional types with Extends. This type performs a structural assignability check against the first (`left`) and second (`right`) arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\nconst T = Type.Extends(                              // type T = string extends number ? true : false\r\n  Type.String(),                                     //   \r\n  Type.Number(),                                     // ... evaluated as\r\n  Type.Literal(true),                                //\r\n  Type.Literal(false)                                // const T: TLiteral<false>\r\n)\r\n\r\n// Extract\r\nconst T = Type.Extract(                              // type T = Extract<1 | 2 | 3, 1>\r\n  Type.Union([                                       //\r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TLiteral<1>\r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\nconst T = Type.Exclude(                              // type T = Exclude<1 | 2 | 3, 1>\r\n  Type.Union([                                       // \r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TUnion<[\r\n  ]),                                                //   TLiteral<2>,\r\n  Type.Literal(1)                                    //   TLiteral<3>,\r\n)                                                    // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript intrinsic string manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\n\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\n\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler submodules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value submodule.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = { type: 'number' }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI.\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can check its own types with the TypeGuard module. This module is written for type introspection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with control flow assertions to obtain schema inference for unknown values. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Symbol(TypeBox.Kind)]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Symbol(TypeBox.Kind)]: 'String',\r\n                                                     //       [Symbol(TypeBox.Optional)]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional Value submodule that can be used to perform structural operations on JavaScript values. This submodule includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This submodule is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nUse Clean to remove excess properties from a value. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nUse Default to generate missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to upcast a value into a target type. This function will retain as much infomation as possible from the original value. The Cast function is intended to be used in data migration scenarios where existing values need to be upgraded to match a modified type.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to generate code that can be written to disk as importable modules. This technique is sometimes referred to as Ahead of Time (AOT) compilation. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox assert values inline with TypeScript static checks. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be helpful in Json based protocols such as Json Rpc 2.0. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-Rpc 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be integrated into toolchains to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '119.9 kb' │ ' 52.5 kb' │  '2.29 x'   │\r\n│ typebox/errors       │ ' 55.5 kb' │ ' 25.2 kb' │  '2.21 x'   │\r\n│ typebox/system       │ '  4.7 kb' │ '  2.0 kb' │  '2.33 x'   │\r\n│ typebox/value        │ '146.8 kb' │ ' 61.9 kb' │  '2.37 x'   │\r\n│ typebox              │ ' 90.7 kb' │ ' 37.7 kb' │  '2.40 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-24","_integrity":"sha512-o0wRofs4pondSFt3q8Xvbq3Gv2XOXzLBouGeQBsTNexdr4HTklRjKRbIgBKIw8BkQ+mI+sXzfb7qcrZyGFd6PA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-24.tgz","_from":"file:sinclair-typebox-0.32.0-dev-24.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-o0wRofs4pondSFt3q8Xvbq3Gv2XOXzLBouGeQBsTNexdr4HTklRjKRbIgBKIw8BkQ+mI+sXzfb7qcrZyGFd6PA==","shasum":"f28f525a63614a8dab39ebd5cacdaa4f03556ea4","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-24.tgz","fileCount":912,"unpackedSize":1344933,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDDR9rbJsJYClZNweiFw8yKuuSNY8oF9PVKrIP3sWhnzgIhAI5PL82TbItk/x8BL0M3yQNxIGgYDLCYGO4PBlfhnVwt"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-24_1702276394587_0.9137285489766649"},"_hasShrinkwrap":false},"0.32.0-dev-25":{"name":"@sinclair/typebox","version":"0.32.0-dev-25","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The schematics produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox offers a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library is designed to be a runtime type system with capabilities similar to TypeScript's static type system. It can be used as a simple tool to build up complex schematics or integrated into REST and RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Import](#types-import)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Mapped](#types-mapped)\r\n  - [Conditional](#types-conditional)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-import'></a>\r\n\r\n### Import\r\n\r\nYou can import Type to bring in the full type system. This is recommended for most users.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n```\r\nYou can also import types individually. This approach enables modern bundlers to tree shake unused types.\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any given type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with functions. TypeBox types extend the TSchema interface so you should constrain parameters to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(T: T) => \r\n  Type.Object({                                      // type Vector<T> = {\r\n    x: T,                                            //   x: T,\r\n    y: T,                                            //   y: T,\r\n    z: T                                             //   z: T\r\n  })                                                 // }\r\n\r\nconst NumberVector = Vector(Type.Number())           // type NumberVector = Vector<number>\r\n```\r\n\r\nGeneric types are often used to create aliases for complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Ref. These types infer the same as the target type but only store a named `$ref` to the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Deref to dereference a type. This function will replace any interior reference with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\nNote that Ref types do not store structural information about the type they're referencing. Because of this, these types cannot be used with some mapping types (such as Partial or Pick). For applications that require mapping on Ref, use Deref to normalize the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports recursive data structures with Recursive. This type wraps an interior type and provides it a `this` context that allows the type to reference itself. The following creates a recursive type. Singular recursive inference is also supported.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expressions which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing that enables template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types with Index. This type enables uniform access to interior property and element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // type A = T['x']\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     //\r\n                                                     // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // type B = T['x' | 'y']\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     //\r\n                                                     // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // type C = T[keyof T]\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     // \r\n                                                     // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports mapped object types with Mapped. This type accepts two arguments, the first is a union type typically derived from KeyOf, the second is a mapping function that receives a mapping key `K` that can be used to index properties of a type. The following implements Partial using mapped types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst P = Type.Mapped(Type.KeyOf(T), K => {          // type P = { [K in keyof T]?: T[K] }\r\n  return Type.Optional(Type.Index(T, K))             //\r\n})                                                   // ... evaluated as\r\n                                                     // \r\n                                                     // const P: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime conditional types with Extends. This type performs a structural assignability check against the first (`left`) and second (`right`) arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\nconst T = Type.Extends(                              // type T = string extends number ? true : false\r\n  Type.String(),                                     //   \r\n  Type.Number(),                                     // ... evaluated as\r\n  Type.Literal(true),                                //\r\n  Type.Literal(false)                                // const T: TLiteral<false>\r\n)\r\n\r\n// Extract\r\nconst T = Type.Extract(                              // type T = Extract<1 | 2 | 3, 1>\r\n  Type.Union([                                       //\r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TLiteral<1>\r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\nconst T = Type.Exclude(                              // type T = Exclude<1 | 2 | 3, 1>\r\n  Type.Union([                                       // \r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TUnion<[\r\n  ]),                                                //   TLiteral<2>,\r\n  Type.Literal(1)                                    //   TLiteral<3>,\r\n)                                                    // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript intrinsic string manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\n\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\n\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler submodules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value submodule.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = { type: 'number' }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI.\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can check its own types with the TypeGuard module. This module is written for type introspection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with control flow assertions to obtain schema inference for unknown values. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Symbol(TypeBox.Kind)]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Symbol(TypeBox.Kind)]: 'String',\r\n                                                     //       [Symbol(TypeBox.Optional)]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional Value submodule that can be used to perform structural operations on JavaScript values. This submodule includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This submodule is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nUse Clean to remove excess properties from a value. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nUse Default to generate missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to upcast a value into a target type. This function will retain as much infomation as possible from the original value. The Cast function is intended to be used in data migration scenarios where existing values need to be upgraded to match a modified type.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to generate code that can be written to disk as importable modules. This technique is sometimes referred to as Ahead of Time (AOT) compilation. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox assert values inline with TypeScript static checks. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be helpful in Json based protocols such as Json Rpc 2.0. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-Rpc 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((schema, errorType) => { // i18n override\r\n  switch(errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(schema, errorType)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be integrated into toolchains to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '120.5 kb' │ ' 52.7 kb' │  '2.29 x'   │\r\n│ typebox/errors       │ ' 55.5 kb' │ ' 25.2 kb' │  '2.20 x'   │\r\n│ typebox/system       │ '  4.7 kb' │ '  2.0 kb' │  '2.33 x'   │\r\n│ typebox/value        │ '147.4 kb' │ ' 62.2 kb' │  '2.37 x'   │\r\n│ typebox              │ ' 91.3 kb' │ ' 38.0 kb' │  '2.40 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-25","_integrity":"sha512-ZA154KxWufyWQDKvwDzOqlIIysCY6fThKcCydlB/eLWsMQzngGqWVEDO5EPq6ih1o0C5OQCpSfyCjUL/tqnKTA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-25.tgz","_from":"file:sinclair-typebox-0.32.0-dev-25.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-ZA154KxWufyWQDKvwDzOqlIIysCY6fThKcCydlB/eLWsMQzngGqWVEDO5EPq6ih1o0C5OQCpSfyCjUL/tqnKTA==","shasum":"5e394b938cda6d466d26d00c9abc9af2b999f05f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-25.tgz","fileCount":916,"unpackedSize":1350113,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDcDSYHhgVivozkUP0Yg0m07Tk9vZxOsFAeFnI4fH2B4AIhAMBHduBd1DsE9WNZgmBu3y6OAeqxAAgV3frjTPiyiPhJ"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-25_1702355895087_0.8391608982725174"},"_hasShrinkwrap":false},"0.32.0-dev-26":{"name":"@sinclair/typebox","version":"0.32.0-dev-26","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The schematics produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox offers a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library is designed to be a runtime type system with capabilities similar to TypeScript's static type system. It can be used as a simple tool to build up complex schematics or integrated into REST and RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Import](#types-import)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Mapped](#types-mapped)\r\n  - [Conditional](#types-conditional)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-import'></a>\r\n\r\n### Import\r\n\r\nYou can import Type to bring in the full type system. This is recommended for most users.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n```\r\nYou can also import types individually. This approach enables modern bundlers to tree shake unused types.\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any given type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with functions. TypeBox types extend the TSchema interface so you should constrain parameters to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(T: T) => \r\n  Type.Object({                                      // type Vector<T> = {\r\n    x: T,                                            //   x: T,\r\n    y: T,                                            //   y: T,\r\n    z: T                                             //   z: T\r\n  })                                                 // }\r\n\r\nconst NumberVector = Vector(Type.Number())           // type NumberVector = Vector<number>\r\n```\r\n\r\nGeneric types are often used to create aliases for complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Ref. These types infer the same as the target type but only store a named `$ref` to the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Deref to dereference a type. This function will replace any interior reference with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\nNote that Ref types do not store structural information about the type they're referencing. Because of this, these types cannot be used with some mapping types (such as Partial or Pick). For applications that require mapping on Ref, use Deref to normalize the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports recursive data structures with Recursive. This type wraps an interior type and provides it a `this` context that allows the type to reference itself. The following creates a recursive type. Singular recursive inference is also supported.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expressions which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing that enables template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types with Index. This type enables uniform access to interior property and element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // type A = T['x']\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     //\r\n                                                     // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // type B = T['x' | 'y']\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     //\r\n                                                     // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // type C = T[keyof T]\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     // \r\n                                                     // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports mapped object types with Mapped. This type accepts two arguments, the first is a union type typically derived from KeyOf, the second is a mapping function that receives a mapping key `K` that can be used to index properties of a type. The following implements Partial using mapped types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst P = Type.Mapped(Type.KeyOf(T), K => {          // type P = { [K in keyof T]?: T[K] }\r\n  return Type.Optional(Type.Index(T, K))             //\r\n})                                                   // ... evaluated as\r\n                                                     // \r\n                                                     // const P: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime conditional types with Extends. This type performs a structural assignability check against the first (`left`) and second (`right`) arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\nconst T = Type.Extends(                              // type T = string extends number ? true : false\r\n  Type.String(),                                     //   \r\n  Type.Number(),                                     // ... evaluated as\r\n  Type.Literal(true),                                //\r\n  Type.Literal(false)                                // const T: TLiteral<false>\r\n)\r\n\r\n// Extract\r\nconst T = Type.Extract(                              // type T = Extract<1 | 2 | 3, 1>\r\n  Type.Union([                                       //\r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TLiteral<1>\r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\nconst T = Type.Exclude(                              // type T = Exclude<1 | 2 | 3, 1>\r\n  Type.Union([                                       // \r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TUnion<[\r\n  ]),                                                //   TLiteral<2>,\r\n  Type.Literal(1)                                    //   TLiteral<3>,\r\n)                                                    // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript intrinsic string manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\n\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\n\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler submodules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value submodule.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = { type: 'number' }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI.\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can check its own types with the TypeGuard module. This module is written for type introspection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with control flow assertions to obtain schema inference for unknown values. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Symbol(TypeBox.Kind)]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Symbol(TypeBox.Kind)]: 'String',\r\n                                                     //       [Symbol(TypeBox.Optional)]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional Value submodule that can be used to perform structural operations on JavaScript values. This submodule includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This submodule is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nUse Clean to remove excess properties from a value. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nUse Default to generate missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to upcast a value into a target type. This function will retain as much infomation as possible from the original value. The Cast function is intended to be used in data migration scenarios where existing values need to be upgraded to match a modified type.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to generate code that can be written to disk as importable modules. This technique is sometimes referred to as Ahead of Time (AOT) compilation. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox assert values inline with TypeScript static checks. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be helpful in Json based protocols such as Json Rpc 2.0. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-Rpc 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((error) => { // i18n override\r\n  switch(error.errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(error)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be integrated into toolchains to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    236 ms' │ '      9 ms' │ '   26.22 x' │\r\n│ Literal_Number             │    1000    │ '    205 ms' │ '     13 ms' │ '   15.77 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      4 ms' │ '   42.00 x' │\r\n│ Primitive_Number           │    1000    │ '    170 ms' │ '      8 ms' │ '   21.25 x' │\r\n│ Primitive_String           │    1000    │ '    162 ms' │ '      7 ms' │ '   23.14 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    211 ms' │ '     10 ms' │ '   21.10 x' │\r\n│ Primitive_Boolean          │    1000    │ '    139 ms' │ '      4 ms' │ '   34.75 x' │\r\n│ Primitive_Null             │    1000    │ '    146 ms' │ '      5 ms' │ '   29.20 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1160 ms' │ '     33 ms' │ '   35.15 x' │\r\n│ Object_Constrained         │    1000    │ '   1257 ms' │ '     26 ms' │ '   48.35 x' │\r\n│ Object_Vector3             │    1000    │ '    393 ms' │ '      8 ms' │ '   49.13 x' │\r\n│ Object_Box3D               │    1000    │ '   1795 ms' │ '     30 ms' │ '   59.83 x' │\r\n│ Tuple_Primitive            │    1000    │ '    542 ms' │ '     16 ms' │ '   33.88 x' │\r\n│ Tuple_Object               │    1000    │ '   1330 ms' │ '     17 ms' │ '   78.24 x' │\r\n│ Composite_Intersect        │    1000    │ '    624 ms' │ '     17 ms' │ '   36.71 x' │\r\n│ Composite_Union            │    1000    │ '    565 ms' │ '     19 ms' │ '   29.74 x' │\r\n│ Math_Vector4               │    1000    │ '    853 ms' │ '     10 ms' │ '   85.30 x' │\r\n│ Math_Matrix4               │    1000    │ '    406 ms' │ '     12 ms' │ '   33.83 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    401 ms' │ '     11 ms' │ '   36.45 x' │\r\n│ Array_Primitive_String     │    1000    │ '    385 ms' │ '      6 ms' │ '   64.17 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    347 ms' │ '      8 ms' │ '   43.38 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1904 ms' │ '     25 ms' │ '   76.16 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1582 ms' │ '     20 ms' │ '   79.10 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    864 ms' │ '     11 ms' │ '   78.55 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1658 ms' │ '     16 ms' │ '  103.63 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    786 ms' │ '     17 ms' │ '   46.24 x' │\r\n│ Array_Composite_Union      │    1000    │ '    844 ms' │ '     16 ms' │ '   52.75 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1192 ms' │ '     10 ms' │ '  119.20 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    688 ms' │ '     10 ms' │ '   68.80 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     19 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     14 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Literal_Boolean            │  1000000   │ '     14 ms' │ '     19 ms' │ '      9 ms' │ '    2.11 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    164 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '    966 ms' │ '     33 ms' │ '     24 ms' │ '    1.38 x' │\r\n│ Object_Constrained         │  1000000   │ '   1275 ms' │ '     52 ms' │ '     42 ms' │ '    1.24 x' │\r\n│ Object_Vector3             │  1000000   │ '    427 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Object_Box3D               │  1000000   │ '   2024 ms' │ '     56 ms' │ '     50 ms' │ '    1.12 x' │\r\n│ Object_Recursive           │  1000000   │ '   5263 ms' │ '    358 ms' │ '    164 ms' │ '    2.18 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    157 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Tuple_Object               │  1000000   │ '    767 ms' │ '     29 ms' │ '     18 ms' │ '    1.61 x' │\r\n│ Composite_Intersect        │  1000000   │ '    769 ms' │ '     26 ms' │ '     15 ms' │ '    1.73 x' │\r\n│ Composite_Union            │  1000000   │ '    501 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    250 ms' │ '     23 ms' │ '     11 ms' │ '    2.09 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1073 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    264 ms' │ '     21 ms' │ '     12 ms' │ '    1.75 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    242 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    151 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   5864 ms' │ '     66 ms' │ '     58 ms' │ '    1.14 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   5996 ms' │ '    138 ms' │ '    116 ms' │ '    1.19 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22515 ms' │ '   1625 ms' │ '    585 ms' │ '    2.78 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    737 ms' │ '     38 ms' │ '     31 ms' │ '    1.23 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3257 ms' │ '     77 ms' │ '     56 ms' │ '    1.38 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3119 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2108 ms' │ '     72 ms' │ '     33 ms' │ '    2.18 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1078 ms' │ '     38 ms' │ '     26 ms' │ '    1.46 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   4967 ms' │ '    126 ms' │ '     88 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '120.7 kb' │ ' 53.0 kb' │  '2.28 x'   │\r\n│ typebox/errors       │ ' 55.8 kb' │ ' 25.5 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.7 kb' │ '  2.0 kb' │  '2.33 x'   │\r\n│ typebox/value        │ '147.6 kb' │ ' 62.5 kb' │  '2.36 x'   │\r\n│ typebox              │ ' 91.3 kb' │ ' 38.0 kb' │  '2.40 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-26","_integrity":"sha512-JScTTo253fqiQL9MpYdUbSjg8qM5AZpIJ5Tuw78eXxgc7+r/JLHn7dKdsgZKbxmU53FWbuchUrNnGK9pqFOZHQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-26.tgz","_from":"file:sinclair-typebox-0.32.0-dev-26.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-JScTTo253fqiQL9MpYdUbSjg8qM5AZpIJ5Tuw78eXxgc7+r/JLHn7dKdsgZKbxmU53FWbuchUrNnGK9pqFOZHQ==","shasum":"0355e3b1535f914df77fadcf194a4037343f3a2b","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-26.tgz","fileCount":916,"unpackedSize":1351195,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCZB/fzPtiVwtd+4zWDvDGRHEQ8OZAY0ga8PE5C4V5VCQIgZ65+5JCok2+XVRmFhkafciKkW8sIkyqn7jAUDR6ZWgU="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-26_1702361510341_0.18220126424548"},"_hasShrinkwrap":false},"0.32.0-dev-27":{"name":"@sinclair/typebox","version":"0.32.0-dev-27","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The schematics produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox offers a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library is built to be a runtime type system offering similar capabilities to TypeScript's static type system. It can be used as a simple tool to build up complex schematics or integrated into REST and RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Import](#types-import)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Mapped](#types-mapped)\r\n  - [Conditional](#types-conditional)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/)   │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │   pattern: 'abc'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-import'></a>\r\n\r\n### Import\r\n\r\nYou can import Type to bring in the full type system. This is recommended for most users.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n```\r\nYou can also import types individually. This approach enables modern bundlers to tree shake unused types.\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any given type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with functions. TypeBox types extend the TSchema interface so you should constrain parameters to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(T: T) => \r\n  Type.Object({                                      // type Vector<T> = {\r\n    x: T,                                            //   x: T,\r\n    y: T,                                            //   y: T,\r\n    z: T                                             //   z: T\r\n  })                                                 // }\r\n\r\nconst NumberVector = Vector(Type.Number())           // type NumberVector = Vector<number>\r\n```\r\n\r\nGeneric types are often used to create aliases for complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Ref. These types infer the same as the target type but only store a named `$ref` to the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Deref to dereference a type. This function will replace any interior reference with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\nNote that Ref types do not store structural information about the type they're referencing. Because of this, these types cannot be used with some mapping types (such as Partial or Pick). For applications that require mapping on Ref, use Deref to normalize the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports recursive data structures with Recursive. This type wraps an interior type and provides it a `this` context that allows the type to reference itself. The following creates a recursive type. Singular recursive inference is also supported.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expressions which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing that enables template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types with Index. This type enables uniform access to interior property and element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // type A = T['x']\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     //\r\n                                                     // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // type B = T['x' | 'y']\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     //\r\n                                                     // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // type C = T[keyof T]\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     // \r\n                                                     // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports mapped object types with Mapped. This type accepts two arguments, the first is a union type typically derived from KeyOf, the second is a mapping function that receives a mapping key `K` that can be used to index properties of a type. The following implements Partial using mapped types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst P = Type.Mapped(Type.KeyOf(T), K => {          // type P = { [K in keyof T]?: T[K] }\r\n  return Type.Optional(Type.Index(T, K))             //\r\n})                                                   // ... evaluated as\r\n                                                     // \r\n                                                     // const P: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime conditional types with Extends. This type performs a structural assignability check against the first (`left`) and second (`right`) arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\nconst T = Type.Extends(                              // type T = string extends number ? true : false\r\n  Type.String(),                                     //   \r\n  Type.Number(),                                     // ... evaluated as\r\n  Type.Literal(true),                                //\r\n  Type.Literal(false)                                // const T: TLiteral<false>\r\n)\r\n\r\n// Extract\r\nconst T = Type.Extract(                              // type T = Extract<1 | 2 | 3, 1>\r\n  Type.Union([                                       //\r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TLiteral<1>\r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\nconst T = Type.Exclude(                              // type T = Exclude<1 | 2 | 3, 1>\r\n  Type.Union([                                       // \r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TUnion<[\r\n  ]),                                                //   TLiteral<2>,\r\n  Type.Literal(1)                                    //   TLiteral<3>,\r\n)                                                    // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript intrinsic string manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\n\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\n\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler submodules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value submodule.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = { type: 'number' }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI.\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can check its own types with the TypeGuard module. This module is written for type introspection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with control flow assertions to obtain schema inference for unknown values. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Symbol(TypeBox.Kind)]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Symbol(TypeBox.Kind)]: 'String',\r\n                                                     //       [Symbol(TypeBox.Optional)]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional Value submodule that can be used to perform structural operations on JavaScript values. This submodule includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This submodule is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nUse Clean to remove excess properties from a value. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nUse Default to generate missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to upcast a value into a target type. This function will retain as much infomation as possible from the original value. The Cast function is intended to be used in data migration scenarios where existing values need to be upgraded to match a modified type.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to generate code that can be written to disk as importable modules. This technique is sometimes referred to as Ahead of Time (AOT) compilation. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox assert values inline with TypeScript static checks. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be helpful in Json based protocols such as Json Rpc 2.0. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-Rpc 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((error) => { // i18n override\r\n  switch(error.errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(error)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be integrated into toolchains to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    242 ms' │ '     10 ms' │ '   24.20 x' │\r\n│ Literal_Number             │    1000    │ '    200 ms' │ '      8 ms' │ '   25.00 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      6 ms' │ '   28.00 x' │\r\n│ Primitive_Number           │    1000    │ '    165 ms' │ '      8 ms' │ '   20.63 x' │\r\n│ Primitive_String           │    1000    │ '    154 ms' │ '      6 ms' │ '   25.67 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    208 ms' │ '     14 ms' │ '   14.86 x' │\r\n│ Primitive_Boolean          │    1000    │ '    142 ms' │ '      6 ms' │ '   23.67 x' │\r\n│ Primitive_Null             │    1000    │ '    143 ms' │ '      6 ms' │ '   23.83 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1217 ms' │ '     31 ms' │ '   39.26 x' │\r\n│ Object_Constrained         │    1000    │ '   1275 ms' │ '     26 ms' │ '   49.04 x' │\r\n│ Object_Vector3             │    1000    │ '    405 ms' │ '     12 ms' │ '   33.75 x' │\r\n│ Object_Box3D               │    1000    │ '   1833 ms' │ '     27 ms' │ '   67.89 x' │\r\n│ Tuple_Primitive            │    1000    │ '    475 ms' │ '     13 ms' │ '   36.54 x' │\r\n│ Tuple_Object               │    1000    │ '   1267 ms' │ '     30 ms' │ '   42.23 x' │\r\n│ Composite_Intersect        │    1000    │ '    604 ms' │ '     18 ms' │ '   33.56 x' │\r\n│ Composite_Union            │    1000    │ '    545 ms' │ '     20 ms' │ '   27.25 x' │\r\n│ Math_Vector4               │    1000    │ '    829 ms' │ '     12 ms' │ '   69.08 x' │\r\n│ Math_Matrix4               │    1000    │ '    405 ms' │ '     10 ms' │ '   40.50 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    372 ms' │ '     12 ms' │ '   31.00 x' │\r\n│ Array_Primitive_String     │    1000    │ '    327 ms' │ '      5 ms' │ '   65.40 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    300 ms' │ '      4 ms' │ '   75.00 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1755 ms' │ '     21 ms' │ '   83.57 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1516 ms' │ '     20 ms' │ '   75.80 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    825 ms' │ '     14 ms' │ '   58.93 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1616 ms' │ '     16 ms' │ '  101.00 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    776 ms' │ '     16 ms' │ '   48.50 x' │\r\n│ Array_Composite_Union      │    1000    │ '    820 ms' │ '     14 ms' │ '   58.57 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1166 ms' │ '     15 ms' │ '   77.73 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    695 ms' │ '      8 ms' │ '   86.88 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     18 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     16 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Literal_Boolean            │  1000000   │ '     15 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    155 ms' │ '     41 ms' │ '     34 ms' │ '    1.21 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '   1003 ms' │ '     32 ms' │ '     24 ms' │ '    1.33 x' │\r\n│ Object_Constrained         │  1000000   │ '   1265 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Object_Vector3             │  1000000   │ '    418 ms' │ '     22 ms' │ '     13 ms' │ '    1.69 x' │\r\n│ Object_Box3D               │  1000000   │ '   2035 ms' │ '     56 ms' │ '     49 ms' │ '    1.14 x' │\r\n│ Object_Recursive           │  1000000   │ '   5243 ms' │ '    326 ms' │ '    157 ms' │ '    2.08 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    153 ms' │ '     20 ms' │ '     12 ms' │ '    1.67 x' │\r\n│ Tuple_Object               │  1000000   │ '    781 ms' │ '     28 ms' │ '     18 ms' │ '    1.56 x' │\r\n│ Composite_Intersect        │  1000000   │ '    742 ms' │ '     25 ms' │ '     14 ms' │ '    1.79 x' │\r\n│ Composite_Union            │  1000000   │ '    558 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    246 ms' │ '     22 ms' │ '     11 ms' │ '    2.00 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1052 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    272 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    235 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    134 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   6280 ms' │ '     65 ms' │ '     59 ms' │ '    1.10 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   6076 ms' │ '    130 ms' │ '    119 ms' │ '    1.09 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22738 ms' │ '   1730 ms' │ '    635 ms' │ '    2.72 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    689 ms' │ '     35 ms' │ '     30 ms' │ '    1.17 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3266 ms' │ '     63 ms' │ '     52 ms' │ '    1.21 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3310 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2432 ms' │ '     69 ms' │ '     33 ms' │ '    2.09 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1158 ms' │ '     37 ms' │ '     24 ms' │ '    1.54 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   5435 ms' │ '    132 ms' │ '     92 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '119.2 kb' │ ' 52.3 kb' │  '2.28 x'   │\r\n│ typebox/errors       │ ' 55.0 kb' │ ' 25.2 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.7 kb' │ '  2.0 kb' │  '2.33 x'   │\r\n│ typebox/value        │ '146.1 kb' │ ' 61.8 kb' │  '2.37 x'   │\r\n│ typebox              │ ' 90.1 kb' │ ' 37.3 kb' │  '2.41 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-27","_integrity":"sha512-pGai7CigzKh7V+nU8GsKFfVuirhNClOPahMIEkWzaypZxgAPX9Igi+4Pfyx9s8tALUV9izjJ5GQXbWUJLyg4Nw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-27.tgz","_from":"file:sinclair-typebox-0.32.0-dev-27.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-pGai7CigzKh7V+nU8GsKFfVuirhNClOPahMIEkWzaypZxgAPX9Igi+4Pfyx9s8tALUV9izjJ5GQXbWUJLyg4Nw==","shasum":"3b730fcdf517ad69eb60565c173442c13cb63214","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-27.tgz","fileCount":924,"unpackedSize":1352528,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCfN72DlEnBSMFkReRVdQq2Yv9v6UD2qD2LZfiVZHnLnwIhAIukYnOoxbu5a2m1Cw/PLx5wEwo0eT8V0Drvm++j3EVP"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-27_1702419052016_0.11450007963241982"},"_hasShrinkwrap":false},"0.32.0-dev-28":{"name":"@sinclair/typebox","version":"0.32.0-dev-28","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The schematics produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox offers a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library is built to be a runtime type system offering similar capabilities to TypeScript's static type system. It can be used as a simple tool to build up complex schematics or integrated into REST and RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Import](#types-import)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Mapped](#types-mapped)\r\n  - [Conditional](#types-conditional)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/i)  │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'RegExp'               │\r\n│                                │                             │   source: 'abc'                │\r\n│                                │                             │   flags: 'i'                   │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-import'></a>\r\n\r\n### Import\r\n\r\nYou can import Type to bring in the full type system. This is recommended for most users.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n```\r\nYou can also import types individually. This approach enables modern bundlers to tree shake unused types.\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any given type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with functions. TypeBox types extend the TSchema interface so you should constrain parameters to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(T: T) => \r\n  Type.Object({                                      // type Vector<T> = {\r\n    x: T,                                            //   x: T,\r\n    y: T,                                            //   y: T,\r\n    z: T                                             //   z: T\r\n  })                                                 // }\r\n\r\nconst NumberVector = Vector(Type.Number())           // type NumberVector = Vector<number>\r\n```\r\n\r\nGeneric types are often used to create aliases for complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Ref. These types infer the same as the target type but only store a named `$ref` to the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Deref to dereference a type. This function will replace any interior reference with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\nNote that Ref types do not store structural information about the type they're referencing. Because of this, these types cannot be used with some mapping types (such as Partial or Pick). For applications that require mapping on Ref, use Deref to normalize the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports recursive data structures with Recursive. This type wraps an interior type and provides it a `this` context that allows the type to reference itself. The following creates a recursive type. Singular recursive inference is also supported.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with TemplateLiteral. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expressions which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing that enables template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                                                     //   TUnion<[\r\n                                                     //      TLiteral<'A'>,\r\n                                                     //      TLiteral<'B'>,\r\n                                                     //      TLiteral<'C'>,\r\n                                                     //   ]>\r\n                                                     // ]>\r\n\r\nconst R = Type.Record(K, Type.String())              // const R: TObject<{\r\n                                                     //   hello1: TString,\r\n                                                     //   hello2: TString,\r\n                                                     //   hello3: TString,\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-indexed'></a>\r\n\r\n### Indexed Access Types\r\n\r\nTypeBox supports indexed access types with Index. This type enables uniform access to interior property and element types without having to extract them from the underlying schema representation. This type is supported for Object, Array, Tuple, Union and Intersect types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst A = Type.Index(T, ['x'])                       // type A = T['x']\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     //\r\n                                                     // const A: TNumber\r\n\r\nconst B = Type.Index(T, ['x', 'y'])                  // type B = T['x' | 'y']\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     //\r\n                                                     // const B: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     // ]>\r\n\r\nconst C = Type.Index(T, Type.KeyOf(T))               // type C = T[keyof T]\r\n                                                     //\r\n                                                     // ... evaluated as\r\n                                                     // \r\n                                                     // const C: TUnion<[\r\n                                                     //   TNumber,\r\n                                                     //   TString,\r\n                                                     //   TBoolean\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-mapped'></a>\r\n\r\n### Mapped Types\r\n\r\nTypeBox supports mapped object types with Mapped. This type accepts two arguments, the first is a union type typically derived from KeyOf, the second is a mapping function that receives a mapping key `K` that can be used to index properties of a type. The following implements Partial using mapped types.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.Number(),                                  //   x: TNumber,\r\n  y: Type.String(),                                  //   y: TString,\r\n  z: Type.Boolean()                                  //   z: TBoolean\r\n})                                                   // }>\r\n\r\nconst P = Type.Mapped(Type.KeyOf(T), K => {          // type P = { [K in keyof T]?: T[K] }\r\n  return Type.Optional(Type.Index(T, K))             //\r\n})                                                   // ... evaluated as\r\n                                                     // \r\n                                                     // const P: TObject<{\r\n                                                     //   x: TOptional<TNumber>,\r\n                                                     //   y: TOptional<TString>,\r\n                                                     //   z: TOptional<TBoolean>\r\n                                                     // }>\r\n```\r\n\r\n<a name='types-conditional'></a>\r\n\r\n### Conditional Types\r\n\r\nTypeBox supports runtime conditional types with Extends. This type performs a structural assignability check against the first (`left`) and second (`right`) arguments and will return either the third (`true`) or fourth (`false`) argument based on the result. The conditional types Exclude and Extract are also supported. The following shows both TypeScript and TypeBox examples of conditional types.\r\n\r\n```typescript\r\n// Extends\r\nconst T = Type.Extends(                              // type T = string extends number ? true : false\r\n  Type.String(),                                     //   \r\n  Type.Number(),                                     // ... evaluated as\r\n  Type.Literal(true),                                //\r\n  Type.Literal(false)                                // const T: TLiteral<false>\r\n)\r\n\r\n// Extract\r\nconst T = Type.Extract(                              // type T = Extract<1 | 2 | 3, 1>\r\n  Type.Union([                                       //\r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TLiteral<1>\r\n  ]), \r\n  Type.Literal(1)\r\n)\r\n\r\n// Exclude\r\nconst T = Type.Exclude(                              // type T = Exclude<1 | 2 | 3, 1>\r\n  Type.Union([                                       // \r\n    Type.Literal(1),                                 // ... evaluated as\r\n    Type.Literal(2),                                 //\r\n    Type.Literal(3)                                  // const T: TUnion<[\r\n  ]),                                                //   TLiteral<2>,\r\n  Type.Literal(1)                                    //   TLiteral<3>,\r\n)                                                    // ]>\r\n```\r\n\r\n<a name='types-intrinsic'></a>\r\n\r\n### Intrinsic Types\r\n\r\nTypeBox supports the TypeScript intrinsic string manipulation types Uppercase, Lowercase, Capitalize and Uncapitalize. These types can be used to remap Literal, Template Literal and Union of Literal types.\r\n\r\n```typescript\r\n// TypeScript\r\ntype A = Capitalize<'hello'>                         // type A = 'Hello'\r\n\r\ntype B = Capitalize<'hello' | 'world'>               // type C = 'Hello' | 'World'\r\n\r\ntype C = Capitalize<`hello${1|2|3}`>                 // type B = 'Hello1' | 'Hello2' | 'Hello3'\r\n\r\n// TypeBox\r\nconst A = Type.Capitalize(Type.Literal('hello'))     // const A: TLiteral<'Hello'>\r\n\r\nconst B = Type.Capitalize(Type.Union([               // const B: TUnion<[\r\n  Type.Literal('hello'),                             //   TLiteral<'Hello'>,\r\n  Type.Literal('world')                              //   TLiteral<'World'>\r\n]))                                                  // ]>\r\n\r\nconst C = Type.Capitalize(                           // const C: TTemplateLiteral<[\r\n  Type.TemplateLiteral('hello${1|2|3}')              //   TLiteral<'Hello'>,\r\n)                                                    //   TUnion<[\r\n                                                     //     TLiteral<'1'>,\r\n                                                     //     TLiteral<'2'>,\r\n                                                     //     TLiteral<'3'>\r\n                                                     //   ]>\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-transform'></a>\r\n\r\n### Transform Types\r\n\r\nTypeBox supports value decoding and encoding with Transform types. These types work in tandem with the Encode and Decode functions available on the Value and TypeCompiler submodules. Transform types can be used to convert Json encoded values into constructs more natural to JavaScript. The following creates a Transform type to decode numbers into Dates using the Value submodule.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nconst T = Type.Transform(Type.Number())\r\n  .Decode(value => new Date(value))                  // required: number to Date\r\n  .Encode(value => value.getTime())                  // required: Date to number\r\n\r\nconst decoded = Value.Decode(T, 0)                   // const decoded = Date(1970-01-01T00:00:00.000Z)\r\nconst encoded = Value.Encode(T, decoded)             // const encoded = 0\r\n```\r\nUse the StaticEncode or StaticDecode types to infer a Transform type.\r\n```typescript\r\nimport { Static, StaticDecode, StaticEncode } from '@sinclair/typebox'\r\n\r\nconst T = Type.Transform(Type.Array(Type.Number(), { uniqueItems: true }))         \r\n  .Decode(value => new Set(value))\r\n  .Encode(value => [...value])\r\n\r\ntype D = StaticDecode<typeof T>                      // type D = Set<number>      \r\ntype E = StaticEncode<typeof T>                      // type E = Array<number>\r\ntype T = Static<typeof T>                            // type T = Array<number>\r\n```\r\n\r\n<a name='types-rest'></a>\r\n\r\n### Rest Types\r\n\r\nTypeBox provides the Rest type to uniformly extract variadic tuples from Intersect, Union and Tuple types. This type can be useful to remap variadic types into different forms. The following uses Rest to remap a Tuple into a Union.\r\n\r\n```typescript\r\nconst T = Type.Tuple([                               // const T: TTuple<[\r\n  Type.String(),                                     //   TString,\r\n  Type.Number()                                      //   TNumber\r\n])                                                   // ]>\r\n\r\nconst R = Type.Rest(T)                               // const R: [TString, TNumber]\r\n\r\nconst U = Type.Union(R)                              // const T: TUnion<[\r\n                                                     //   TString,\r\n                                                     //   TNumber\r\n                                                     // ]>\r\n```\r\n\r\n<a name='types-unsafe'></a>\r\n\r\n### Unsafe Types\r\n\r\nTypeBox supports user defined types with Unsafe. This type allows you to specify both schema representation and inference type. The following creates an Unsafe type with a number schema that infers as string.\r\n\r\n```typescript\r\nconst T = Type.Unsafe<string>({ type: 'number' })    // const T = { type: 'number' }\r\n\r\ntype T = Static<typeof T>                            // type T = string - ?\r\n```\r\nThe Unsafe type is often used to create schematics for extended specifications like OpenAPI.\r\n```typescript\r\n\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Unsafe<Static<T> | null>({ \r\n  ...schema, nullable: true \r\n})\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   type: 'string',\r\n                                                     //   nullable: true\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n\r\nconst StringEnum = <T extends string[]>(values: [...T]) => Type.Unsafe<T[number]>({ \r\n  type: 'string', enum: values \r\n})\r\nconst S = StringEnum(['A', 'B', 'C'])                // const S = {\r\n                                                     //   enum: ['A', 'B', 'C']\r\n                                                     // }\r\n\r\ntype S = Static<typeof T>                            // type S = 'A' | 'B' | 'C'\r\n```\r\n<a name='types-guard'></a>\r\n\r\n### TypeGuard\r\n\r\nTypeBox can check its own types with the TypeGuard module. This module is written for type introspection and provides structural tests for every built-in TypeBox type. Functions of this module return `is` guards which can be used with control flow assertions to obtain schema inference for unknown values. The following guards that the value `T` is TString.\r\n\r\n```typescript\r\nimport { TypeGuard, Kind } from '@sinclair/typebox'\r\n\r\nconst T = { [Kind]: 'String', type: 'string' }\r\n\r\nif(TypeGuard.IsString(T)) {\r\n\r\n  // T is TString\r\n}\r\n```\r\n\r\n<a name='types-strict'></a>\r\n\r\n### Strict\r\n\r\nTypeBox types contain various symbol properties that are used for reflection, composition and compilation. These properties are not strictly valid Json Schema; so in some cases it may be desirable to omit them. TypeBox provides a `Strict` function that will omit these properties if necessary.\r\n\r\n```typescript\r\nconst T = Type.Object({                              // const T = {\r\n  name: Type.Optional(Type.String())                 //   [Symbol(TypeBox.Kind)]: 'Object',\r\n})                                                   //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string',\r\n                                                     //       [Symbol(TypeBox.Kind)]: 'String',\r\n                                                     //       [Symbol(TypeBox.Optional)]: 'Optional'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst U = Type.Strict(T)                             // const U = {\r\n                                                     //   type: 'object',\r\n                                                     //   properties: {\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='values'></a>\r\n\r\n## Values\r\n\r\nTypeBox provides an optional Value submodule that can be used to perform structural operations on JavaScript values. This submodule includes functionality to create, check and cast values from types as well as check equality, clone, diff and patch JavaScript values. This submodule is provided via optional import.\r\n\r\n```typescript\r\nimport { Value } from '@sinclair/typebox/value'\r\n```\r\n\r\n<a name='values-create'></a>\r\n\r\n### Create\r\n\r\nUse the Create function to create a value from a type. TypeBox will use default values if specified.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number({ default: 42 }) })\r\n\r\nconst A = Value.Create(T)                            // const A = { x: 0, y: 42 }\r\n```\r\n\r\n<a name='values-clone'></a>\r\n\r\n### Clone\r\n\r\nUse the Clone function to deeply clone a value.\r\n\r\n```typescript\r\nconst A = Value.Clone({ x: 1, y: 2, z: 3 })          // const A = { x: 1, y: 2, z: 3 }\r\n```\r\n\r\n<a name='values-check'></a>\r\n\r\n### Check\r\n\r\nUse the Check function to type check a value.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R = Value.Check(T, { x: 1 })                   // const R = true\r\n```\r\n\r\n<a name='values-convert'></a>\r\n\r\n### Convert\r\n\r\nUse the Convert function to convert a value into its target type if a reasonable conversion is possible. This function may return an invalid value and should be checked before use. Its return type is `unknown`.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number() })\r\n\r\nconst R1 = Value.Convert(T, { x: '3.14' })           // const R1 = { x: 3.14 }\r\n\r\nconst R2 = Value.Convert(T, { x: 'not a number' })   // const R2 = { x: 'not a number' }\r\n```\r\n\r\n<a name='values-clean'></a>\r\n\r\n### Clean\r\n\r\nUse Clean to remove excess properties from a value. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number(), \r\n  y: Type.Number() \r\n})\r\n\r\nconst X = Value.Clean(T, null)                        // const 'X = null\r\n\r\nconst Y = Value.Clean(T, { x: 1 })                    // const 'Y = { x: 1 }\r\n\r\nconst Z = Value.Clean(T, { x: 1, y: 2, z: 3 })        // const 'Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-default'></a>\r\n\r\n### Default\r\n\r\nUse Default to generate missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first.\r\n\r\n```typescript\r\nconst T = Type.Object({ \r\n  x: Type.Number({ default: 0 }), \r\n  y: Type.Number({ default: 0 })\r\n})\r\n\r\nconst X = Value.Default(T, null)                        // const 'X = null - non-enumerable\r\n\r\nconst Y = Value.Default(T, { })                         // const 'Y = { x: 0, y: 0 }\r\n\r\nconst Z = Value.Default(T, { x: 1 })                    // const 'Z = { x: 1, y: 0 }\r\n```\r\n\r\n<a name='values-cast'></a>\r\n\r\n### Cast\r\n\r\nUse the Cast function to upcast a value into a target type. This function will retain as much infomation as possible from the original value. The Cast function is intended to be used in data migration scenarios where existing values need to be upgraded to match a modified type.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() }, { additionalProperties: false })\r\n\r\nconst X = Value.Cast(T, null)                        // const X = { x: 0, y: 0 }\r\n\r\nconst Y = Value.Cast(T, { x: 1 })                    // const Y = { x: 1, y: 0 }\r\n\r\nconst Z = Value.Cast(T, { x: 1, y: 2, z: 3 })        // const Z = { x: 1, y: 2 }\r\n```\r\n\r\n<a name='values-decode'></a>\r\n\r\n### Decode\r\n\r\nUse the Decode function to decode a value from a type or throw if the value is invalid. The return value will infer as the decoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Decode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Decode(Type.String(), 42)             // throw\r\n```\r\n<a name='values-decode'></a>\r\n\r\n### Encode\r\n\r\nUse the Encode function to encode a value to a type or throw if the value is invalid. The return value will infer as the encoded type. This function will run Transform codecs if available.\r\n\r\n```typescript\r\nconst A = Value.Encode(Type.String(), 'hello')        // const A = 'hello'\r\n\r\nconst B = Value.Encode(Type.String(), 42)             // throw\r\n```\r\n\r\n<a name='values-equal'></a>\r\n\r\n### Equal\r\n\r\nUse the Equal function to deeply check for value equality.\r\n\r\n```typescript\r\nconst R = Value.Equal(                               // const R = true\r\n  { x: 1, y: 2, z: 3 },\r\n  { x: 1, y: 2, z: 3 }\r\n)\r\n```\r\n\r\n<a name='values-hash'></a>\r\n\r\n### Hash\r\n\r\nUse the Hash function to create a [FNV1A-64](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) non cryptographic hash of a value.\r\n\r\n```typescript\r\nconst A = Value.Hash({ x: 1, y: 2, z: 3 })           // const A = 2910466848807138541n\r\n\r\nconst B = Value.Hash({ x: 1, y: 4, z: 3 })           // const B = 1418369778807423581n\r\n```\r\n\r\n<a name='values-diff'></a>\r\n\r\n### Diff\r\n\r\nUse the Diff function to generate a sequence of edits that will transform one value into another.\r\n\r\n```typescript\r\nconst E = Value.Diff(                                // const E = [\r\n  { x: 1, y: 2, z: 3 },                              //   { type: 'update', path: '/y', value: 4 },\r\n  { y: 4, z: 5, w: 6 }                               //   { type: 'update', path: '/z', value: 5 },\r\n)                                                    //   { type: 'insert', path: '/w', value: 6 },\r\n                                                     //   { type: 'delete', path: '/x' }\r\n                                                     // ]\r\n```\r\n\r\n<a name='values-patch'></a>\r\n\r\n### Patch\r\n\r\nUse the Patch function to apply a sequence of edits.\r\n\r\n```typescript\r\nconst A = { x: 1, y: 2 }\r\n\r\nconst B = { x: 3 }\r\n\r\nconst E = Value.Diff(A, B)                           // const E = [\r\n                                                     //   { type: 'update', path: '/x', value: 3 },\r\n                                                     //   { type: 'delete', path: '/y' }\r\n                                                     // ]\r\n\r\nconst C = Value.Patch<typeof B>(A, E)                // const C = { x: 3 }\r\n```\r\n\r\n<a name='values-errors'></a>\r\n\r\n### Errors\r\n\r\nUse the Errors function to enumerate validation errors.\r\n\r\n```typescript\r\nconst T = Type.Object({ x: Type.Number(), y: Type.Number() })\r\n\r\nconst R = [...Value.Errors(T, { x: '42' })]          // const R = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: '42',\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\n<a name='values-mutate'></a>\r\n\r\n### Mutate\r\n\r\nUse the Mutate function to perform a deep mutable value assignment while retaining internal references.\r\n\r\n```typescript\r\nconst Y = { z: 1 }                                   // const Y = { z: 1 }\r\nconst X = { y: Y }                                   // const X = { y: { z: 1 } }\r\nconst A = { x: X }                                   // const A = { x: { y: { z: 1 } } }\r\n\r\nValue.Mutate(A, { x: { y: { z: 2 } } })              // A' = { x: { y: { z: 2 } } }\r\n\r\nconst R0 = A.x.y.z === 2                             // const R0 = true\r\nconst R1 = A.x.y === Y                               // const R1 = true\r\nconst R2 = A.x === X                                 // const R2 = true\r\n```\r\n\r\n<a name='values-pointer'></a>\r\n\r\n### Pointer\r\n\r\nUse ValuePointer to perform mutable updates on existing values using [RFC6901](https://www.rfc-editor.org/rfc/rfc6901) Json Pointers.\r\n\r\n```typescript\r\nimport { ValuePointer } from '@sinclair/typebox/value'\r\n\r\nconst A = { x: 0, y: 0, z: 0 }\r\n\r\nValuePointer.Set(A, '/x', 1)                         // A' = { x: 1, y: 0, z: 0 }\r\nValuePointer.Set(A, '/y', 1)                         // A' = { x: 1, y: 1, z: 0 }\r\nValuePointer.Set(A, '/z', 1)                         // A' = { x: 1, y: 1, z: 1 }\r\n```\r\n\r\n<a name='typeregistry'></a>\r\n\r\n## TypeRegistry\r\n\r\nThe TypeBox type system can be extended with additional types and formats using the TypeRegistry and FormatRegistry modules. These modules integrate deeply with TypeBox's internal type checking infrastructure and can be used to create application specific types, or register schematics for alternative specifications.\r\n\r\n<a name='typeregistry-type'></a>\r\n\r\n### TypeRegistry\r\n\r\nUse the TypeRegistry to register a new type. The Kind must match the registered type name.\r\n\r\n```typescript\r\nimport { TypeRegistry, Symbols } from '@sinclair/typebox'\r\n\r\nTypeRegistry.Set('Foo', (schema, value) => value === 'foo')\r\n\r\nconst A = Value.Check({ [Kind]: 'Foo' }, 'foo')      // const A = true\r\nconst B = Value.Check({ [Kind]: 'Foo' }, 'bar')      // const B = false\r\n```\r\n\r\n<a name='typeregistry-format'></a>\r\n\r\n### FormatRegistry\r\n\r\nUse the FormatRegistry to register a string format.\r\n\r\n```typescript\r\nimport { FormatRegistry } from '@sinclair/typebox'\r\n\r\nFormatRegistry.Set('foo', (value) => value === 'foo')\r\n\r\nconst T = Type.String({ format: 'foo' })\r\n\r\nconst A = Value.Check(T, 'foo')                      // const A = true\r\nconst B = Value.Check(T, 'bar')                      // const B = false\r\n```\r\n\r\n<a name='typecheck'></a>\r\n\r\n## TypeCheck\r\n\r\nTypeBox types target Json Schema Draft 7 and are compatible with any validator that supports this specification. TypeBox also provides a built in type checking compiler designed specifically for TypeBox types that offers high performance compilation and value checking.\r\n\r\nThe following sections detail using Ajv and the TypeBox compiler infrastructure.\r\n\r\n<a name='typecheck-ajv'></a>\r\n\r\n## Ajv\r\n\r\nThe following shows the recommended setup for Ajv.\r\n\r\n```bash\r\n$ npm install ajv ajv-formats --save\r\n```\r\n\r\n```typescript\r\nimport { Type }   from '@sinclair/typebox'\r\nimport addFormats from 'ajv-formats'\r\nimport Ajv        from 'ajv'\r\n\r\nconst ajv = addFormats(new Ajv({}), [\r\n  'date-time',\r\n  'time',\r\n  'date',\r\n  'email',\r\n  'hostname',\r\n  'ipv4',\r\n  'ipv6',\r\n  'uri',\r\n  'uri-reference',\r\n  'uuid',\r\n  'uri-template',\r\n  'json-pointer',\r\n  'relative-json-pointer',\r\n  'regex'\r\n])\r\n\r\nconst validate = ajv.compile(Type.Object({\r\n  x: Type.Number(),\r\n  y: Type.Number(),\r\n  z: Type.Number()\r\n}))\r\n\r\nconst R = validate({ x: 1, y: 2, z: 3 })             // const R = true\r\n```\r\n\r\n<a name='typecheck-typecompiler'></a>\r\n\r\n### TypeCompiler\r\n\r\nThe TypeBox TypeCompiler is a high performance JIT validation compiler that transforms TypeBox types into optimized JavaScript validation routines. The compiler is tuned for fast compilation as well as fast value assertion. It is built to serve as a validation backend that can be integrated into larger applications. It can also be used for code generation.\r\n\r\nThe TypeCompiler is provided as an optional import.\r\n\r\n```typescript\r\nimport { TypeCompiler } from '@sinclair/typebox/compiler'\r\n```\r\n\r\nUse the Compile function to JIT compile a type. Note that compilation is generally an expensive operation and should only be performed once per type during application start up. TypeBox does not cache previously compiled types, and applications are expected to hold references to each compiled type for the lifetime of the application.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst R = C.Check({ x: 1, y: 2, z: 3 })              // const R = true\r\n```\r\n\r\nUse the Errors function to generate diagnostic errors for a value. The Errors function will return an iterator that when enumerated; will perform an exhaustive check across the entire value yielding any error found. For performance, this function should only be called after a failed Check. Applications may also choose to yield only the first value to avoid exhaustive error generation.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Compile(Type.Object({         // const C: TypeCheck<TObject<{\r\n  x: Type.Number(),                                  //     x: TNumber;\r\n  y: Type.Number(),                                  //     y: TNumber;\r\n  z: Type.Number()                                   //     z: TNumber;\r\n}))                                                  // }>>\r\n\r\nconst value = { }\r\n\r\nconst first = C.Errors(value).First()                // const first = {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }\r\n\r\nconst all = [...C.Errors(value)]                     // const all = [{\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/x',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/y',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }, {\r\n                                                     //   schema: { type: 'number' },\r\n                                                     //   path: '/z',\r\n                                                     //   value: undefined,\r\n                                                     //   message: 'Expected number'\r\n                                                     // }]\r\n```\r\n\r\nUse the Code function to generate assertion functions as strings. This function can be used to generate code that can be written to disk as importable modules. This technique is sometimes referred to as Ahead of Time (AOT) compilation. The following generates code to check a string.\r\n\r\n```typescript\r\nconst C = TypeCompiler.Code(Type.String())           // const C = `return function check(value) {\r\n                                                     //   return (\r\n                                                     //     (typeof value === 'string')\r\n                                                     //   )\r\n                                                     // }`\r\n```\r\n\r\n<a name='typesystem'></a>\r\n\r\n## TypeSystem\r\n\r\nThe TypeBox TypeSystem module provides configurations to use either Json Schema or TypeScript type checking semantics. Configurations made to the TypeSystem module are observed by the TypeCompiler, Value and Error modules.\r\n\r\n<a name='typesystem-policies'></a>\r\n\r\n### Policies\r\n\r\nTypeBox validates using standard Json Schema assertion policies by default. The TypeSystemPolicy module can override some of these to have TypeBox assert values inline with TypeScript static checks. It also provides overrides for certain checking rules related to non-serializable values (such as void) which can be helpful in Json based protocols such as Json Rpc 2.0. \r\n\r\nThe following overrides are available.\r\n\r\n```typescript\r\nimport { TypeSystemPolicy } from '@sinclair/typebox/system'\r\n\r\n// Disallow undefined values for optional properties (default is false)\r\n//\r\n// const A: { x?: number } = { x: undefined } - disallowed when enabled\r\n\r\nTypeSystemPolicy.ExactOptionalPropertyTypes = true\r\n\r\n// Allow arrays to validate as object types (default is false)\r\n//\r\n// const A: {} = [] - allowed in TS\r\n\r\nTypeSystemPolicy.AllowArrayObject = true\r\n\r\n// Allow numeric values to be NaN or + or - Infinity (default is false)\r\n//\r\n// const A: number = NaN - allowed in TS\r\n\r\nTypeSystemPolicy.AllowNaN = true\r\n\r\n// Allow void types to check with undefined and null (default is false)\r\n//\r\n// Used to signal void return on Json-Rpc 2.0 protocol\r\n\r\nTypeSystemPolicy.AllowNullVoid = true\r\n```\r\n\r\n<a name='error-function'></a>\r\n\r\n## Error Function\r\n\r\nError messages in TypeBox can be customized by defining an ErrorFunction. This function allows for the localization of error messages as well as enabling custom error messages for custom types. By default, TypeBox will generate messages using the `en-US` locale. To support additional locales, you can replicate the function found in `src/errors/function.ts` and create a locale specific translation. The function can then be set via SetErrorFunction.\r\n\r\nThe following example shows an inline error function that intercepts errors for String, Number and Boolean only. The DefaultErrorFunction is used to return a default error message.\r\n\r\n\r\n```typescript\r\nimport { SetErrorFunction, DefaultErrorFunction, ValueErrorType } from '@sinclair/typebox/errors'\r\n\r\nSetErrorFunction((error) => { // i18n override\r\n  switch(error.errorType) {\r\n    /* en-US */ case ValueErrorType.String: return 'Expected string'\r\n    /* fr-FR */ case ValueErrorType.Number: return 'Nombre attendu'  \r\n    /* ko-KR */ case ValueErrorType.Boolean: return '예상 부울'      \r\n    /* en-US */ default: return DefaultErrorFunction(error)          \r\n  }\r\n})\r\nconst T = Type.Object({                              // const T: TObject<{\r\n  x: Type.String(),                                  //  TString,\r\n  y: Type.Number(),                                  //  TNumber,\r\n  z: Type.Boolean()                                  //  TBoolean\r\n})                                                   // }>\r\n\r\nconst E = [...Value.Errors(T, {                      // const E = [{\r\n  x: null,                                           //   type: 48,\r\n  y: null,                                           //   schema: { ... },\r\n  z: null                                            //   path: '/x',\r\n})]                                                  //   value: null,\r\n                                                     //   message: 'Expected string'\r\n                                                     // }, {\r\n                                                     //   type: 34,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/y',\r\n                                                     //   value: null,\r\n                                                     //   message: 'Nombre attendu'\r\n                                                     // }, {\r\n                                                     //   type: 14,\r\n                                                     //   schema: { ... },\r\n                                                     //   path: '/z',\r\n                                                     //   value: null,\r\n                                                     //   message: '예상 부울'\r\n                                                     // }]\r\n```\r\n\r\n<a name='workbench'></a>\r\n\r\n## TypeBox Workbench\r\n\r\nTypeBox offers a web based code generation tool that can convert TypeScript types into TypeBox types as well as several other ecosystem libraries.\r\n\r\n[TypeBox Workbench Link Here](https://sinclairzx81.github.io/typebox-workbench/)\r\n\r\n<a name='codegen'></a>\r\n\r\n## TypeBox Codegen\r\n\r\nTypeBox provides a code generation library that can be integrated into toolchains to automate type translation between TypeScript and TypeBox. This library also includes functionality to transform TypeScript types to other ecosystem libraries.\r\n\r\n[TypeBox Codegen Link Here](https://github.com/sinclairzx81/typebox-codegen)\r\n\r\n<a name='ecosystem'></a>\r\n\r\n## Ecosystem\r\n\r\nThe following is a list of community packages that offer general tooling, extended functionality and framework integration support for TypeBox.\r\n\r\n| Package   |  Description |\r\n| ------------- | ------------- |\r\n| [drizzle-typebox](https://www.npmjs.com/package/drizzle-typebox) | Generates TypeBox types from Drizzle ORM schemas |\r\n| [elysia](https://github.com/elysiajs/elysia) | Fast and friendly Bun web framework |\r\n| [fastify-type-provider-typebox](https://github.com/fastify/fastify-type-provider-typebox) | Fastify TypeBox integration with the Fastify Type Provider |\r\n| [feathersjs](https://github.com/feathersjs/feathers) | The API and real-time application framework |\r\n| [fetch-typebox](https://github.com/erfanium/fetch-typebox) | Drop-in replacement for fetch that brings easy integration with TypeBox |\r\n| [h3-typebox](https://github.com/kevinmarrec/h3-typebox) | Schema validation utilities for h3 using TypeBox & Ajv |\r\n| [http-wizard](https://github.com/flodlc/http-wizard) | Type safe http client library for Fastify |\r\n| [openapi-box](https://github.com/geut/openapi-box) | Generate TypeBox types from OpenApi IDL + Http client library |\r\n| [schema2typebox](https://github.com/xddq/schema2typebox)  | Creating TypeBox code from Json Schemas |\r\n| [ts2typebox](https://github.com/xddq/ts2typebox) | Creating TypeBox code from Typescript types |\r\n| [typebox-form-parser](https://github.com/jtlapp/typebox-form-parser) | Parses form and query data based on TypeBox schemas |\r\n| [typebox-validators](https://github.com/jtlapp/typebox-validators) | Advanced validators supporting discriminated and heterogeneous unions |\r\n\r\n<a name='benchmark'></a>\r\n\r\n## Benchmark\r\n\r\nThis project maintains a set of benchmarks that measure Ajv, Value and TypeCompiler compilation and validation performance. These benchmarks can be run locally by cloning this repository and running `npm run benchmark`. The results below show for Ajv version 8.12.0 running on Node 20.10.0.\r\n\r\nFor additional comparative benchmarks, please refer to [typescript-runtime-type-benchmarks](https://moltar.github.io/typescript-runtime-type-benchmarks/).\r\n\r\n<a name='benchmark-compile'></a>\r\n\r\n### Compile\r\n\r\nThis benchmark measures compilation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │    1000    │ '    242 ms' │ '     10 ms' │ '   24.20 x' │\r\n│ Literal_Number             │    1000    │ '    200 ms' │ '      8 ms' │ '   25.00 x' │\r\n│ Literal_Boolean            │    1000    │ '    168 ms' │ '      6 ms' │ '   28.00 x' │\r\n│ Primitive_Number           │    1000    │ '    165 ms' │ '      8 ms' │ '   20.63 x' │\r\n│ Primitive_String           │    1000    │ '    154 ms' │ '      6 ms' │ '   25.67 x' │\r\n│ Primitive_String_Pattern   │    1000    │ '    208 ms' │ '     14 ms' │ '   14.86 x' │\r\n│ Primitive_Boolean          │    1000    │ '    142 ms' │ '      6 ms' │ '   23.67 x' │\r\n│ Primitive_Null             │    1000    │ '    143 ms' │ '      6 ms' │ '   23.83 x' │\r\n│ Object_Unconstrained       │    1000    │ '   1217 ms' │ '     31 ms' │ '   39.26 x' │\r\n│ Object_Constrained         │    1000    │ '   1275 ms' │ '     26 ms' │ '   49.04 x' │\r\n│ Object_Vector3             │    1000    │ '    405 ms' │ '     12 ms' │ '   33.75 x' │\r\n│ Object_Box3D               │    1000    │ '   1833 ms' │ '     27 ms' │ '   67.89 x' │\r\n│ Tuple_Primitive            │    1000    │ '    475 ms' │ '     13 ms' │ '   36.54 x' │\r\n│ Tuple_Object               │    1000    │ '   1267 ms' │ '     30 ms' │ '   42.23 x' │\r\n│ Composite_Intersect        │    1000    │ '    604 ms' │ '     18 ms' │ '   33.56 x' │\r\n│ Composite_Union            │    1000    │ '    545 ms' │ '     20 ms' │ '   27.25 x' │\r\n│ Math_Vector4               │    1000    │ '    829 ms' │ '     12 ms' │ '   69.08 x' │\r\n│ Math_Matrix4               │    1000    │ '    405 ms' │ '     10 ms' │ '   40.50 x' │\r\n│ Array_Primitive_Number     │    1000    │ '    372 ms' │ '     12 ms' │ '   31.00 x' │\r\n│ Array_Primitive_String     │    1000    │ '    327 ms' │ '      5 ms' │ '   65.40 x' │\r\n│ Array_Primitive_Boolean    │    1000    │ '    300 ms' │ '      4 ms' │ '   75.00 x' │\r\n│ Array_Object_Unconstrained │    1000    │ '   1755 ms' │ '     21 ms' │ '   83.57 x' │\r\n│ Array_Object_Constrained   │    1000    │ '   1516 ms' │ '     20 ms' │ '   75.80 x' │\r\n│ Array_Tuple_Primitive      │    1000    │ '    825 ms' │ '     14 ms' │ '   58.93 x' │\r\n│ Array_Tuple_Object         │    1000    │ '   1616 ms' │ '     16 ms' │ '  101.00 x' │\r\n│ Array_Composite_Intersect  │    1000    │ '    776 ms' │ '     16 ms' │ '   48.50 x' │\r\n│ Array_Composite_Union      │    1000    │ '    820 ms' │ '     14 ms' │ '   58.57 x' │\r\n│ Array_Math_Vector4         │    1000    │ '   1166 ms' │ '     15 ms' │ '   77.73 x' │\r\n│ Array_Math_Matrix4         │    1000    │ '    695 ms' │ '      8 ms' │ '   86.88 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-validate'></a>\r\n\r\n### Validate\r\n\r\nThis benchmark measures validation performance for varying types.\r\n\r\n```typescript\r\n┌────────────────────────────┬────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\r\n│          (index)           │ Iterations │  ValueCheck  │     Ajv      │ TypeCompiler │ Performance  │\r\n├────────────────────────────┼────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\r\n│ Literal_String             │  1000000   │ '     18 ms' │ '      5 ms' │ '      4 ms' │ '    1.25 x' │\r\n│ Literal_Number             │  1000000   │ '     16 ms' │ '     18 ms' │ '     10 ms' │ '    1.80 x' │\r\n│ Literal_Boolean            │  1000000   │ '     15 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Primitive_Number           │  1000000   │ '     21 ms' │ '     19 ms' │ '     10 ms' │ '    1.90 x' │\r\n│ Primitive_String           │  1000000   │ '     22 ms' │ '     18 ms' │ '      9 ms' │ '    2.00 x' │\r\n│ Primitive_String_Pattern   │  1000000   │ '    155 ms' │ '     41 ms' │ '     34 ms' │ '    1.21 x' │\r\n│ Primitive_Boolean          │  1000000   │ '     18 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Primitive_Null             │  1000000   │ '     19 ms' │ '     17 ms' │ '      9 ms' │ '    1.89 x' │\r\n│ Object_Unconstrained       │  1000000   │ '   1003 ms' │ '     32 ms' │ '     24 ms' │ '    1.33 x' │\r\n│ Object_Constrained         │  1000000   │ '   1265 ms' │ '     49 ms' │ '     38 ms' │ '    1.29 x' │\r\n│ Object_Vector3             │  1000000   │ '    418 ms' │ '     22 ms' │ '     13 ms' │ '    1.69 x' │\r\n│ Object_Box3D               │  1000000   │ '   2035 ms' │ '     56 ms' │ '     49 ms' │ '    1.14 x' │\r\n│ Object_Recursive           │  1000000   │ '   5243 ms' │ '    326 ms' │ '    157 ms' │ '    2.08 x' │\r\n│ Tuple_Primitive            │  1000000   │ '    153 ms' │ '     20 ms' │ '     12 ms' │ '    1.67 x' │\r\n│ Tuple_Object               │  1000000   │ '    781 ms' │ '     28 ms' │ '     18 ms' │ '    1.56 x' │\r\n│ Composite_Intersect        │  1000000   │ '    742 ms' │ '     25 ms' │ '     14 ms' │ '    1.79 x' │\r\n│ Composite_Union            │  1000000   │ '    558 ms' │ '     24 ms' │ '     13 ms' │ '    1.85 x' │\r\n│ Math_Vector4               │  1000000   │ '    246 ms' │ '     22 ms' │ '     11 ms' │ '    2.00 x' │\r\n│ Math_Matrix4               │  1000000   │ '   1052 ms' │ '     43 ms' │ '     28 ms' │ '    1.54 x' │\r\n│ Array_Primitive_Number     │  1000000   │ '    272 ms' │ '     22 ms' │ '     12 ms' │ '    1.83 x' │\r\n│ Array_Primitive_String     │  1000000   │ '    235 ms' │ '     24 ms' │ '     14 ms' │ '    1.71 x' │\r\n│ Array_Primitive_Boolean    │  1000000   │ '    134 ms' │ '     23 ms' │ '     14 ms' │ '    1.64 x' │\r\n│ Array_Object_Unconstrained │  1000000   │ '   6280 ms' │ '     65 ms' │ '     59 ms' │ '    1.10 x' │\r\n│ Array_Object_Constrained   │  1000000   │ '   6076 ms' │ '    130 ms' │ '    119 ms' │ '    1.09 x' │\r\n│ Array_Object_Recursive     │  1000000   │ '  22738 ms' │ '   1730 ms' │ '    635 ms' │ '    2.72 x' │\r\n│ Array_Tuple_Primitive      │  1000000   │ '    689 ms' │ '     35 ms' │ '     30 ms' │ '    1.17 x' │\r\n│ Array_Tuple_Object         │  1000000   │ '   3266 ms' │ '     63 ms' │ '     52 ms' │ '    1.21 x' │\r\n│ Array_Composite_Intersect  │  1000000   │ '   3310 ms' │ '     44 ms' │ '     36 ms' │ '    1.22 x' │\r\n│ Array_Composite_Union      │  1000000   │ '   2432 ms' │ '     69 ms' │ '     33 ms' │ '    2.09 x' │\r\n│ Array_Math_Vector4         │  1000000   │ '   1158 ms' │ '     37 ms' │ '     24 ms' │ '    1.54 x' │\r\n│ Array_Math_Matrix4         │  1000000   │ '   5435 ms' │ '    132 ms' │ '     92 ms' │ '    1.43 x' │\r\n└────────────────────────────┴────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\r\n```\r\n\r\n<a name='benchmark-compression'></a>\r\n\r\n### Compression\r\n\r\nThe following table lists esbuild compiled and minified sizes for each TypeBox module.\r\n\r\n```typescript\r\n┌──────────────────────┬────────────┬────────────┬─────────────┐\r\n│       (index)        │  Compiled  │  Minified  │ Compression │\r\n├──────────────────────┼────────────┼────────────┼─────────────┤\r\n│ typebox/compiler     │ '120.6 kb' │ ' 52.9 kb' │  '2.28 x'   │\r\n│ typebox/errors       │ ' 55.7 kb' │ ' 25.5 kb' │  '2.19 x'   │\r\n│ typebox/system       │ '  4.7 kb' │ '  2.0 kb' │  '2.33 x'   │\r\n│ typebox/value        │ '146.2 kb' │ ' 62.0 kb' │  '2.36 x'   │\r\n│ typebox              │ ' 91.4 kb' │ ' 37.8 kb' │  '2.42 x'   │\r\n└──────────────────────┴────────────┴────────────┴─────────────┘\r\n```\r\n\r\n<a name='contribute'></a>\r\n\r\n## Contribute\r\n\r\nTypeBox is open to community contribution. Please ensure you submit an open issue before submitting your pull request. The TypeBox project preferences open community discussion prior to accepting new features.\r\n","readmeFilename":"readme.md","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0-dev-28","_integrity":"sha512-elOextcszz0f4sjgTFocol5xzItnqc3EkOjXeEV4VEKKKOL3X+KCebj6Hopf/Qx1Sv1RUWrJuAjbD4JlUiYOAA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0-dev-28.tgz","_from":"file:sinclair-typebox-0.32.0-dev-28.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-elOextcszz0f4sjgTFocol5xzItnqc3EkOjXeEV4VEKKKOL3X+KCebj6Hopf/Qx1Sv1RUWrJuAjbD4JlUiYOAA==","shasum":"184b179e31aacfbbccffdad30a8bcb661116dcd8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0-dev-28.tgz","fileCount":924,"unpackedSize":1348389,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQChn+3FTghkNKv1JZ8voVbs5YsWjxznr6x9/fSBrc77uQIhAOnXPLjMB+p2Y8gnBMr61er4HMuSthOmUYg+FmtNSNbx"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0-dev-28_1702528738529_0.8387211120071285"},"_hasShrinkwrap":false},"0.32.0":{"name":"@sinclair/typebox","version":"0.32.0","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"module":"./build/import/index.mjs","types":"./build/require/index.d.ts","main":"./build/require/index.js","exports":{".":{"require":{"default":"./build/require/index.js","types":"./build/require/index.d.ts"},"import":{"default":"./build/import/index.mjs","types":"./build/import/index.d.mts"}},"./compiler":{"require":{"default":"./build/require/compiler/index.js","types":"./build/require/compiler/index.d.ts"},"import":{"default":"./build/import/compiler/index.mjs","types":"./build/import/compiler/index.d.mts"}},"./errors":{"require":{"default":"./build/require/errors/index.js","types":"./build/require/errors/index.d.ts"},"import":{"default":"./build/import/errors/index.mjs","types":"./build/import/errors/index.d.mts"}},"./system":{"require":{"default":"./build/require/system/index.js","types":"./build/require/system/index.d.ts"},"import":{"default":"./build/import/system/index.mjs","types":"./build/import/system/index.d.mts"}},"./type":{"require":{"default":"./build/require/type/index.js","types":"./build/require/type/index.d.ts"},"import":{"default":"./build/import/type/index.mjs","types":"./build/import/type/index.d.mts"}},"./value":{"require":{"default":"./build/require/value/index.js","types":"./build/require/value/index.d.ts"},"import":{"default":"./build/import/value/index.mjs","types":"./build/import/value/index.d.mts"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.0","_integrity":"sha512-FdBgO+ib0JCSPtq55cDva/5xd55vfAAyTXWVLCaTAFzNjVPaR5lNRKoEzMHTtArELEaHNs4E6WmdNJIY+gUoZw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.0.tgz","_from":"file:sinclair-typebox-0.32.0.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-FdBgO+ib0JCSPtq55cDva/5xd55vfAAyTXWVLCaTAFzNjVPaR5lNRKoEzMHTtArELEaHNs4E6WmdNJIY+gUoZw==","shasum":"17b6003a99f34686cc28d50c3ee2a68c9b3d6099","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.0.tgz","fileCount":924,"unpackedSize":1348392,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCB6IIV2420ohtbze7u3v98f2XkPzMLn9k4Xw/J48itxAIhAKldd5tLFAHRx8+da6Eille1GRypNv7XPWHW4aSZUdv7"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.0_1703221645352_0.7914765093974809"},"_hasShrinkwrap":false},"0.32.1":{"name":"@sinclair/typebox","version":"0.32.1","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.1","_integrity":"sha512-DJKtxrcKL5MqUc5Gr0w+m/744wXhinq3d3hrRokNz4I9v5JbQCJleYqaQGfFwgkeZKHh01abFevbWX44CmUy1w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.1.tgz","_from":"file:sinclair-typebox-0.32.1.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-DJKtxrcKL5MqUc5Gr0w+m/744wXhinq3d3hrRokNz4I9v5JbQCJleYqaQGfFwgkeZKHh01abFevbWX44CmUy1w==","shasum":"082ce58e8fc9200a1056e76a467bf8ae1ffcf33e","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.1.tgz","fileCount":924,"unpackedSize":1348392,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEwMuXzEKQdxKoJodtu+S4wnJOw5r9vkzLfrbyHYx3ENAiBvowu82YOPTcahZle6y/VRgqPkmq0ib1J90KbrvwNdww=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.1_1703306657818_0.866481235770802"},"_hasShrinkwrap":false},"0.32.2":{"name":"@sinclair/typebox","version":"0.32.2","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.2","_integrity":"sha512-QnCMPXH56cA/hYiHGZSm1nvopFisrubJu4gYTWAapT66ieo3yroPc6hLYFieAs+D9ZLJuD910adm117xZplsOQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.2.tgz","_from":"file:sinclair-typebox-0.32.2.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-QnCMPXH56cA/hYiHGZSm1nvopFisrubJu4gYTWAapT66ieo3yroPc6hLYFieAs+D9ZLJuD910adm117xZplsOQ==","shasum":"11ced43441a33757e9857e21dff60ce2f693eac9","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.2.tgz","fileCount":924,"unpackedSize":1348432,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDR5CfNGblhcr1GTiLbeAMFJHwl9PhsxV01/K9SCitnegIgczZdiOaO+GtrUnkdPARP80xcgUXV7zmAIaMXYn5hz5M="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.2_1703420273718_0.037704388134492284"},"_hasShrinkwrap":false},"0.32.3":{"name":"@sinclair/typebox","version":"0.32.3","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.3","_integrity":"sha512-o1OzDySkCSEobAEAVS1SGrzznes9KqPOC3arGfH5rQhOIeokLQYLKQmy68lr979BmPr43v4m9d85ttUSRpHdFA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.3.tgz","_from":"file:sinclair-typebox-0.32.3.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-o1OzDySkCSEobAEAVS1SGrzznes9KqPOC3arGfH5rQhOIeokLQYLKQmy68lr979BmPr43v4m9d85ttUSRpHdFA==","shasum":"ccc2ae8b59f9a7e8e1f6aea0965ef8ee2c7796c8","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.3.tgz","fileCount":924,"unpackedSize":1348452,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEsFULRdtV4ICEqIqsMV1BuUiHjSxJGDGn2hMcckdRwmAiA7NhIO+8aXryD3qqFOUhBpTLzRjhikHREIpehXQEq0+g=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.3_1703431817312_0.7447103019296877"},"_hasShrinkwrap":false},"0.32.4":{"name":"@sinclair/typebox","version":"0.32.4","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.4","_integrity":"sha512-Q2Pex6H+HGuyxIGuFadkpqwtjZFXiVZlvy1rVX9XgAzUrDmUDEM69M2c4CkWUgMJ1NaFPvUf+cMBljY96GJVNQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.4.tgz","_from":"file:sinclair-typebox-0.32.4.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-Q2Pex6H+HGuyxIGuFadkpqwtjZFXiVZlvy1rVX9XgAzUrDmUDEM69M2c4CkWUgMJ1NaFPvUf+cMBljY96GJVNQ==","shasum":"94b8744215c1f54f38df9bd33626ef821ce66ca3","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.4.tgz","fileCount":924,"unpackedSize":1348510,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBG4eVjv+IRiyfVrK5GBCK/kBl40fOVULMHlGxiBPLviAiBfT25SjwEqhaNAwVQ0A0s3fln14qd3CG3aOHQgoyyg/g=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.4_1703822784271_0.14906610378893315"},"_hasShrinkwrap":false},"0.32.5":{"name":"@sinclair/typebox","version":"0.32.5","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.5","_integrity":"sha512-0M6FyxZwIEu/Ly6W+l7iYqiZQYJ8khLOJGzg+cxivNKRKqk9hctcuDC0UYI7B9vNgycExA8w40m4M3yDKW37RA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.5.tgz","_from":"file:sinclair-typebox-0.32.5.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-0M6FyxZwIEu/Ly6W+l7iYqiZQYJ8khLOJGzg+cxivNKRKqk9hctcuDC0UYI7B9vNgycExA8w40m4M3yDKW37RA==","shasum":"7f5995e2abc02be4e9fa38b58987b77e0bfe5ead","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.5.tgz","fileCount":924,"unpackedSize":1348230,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDli1hY4NdE69SgU5xXP1+GKbxFAhWe2yAXnWqiMvCQEQIgYg2MYvjeboX4nwubBzf2IIsDRgsSW7A+icxuJsp5IZs="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.5_1704426622807_0.991759221016931"},"_hasShrinkwrap":false},"0.32.6":{"name":"@sinclair/typebox","version":"0.32.6","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.6","_integrity":"sha512-mgcPAfLZEL2B/hrF+vPDdwwZ1MR0UuALvz+tI2zx7IYHfREmua3C82XsYgkwxCCJKpO3ibTje4QrHYrOAHWhxA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.6.tgz","_from":"file:sinclair-typebox-0.32.6.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-mgcPAfLZEL2B/hrF+vPDdwwZ1MR0UuALvz+tI2zx7IYHfREmua3C82XsYgkwxCCJKpO3ibTje4QrHYrOAHWhxA==","shasum":"b3a7c5290ce6f713924f29ffad0bfdf0db4c1b6a","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.6.tgz","fileCount":924,"unpackedSize":1350139,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDB9WU06XPd5r/KL8n/XIH3tu3+cOYNc/Gx0Ssgb1iPgwIgfStlgSL29N0G0EErI23lStF5pNqtksQokY4NInrYr2E="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.6_1704858995315_0.9069802485019476"},"_hasShrinkwrap":false},"0.32.7":{"name":"@sinclair/typebox","version":"0.32.7","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.7","_integrity":"sha512-XI+xC3gBLkto5nigJpqxF63uth+3t5PQt3o/yWFvvzuXax1nvRKlm5iSorgyZiT70REsGHk6i4EYeFaONFWwbQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.7.tgz","_from":"file:sinclair-typebox-0.32.7.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-XI+xC3gBLkto5nigJpqxF63uth+3t5PQt3o/yWFvvzuXax1nvRKlm5iSorgyZiT70REsGHk6i4EYeFaONFWwbQ==","shasum":"05822cf21091ddca245c24aa9163bb7384db5c1f","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.7.tgz","fileCount":924,"unpackedSize":1350241,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD9PVOzTwdtmDX7mwXfnsTYCKm8bX3rk8BKW8Ud6dFDEgIgHoysrjIGJ1a6NbOlThPlZ1tWe0MvPg/WtjAMJmoVNJg="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.7_1704884773591_0.2363028479624656"},"_hasShrinkwrap":false},"0.32.8":{"name":"@sinclair/typebox","version":"0.32.8","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.8","_integrity":"sha512-ifqNG6GBr0QRao2Vy+2P2WzxkOnpGmHfZCFXWwuR/0elH4h79mGXN8mEYwnJ2qGEr7MGgfqvf8Njwj4dBGFMBA==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.8.tgz","_from":"file:sinclair-typebox-0.32.8.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-ifqNG6GBr0QRao2Vy+2P2WzxkOnpGmHfZCFXWwuR/0elH4h79mGXN8mEYwnJ2qGEr7MGgfqvf8Njwj4dBGFMBA==","shasum":"9d1559d1dfe8e7f75004cbbb2037d9d0085fef44","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.8.tgz","fileCount":924,"unpackedSize":1351862,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBol2cIsAAS2+qVDL+SaecVYD2NZDeqkRoBwaIeNY73LAiEA6zvcFPJ2tINY/i/7Z749fHq2TJ4S4bKhsv42XRNuh8g="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.8_1704888224150_0.7265404898731502"},"_hasShrinkwrap":false},"0.32.9":{"name":"@sinclair/typebox","version":"0.32.9","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.9","_integrity":"sha512-6oeJJPTIb0y3cs713HmXmXSx3WRWgid74KICYL9blOhNFuAcAB18dDWfATgcgzynfpF5xDzHGxEVbDYYr6nvgg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.9.tgz","_from":"file:sinclair-typebox-0.32.9.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-6oeJJPTIb0y3cs713HmXmXSx3WRWgid74KICYL9blOhNFuAcAB18dDWfATgcgzynfpF5xDzHGxEVbDYYr6nvgg==","shasum":"025f05fa16aea3357f78cdcdbecbd6047de87673","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.9.tgz","fileCount":924,"unpackedSize":1357673,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBeg5FdJBKVBpsXdNuEb3v64RuSpCPhRru2acx2PdryQAiADd//W2xCE4mlvq/huJzIcFzSUOdTmfTsBvYaNk38URw=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.9_1705071871399_0.7575111929761458"},"_hasShrinkwrap":false},"0.32.10":{"name":"@sinclair/typebox","version":"0.32.10","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.10","_integrity":"sha512-CZwwK09fdC/uKPD/cCJbNBLPQww3gYl5bYu86cqfziPXTVatUGU/o+vqu84gDGuIDoQRIvCB0Uj0MvcgsCsb8g==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.10.tgz","_from":"file:sinclair-typebox-0.32.10.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-CZwwK09fdC/uKPD/cCJbNBLPQww3gYl5bYu86cqfziPXTVatUGU/o+vqu84gDGuIDoQRIvCB0Uj0MvcgsCsb8g==","shasum":"346ee6b68242142a28e01d72b42521b43a005156","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.10.tgz","fileCount":924,"unpackedSize":1357854,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICnMkpCsuvqqUWX+G05hop0hJopZ7tNos4CU+ZymbPrkAiEApdskn8HWAQvkPRwalDVW89suHoYV0syJRsRTov3+K9Q="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.10_1705510851908_0.6690640622086526"},"_hasShrinkwrap":false},"0.32.11":{"name":"@sinclair/typebox","version":"0.32.11","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.11","_integrity":"sha512-YtmrPo85LgWnw12GEwfdu44P/I7GsU6r/7PNHDxToHEIJxZk0+c3pZQBBj9ElP2uB2UwG2H2aazB+UHDG4iC1w==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.11.tgz","_from":"file:sinclair-typebox-0.32.11.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-YtmrPo85LgWnw12GEwfdu44P/I7GsU6r/7PNHDxToHEIJxZk0+c3pZQBBj9ElP2uB2UwG2H2aazB+UHDG4iC1w==","shasum":"b0ec8db3b178dfd237e07b0f952cff08e6f7a16d","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.11.tgz","fileCount":932,"unpackedSize":1363870,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEz3G5CcpUEQ5DMiRdlVi/zsIAGyuFJPD7OWuDIEJ15ZAiBAZJ30aCbCT27CxQpQamT/CHKUxCy9ln+G0R/jUM331g=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.11_1705775592972_0.4731341080164333"},"_hasShrinkwrap":false},"0.32.12":{"name":"@sinclair/typebox","version":"0.32.12","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.12","_integrity":"sha512-uKRQW9a+alkPwZMzQk6W8cCZC117kZJZ3GQx3Yn9unu2oWX09PxEsyMF7D9tuvoH8se1hIZqLRja+FtU7HKGhQ==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.12.tgz","_from":"file:sinclair-typebox-0.32.12.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-uKRQW9a+alkPwZMzQk6W8cCZC117kZJZ3GQx3Yn9unu2oWX09PxEsyMF7D9tuvoH8se1hIZqLRja+FtU7HKGhQ==","shasum":"6e0fef781f9ec6709d6c6c7e38984c8e7af3a1da","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.12.tgz","fileCount":932,"unpackedSize":1364178,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIByUa+8YCshn/5R2sBdnUL6pxu84LUCkeFfR9QePBOg3AiBUUyw4Xoxmuo7fIzptuOxHp9Q9AgupjRP1rm7VEdq7+w=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.12_1705817671730_0.8824180790747733"},"_hasShrinkwrap":false},"0.32.13":{"name":"@sinclair/typebox","version":"0.32.13","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.13","_integrity":"sha512-6gfhrgov2RWxPIlGyFcCVn1DejhmQvObIiBIx/Qx3FRnxlLS/RuoyDxK1hhhVU+S5+1Xmul32QALLErVfinyxw==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.13.tgz","_from":"file:sinclair-typebox-0.32.13.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-6gfhrgov2RWxPIlGyFcCVn1DejhmQvObIiBIx/Qx3FRnxlLS/RuoyDxK1hhhVU+S5+1Xmul32QALLErVfinyxw==","shasum":"1b9bf6de7319d17bfb6e34b9b5b2051ba6c71278","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.13.tgz","fileCount":932,"unpackedSize":1366569,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCbNTfv840Frxc30jSxmSCbs1gXEKk2T3MVJ0FQhJH4UQIhANO+o07o9yTMhN/EyWa1lxvGf4V97SJtWPYrg7eNc9zZ"}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.13_1706219567676_0.3333706276843005"},"_hasShrinkwrap":false},"0.32.14":{"name":"@sinclair/typebox","version":"0.32.14","description":"Json Schema Type Builder with Static Type Resolution for TypeScript","keywords":["typescript","json-schema","validate","typecheck"],"author":{"name":"sinclairzx81"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"scripts":{"test":"echo test"},"types":"./build/require/index.d.ts","main":"./build/require/index.js","module":"./build/import/index.mjs","exports":{".":{"require":{"types":"./build/require/index.d.ts","default":"./build/require/index.js"},"import":{"types":"./build/import/index.d.mts","default":"./build/import/index.mjs"}},"./compiler":{"require":{"types":"./build/require/compiler/index.d.ts","default":"./build/require/compiler/index.js"},"import":{"types":"./build/import/compiler/index.d.mts","default":"./build/import/compiler/index.mjs"}},"./errors":{"require":{"types":"./build/require/errors/index.d.ts","default":"./build/require/errors/index.js"},"import":{"types":"./build/import/errors/index.d.mts","default":"./build/import/errors/index.mjs"}},"./system":{"require":{"types":"./build/require/system/index.d.ts","default":"./build/require/system/index.js"},"import":{"types":"./build/import/system/index.d.mts","default":"./build/import/system/index.mjs"}},"./type":{"require":{"types":"./build/require/type/index.d.ts","default":"./build/require/type/index.js"},"import":{"types":"./build/import/type/index.d.mts","default":"./build/import/type/index.mjs"}},"./value":{"require":{"types":"./build/require/value/index.d.ts","default":"./build/require/value/index.js"},"import":{"types":"./build/import/value/index.d.mts","default":"./build/import/value/index.mjs"}}},"bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"},"homepage":"https://github.com/sinclairzx81/typebox#readme","_id":"@sinclair/typebox@0.32.14","_integrity":"sha512-EC77Mw8huT2z9YlYbWfpIQgN6shZE1tH4NP4/Trig8UBel9FZNMZRJ42ubJI8PLor2uIU+waLml1dce5ReCOPg==","_resolved":"C:\\Users\\relay\\Desktop\\typebox\\target\\build\\sinclair-typebox-0.32.14.tgz","_from":"file:sinclair-typebox-0.32.14.tgz","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","dist":{"integrity":"sha512-EC77Mw8huT2z9YlYbWfpIQgN6shZE1tH4NP4/Trig8UBel9FZNMZRJ42ubJI8PLor2uIU+waLml1dce5ReCOPg==","shasum":"ef0a4ed981515fd430cadfb65cb6c2719a0b5539","tarball":"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.32.14.tgz","fileCount":932,"unpackedSize":1338880,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDr/0wBgHNc8EESjS15482fnabgNH67GwLJ0qsLWpgkgAiBX9QBCcKYw4h//7934YZbYvh1xJn6l/cfu56CQwyx5iA=="}]},"_npmUser":{"name":"sinclair","email":"haydn.developer@gmail.com"},"directories":{},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/typebox_0.32.14_1707621652940_0.6247011545994094"},"_hasShrinkwrap":false}},"time":{"created":"2020-03-04T22:11:50.809Z","0.8.0":"2020-03-04T22:11:51.157Z","modified":"2024-02-11T03:20:53.419Z","0.8.1":"2020-03-04T23:10:01.419Z","0.9.0":"2020-03-05T02:30:01.030Z","0.9.1":"2020-03-05T02:37:56.533Z","0.9.2":"2020-03-06T04:17:30.627Z","0.9.3":"2020-03-06T10:38:22.735Z","0.9.4":"2020-03-06T12:43:29.962Z","0.9.5":"2020-03-06T15:44:31.891Z","0.9.6":"2020-03-06T17:11:17.152Z","0.9.7":"2020-03-07T06:43:44.384Z","0.9.8":"2020-03-08T05:23:00.573Z","0.9.9":"2020-03-12T10:08:48.010Z","0.9.10":"2020-03-31T06:43:51.906Z","0.9.11":"2020-03-31T06:57:55.394Z","0.9.12":"2020-03-31T13:42:01.626Z","0.9.13":"2020-04-02T14:36:34.500Z","0.9.14":"2020-05-04T06:56:43.202Z","0.9.15":"2020-05-09T03:13:24.748Z","0.9.16":"2020-05-15T09:34:56.400Z","0.10.0":"2020-05-18T06:34:23.150Z","0.10.1":"2020-05-25T13:56:30.163Z","0.11.0":"2020-10-17T04:25:43.306Z","0.12.0":"2020-10-31T18:48:36.860Z","0.12.1":"2020-10-31T19:14:25.166Z","0.12.2":"2020-11-01T10:38:32.452Z","0.12.3":"2020-11-05T13:25:12.112Z","0.12.4":"2020-11-11T18:53:18.594Z","0.12.5":"2020-11-15T11:22:36.240Z","0.12.6":"2020-11-16T01:39:14.298Z","0.12.7":"2020-11-19T18:09:32.482Z","0.12.8":"2021-02-21T01:15:05.058Z","0.12.9":"2021-02-25T08:17:02.572Z","0.14.0":"2021-03-16T12:16:27.452Z","0.14.1":"2021-03-16T12:20:22.843Z","0.15.0":"2021-03-17T09:54:44.015Z","0.16.0":"2021-03-20T18:57:13.292Z","0.16.1":"2021-03-30T04:10:07.800Z","0.16.2":"2021-04-06T18:00:34.639Z","0.16.3":"2021-04-10T14:26:55.580Z","0.16.4":"2021-04-11T04:49:26.471Z","0.16.5":"2021-04-13T03:32:14.739Z","0.16.6":"2021-05-18T03:26:05.937Z","0.16.7":"2021-05-18T04:11:53.932Z","0.17.0":"2021-06-26T07:01:44.283Z","0.17.1":"2021-06-26T07:41:03.631Z","0.17.2":"2021-07-03T11:04:37.234Z","0.17.3":"2021-07-03T17:13:16.533Z","0.17.4":"2021-07-03T17:16:34.083Z","0.17.5":"2021-07-06T08:10:09.068Z","0.17.6":"2021-07-06T08:13:54.511Z","0.17.7":"2021-07-06T11:50:34.881Z","0.17.8":"2021-07-15T09:54:48.585Z","0.18.0":"2021-07-20T17:10:49.431Z","0.18.1":"2021-07-23T12:43:34.891Z","0.19.0":"2021-07-25T11:15:15.381Z","0.19.1":"2021-07-25T11:18:42.466Z","0.19.2":"2021-07-25T11:25:56.461Z","0.20.0":"2021-07-27T17:23:04.949Z","0.20.1":"2021-07-27T18:08:00.909Z","0.20.2":"2021-07-28T10:18:16.173Z","0.20.3":"2021-07-28T17:59:17.128Z","0.20.4":"2021-07-28T18:28:47.501Z","0.20.5":"2021-08-20T04:11:45.633Z","0.20.6":"2021-11-18T10:42:24.112Z","0.21.0":"2021-11-18T19:22:34.681Z","0.21.1":"2021-11-19T05:02:28.740Z","0.21.2":"2021-11-19T08:38:22.397Z","0.22.0":"2021-11-22T09:20:08.541Z","0.22.1":"2021-11-23T08:40:15.087Z","0.23.0":"2021-11-29T18:27:10.189Z","0.23.1":"2021-12-03T19:24:21.908Z","0.23.2":"2021-12-22T14:56:27.722Z","0.23.3":"2022-01-23T00:08:18.628Z","0.23.4":"2022-02-17T13:12:57.698Z","0.23.5":"2022-04-29T07:55:05.760Z","0.24.0":"2022-06-29T13:07:39.325Z","0.24.1":"2022-06-29T14:49:42.001Z","0.24.2":"2022-06-30T15:46:51.718Z","0.24.3":"2022-07-01T03:38:45.179Z","0.24.4":"2022-07-01T07:56:53.415Z","0.24.5":"2022-07-01T09:45:37.489Z","0.24.6":"2022-07-02T04:22:41.572Z","0.24.7":"2022-07-02T05:21:13.963Z","0.24.8":"2022-07-04T05:58:08.918Z","0.24.9":"2022-07-04T11:41:38.818Z","0.24.10":"2022-07-05T04:11:15.892Z","0.24.11":"2022-07-07T06:25:19.691Z","0.24.12":"2022-07-08T10:06:29.442Z","0.24.13":"2022-07-09T13:19:40.370Z","0.24.14":"2022-07-10T08:00:12.775Z","0.24.15":"2022-07-10T16:35:43.421Z","0.24.16":"2022-07-10T16:49:25.181Z","0.24.17":"2022-07-11T10:24:31.877Z","0.24.18":"2022-07-12T07:31:32.519Z","0.24.19":"2022-07-13T04:56:55.510Z","0.24.20":"2022-07-15T08:51:41.307Z","0.24.21":"2022-07-27T09:59:21.255Z","0.24.22":"2022-07-29T01:49:52.955Z","0.24.23":"2022-08-01T10:11:45.658Z","0.24.24":"2022-08-01T16:54:11.994Z","0.24.25":"2022-08-01T17:36:54.620Z","0.24.26":"2022-08-02T03:58:43.033Z","0.24.27":"2022-08-04T08:35:59.061Z","0.24.28":"2022-08-12T16:32:55.518Z","0.24.29":"2022-08-29T21:09:42.202Z","0.24.30":"2022-08-29T21:21:31.678Z","0.24.31":"2022-08-30T09:35:26.185Z","0.24.32":"2022-08-31T07:18:57.795Z","0.24.33":"2022-08-31T17:58:01.358Z","0.24.34":"2022-08-31T18:35:17.882Z","0.24.35":"2022-09-04T16:03:40.558Z","0.24.36":"2022-09-06T19:32:43.937Z","0.24.37":"2022-09-06T20:35:09.895Z","0.24.38":"2022-09-07T09:09:53.445Z","0.24.39":"2022-09-08T23:05:47.292Z","0.24.40":"2022-09-10T21:06:14.045Z","0.24.41":"2022-09-12T18:45:00.238Z","0.24.42":"2022-09-17T07:48:40.356Z","0.24.43":"2022-09-24T18:41:47.617Z","0.24.44":"2022-09-28T19:49:21.718Z","0.24.45":"2022-10-12T08:10:22.702Z","0.24.46":"2022-10-12T08:59:12.554Z","0.24.47":"2022-10-18T14:50:15.930Z","0.24.48":"2022-10-21T23:54:58.814Z","0.24.49":"2022-10-23T08:28:46.819Z","0.24.50":"2022-10-23T09:02:22.335Z","0.24.51":"2022-10-26T05:21:09.362Z","0.25.0":"2022-10-28T20:02:21.483Z","0.25.1":"2022-10-28T21:04:41.875Z","0.25.2":"2022-10-31T12:32:28.314Z","0.25.3":"2022-11-08T07:22:28.580Z","0.25.4":"2022-11-09T08:36:08.619Z","0.25.5":"2022-11-09T09:27:43.237Z","0.25.6":"2022-11-10T11:17:46.974Z","0.25.7":"2022-11-10T11:39:44.624Z","0.25.8":"2022-11-11T04:12:45.348Z","0.25.9":"2022-11-22T12:56:26.574Z","0.25.10":"2022-11-25T05:49:23.459Z","0.25.11":"2022-12-06T17:58:27.446Z","0.25.12":"2022-12-09T12:05:51.813Z","0.25.13":"2022-12-11T08:13:49.742Z","0.25.14":"2022-12-19T13:51:21.172Z","0.25.15":"2022-12-20T02:47:15.823Z","0.25.16":"2022-12-21T18:35:11.996Z","0.25.17":"2023-01-07T13:05:01.242Z","0.25.18":"2023-01-09T11:56:12.883Z","0.25.19":"2023-01-09T14:29:11.045Z","0.25.20":"2023-01-09T14:34:20.237Z","0.25.21":"2023-01-19T06:25:13.056Z","0.25.22":"2023-02-15T07:00:28.983Z","0.25.23":"2023-02-16T10:53:44.575Z","0.25.24":"2023-02-23T11:36:21.509Z","0.26.0-dev":"2023-03-17T16:15:43.499Z","0.26.0-dev.1":"2023-03-18T06:40:14.364Z","0.26.0-dev.2":"2023-03-18T09:41:58.150Z","0.26.0-dev.3":"2023-03-19T04:02:25.263Z","0.26.0-dev.4":"2023-03-19T10:23:29.857Z","0.26.0-dev.5":"2023-03-20T08:33:42.556Z","0.26.0":"2023-03-21T16:07:29.284Z","0.26.1":"2023-03-22T19:06:30.763Z","0.26.2":"2023-03-23T08:16:52.319Z","0.26.3":"2023-03-24T04:56:49.434Z","0.26.4":"2023-03-26T08:18:23.631Z","0.26.5":"2023-03-27T03:30:24.528Z","0.26.6":"2023-03-28T14:51:55.041Z","0.26.7":"2023-03-29T04:20:26.437Z","0.26.8":"2023-03-29T18:12:49.039Z","0.27.0":"2023-04-08T16:13:11.886Z","0.27.1":"2023-04-10T11:33:46.126Z","0.27.2":"2023-04-10T21:41:27.824Z","0.27.3":"2023-04-11T05:44:00.016Z","0.27.4":"2023-04-12T12:53:51.134Z","0.27.5":"2023-04-14T01:58:23.359Z","0.27.6":"2023-04-14T04:13:10.397Z","0.27.7":"2023-04-14T08:10:30.443Z","0.27.8":"2023-04-15T06:15:11.270Z","0.28.0":"2023-04-20T21:48:01.052Z","0.28.1":"2023-04-20T23:21:44.910Z","0.28.2":"2023-04-21T12:45:26.073Z","0.28.3":"2023-04-21T21:30:27.193Z","0.28.4":"2023-04-21T23:51:15.564Z","0.28.5":"2023-04-23T04:50:59.647Z","0.28.6":"2023-04-25T10:17:23.136Z","0.28.7":"2023-04-27T06:44:32.020Z","0.28.8":"2023-04-28T09:19:40.440Z","0.28.9":"2023-05-01T14:30:13.096Z","0.28.10":"2023-05-13T16:06:13.197Z","0.28.11":"2023-05-17T03:27:19.208Z","0.28.12":"2023-05-25T05:52:10.563Z","0.28.13":"2023-05-26T04:35:26.156Z","0.28.14":"2023-05-29T19:23:22.349Z","0.28.15":"2023-06-10T08:10:02.674Z","0.28.16":"2023-06-20T07:15:53.413Z","0.28.17":"2023-06-21T16:57:26.913Z","0.28.18":"2023-06-22T04:42:21.371Z","0.28.19":"2023-06-26T19:27:59.087Z","0.28.20":"2023-06-27T08:27:15.489Z","0.29.0":"2023-07-02T13:45:12.300Z","0.29.1":"2023-07-02T18:59:18.871Z","0.29.2":"2023-07-03T21:31:16.632Z","0.29.3":"2023-07-03T22:32:27.911Z","0.29.4":"2023-07-06T02:32:09.576Z","0.29.5":"2023-07-18T17:09:43.948Z","0.29.6":"2023-07-18T17:26:53.097Z","0.30.0-dev-1":"2023-07-28T16:07:41.974Z","0.30.0-dev-2":"2023-07-28T16:42:24.798Z","0.30.0-dev-3":"2023-07-28T18:05:19.592Z","0.30.0-dev-4":"2023-07-28T19:55:23.440Z","0.30.0-dev-5":"2023-07-31T07:08:41.434Z","0.30.0-dev-6":"2023-07-31T08:16:44.812Z","0.30.0-dev-7":"2023-07-31T14:05:40.183Z","0.30.0":"2023-08-01T07:01:45.914Z","0.30.1":"2023-08-02T10:27:46.364Z","0.30.2":"2023-08-02T11:01:08.833Z","0.30.3":"2023-08-05T08:38:14.803Z","0.30.4":"2023-08-05T12:43:41.139Z","0.31.0-dev-1":"2023-08-08T22:14:59.490Z","0.31.0-dev-2":"2023-08-08T23:02:39.291Z","0.31.0":"2023-08-11T21:35:46.385Z","0.31.1":"2023-08-14T03:49:32.842Z","0.31.2":"2023-08-22T19:35:14.821Z","0.31.3":"2023-08-25T07:22:09.924Z","0.31.4":"2023-08-26T07:26:14.191Z","0.31.5":"2023-08-27T06:03:27.205Z","0.31.6":"2023-08-29T09:28:15.259Z","0.31.7":"2023-08-29T18:46:18.243Z","0.31.8":"2023-08-30T20:40:16.440Z","0.31.9":"2023-09-03T14:54:39.161Z","0.31.10":"2023-09-04T17:52:12.942Z","0.31.11":"2023-09-05T15:48:47.099Z","0.31.12":"2023-09-05T16:57:55.272Z","0.31.13":"2023-09-05T17:52:39.899Z","0.31.14":"2023-09-05T20:15:54.833Z","0.31.15":"2023-09-14T07:18:16.612Z","0.31.16":"2023-09-25T06:59:41.595Z","0.31.17":"2023-09-26T07:22:29.903Z","0.31.18":"2023-10-17T13:58:13.214Z","0.31.19":"2023-10-25T18:34:30.782Z","0.31.20":"2023-10-26T09:24:40.497Z","0.31.21":"2023-10-29T11:48:43.284Z","0.31.22":"2023-11-02T15:49:43.143Z","0.31.23":"2023-11-07T15:34:23.507Z","0.31.24":"2023-11-15T06:33:23.562Z","0.31.25":"2023-11-15T13:48:41.266Z","0.31.26":"2023-11-18T09:22:43.093Z","0.31.27":"2023-11-19T19:45:17.660Z","0.31.28":"2023-11-20T12:57:12.209Z","0.32.0-dev-1":"2023-11-30T10:13:24.962Z","0.32.0-dev-2":"2023-11-30T13:41:15.197Z","0.32.0-dev-3":"2023-11-30T14:16:29.560Z","0.32.0-dev-4":"2023-12-02T02:05:16.109Z","0.32.0-dev-5":"2023-12-02T03:54:55.620Z","0.32.0-dev-6":"2023-12-02T04:13:48.347Z","0.32.0-dev-7":"2023-12-02T06:10:20.893Z","0.32.0-dev-8":"2023-12-02T06:25:30.111Z","0.32.0-dev-9":"2023-12-02T09:06:43.419Z","0.32.0-dev-10":"2023-12-02T09:20:16.312Z","0.32.0-dev-11":"2023-12-02T13:35:44.817Z","0.32.0-dev-12":"2023-12-03T15:24:47.078Z","0.32.0-dev-13":"2023-12-04T08:30:14.669Z","0.32.0-dev-14":"2023-12-05T14:22:07.103Z","0.32.0-dev-15":"2023-12-06T13:51:51.538Z","0.32.0-dev-16":"2023-12-07T07:41:48.019Z","0.32.0-dev-17":"2023-12-07T08:35:16.997Z","0.32.0-dev-18":"2023-12-08T08:04:32.646Z","0.32.0-dev-19":"2023-12-08T10:12:42.735Z","0.32.0-dev-20":"2023-12-08T15:33:04.547Z","0.32.0-dev-21":"2023-12-10T04:52:13.399Z","0.32.0-dev-22":"2023-12-10T14:15:24.415Z","0.32.0-dev-23":"2023-12-10T14:38:14.028Z","0.32.0-dev-24":"2023-12-11T06:33:14.879Z","0.32.0-dev-25":"2023-12-12T04:38:15.475Z","0.32.0-dev-26":"2023-12-12T06:11:50.706Z","0.32.0-dev-27":"2023-12-12T22:10:52.306Z","0.32.0-dev-28":"2023-12-14T04:38:58.804Z","0.32.0":"2023-12-22T05:07:25.700Z","0.32.1":"2023-12-23T04:44:18.102Z","0.32.2":"2023-12-24T12:17:53.992Z","0.32.3":"2023-12-24T15:30:17.573Z","0.32.4":"2023-12-29T04:06:24.494Z","0.32.5":"2024-01-05T03:50:23.089Z","0.32.6":"2024-01-10T03:56:35.512Z","0.32.7":"2024-01-10T11:06:13.873Z","0.32.8":"2024-01-10T12:03:44.332Z","0.32.9":"2024-01-12T15:04:31.644Z","0.32.10":"2024-01-17T17:00:52.130Z","0.32.11":"2024-01-20T18:33:13.306Z","0.32.12":"2024-01-21T06:14:31.979Z","0.32.13":"2024-01-25T21:52:48.006Z","0.32.14":"2024-02-11T03:20:53.254Z"},"maintainers":[{"name":"sinclair","email":"haydn.developer@gmail.com"}],"description":"Json Schema Type Builder with Static Type Resolution for TypeScript","repository":{"type":"git","url":"git+https://github.com/sinclairzx81/typebox.git"},"author":{"name":"sinclairzx81"},"license":"MIT","readme":"<div align='center'>\r\n\r\n<h1>TypeBox</h1>\r\n\r\n<p>Json Schema Type Builder with Static Type Resolution for TypeScript</p>\r\n\r\n<img src=\"https://github.com/sinclairzx81/typebox/blob/master/typebox.png?raw=true\" />\r\n\r\n<br />\r\n<br />\r\n\r\n[![npm version](https://badge.fury.io/js/%40sinclair%2Ftypebox.svg)](https://badge.fury.io/js/%40sinclair%2Ftypebox)\r\n[![Downloads](https://img.shields.io/npm/dm/%40sinclair%2Ftypebox.svg)](https://www.npmjs.com/package/%40sinclair%2Ftypebox)\r\n[![Build](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml/badge.svg)](https://github.com/sinclairzx81/typebox/actions/workflows/build.yml)\r\n[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n\r\n</div>\r\n\r\n<a name=\"Install\"></a>\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install @sinclair/typebox --save\r\n```\r\n\r\n## Example\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n  z: Type.Number()                                   //   properties: {\r\n})                                                   //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' },\r\n                                                     //     z: { type: 'number' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   x: number,\r\n                                                     //   y: number,\r\n                                                     //   z: number\r\n                                                     // }\r\n```\r\n\r\n\r\n<a name=\"Overview\"></a>\r\n\r\n## Overview\r\n\r\nTypeBox is a runtime type builder that creates in-memory Json Schema objects that infer as TypeScript types. The schematics produced by this library are designed to match the static type checking rules of the TypeScript compiler. TypeBox offers a unified type that can be statically checked by TypeScript and runtime asserted using standard Json Schema validation.\r\n\r\nThis library is designed to allow Json Schema to compose with the same flexibility as TypeScript's programmable type system. It can be used as a simple tool to build up complex schematics or integrated into REST and RPC services to help validate data received over the wire.\r\n\r\nLicense MIT\r\n\r\n## Contents\r\n- [Install](#install)\r\n- [Overview](#overview)\r\n- [Usage](#usage)\r\n- [Types](#types)\r\n  - [Json](#types-json)\r\n  - [JavaScript](#types-javascript)\r\n  - [Import](#types-import)\r\n  - [Options](#types-options)\r\n  - [Properties](#types-properties)\r\n  - [Generics](#types-generics)\r\n  - [References](#types-references)\r\n  - [Recursive](#types-recursive)\r\n  - [Template Literal](#types-template-literal)\r\n  - [Indexed](#types-indexed)\r\n  - [Mapped](#types-mapped)\r\n  - [Conditional](#types-conditional)\r\n  - [Intrinsic](#types-intrinsic)\r\n  - [Transform](#types-transform)\r\n  - [Rest](#types-rest)\r\n  - [Guard](#types-guard)\r\n  - [Unsafe](#types-unsafe)\r\n  - [Strict](#types-strict)\r\n- [Values](#values)\r\n  - [Create](#values-create)\r\n  - [Clone](#values-clone)\r\n  - [Check](#values-check)\r\n  - [Convert](#values-convert)\r\n  - [Default](#values-default)\r\n  - [Clean](#values-clean)\r\n  - [Cast](#values-cast)\r\n  - [Decode](#values-decode)\r\n  - [Encode](#values-decode)\r\n  - [Equal](#values-equal)\r\n  - [Hash](#values-hash)\r\n  - [Diff](#values-diff)\r\n  - [Patch](#values-patch)\r\n  - [Errors](#values-errors)\r\n  - [Mutate](#values-mutate)\r\n  - [Pointer](#values-pointer)\r\n- [TypeRegistry](#typeregistry)\r\n  - [Type](#typeregistry-type)\r\n  - [Format](#typeregistry-format)\r\n- [TypeCheck](#typecheck)\r\n  - [Ajv](#typecheck-ajv)\r\n  - [TypeCompiler](#typecheck-typecompiler)\r\n- [TypeSystem](#typesystem)\r\n  - [Policies](#typesystem-policies)\r\n- [Error Function](#error-function)\r\n- [Workbench](#workbench)\r\n- [Codegen](#codegen)\r\n- [Ecosystem](#ecosystem)\r\n- [Benchmark](#benchmark)\r\n  - [Compile](#benchmark-compile)\r\n  - [Validate](#benchmark-validate)\r\n  - [Compression](#benchmark-compression)\r\n- [Contribute](#contribute)\r\n\r\n<a name=\"usage\"></a>\r\n\r\n## Usage\r\n\r\nThe following shows general usage.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// Let's say you have the following type ...\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = {\r\n  id: string,\r\n  name: string,\r\n  timestamp: number\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... you can express this type in the following way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nconst T = Type.Object({                              // const T = {\r\n  id: Type.String(),                                 //   type: 'object',\r\n  name: Type.String(),                               //   properties: {\r\n  timestamp: Type.Integer()                          //     id: {\r\n})                                                   //       type: 'string'\r\n                                                     //     },\r\n                                                     //     name: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     timestamp: {\r\n                                                     //       type: 'integer'\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'name',\r\n                                                     //     'timestamp'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then infer back to the original static type this way.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\ntype T = Static<typeof T>                            // type T = {\r\n                                                     //   id: string,\r\n                                                     //   name: string,\r\n                                                     //   timestamp: number\r\n                                                     // }\r\n\r\n//--------------------------------------------------------------------------------------------\r\n//\r\n// ... then use the type both as Json Schema and as a TypeScript type.\r\n//\r\n//--------------------------------------------------------------------------------------------\r\n\r\nimport { Value } from '@sinclair/typebox/value'\r\n\r\nfunction receive(value: T) {                         // ... as a Static Type\r\n\r\n  if(Value.Check(T, value)) {                        // ... as a Json Schema\r\n\r\n    // ok...\r\n  }\r\n}\r\n```\r\n\r\n<a name='types'></a>\r\n\r\n## Types\r\n\r\nTypeBox types are Json Schema fragments that compose into more complex types. Each fragment is structured such that any Json Schema compliant validator can runtime assert a value the same way TypeScript will statically assert a type. TypeBox offers a set of Json Types which are used to create Json Schema compliant schematics as well as a JavaScript type set used to create schematics for constructs native to JavaScript.\r\n\r\n<a name='types-json'></a>\r\n\r\n### Json Types\r\n\r\nThe following table lists the supported Json types. These types are fully compatible with the Json Schema Draft 7 specification.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Any()           │ type T = any                │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Unknown()       │ type T = unknown            │ const T = { }                  │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.String()        │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'string'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Number()        │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Integer()       │ type T = number             │ const T = {                    │\r\n│                                │                             │   type: 'integer'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Boolean()       │ type T = boolean            │ const T = {                    │\r\n│                                │                             │   type: 'boolean'              │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Null()          │ type T = null               │ const T = {                    │\r\n│                                │                             │   type: 'null'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Literal(42)     │ type T = 42                 │ const T = {                    │\r\n│                                │                             │   const: 42,                   │\r\n│                                │                             │   type: 'number'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Array(          │ type T = number[]           │ const T = {                    │\r\n│   Type.Number()                │                             │   type: 'array',               │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   x: Type.Number(),            │   x: number,                │   type: 'object',              │\r\n│   y: Type.Number()             │   y: number                 │   required: ['x', 'y'],        │\r\n│ })                             │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Tuple([         │ type T = [number, number]   │ const T = {                    │\r\n│   Type.Number(),               │                             │   type: 'array',               │\r\n│   Type.Number()                │                             │   items: [{                    │\r\n│ ])                             │                             │     type: 'number'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   additionalItems: false,      │\r\n│                                │                             │   minItems: 2,                 │\r\n│                                │                             │   maxItems: 2                  │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ enum Foo {                     │ enum Foo {                  │ const T = {                    │\r\n│   A,                           │   A,                        │   anyOf: [{                    │\r\n│   B                            │   B                         │     type: 'number',            │\r\n│ }                              │ }                           │     const: 0                   │\r\n│                                │                             │   }, {                         │\r\n│ const T = Type.Enum(Foo)       │ type T = Foo                │     type: 'number',            │\r\n│                                │                             │     const: 1                   │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Const({         │ type T = {                  │ const T = {                    │\r\n│   x: 1,                        │   readonly x: 1,            │   type: 'object',              │\r\n│   y: 2,                        │   readonly y: 2             │   required: ['x', 'y'],        │\r\n│ } as const)                    │ }                           │   properties: {                │\r\n│                                │                             │     x: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 1                 │\r\n│                                │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number',          │\r\n│                                │                             │       const: 2                 │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.KeyOf(          │ type T = keyof {            │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   anyOf: [{                    │\r\n│     x: Type.Number(),          │   y: number                 │     type: 'string',            │\r\n│     y: Type.Number()           │ }                           │     const: 'x'                 │\r\n│   })                           │                             │   }, {                         │\r\n│ )                              │                             │     type: 'string',            │\r\n│                                │                             │     const: 'y'                 │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Union([         │ type T = string | number    │ const T = {                    │\r\n│   Type.String(),               │                             │   anyOf: [{                    │\r\n│   Type.Number()                │                             │     type: 'string'             │\r\n│ ])                             │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Intersect([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number                 │   allOf: [{                    │\r\n│     x: Type.Number()           │ } & {                       │     type: 'object',            │\r\n│   }),                          │   y: number                 │     required: ['x'],           │\r\n│   Type.Object({                │ }                           │     properties: {              │\r\n│     y: Type.Number()           │                             │       x: {                     │\r\n│   ])                           │                             │         type: 'number'         │\r\n│ ])                             │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'object',            |\r\n│                                │                             │     required: ['y'],           │\r\n│                                │                             │     properties: {              │\r\n│                                │                             │       y: {                     │\r\n│                                │                             │         type: 'number'         │\r\n│                                │                             │       }                        │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }]                           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Composite([     │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number()           │   y: number                 │   required: ['x', 'y'],        │\r\n│   }),                          │ }                           │   properties: {                │\r\n│   Type.Object({                │                             │     x: {                       │\r\n│     y: Type.Number()           │                             │       type: 'number'           │\r\n│   })                           │                             │     },                         │\r\n│ ])                             │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Never()         │ type T = never              │ const T = {                    │\r\n│                                │                             │   not: {}                      │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Not(            | type T = unknown            │ const T = {                    │\r\n│   Type.String()                │                             │   not: {                       │\r\n│ )                              │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extends(        │ type T =                    │ const T = {                    │\r\n│   Type.String(),               │  string extends number      │   const: false,                │\r\n│   Type.Number(),               │    ? true                   │   type: 'boolean'              │\r\n│   Type.Literal(true),          │    : false                  │ }                              │\r\n│   Type.Literal(false)          │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Extract(        │ type T = Extract<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'string'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Exclude(        │ type T = Exclude<           │ const T = {                    │\r\n│   Type.Union([                 │   string | number,          │   type: 'number'               │\r\n│     Type.String(),             │   string                    │ }                              │\r\n│     Type.Number(),             │ >                           │                                │\r\n│   ]),                          │                             │                                │\r\n│   Type.String()                │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Mapped(         │ type T = {                  │ const T = {                    │\r\n│   Type.Union([                 │   [_ in 'x' | 'y'] : number │   type: 'object',              │\r\n│     Type.Literal('x'),         │ }                           │   required: ['x', 'y'],        │\r\n│     Type.Literal('y')          │                             │   properties: {                │\r\n│   ]),                          │                             │     x: {                       │\r\n│   () => Type.Number()          │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const U = Type.Union([         │ type U = 'open' | 'close'   │ const T = {                    │\r\n│   Type.Literal('open'),        │                             │   type: 'string',              │\r\n│   Type.Literal('close')        │ type T = `on${U}`           │   pattern: '^on(open|close)$'  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n│ const T = Type                 │                             │                                │\r\n│   .TemplateLiteral([           │                             │                                │\r\n│      Type.Literal('on'),       │                             │                                │\r\n│      U                         │                             │                                │\r\n│   ])                           │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Record(         │ type T = Record<            │ const T = {                    │\r\n│   Type.String(),               │   string,                   │   type: 'object',              │\r\n│   Type.Number()                │   number                    │   patternProperties: {         │\r\n│ )                              │ >                           │     '^.*$': {                  │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Partial(        │ type T = Partial<{          │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   properties: {                │\r\n│     y: Type.Number()           | }>                          │     x: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     },                         │\r\n│                                │                             │     y: {                       │\r\n│                                │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Required(       │ type T = Required<{         │ const T = {                    │\r\n│   Type.Object({                │   x?: number,               │   type: 'object',              │\r\n│     x: Type.Optional(          │   y?: number                │   required: ['x', 'y'],        │\r\n│       Type.Number()            | }>                          │   properties: {                │\r\n│     ),                         │                             │     x: {                       │\r\n│     y: Type.Optional(          │                             │       type: 'number'           │\r\n│       Type.Number()            │                             │     },                         │\r\n│     )                          │                             │     y: {                       │\r\n│   })                           │                             │       type: 'number'           │\r\n│ )                              │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Pick(           │ type T = Pick<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['x'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     x: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Omit(           │ type T = Omit<{             │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'object',              │\r\n│     x: Type.Number(),          │   y: number                 │   required: ['y'],             │\r\n│     y: Type.Number()           │ }, 'x'>                     │   properties: {                │\r\n│   }), ['x']                    |                             │     y: {                       │\r\n│ )                              │                             │       type: 'number'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Index(          │ type T = {                  │ const T = {                    │\r\n│   Type.Object({                │   x: number,                │   type: 'number'               │\r\n│     x: Type.Number(),          │   y: string                 │ }                              │\r\n│     y: Type.String()           │ }['x']                      │                                │\r\n│   }), ['x']                    │                             │                                │\r\n│ )                              │                             │                                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const A = Type.Tuple([         │ type A = [0, 1]             │ const T = {                    │\r\n│   Type.Literal(0),             │ type B = [2, 3]             │   type: 'array',               │\r\n│   Type.Literal(1)              │ type T = [                  │   items: [                     │\r\n│ ])                             │   ...A,                     │     { const: 0 },              │\r\n│ const B = Type.Tuple([         │   ...B                      │     { const: 1 },              │\r\n|   Type.Literal(2),             │ ]                           │     { const: 2 },              │\r\n|   Type.Literal(3)              │                             │     { const: 3 }               │\r\n│ ])                             │                             │   ],                           │\r\n│ const T = Type.Tuple([         │                             │   additionalItems: false,      │\r\n|   ...Type.Rest(A),             │                             │   minItems: 4,                 │\r\n|   ...Type.Rest(B)              │                             │   maxItems: 4                  │\r\n│ ])                             │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uncapitalize(   │ type T = Uncapitalize<      │ const T = {                    │\r\n│   Type.Literal('Hello')        │   'Hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Capitalize(     │ type T = Capitalize<        │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'Hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uppercase(      │ type T = Uppercase<         │ const T = {                    │\r\n│   Type.Literal('hello')        │   'hello'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'HELLO'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Lowercase(      │ type T = Lowercase<         │ const T = {                    │\r\n│   Type.Literal('HELLO')        │   'HELLO'                   │   type: 'string',              │\r\n│ )                              │ >                           │   const: 'hello'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const R = {                    │\r\n│    x: Type.Number(),           │   x: number,                │   $ref: 'T'                    │\r\n│    y: Type.Number()            │   y: number                 │ }                              │\r\n│ }, { $id: 'T' })               | }                           │                                │\r\n│                                │                             │                                │\r\n│ const R = Type.Ref(T)          │ type R = T                  │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-javascript'></a>\r\n\r\n### JavaScript Types\r\n\r\nTypeBox provides an extended type set that can be used to create schematics for common JavaScript constructs. These types can not be used with any standard Json Schema validator; but can be used to frame schematics for interfaces that may receive Json validated data. JavaScript types are prefixed with the `[JavaScript]` jsdoc comment for convenience. The following table lists the supported types.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Extended Schema                │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Constructor([   │ type T = new (              │ const T = {                    │\r\n│   Type.String(),               │  arg0: string,              │   type: 'Constructor',         │\r\n│   Type.Number()                │  arg0: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Function([      │ type T = (                  │ const T = {                    │\r\n|   Type.String(),               │  arg0: string,              │   type: 'Function',            │\r\n│   Type.Number()                │  arg1: number               │   parameters: [{               │\r\n│ ], Type.Boolean())             │ ) => boolean                │     type: 'string'             │\r\n│                                │                             │   }, {                         │\r\n│                                │                             │     type: 'number'             │\r\n│                                │                             │   }],                          │\r\n│                                │                             │   returns: {                   │\r\n│                                │                             │     type: 'boolean'            │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Promise(        │ type T = Promise<string>    │ const T = {                    │\r\n│   Type.String()                │                             │   type: 'Promise',             │\r\n│ )                              │                             │   item: {                      │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T =                      │ type T =                    │ const T = {                    │\r\n│   Type.AsyncIterator(          │   AsyncIterableIterator<    │   type: 'AsyncIterator',       │\r\n│     Type.String()              │    string                   │   items: {                     │\r\n│   )                            │   >                         │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Iterator(       │ type T =                    │ const T = {                    │\r\n│   Type.String()                │   IterableIterator<string>  │   type: 'Iterator',            │\r\n│ )                              │                             │   items: {                     │\r\n│                                │                             │     type: 'string'             │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.RegExp(/abc/i)  │ type T = string             │ const T = {                    │\r\n│                                │                             │   type: 'RegExp'               │\r\n│                                │                             │   source: 'abc'                │\r\n│                                │                             │   flags: 'i'                   │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Uint8Array()    │ type T = Uint8Array         │ const T = {                    │\r\n│                                │                             │   type: 'Uint8Array'           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Date()          │ type T = Date               │ const T = {                    │\r\n│                                │                             │   type: 'Date'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Undefined()     │ type T = undefined          │ const T = {                    │\r\n│                                │                             │   type: 'undefined'            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Symbol()        │ type T = symbol             │ const T = {                    │\r\n│                                │                             │   type: 'symbol'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.BigInt()        │ type T = bigint             │ const T = {                    │\r\n│                                │                             │   type: 'bigint'               │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Void()          │ type T = void               │ const T = {                    │\r\n│                                │                             │   type: 'void'                 │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-import'></a>\r\n\r\n### Import\r\n\r\nImport the Type namespace to bring in the full TypeBox type system. This is recommended for most users.\r\n\r\n```typescript\r\nimport { Type, type Static } from '@sinclair/typebox'\r\n```\r\n\r\nYou can also selectively import types. This enables modern bundlers to tree shake for unused types.\r\n\r\n```typescript\r\nimport { Object, Number, String, Boolean, type Static } from '@sinclair/typebox'\r\n```\r\n\r\n<a name='types-options'></a>\r\n\r\n### Options\r\n\r\nYou can pass Json Schema options on the last argument of any given type. Option hints specific to each type are provided for convenience.\r\n\r\n```typescript\r\n// String must be an email\r\nconst T = Type.String({                              // const T = {\r\n  format: 'email'                                    //   type: 'string',\r\n})                                                   //   format: 'email'\r\n                                                     // }\r\n\r\n// Number must be a multiple of 2\r\nconst T = Type.Number({                              // const T = {\r\n  multipleOf: 2                                      //  type: 'number',\r\n})                                                   //  multipleOf: 2\r\n                                                     // }\r\n\r\n// Array must have at least 5 integer values\r\nconst T = Type.Array(Type.Integer(), {               // const T = {\r\n  minItems: 5                                        //   type: 'array',\r\n})                                                   //   minItems: 5,\r\n                                                     //   items: {\r\n                                                     //     type: 'integer'\r\n                                                     //   }\r\n                                                     // }\r\n```\r\n\r\n<a name='types-properties'></a>\r\n\r\n### Properties\r\n\r\nObject properties can be modified with Readonly and Optional. The following table shows how these modifiers map between TypeScript and Json Schema.\r\n\r\n```typescript\r\n┌────────────────────────────────┬─────────────────────────────┬────────────────────────────────┐\r\n│ TypeBox                        │ TypeScript                  │ Json Schema                    │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.ReadonlyOptional( │   readonly name?: string    │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Readonly(         │   readonly name: string     │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   },                           │\r\n│                                │                             │   required: ['name']           │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n├────────────────────────────────┼─────────────────────────────┼────────────────────────────────┤\r\n│ const T = Type.Object({        │ type T = {                  │ const T = {                    │\r\n│   name: Type.Optional(         │   name?: string             │   type: 'object',              │\r\n│     Type.String()              │ }                           │   properties: {                │\r\n│   )                            │                             │     name: {                    │\r\n│ })  \t                         │                             │       type: 'string'           │\r\n│                                │                             │     }                          │\r\n│                                │                             │   }                            │\r\n│                                │                             │ }                              │\r\n│                                │                             │                                │\r\n└────────────────────────────────┴─────────────────────────────┴────────────────────────────────┘\r\n```\r\n\r\n<a name='types-generics'></a>\r\n\r\n### Generic Types\r\n\r\nGeneric types can be created with functions. TypeBox types extend the TSchema interface so you should constrain parameters to this type. The following creates a generic Vector type.\r\n\r\n```typescript\r\nimport { Type, type Static, type TSchema } from '@sinclair/typebox'\r\n\r\nconst Vector = <T extends TSchema>(T: T) => \r\n  Type.Object({                                      // type Vector<T> = {\r\n    x: T,                                            //   x: T,\r\n    y: T,                                            //   y: T,\r\n    z: T                                             //   z: T\r\n  })                                                 // }\r\n\r\nconst NumberVector = Vector(Type.Number())           // type NumberVector = Vector<number>\r\n```\r\n\r\nGeneric types are often used to create aliases for complex types. The following creates a Nullable generic type.\r\n\r\n```typescript\r\nconst Nullable = <T extends TSchema>(schema: T) => Type.Union([schema, Type.Null()])\r\n\r\nconst T = Nullable(Type.String())                    // const T = {\r\n                                                     //   anyOf: [\r\n                                                     //     { type: 'string' },\r\n                                                     //     { type: 'null' }\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype T = Static<typeof T>                            // type T = string | null\r\n```\r\n\r\n<a name='types-references'></a>\r\n\r\n### Reference Types\r\n\r\nReference types can be created with Ref. These types infer the same as the target type but only store a named `$ref` to the target type.\r\n\r\n```typescript\r\nconst Vector = Type.Object({                         // const Vector = {\r\n  x: Type.Number(),                                  //   type: 'object',\r\n  y: Type.Number(),                                  //   required: ['x', 'y', 'z'],\r\n}, { $id: 'Vector' })                                //   properties: {\r\n                                                     //     x: { type: 'number' },\r\n                                                     //     y: { type: 'number' }\r\n                                                     //   },\r\n                                                     //   $id: 'Vector'\r\n                                                     // }\r\n\r\nconst VectorRef = Type.Ref(Vector)                   // const VectorRef = {\r\n                                                     //   $ref: 'Vector'\r\n                                                     // }\r\n\r\ntype VectorRef = Static<typeof VectorRef>            // type VectorRef = {\r\n                                                     //    x: number,\r\n                                                     //    y: number\r\n                                                     // }\r\n```\r\nUse Deref to dereference a type. This function will replace any interior reference with the target type.\r\n```typescript\r\nconst Vertex = Type.Object({                         // const Vertex = {\r\n  position: VectorRef,                               //   type: 'object',\r\n  texcoord: VectorRef,                               //   required: ['position', 'texcoord'],\r\n})                                                   //   properties: {\r\n                                                     //     position: { $ref: 'Vector' },\r\n                                                     //     texcoord: { $ref: 'Vector' }\r\n                                                     //   }\r\n                                                     // }\r\n\r\nconst VertexDeref = Type.Deref(Vertex, [Vector])     // const VertexDeref = {\r\n                                                     //   type: 'object',\r\n                                                     //   required: ['position', 'texcoord'],\r\n                                                     //   properties: {\r\n                                                     //     position: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     },\r\n                                                     //     texcoord: {\r\n                                                     //       type: 'object',\r\n                                                     //       required: ['x', 'y', 'z'],\r\n                                                     //       properties: {\r\n                                                     //         x: { type: 'number' },\r\n                                                     //         y: { type: 'number' }\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   }\r\n                                                     // }\r\n```\r\nNote that Ref types do not store structural information about the type they're referencing. Because of this, these types cannot be used with some mapping types (such as Partial or Pick). For applications that require mapping on Ref, use Deref to normalize the type first.\r\n\r\n<a name='types-recursive'></a>\r\n\r\n### Recursive Types\r\n\r\nTypeBox supports recursive data structures with Recursive. This type wraps an interior type and provides it a `this` context that allows the type to reference itself. The following creates a recursive type. Singular recursive inference is also supported.\r\n\r\n```typescript\r\nconst Node = Type.Recursive(This => Type.Object({    // const Node = {\r\n  id: Type.String(),                                 //   $id: 'Node',\r\n  nodes: Type.Array(This)                            //   type: 'object',\r\n}), { $id: 'Node' })                                 //   properties: {\r\n                                                     //     id: {\r\n                                                     //       type: 'string'\r\n                                                     //     },\r\n                                                     //     nodes: {\r\n                                                     //       type: 'array',\r\n                                                     //       items: {\r\n                                                     //         $ref: 'Node'\r\n                                                     //       }\r\n                                                     //     }\r\n                                                     //   },\r\n                                                     //   required: [\r\n                                                     //     'id',\r\n                                                     //     'nodes'\r\n                                                     //   ]\r\n                                                     // }\r\n\r\ntype Node = Static<typeof Node>                      // type Node = {\r\n                                                     //   id: string\r\n                                                     //   nodes: Node[]\r\n                                                     // }\r\n\r\nfunction test(node: Node) {\r\n  const id = node.nodes[0].nodes[0].id               // id is string\r\n}\r\n```\r\n\r\n<a name='types-template-literal'></a>\r\n\r\n### Template Literal Types\r\n\r\nTypeBox supports template literal types with the TemplateLiteral function. This type can be created using a syntax similar to the TypeScript template literal syntax or composed from exterior types. TypeBox encodes template literals as regular expressions which enables the template to be checked by Json Schema validators. This type also supports regular expression parsing that enables template patterns to be used for generative types. The following shows both TypeScript and TypeBox usage.\r\n\r\n```typescript\r\n// TypeScript\r\n\r\ntype K = `prop${'A'|'B'|'C'}`                        // type T = 'propA' | 'propB' | 'propC'\r\n\r\ntype R = Record<K, string>                           // type R = {\r\n                                                     //   propA: string\r\n                                                     //   propB: string\r\n                                                     //   propC: string\r\n                                                     // }\r\n\r\n// TypeBox\r\n\r\nconst K = Type.TemplateLiteral('prop${A|B|C}')       // const K: TTemplateLiteral<[\r\n                                                     //   TLiteral<'prop'>,\r\n                         ","readmeFilename":"readme.md","keywords":["typescript","json-schema","validate","typecheck"],"users":{"flumpus-dev":true},"homepage":"https://github.com/sinclairzx81/typebox#readme","bugs":{"url":"https://github.com/sinclairzx81/typebox/issues"}}
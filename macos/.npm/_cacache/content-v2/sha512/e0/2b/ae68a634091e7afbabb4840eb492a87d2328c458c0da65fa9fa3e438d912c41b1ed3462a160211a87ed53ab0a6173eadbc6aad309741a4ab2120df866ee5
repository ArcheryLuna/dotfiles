{"_id":"zustand","_rev":"135-5c7fe91637d02228cbd98ea53b8368ab","name":"zustand","dist-tags":{"latest":"4.5.1","next":"5.0.0-alpha.3"},"versions":{"0.0.1":{"name":"zustand","version":"0.0.1","description":"⛑ Comfy state management in React","main":"dist/index.cjs.js","module":"dist/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build","test":"echo \"Error: no test specified\" && exit 1"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":120},"lint-staged":{"*.{js,}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","dependencies":{"@babel/runtime":"^7.4.3"},"devDependencies":{"@babel/core":"7.3.4","@babel/plugin-transform-modules-commonjs":"7.2.0","@babel/plugin-transform-parameters":"7.3.3","@babel/plugin-transform-runtime":"7.3.4","@babel/plugin-transform-template-literals":"7.2.0","@babel/preset-env":"7.3.4","@babel/preset-react":"7.0.0","@babel/preset-typescript":"^7.3.3","husky":"^1.3.1","lint-staged":"^8.1.5","prettier":"^1.16.4","rimraf":"^2.6.3","rollup":"^1.9.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.1","rollup-plugin-size-snapshot":"^0.8.0","typescript":"^3.4.2"},"peerDependencies":{"react":">=16.8","react-dom":">=16.8"},"gitHead":"a1a0f8c1a84514f755bbb3e5932f4f83860f3dba","_id":"zustand@0.0.1","_npmVersion":"6.4.1","_nodeVersion":"11.1.0","_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"dist":{"integrity":"sha512-V7cZtVfy4gfqeHZnBly6sRflpwnJlAyIKVecuZ1eBwrwTHVLEvXvPiqEGP6ylCq2ebkYX9v0OmHp7I7hy7rveA==","shasum":"cce49cad91c10e423990bc27a6481cef3110b98a","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.0.1.tgz","fileCount":9,"unpackedSize":207761,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcrKJ5CRA9TVsSAnZWagAAlK0QAIUz0/cQHeJEPeJakCwt\n0PR1ezjn4GCGaTHLaXQcspwuhHWAeS/lRwRckEp9BxyysS7DBhJNKCmBUax3\nJ92dd9CtfYOjNdXQt5vdQN29KenP0nCrDw2+u7TkNsA5eQT9E8i15wiG4KI4\n9edOvY+rlWh46neEcVdiH1U3DN+j3UyYEKJhyw/QW2nVB5biyO2VnLVsZdGR\nAREUYLUreARaoQR7SxN675oxraUHOwMMhEaWvSm5lXx3fZzUl3WTw4DdfdZd\n8hb9zHOj9XHhgI6/kfQwZsfB3JfeGtPXXC0SKaUjYstf+xNCEBYV/AOylL2d\n8fAeGUqtsanEMYMc263DD0MWanFREV5tKG6pfviv/4Ry7/QXELR1r6u4H0We\nVswOrscxrYoYaxQoL13+FjCNrkCVxLFNNLObRWF78687ihqB6PvQhDk7FXub\nhgXeHf9bbwLDjZKptTBtyBgFTgkxjKHbzQPqxb0Qoww1llifXqOkhxxuCETE\nT+N3U1Mj5qIFppV58d09ZKI3YoL6K/Z3Jvw0lOH50lbjC3NFNPR8xSKRG2/j\n3hngBHj9uXHWPYuPZhKyvbBQqueX8h01b+h3odEriVKCwOqS8Q4QzeJmQO0r\nQgVqRzPMbDHDzmq3EsdtK45JwVdhdEtQ676qMdqagUTHfD0wMVGpC8zYVutr\nBv+q\r\n=r7QO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCpuo/NHVLtnBZDTtxtzFq/Pggx2xU6ncRH/8czW13FOwIgDJ7XLlUWqAwC/wpVnIwHx6pzxsND6I2yomK8DlH4Jig="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.0.1_1554817657091_0.1336724731576746"},"_hasShrinkwrap":false},"0.0.2":{"name":"zustand","version":"0.0.2","description":"⛑ Comfy state management in React","main":"dist/index.cjs.js","module":"dist/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build","test":"echo \"Error: no test specified\" && exit 1"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":120},"lint-staged":{"*.{js,}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","dependencies":{"@babel/runtime":"^7.4.3"},"devDependencies":{"@babel/core":"7.3.4","@babel/plugin-transform-modules-commonjs":"7.2.0","@babel/plugin-transform-parameters":"7.3.3","@babel/plugin-transform-runtime":"7.3.4","@babel/plugin-transform-template-literals":"7.2.0","@babel/preset-env":"7.3.4","@babel/preset-react":"7.0.0","@babel/preset-typescript":"^7.3.3","husky":"^1.3.1","lint-staged":"^8.1.5","prettier":"^1.16.4","rimraf":"^2.6.3","rollup":"^1.9.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.1","rollup-plugin-size-snapshot":"^0.8.0","typescript":"^3.4.2"},"peerDependencies":{"react":">=16.8","react-dom":">=16.8"},"gitHead":"7632ba52add04281f4fdb82111d7fc2189214a6c","_id":"zustand@0.0.2","_npmVersion":"6.4.1","_nodeVersion":"11.1.0","_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"dist":{"integrity":"sha512-Cf44VBmoOGx1jdmYmeWAGkJw6d2XAN1MPHGlvYm/LMm+hZDP3EJ2KkmOcBVa5+4VAbyMGvNIixSu29mHD/YVwg==","shasum":"841fb0a8bda2f380fc9f10000c52ccba760e41b8","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.0.2.tgz","fileCount":10,"unpackedSize":1384275,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcrQV4CRA9TVsSAnZWagAAttsP/ildKfQWt+Zd+kEZOzO1\newFMh/1F+hnzubprK/Bv3OdIhHZzBZh5AgN4F0/f1s0MlAdw560pv4+bjwLX\nIlV9JAHDVe9bc//SsLtDDdX5h8BDSg78crsg4gkQdXezXt2t8Meo69QKt/S7\nH/3tJSJrUCJFYRDUTV/lovLwAcYUHDzwZf/vt4+o8wqcsr8JV+ZVFi8OQ3rG\npi20TjTMau46FCbK+RK13t2pIDuOatWrXz3j3CLSnBVVw7aBTGGhV9bVS/yf\n2qVerxQLaH+vyhWRal9FPVI/k1HciV2gSRxpF08B0vjAg6dyuguapflWcZWJ\nyLbel9IwkalRercEioTU9SwtMA+kTu4eybLFZMXGRk8viahWy3E3Ffsg7I7U\nY/nlYIg8gbXomz5mrBL0n7JT5osu+m+ZtH9rXWMBcBW9Y8kDsnkoQqsqowvo\nAVxkjcFZUrzCeHJ84Mr2g+k5bn11SniLY/yZtMpwcogFQG0jJZ7r66nSrXFJ\nyiana2N5PfpTl0U+R2EhajcEJw9zmeEMtvQAayBCL4jV1QQlPzb3BMWoA4z1\nqKczMzL0XtgYK5F2Etj3ANF8tnEvQ6gIkComxSLQZ25T6OWeE9SEFkllvWE+\nYBSqZWHSLg8VvmcgOUjaGMjS1AEaFwim9dTNQGVZk0KX0KC9UEiFVaZYyVGz\nfmy2\r\n=jL3G\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCfd3GvXZXDXFsAjR7I4IaKreyhdL17JHj3yCoigd+h1gIgVLztLwVofvYNMGM/hsMdw7NOLL2RViApXcYZ05LRgcc="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.0.2_1554842999561_0.7647984598871975"},"_hasShrinkwrap":false},"0.0.3":{"name":"zustand","version":"0.0.3","description":"⛑ Comfy state management in React","main":"dist/index.cjs.js","module":"dist/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build","test":"echo \"Error: no test specified\" && exit 1"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":120},"lint-staged":{"*.{js,}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","dependencies":{"@babel/runtime":"^7.4.3"},"devDependencies":{"@babel/core":"7.3.4","@babel/plugin-transform-modules-commonjs":"7.2.0","@babel/plugin-transform-parameters":"7.3.3","@babel/plugin-transform-runtime":"7.3.4","@babel/plugin-transform-template-literals":"7.2.0","@babel/preset-env":"7.3.4","@babel/preset-react":"7.0.0","@babel/preset-typescript":"^7.3.3","husky":"^1.3.1","lint-staged":"^8.1.5","prettier":"^1.16.4","rimraf":"^2.6.3","rollup":"^1.9.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.1","rollup-plugin-size-snapshot":"^0.8.0","typescript":"^3.4.2"},"peerDependencies":{"react":">=16.8","react-dom":">=16.8"},"gitHead":"7793ee771e0fc932522e8fe5b192cc7f460d0f6e","_id":"zustand@0.0.3","_npmVersion":"6.4.1","_nodeVersion":"11.1.0","_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"dist":{"integrity":"sha512-F9NpLzGq3zpUsxfuzBdyRmBGR9BIV9u0lIWVbr9DDQAr7rpHvzWz8FX844rfEOO094NxaTtjZKWUMLnPQgOfEg==","shasum":"4a77c6bf19520259b9fb194e083bc219d7e0c3a3","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.0.3.tgz","fileCount":10,"unpackedSize":258109,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcrgAlCRA9TVsSAnZWagAA67YP/R+Go9yUH0KBmK7QiRHo\nyBJo4Xp2qFskQ6mtmhneYscSIWwPG7PVQ8QAbOd6R0hvUyQL4mrLCiIxwJPH\nuj3U5hPgIMK0yRtO+EPgfV1SnmHyHBpSPswSwUpv3BH6+Xt6h4V3lha3mRx1\ny9T6xqGxlpOq/EYdy/4bHkQRPbBK1rGzkns7pkZ5QbSoOQGmpqXZGRFVwJ7F\nMq1TIK0lIEv92rFTScMhcIxfbNwmV6jPB3NlUQkHzNZFl1I43Xt3LK4rrIcp\nI9NSN95LuU1NcJLdZBOD35lGOmwDV0ISUITps96tIiZ/OSkRlCLKdFlAnuFn\nqu64KsDw7ipbAj0ua+MxQKObyKsltiBj6g845Hb1Gyc4DN9HjLyyMLJModvJ\nJYB/JLQq7S7wfpvx4npd6WTgStNlDt0awhlWPzJTPqJWJDUjL8cgpMM23LEi\nhjN2SLs8/yrx2/dsptqgEmQH217+xYZEGqz8Qe6XkyuhYRWf5gYuH/nPFxko\ngB8Ci8/nJubVGTNJeeY+XJMZh9ea7iIv3/5UTS1RRoZ3aniFDWOo93iiMSQh\nPoXDm7W03ZLTwrZAPPJkNBDzzShxEyHrpIuVjM+3fiZNeJooAKKNWFP4E544\nM1KGIKIJVl/9q5M/fCIWrU8Et0kqX48SecheH7DObRkH61XWjkuiEQHnHbl6\nRxwF\r\n=OtAY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEX6V3lbYymQQgUKo56tbmfchjHekj4SJGsLgEKcff45AiEA0i/eQQnvpZF/kQX6j9ijBmru9M6Ww3xHFsbBXiI8GUA="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.0.3_1554907173153_0.08361594472111844"},"_hasShrinkwrap":false},"0.0.4":{"name":"zustand","version":"0.0.4","description":"🐻 Bear necessities for state management in React","main":"dist/index.cjs.js","module":"dist/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build","test":"echo \"Error: no test specified\" && exit 1"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","devDependencies":{"@babel/core":"7.3.4","@babel/plugin-transform-modules-commonjs":"7.2.0","@babel/plugin-transform-parameters":"7.3.3","@babel/plugin-transform-runtime":"7.3.4","@babel/plugin-transform-template-literals":"7.2.0","@babel/preset-env":"7.3.4","@babel/preset-react":"7.0.0","@babel/preset-typescript":"^7.3.3","husky":"^1.3.1","lint-staged":"^8.1.5","prettier":"^1.16.4","rimraf":"^2.6.3","rollup":"^1.9.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.1","rollup-plugin-size-snapshot":"^0.8.0","typescript":"^3.4.2"},"peerDependencies":{"react":">=16.8"},"gitHead":"411d311fb07064d8eb832e4efcd9718ce63e16c5","_id":"zustand@0.0.4","_npmVersion":"6.4.1","_nodeVersion":"11.1.0","_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"dist":{"integrity":"sha512-9Q58l4gDLsk6iLjFAZvfPIjYwNGv6ZPiSrFd0PVXxAoPP8wQ+ZSRSfbc8eOL5oj7k6U4+xczAk1+jo8qhOzLFQ==","shasum":"f2f5cda062472e0c0ea6938896f8c3ba3a835edd","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.0.4.tgz","fileCount":10,"unpackedSize":258204,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcrnH3CRA9TVsSAnZWagAA6ogP/2xyu74Oh0QvHbijnRlM\nrBqDJZggxK2sqbq3WrOk6oCly8kfIXLgnu9B7UNnZBwXxQL1DLlW+01y5IPb\nhyrTMNLO0igTmnRHjQIc5+TusNoc6dIPbKI6BSgZcvB+daeRdMqNJU4MhAEs\nZBJVt/0G3eN6Wy7dFnv5mGOoHzwFoWI/w9Dq7L1inbgxjaFKYuoFy5Zg+Gi+\ngBmHY45Qph3r6epz4PfUmOstkSYBoSdz9rWKqp1+jlHgE8SL2XX17lWabMx3\nJ3tpRoyZAFMFtYWemU1NzJIWLKtbT5xkdxtUNHTc9+synHf6Pg5uPsTwxifI\niDaMhMZ6Xlc6RgGiOvI6PjOvs6TROBXAoRqk5v3lsr8pvb15E752G3sMTdlA\nXXx4aRAAXprAQWf5OKKPohMqaSKC+D7iBkpDDhnpLfZwcgPkwcxIrkx8vz5Q\np85QCvFlKJymgYTr5yXbMHKMVlP4XQfU9zofP7KDvCo7aysqDV//2IAFVjBK\neZwqcC12301ovkk9mUe1YRvzyES9JQPfUjDJ7N2nqMD9Nz4XNJvIvDnlBY/0\n6UNDn2WflPOZQ8k6QckNv84CmKp8r0VHeDjpNzEDavBjpXNnytLZh59dj4M/\n/hYwJk3ksTY7sT04L/R30neFilc19VLg8dwYTt3zct6I/hS2ORBZzZR/DxfD\nIrii\r\n=4uev\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDVaysBYwDPpC4XQnpBpjxdk6RMomckJ7HlK0koG4ok6AiEAvi1t25XeVhnmK5Gk5vgJPDFbdKNbYRLdxBJdpw4ciD0="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.0.4_1554936311235_0.28248779393019774"},"_hasShrinkwrap":false},"0.0.5":{"name":"zustand","version":"0.0.5","description":"🐻 Bear necessities for state management in React","main":"dist/index.cjs.js","module":"dist/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.js","tests/**/*.js"],"setupFilesAfterEnv":["<rootDir>/setupTests.js"]},"devDependencies":{"@babel/core":"7.3.4","@babel/plugin-transform-modules-commonjs":"7.2.0","@babel/plugin-transform-parameters":"7.3.3","@babel/plugin-transform-runtime":"7.3.4","@babel/plugin-transform-template-literals":"7.2.0","@babel/preset-env":"7.3.4","@babel/preset-react":"7.0.0","@babel/preset-typescript":"^7.3.3","enzyme":"^3.9.0","enzyme-adapter-react-16":"^1.12.1","husky":"^1.3.1","jest":"^24.7.1","lint-staged":"^8.1.5","prettier":"^1.16.4","react":"^16.8.6","react-dom":"^16.8.6","react-testing-library":"^6.1.2","rimraf":"^2.6.3","rollup":"^1.9.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.1","rollup-plugin-size-snapshot":"^0.8.0","typescript":"^3.4.2"},"peerDependencies":{"react":">=16.8"},"gitHead":"17533f9fce2cd79e3d0b7f17bbef988094d4ff34","_id":"zustand@0.0.5","_npmVersion":"6.4.1","_nodeVersion":"11.1.0","_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"dist":{"integrity":"sha512-56rgdIsMB+THoZ3bm+OSyOIWPH37Va6UslzPcOIG34PkoHYJstCkaZ3IqiSXEzi7rkajLxo0y+epAH3G4A9iiQ==","shasum":"1a3103771528ba6a3329a4f58d217829fe737401","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.0.5.tgz","fileCount":22,"unpackedSize":408996,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcskgeCRA9TVsSAnZWagAA0B0QAJ8HDNEGTb0h+Z495Dcr\nxWG8cZRdiAPNle7c8Wi7CD5Mfg9D/MA/QqQ2OWNX8wYVSd+7//Auo0cfhhQP\nJClsq2xIxLXnsLrQwehkblOPnIuFYavfYoOZfkYYZqg/zO6jL49XuuaeXdGz\n/NtAeL4VuLZdXFz7jhXL/dxkcrtiaycsbePdOB8LG2pL1hAuuVT9RGN9sYob\nRO/NJjPYqXXuTIU1wjDDK1yVZLlPbEn8VGIpDP4PlrBZEQLQY9WiOcssjNkN\nOwz16J6V1M6PNuIir4nfUQhFBYUM93/EbU7mbmEIeh4USqUbamViJmjWwqgA\nv8pPYgroCrrig/lM4iwqWvfRgqZYFa7PdKcTc0yNHc1+o9EAk1Ah0VCeNzkT\nu3PhTkIxuynV9fum7+VItAa3MK4iKCQBrGyh0gSmj86lAoy0ABLLBDoW5ZpN\nr7u5+52wuPwJ7oN1ekfycePhYMg0/aNhAfdWJhwshVzgmgSw1eI4dPHdqigP\nKnHJhlIImJihcCusocUZ4j2FifGmh9KMBCpzlRQnHgUKF18iqwtJ9FGGAfw1\nf/efbLjSOEbA2jdl/+oVTqWe0qAVeyJnhb1WWUuHhP7pGrRpcTJGKIBLxaiN\nNp6NR1alfcxhQ8KN76ur0gIpPEkrI6EFSWicqyA1lc5HDLIlc/NYAI9j/Vu8\nFo4T\r\n=wgRq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICqqAyk31LAd33r7aS/5iM5YdinuqALqOxrDf7QE/WqcAiEA/tcWQR9KwyLE1us2exFskV4huOrMtIu9sDBsoByX7Uk="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.0.5_1555187741005_0.16328689199155888"},"_hasShrinkwrap":false},"0.0.6":{"name":"zustand","version":"0.0.6","description":"🐻 Bear necessities for state management in React","main":"dist/index.cjs.js","module":"dist/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.js","tests/**/*.js"],"setupFilesAfterEnv":["<rootDir>/setupTests.js"]},"devDependencies":{"@babel/core":"7.3.4","@babel/plugin-transform-modules-commonjs":"7.2.0","@babel/plugin-transform-parameters":"7.3.3","@babel/plugin-transform-runtime":"7.3.4","@babel/plugin-transform-template-literals":"7.2.0","@babel/preset-env":"7.3.4","@babel/preset-react":"7.0.0","@babel/preset-typescript":"^7.3.3","enzyme":"^3.9.0","enzyme-adapter-react-16":"^1.12.1","husky":"^1.3.1","jest":"^24.7.1","lint-staged":"^8.1.5","prettier":"^1.16.4","react":"^16.8.6","react-dom":"^16.8.6","react-testing-library":"^6.1.2","rimraf":"^2.6.3","rollup":"^1.9.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.1","rollup-plugin-size-snapshot":"^0.8.0","typescript":"^3.4.2"},"peerDependencies":{"react":">=16.8"},"gitHead":"6d13863d67a0eb07ad9af2c2dd3a2bc7b4204e8b","_id":"zustand@0.0.6","_npmVersion":"6.4.1","_nodeVersion":"11.1.0","_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"dist":{"integrity":"sha512-hru4bqCFlcceE38yJ9mXMi1ymmTSerFDV5MJ2/VjNX3pQlxEi3FvxlV0LgDOyhXzRavzJfOHoIkhlQAbv4RVNg==","shasum":"dfb68ee52c48532f0d230d807ef54f639d5c3db9","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.0.6.tgz","fileCount":22,"unpackedSize":409992,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcszTQCRA9TVsSAnZWagAAbUsQAIxuCA0yIqOlFKAyAafJ\nlc0GkNtnfNoAkmo3T2BNkcO+Df8ARHq/y7ujt7Vh329sQ7pisYR5uAidVB/Y\n970dQVOJ1thTNHvs9R7d4Vai4fz3ycBAwhrisgm9cYC7oDOwMHtj1ye4Pct0\nYm2MwRTx+P1gTG17CSuSZa++H/a9BzvWv53Z/MSiBAACDoDpVB+6lmZt3Z3/\nFma9kcSOKfDMEM820m3u8ywClPITtaeQ2DW3bnabMO+V3uWBDu85IW+1FwGU\nx+tuJkAhStBoL1CZgRcra04wj1k1llooJ/1pnuUz/SCeTJEAstGK3XwEmTNr\nWTntNc3Dikn/rXjsDL7bfEMIePCgzcfOzjRmBUicyi+U8apLBm/5O5qAimPf\nlmjoTcA9ZlNYYYvRVA2h2wE6HODGjz4ijQ1XeRNlHmsvMIbGqNg44xJW3lZM\njY5IVgS4NH9ojkpsvu/+1GlFASjdgKuN+p978Z5Fq4h/o/MhgDAuJASk6NOA\nC40CRHEbZWEqjyQgCh4T8k9PlsE50q8C1xMqcvkf1rNVFctQJ3mzP9m6uXh2\nucOR5rtbHCh1Mkf90nLDqVyF9Yz2txsns8yDU/lY9HwazMxQqTN7aM7iZgAv\nT9rBTSuWty8N9Rl7rny7UsKyS4ka26gKEinbE1JFoxk2ll5UqOrKoJCl7S3R\n5h6e\r\n=0oQc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDKKOCZ8K/dWNrRzc5pTd5EmQyNT29HhErdSUnYY9l57wIgPhPEyrR3mN8eaEFZzWnW/sLUhM8x5ctUEZA64lS2Qvw="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.0.6_1555248335420_0.14101838012187606"},"_hasShrinkwrap":false},"0.1.0":{"name":"zustand","version":"0.1.0","description":"🐻 Bear necessities for state management in React","main":"dist/cjs/index.js","module":"dist/esm/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/setupTests.js"]},"devDependencies":{"@babel/core":"^7.4.3","@babel/plugin-transform-modules-commonjs":"^7.4.3","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.0","@babel/preset-env":"^7.4.3","@types/jest":"^24.0.11","@types/react":"^16.8.13","enzyme":"^3.9.0","enzyme-adapter-react-16":"^1.12.1","husky":"^1.3.1","jest":"^24.7.1","lint-staged":"^8.1.5","prettier":"^1.17.0","react":"^16.8.6","react-dom":"^16.8.6","react-testing-library":"^6.1.2","rimraf":"^2.6.3","rollup":"^1.10.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.3","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-typescript2":"^0.20.1","typescript":"^3.4.3"},"peerDependencies":{"react":">=16.8"},"gitHead":"c29568a1ceb3409a9b0c09882b5e88ff553f826e","_id":"zustand@0.1.0","_npmVersion":"6.4.1","_nodeVersion":"11.1.0","_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"dist":{"integrity":"sha512-hbI2ka/9xAYzrkb9EYvPmVA+fSBP0jl6/rRJVn2nPJMRrUR83FwYI0nngGoIxBRnfJYtxge8j/f4f8h2ydM3cA==","shasum":"48e1c71042b2a1a5139e9d7d521b85f843430986","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.1.0.tgz","fileCount":9,"unpackedSize":15285,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcwvXxCRA9TVsSAnZWagAAhuMP/0trh8yGcbpsCr71s5s5\npW4k9srxtULfP+1CTAOHP7NzvrwlHB9T40/zVuylpjNOlqVw+vTIRmQjbqW4\nEwwOegV7aJfJfCWxuB6Rfy9fCm89W7T5wXPtweP5LWz3so2WO2Sc39zKXT7Z\nN/EHmI5v77S/Nfn+W/NIi68C4XHAS4rFkpqKH2/YrIyenYetF3JNjft2AtDG\nnlcljql37S34J9jOVWfOTMqKE8aZxTCffNTXPrgzA20qV1cNGh4yric7Ez4j\nidtI0uElzPsa36L0ib1vefe8fwkZdK8jfbCh/Ax2omINTE0B3wVWvQGzX4lm\ngQeSRcHjtDINqA2Afu1y5xbY12FNgUL2tQW8mirZedfgD8tU4v9Fm7wX0bXe\nVJeEP7yx6u85fwodVO2BVddSjXqWKGmsG4njnFhmsY6ophPfDAMWZPM2HKgJ\nx53LTktKRRtgmMQpovV2qk5fhFQB+ZOKtsVYQw0clYsyzPopooJ6bTQphpVL\no5Ga3NuhikH+cbTQc2w8E0gfWCXRmQ5e0XQY0YFedklTPMYW/4jJY/hmqnur\naUtIkARgdLD+MH//VVOafuYjwGpc/yfjT0tIDZPzrn2hfmnq3ZIhLpOGv5Db\nsQEYnvWlCMWio2DaFlcgGhrYIbpn2BXbKgzleBREhL7Q4KavBpe/NMy4tHVn\nvmRO\r\n=CaSd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHmKSxFiFzT+J3l2MUNvg1qodFq/AQ328BN6duEgLfjuAiEAtj8Sv0ElwtIAqmVmemZ2f0rO5ni4M4QbRORAlrmN07w="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.1.0_1556280816240_0.29241546662636586"},"_hasShrinkwrap":false},"0.1.1":{"name":"zustand","version":"0.1.1","description":"🐻 Bear necessities for state management in React","main":"dist/cjs/index.js","module":"dist/esm/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,ts,tsx}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/setupTests.js"]},"devDependencies":{"@babel/core":"^7.4.3","@babel/plugin-transform-modules-commonjs":"^7.4.3","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.0","@babel/preset-env":"^7.4.3","@types/jest":"^24.0.11","@types/react":"^16.8.13","enzyme":"^3.9.0","enzyme-adapter-react-16":"^1.12.1","husky":"^1.3.1","jest":"^24.7.1","lint-staged":"^8.1.5","prettier":"^1.17.0","react":"^16.8.6","react-dom":"^16.8.6","react-testing-library":"^6.1.2","rimraf":"^2.6.3","rollup":"^1.10.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.3","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-typescript2":"^0.20.1","typescript":"^3.4.3"},"peerDependencies":{"react":">=16.8"},"gitHead":"18cd1cedf92cfe500ebd8bf3251f1726cb8336b2","_id":"zustand@0.1.1","_npmVersion":"6.4.1","_nodeVersion":"11.1.0","_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"dist":{"integrity":"sha512-qzwuea6pwSEoGbqNh4id3O0fI/rZe73WUs+lf/50g5qWEocHdvU2DSc6j7utgBQSyEK2YwQ1JN3y6BkT+1WFiw==","shasum":"10dd333f95b196d6266331b32471b97b893f9c89","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.1.1.tgz","fileCount":9,"unpackedSize":15535,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcxzhbCRA9TVsSAnZWagAAxGQP/RlL5wFmuZtrRx5NwyJ1\nJetrRoQO9sXfsdLKJWigCjWCphcXgg4L3/R8XH5l/o9/N1mBHDsDX96TOE3M\nzv95q/ZZ4dIvlNhoy46OYeJnXHddyo5JsW9dhU2CZC+vh9xENE2kahXwiUM4\nc9meAMZKRxK93wXbFplQtZPB+meXHmRx5NldCtyAnkPPHnWj5aFGd0z+OG6y\ncLmrdKpIAY/pyyLgHD6GdopwrlGIELyqhTtCkHngsb1z0MAKrNavLEKy1ELH\nSen3t5sfXJV49qRYX68hUQ5QLamZuoCPNQkZyHqWSSZNN67gNhiBfcyRsmF7\nnQZ1PMxtTc0FxBQpirKXPjyMuVDif+Zxgt9/xaCGMnCrnb8eUnUY21h30Gjv\nPU77EwSidzAXYB2CqfUz5LtdgyfGdKjepPbt0HMSwyyLG4w7khz3xlRkZn44\n3z38EVEdLA6Ug5sfw5UbazXpWLCNMicu7oINeRCndTrOxrJSSSXZiReo1b/A\nok7y7l+t9V0wOwXT7mAOjtyqjvqoEGw0xKDlXa/vJ9vRhG7gWauRaN8lSuzY\nVkxhvc4BB+Vh8f1yMQCBnFLXf2smjrHewn10oYeXcw/6som4aFxl3wAh9SAM\nezedj/UuwxnsLuovm/BWCIpX3AtXSJWl9zfUOTxS4hbh+6qYpSxq7LKnt6eW\nSDN/\r\n=gvYD\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE6UjWV7CwNFSEWQAruKqE+FULQ0Cm6mL0PNwfmEg5mSAiBh0fD4J92jhGqodCAxHyDtC2cy3+MwT6IBH9y35Vx/zg=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.1.1_1556559962572_0.17581369131866809"},"_hasShrinkwrap":false},"0.1.2":{"name":"zustand","version":"0.1.2","description":"🐻 Bear necessities for state management in React","main":"dist/cjs/index.js","module":"dist/esm/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,ts,tsx}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/setupTests.js"]},"devDependencies":{"@babel/core":"^7.4.3","@babel/plugin-transform-modules-commonjs":"^7.4.3","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.0","@babel/preset-env":"^7.4.3","@types/jest":"^24.0.11","@types/react":"^16.8.13","enzyme":"^3.9.0","enzyme-adapter-react-16":"^1.12.1","husky":"^1.3.1","jest":"^24.7.1","lint-staged":"^8.1.5","prettier":"^1.17.0","react":"^16.8.6","react-dom":"^16.8.6","react-testing-library":"^6.1.2","rimraf":"^2.6.3","rollup":"^1.10.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.3","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-typescript2":"^0.20.1","typescript":"^3.4.3"},"peerDependencies":{"react":">=16.8"},"gitHead":"2eb5cee2d55e61fb4607b47094c4b4e15b9541bd","_id":"zustand@0.1.2","_nodeVersion":"12.1.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-2LzFU62Rnq2fRNpoIiScWSQKtY7t29uOuCH9GJVzki/I/XM/sI5uKcIjXjTbsiijtcGfyGv6p2OZAaACLE3N8g==","shasum":"c4e1f6c837b70597b476621ec88a7543f71e89bb","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.1.2.tgz","fileCount":9,"unpackedSize":16151,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc1y9yCRA9TVsSAnZWagAAaygP/A48z2XymwvlBudH+dDV\n9GAInf/ArZLmcMm5Y+4263x0WgBGq+eZvvSPA51klXfYr0+x0n05mA1degxo\nZ+7TEuVr4UN8L1UbQ1iViOJ6yKN61/cZPSSiXjGERIBCDhoIshMBBOhc0asz\nkkem2Pf4LpFZ1oXS+7IJZDhPw2RBXzRAt1yaUjfQr6UIpWu0X7S6fXaXqrnI\nRLuCZtRUNrQqbYd1KMfEihBSMe4Qzb2rFLAzc0qpDf0dn8iN7biyIyHnzOIQ\nKasLDM9iPQKGEVM0bCVcndj4R83Mn/c2g7VKE+/vwkZu8UEBnHD+WrgvS9VS\n+Sg0RPPByfteS2WGqbIx53MmIlClHXlWyk3eTjE94ixUScC/PEsgZ/sBjfUk\nt6GiS4Zz5mH02oyV0ioYt2yf0MfgYvB0QYhLhXrotXlDTObk7Zy1hgL8Wzpx\nxu5nCZY0aPff+oemERpRCKYhn53GirULhVktD+dXdGO0ckPySPG5wFOHxCxs\nxVMKVeAAzDg4VT1d9zoGKwiRjnkzK7F1tYYgtQALji/w2Ngi/SYOqjDp7njO\nxMkkK6rzfdCOhTpyGhBY9JR4uzA7GOPg+MJ86CD4N0A+0iA6mxYBIiK6Isfm\n0gchS2IEoCCXqMsZ/U8pRl5UFmugEOFru2fpkp+BrjuHDsO7GP3wp6ex+259\n2pZV\r\n=Govw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCy/dkVLTNGAqhjw0IGoOXLYD1yhB6QgPVjFA4faGHMmwIhAJT07b7Bt8b7OnE6vRYjVPPbjNxO1bx4D/2BPTQixmt5"}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.1.2_1557606257942_0.4690573609071327"},"_hasShrinkwrap":false},"0.1.3":{"name":"zustand","version":"0.1.3","description":"🐻 Bear necessities for state management in React","main":"dist/cjs/index.js","module":"dist/esm/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,ts,tsx}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/setupTests.js"]},"devDependencies":{"@babel/core":"^7.4.3","@babel/plugin-transform-modules-commonjs":"^7.4.3","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.0","@babel/preset-env":"^7.4.3","@types/jest":"^24.0.11","@types/react":"^16.8.13","enzyme":"^3.9.0","enzyme-adapter-react-16":"^1.12.1","husky":"^1.3.1","jest":"^24.7.1","lint-staged":"^8.1.5","prettier":"^1.17.0","react":"^16.8.6","react-dom":"^16.8.6","react-testing-library":"^6.1.2","rimraf":"^2.6.3","rollup":"^1.10.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.3","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-typescript2":"^0.20.1","typescript":"^3.4.3"},"peerDependencies":{"react":">=16.8"},"gitHead":"29b50750fe801415565b229dc883ae3d272df1ad","_id":"zustand@0.1.3","_nodeVersion":"12.1.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-zu3d0v/w5IFoMopo7woyjbyOuXZ3pA9+ITJT0Vi7p6JArq1Bux9ewyO9XN9Dlb2pv5Jw9UiY5w5diMDpewdS9g==","shasum":"fdaff52c5017ad4d33fdae8fced525d6c196af5c","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.1.3.tgz","fileCount":9,"unpackedSize":17929,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc19xTCRA9TVsSAnZWagAAgDwQAJJUw9OEdjPYkpnIq8jx\nGwTfnUd54LIcGtP/wlwXsnFlMSG7KMgJjpDuJ3RWbTwNsL0iuY0GBfEnj/Ob\nF+AFen0jIuC/6kSU4dpyuJiAKRTTg9klDEEz/N0xTQDGxMcTOyHirjMSxAaa\nE4njQqExrLtmb/cFfKdDeq8QDlhIgnGDM7WlsawOIZeyN9QO+khgXHY1uOyK\nNqIFoa8q/EWCV9LrwstzlX7DdV8LT1KwC09T/hmSrXCXramnDSTfUa6fHvGj\ngCDgWgeK4z1hAGXZYSZbG+C/FQHAqYIVBCayr5j7Kh0UgvuXE73oCJC15jlt\nwq5oJhYne18lXMJb9y8UospVg0rRlwo8+OQfPcOVoEnPtIVTYleI7/N/gMoM\np8xZsU185nNNsc47rPEpB9XjZ7oXCxu+2gUk6JqWBSeEdbGoWKRdLA+viMBY\nFoJfJ6uhmym9MmT1H8Y5xi6L0G6HuSAGwnMqoc8wZ2bXdHDRI7kaao3Rv9m+\n1p0StUCHWyjPRAsDxpbLcIZI5ryHG5sm8eioXZDCiMB195/yPxaxuY+2LAqh\ney/5K+UwlvoW7mP8H260N4XI0VJHr2qqX0FAsoxlUNXpIfN+RYqYwtB5eM6b\nlZNpHt9s+GdEe04glGeUArBFv4hC7v/BRocSCbrJVhSzMZCYdVzh/4d9a5HT\n7Xon\r\n=fRaA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCBAGSIF2YSBMQWERoctheaTkXtfUjQGzUswV7N5j6xVwIhALwhGw6/GhIrSXI9cTE9vj/ePbIr1maJQX4zRJOm2ywQ"}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.1.3_1557650514100_0.353596304868276"},"_hasShrinkwrap":false},"0.2.0":{"name":"zustand","version":"0.2.0","description":"🐻 Bear necessities for state management in React","main":"dist/cjs/index.js","module":"dist/esm/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,ts,tsx}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/setupTests.js"]},"devDependencies":{"@babel/core":"^7.4.3","@babel/plugin-transform-modules-commonjs":"^7.4.3","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.0","@babel/preset-env":"^7.4.3","@types/jest":"^24.0.11","@types/react":"^16.8.13","enzyme":"^3.9.0","enzyme-adapter-react-16":"^1.12.1","husky":"^1.3.1","jest":"^24.7.1","lint-staged":"^8.1.5","prettier":"^1.17.0","react":"^16.8.6","react-dom":"^16.8.6","react-testing-library":"^6.1.2","rimraf":"^2.6.3","rollup":"^1.10.0","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^4.2.3","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-typescript2":"^0.20.1","typescript":"^3.4.3"},"peerDependencies":{"react":">=16.8"},"gitHead":"4a29814834ef72217a5cb6b8e6c64ba4b8396d4b","_id":"zustand@0.2.0","_npmVersion":"6.4.1","_nodeVersion":"10.10.0","_npmUser":{"name":"jeremyrh","email":"holcomb227@gmail.com"},"dist":{"integrity":"sha512-/zT1oTgYUjILMaWVrFu0SNB/Kh7fMu2UXeDgZogzRwHbzlJQll9knQ8AfGC14G3HHjTRT125bigiMQKP22RT4g==","shasum":"da427cf6d954658596a918fc205243b480af223c","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.2.0.tgz","fileCount":9,"unpackedSize":18813,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc9BrHCRA9TVsSAnZWagAA66MQAJ38Yvn9BdngVT3pIZ9x\n4XX1i5O0w3KlLXD6tIrgmFfz8hGl4NNtEfaAlDt7ufw+d9AjpO4FrT5s/0l8\nMpCuTB57CrsRW4+4c7EA73NHqRqPWbWqetrfJYvjaRo+C5+lxKZE2fhU3GdJ\ncanbMfz/10xzB46hQhHIsCpdZPy14h87zLxSHMRR1vGFA23+r/KxyZC4cR+s\niXNO1anniwYCB77MXRR+fUV0k4IVfJsBcNPK/l/GX6v/0KJhblgmXP+lDghb\nCaq8ao/pQfPc7R2AKS3ckVGZVLLiq21Kw+sXQVg4gkfGSxGehD46Rv8aEICU\nU8aADhg6kHGAOZF0LXcmNzTgHzaq0Xyp18QyxleLmV5Axgknv1W2EGN05xxd\nhMuopTpwW37GGykzlBINimvMAABLqNuJscD0bd7Oc2I83jDoCcpK4vnAkfIz\nf+lELCjfWyPhcni0B1pYrLowOHILeqxTSyF2n7HLnVxj86OtE8CNRZ+QTTWX\n7fnGmzOZvVelM0+WyldevdXRwtXeaDHj2Adj+y6KIGGLCrnQXj+x3vgo1TS7\nLAMaZAFm5/9ftg4ooOr6pIg/pLA6fBQIrYSnfUVIpf8M2SlQDAQ55HlnraTV\nDK03ugv4X/TYfwbGrfy3vQndGF52lMNeEGsojeBLRdHmz5KG43dmSSr4UOX9\nMmob\r\n=eLvK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCDu6kCGCgicuFwcpdGQjW9d703ayyDXBGe0OAchH/O8AIgPNuKO9UIxV46lE+WvKgRdzuVVVwyLy0NhT7ml4JWWzU="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.2.0_1559501508995_0.9998548796628468"},"_hasShrinkwrap":false},"0.2.1":{"name":"zustand","version":"0.2.1","description":"🐻 Bear necessities for state management in React","main":"dist/cjs/index.js","module":"dist/esm/index.js","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,ts,tsx}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"]},"devDependencies":{"@babel/core":"^7.4.3","@babel/plugin-transform-modules-commonjs":"^7.4.3","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.0","@babel/preset-env":"^7.4.3","@testing-library/react":"^8.0.1","@types/jest":"^24.0.11","@types/react":"^16.8.13","husky":"^2.3.0","jest":"^24.8.0","lint-staged":"^8.1.5","prettier":"^1.17.0","react":"^16.8.6","react-dom":"^16.8.6","rimraf":"^2.6.3","rollup":"^1.13.1","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^5.0.1","rollup-plugin-size-snapshot":"^0.9.0","rollup-plugin-typescript2":"^0.21.1","typescript":"^3.5.1"},"peerDependencies":{"react":">=16.8"},"gitHead":"a3bbd30fa9b674250b1b8e4929cb9cac2b8d9f5a","_id":"zustand@0.2.1","_nodeVersion":"12.1.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-A8/oxlViTJH9QlXJLxWC9CLqLGi2NfJi0ayrSFjZiKmK94o6671yoKkqrYkvVI37ytRD7blN6ZgweDq4qd8vKg==","shasum":"813c23cacf6b8410b12c5a7d86c4bd801f0ea827","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.2.1.tgz","fileCount":9,"unpackedSize":19444,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc9uoyCRA9TVsSAnZWagAAxgkP/j37B41VAO1ffz5ARMV2\nzm3Jg7MubNftPBvMo7/Xv++uHwgJizH2zY0hPPi9BiFaqD4tOPsJF0dpPTgW\nXil9oJZWnRLcQJXpiJ4It25EJdH7rSWc/KAhNO4eft8d4r+gbt/DmeKX9sWs\nD8m3CUG0iMDx7dFiz8A4T6wEnvk297UT4uXqLs5bmtQ8gKf5HHFV8SKNShxi\nLgdHyLo3vi2Lj4i7x2RQUGzOhYqGSy8WokN5unxgibe/1ITx5VmZJPp6foLY\noKFQ/N4KgaBlGAzc3AQ6+MGbCYS7sHCZZTBpAALLyVLo3EU2G5UCCvdKkZGl\nM7O/EKnl4Gg/+IN4dKnsmFnY1+32UF0ERAK33HBNI3CNISicCJxN0qpAKyiB\nRMvZfMzvk1qpdrBLAqG9cD+Euk9QJfrQsCIR7+n9cZB80myvhmSn54OZMjoV\nR3B7v8c3APrSraNYSgWOQiqcgQvB9nLgu1sg9IeLZAp210Vuh0xTKS/Wslkv\nr54aioiWs3YiIvXLneWlC1wxS8F96m2fJyG9iAJsrItm8YYWGH2ix5Re42SA\n9LEYnGL+h2NaUkbTeA91OmNZc6jpa6a1SWAfSawiZ1SFnvxHUKY4HLDaaTb2\nI2aRbo93GOgtAjLD97AQzymvtUguk4pF+RXvQMy8SESEdUJMNuoVlfkiJLUC\nYIEi\r\n=rZFl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDcPy89TVgyYA9wg4dbb19ve9dGKBtcM4qcHH7eIz3GqwIhALsMI8+04QahZyiqg/UhieK4+CTthcXDFMiau0jzdHla"}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.2.1_1559685681577_0.30857204992759124"},"_hasShrinkwrap":false},"0.2.2":{"name":"zustand","version":"0.2.2","description":"🐻 Bear necessities for state management in React","main":"dist/index.cjs.js","module":"dist/index.js","types":"dist/index.d.ts","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,ts,tsx}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"]},"devDependencies":{"@babel/core":"^7.4.3","@babel/plugin-transform-modules-commonjs":"^7.4.3","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.0","@babel/preset-env":"^7.4.3","@testing-library/react":"^8.0.1","@types/jest":"^24.0.11","@types/react":"^16.8.13","husky":"^2.3.0","jest":"^24.8.0","lint-staged":"^8.1.5","prettier":"^1.17.0","react":"^16.8.6","react-dom":"^16.8.6","rimraf":"^2.6.3","rollup":"^1.13.1","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^5.0.1","rollup-plugin-size-snapshot":"^0.9.0","rollup-plugin-typescript2":"^0.21.1","typescript":"^3.5.1"},"peerDependencies":{"react":">=16.8"},"gitHead":"e73de520bd61ba99ac1e0d10a899e95e3870c993","_id":"zustand@0.2.2","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-CGjP58oq0w14wVGWHqq+ay3/vszUjRSunAy2nkYC5B+Z9IcLsfBBuNG0OWIOlppnf1yg1LK+sbmDCz2gxgp74Q==","shasum":"d3c7cea8313a31f16974b1c68e872c12d5affa8d","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.2.2.tgz","fileCount":10,"unpackedSize":22514,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdDk7fCRA9TVsSAnZWagAAMnoP/jbhEOVB3JCi6GUgdDud\nmZ3waeHHZWYMitDViuhdp39mwpSLzVArhs/a8oWqCb5pj7399uE0qBTvCY5K\n30KXqTSC2dJERlnpyAZ0WHh2G0wXkfJv8HGpZ1sVv/23mEoijqlnu5jfby4W\nSw+z9KAhLHxHeMFu5NOCIARxWam1R7pmxdGlwPLAgxIjkUkr+GwJBovObYX6\n2cU/ffHBCf205p4JHHMRnk2hPl42YtoeQOloKeGRUn8HR17Zm7F3KTWbYFPr\ncwf89tLCfegM8UN8P/sFxsVRJj7qnBb1ohUk48d5UgPq4Khi+SS+UmV1ZSCN\ndmAnIIUnGBfzO5P9VwW+XWSKgL3lOdZ6UtdwfTsrkhi4/tutRwAPNOoGFYv1\nK+vBAu14V3CEZ06DoAdYxS4PXYqvkDng7XB/thaa4snZMuBBl9g7djR4wIWV\nkSmgrGUETcAh4X0lUT76+BfLQo3uippnbQ2YKcffhgEMVgZuw7mTwfjLpY3v\n2tgbEanNKgV+llJenLiQF1nZEG3t8nTBxVnZvu9nbPVr/xVWL1/02fwPZ0bd\npVssh7MIfz25JTsh4Db9z1tLKUazWqWSWSyvbZNTuvdemDQy2EeNaPFWwYAd\nEoMeHrIzyPfts7ws5q08gqmMxt0P1FdyJgv4wIxv94ei+l2ayZ+Fw1lPG2N5\nTagy\r\n=6wVN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCMcxgQ2dWeEIAMAwOk/Y7dxvDVoVPXGtcj904Fq2PXiwIhAL7x6Z6fZC8NgGuuywyXUQjZ/6La/TsbxAN2CFa39Fvc"}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.2.2_1561218782429_0.9454366935477829"},"_hasShrinkwrap":false},"0.2.2-beta.0":{"name":"zustand","version":"0.2.2-beta.0","description":"🐻 Bear necessities for state management in React","main":"dist/index.cjs.js","module":"dist/index.js","types":"dist/index.d.ts","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,ts,tsx}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"]},"devDependencies":{"@babel/core":"^7.4.3","@babel/plugin-transform-modules-commonjs":"^7.4.3","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.0","@babel/preset-env":"^7.4.3","@testing-library/react":"^8.0.1","@types/jest":"^24.0.11","@types/react":"^16.8.13","husky":"^2.3.0","jest":"^24.8.0","lint-staged":"^8.1.5","prettier":"^1.17.0","react":"^16.8.6","react-dom":"^16.8.6","rimraf":"^2.6.3","rollup":"^1.13.1","rollup-plugin-babel":"^4.3.2","rollup-plugin-node-resolve":"^5.0.1","rollup-plugin-size-snapshot":"^0.9.0","rollup-plugin-typescript2":"^0.21.1","typescript":"^3.5.1"},"peerDependencies":{"react":">=16.8"},"readme":"<p align=\"center\">\n  <img width=\"700\" src=\"bear.png\" />\n</p>\n\n[![Build Status](https://travis-ci.org/react-spring/zustand.svg?branch=master)](https://travis-ci.org/react-spring/zustand) [![npm version](https://badge.fury.io/js/zustand.svg)](https://badge.fury.io/js/zustand)\n\n    npm install zustand\n\nSmall, fast and scaleable bearbones state-management solution. Has a comfy api based on hooks, isn't that boilerplatey or opinionated, but still just enough to be explicit and flux-like. Try a small live demo [here](https://codesandbox.io/s/v8pjv251w7).\n\n### How to use it\n\n#### First create a store (or multiple, up to you...)\n\nYour store is a hook! There are no rules, you can put anything in it, atomics, objects, functions. Like Reacts setState, `set` *merges* state, and it has the exact same semantics.\n\n```jsx\nimport create from 'zustand'\n\nconst [useStore] = create(set => ({\n  count: 0,\n  increase: () => set(state => ({ count: state.count + 1 })),\n  reset: () => set({ count: 0 })\n}))\n```\n\n#### Then bind components with the resulting hook, that's it!\n\nUse the hook anywhere, no providers needed. Once you have selected state your component will re-render on changes.\n\n```jsx\nfunction Counter() {\n  const count = useStore(state => state.count)\n  return <h1>{count}</h1>\n}\n\nfunction Controls() {\n  const increase = useStore(state => state.increase)\n  return <button onClick={increase}>up</button>\n}\n```\n\n### Why zustand over react-redux? This lib ...\n\n1. is simpler and un-opinionated\n2. makes hooks the primary means of consuming state\n3. isn't strictly dependent on actions, types & dispatch\n4. doesn't wrap your app into context providers (which allows it to support [mixed reconcilers](https://github.com/konvajs/react-konva/issues/188))\n5. can access state outside of components (and even React)\n6. has a solution for rapid state changes (look below for transient updates)\n7. is (or can be made) compatible with the redux api\n\n# Recipes\n\n## Fetching everything\n\nYou can, but remember that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nJust like with Redux's mapStateToProps, useStore can select state, either atomically or by returning an object. It will run a small shallow-equal test over the results you return and update the component on changes only.\n\n```jsx\nconst { foo, bar } = useStore(state => ({ foo: state.foo, bar: state.bar }))\n```\n\nAtomic selects do the same ...\n\n```jsx\nconst foo = useStore(state => state.foo)\nconst bar = useStore(state => state.bar)\n```\n\n## Fetching from multiple stores\n\nSince you can create as many stores as you like, forwarding results to succeeding selectors is as natural as it gets.\n\n```jsx\nconst currentUser = useCredentialsStore(state => state.currentUser)\nconst person = usePersonStore(state => state.persons[currentUser])\n```\n\n## Memoizing selectors, optimizing performance\n\nSay you select a piece of state ...\n\n```js\nconst foo = useStore(state => state.foo[props.id])\n```\n\nYour selector (`state => state.foo[props.id]`) will run on every state change, as well as every time the component renders. It isn't that expensive in this case, but let's optimize it for arguments sake.\n\nYou can either pass a static reference:\n\n```js\nconst fooSelector = useCallback(state => state.foo[props.id], [props.id])\nconst foo = useStore(fooSelector)\n```\n\nOr an optional dependencies array to let zustand know when the selector needs to update:\n\n```js\nconst foo = useStore(state => state.foo[props.id], [props.id])\n```\n\nFrom now on your selector is memoized and will only run when either the state changes, or the selector itself.\n\n## Async actions\n\nJust call `set` when you're ready, it doesn't care if your actions are async or not.\n\n```jsx\nconst [useStore] = create(set => ({\n  json: {},\n  fetch: async url => {\n    const response = await fetch(url)\n    set({ json: await response.json() })\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst [useStore] = create((set, get) => ({\n  text: \"hello\",\n  action: () => {\n    const text = get().text\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from \"immer\"\n\nconst [useStore] = create(set => ({\n  nested: { structure: { contains: { a: \"value\" } } },\n  set: fn => set(produce(fn)),\n}))\n\nconst set = useStore(state => state.set)\nset(state => void state.nested.structure.contains = null)\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { count: state.count + by }\n    case types.decrease: return { count: state.count - by }\n  }\n}\n\nconst [useStore] = create(set => ({\n  count: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nYou can use it with or without React out of the box.\n\n```jsx\nconst [, api] = create({ a: 1, b: 2, c: 3 })\n\n// Getting fresh state\nconst num = api.getState().n\n// Listening to all changes, fires on every dispatch\nconst unsub1 = api.subscribe(state => console.log(\"state changed\", state))\n// Listening to selected changes\nconst unsub2 = api.subscribe(state => state.a, a => console.log(\"a changed\", a))\n// Updating state, will trigger listeners\napi.setState({ a: 1 })\n// Unsubscribe listeners\nunsub1()\nunsub2()\n// Destroying the store (removing all listeners)\napi.destroy()\n```\n\n## Transient updates (for often occuring state-changes)\n\nThe api signature of subscribe([selector,] callback):unsub allows you to easily bind a component to a store without forcing it to re-render on state changes, you will be notified in a callback instead. Best combine it with useEffect. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance difference when you are allowed to mutate the view directly.\n\n```jsx\nconst [useStore, api] = create(set => ({ [0]: [-10, 0], [1]: [10, 5], ... }))\n\nfunction Component({ id }) {\n  // Fetch initial state\n  const xy = useRef(api.getState()[id])\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a callback\n  useEffect(() => api.subscribe(state => state[id], coords => (xy.current = coords)), [id])\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config(fn => set(produce(fn)), get, api)\n\nconst [useStore] = create(log(immer(set => ({\n  text: \"hello\",\n  setText: input => set(state => {\n    state.text = input\n  })\n}))))\n```\n\n## Devtools\n\nYes, it's currently [being hashed out](https://github.com/react-spring/zustand/issues/6) but you can already start using it: https://codesandbox.io/s/amazing-kepler-swxol. It works with regular actions as well, you don't need reducers for this.\n","readmeFilename":"readme.md","gitHead":"93683bf5d2ed44a8f1bd69edfeb933c3cb4bb202","_id":"zustand@0.2.2-beta.0","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-eQ8i//cCgZyZWdKE9FtRXmxqkgkhJdz/JDtTZ5nGrgUf3sOjTRdDa2MmrKxvIZHFulSzcaTSYNSAcbM2pNblqA==","shasum":"81637bd51129efe66eaeb1e9da5e3f812f1449ca","tarball":"https://registry.npmjs.org/zustand/-/zustand-0.2.2-beta.0.tgz","fileCount":10,"unpackedSize":23043,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdEMrpCRA9TVsSAnZWagAA5v0P/1sci8sgwbdKlyggCOLq\nkFVpk186m8AIMv8DSpmvVZIyXVZhH+EgpL+F8CBE7VQa2guMkYoYESG9FAbX\nE5drObMUXE/nu1nPXA1UUWSCZHXqAqA2x50lsQINS9gReSIOyFODnqlGjLqR\npwr/pL1w9VDsczP8ZEUZIWz/zeVAfgj2f7+8jKnFQXZYlPJg6BcWvOx+m/Tx\n6T3V3pNiWBOXkNyBn9Vk8cyubezc0uXYeLLPCfeT1QJBKsGwUVEUu5Ksjowl\ny0xaPbp+nprhnBGKxRXt/610JwyL0fTbUjVZfV9Nb9BzCM1HscvGHwQAkIxO\nHUfz53taLmZ9pwQYRI2/Xbe1h5kflfztnirHBF1GciPUaz4uWSVxyEKkCuBy\njYivBQhbku8gATswK91NqrNgSYia6N634RRwhVJ4Lb1MDnVTw/Lz6891cpEO\nPHZ8pZHvlnz9+gzN85l+t2eaYQglLKt8k3xMVtgPqT6qE5YYNT3soouCSfso\necys/DksAtL0wjQ2mhaR+RzNCIbWGREcocG0aYefRrrv9EjUJCKThoQd1TkN\nH/Fri0+7b3hWUHaGLMrXKMmvffRANJYOiiRmhyGLtsVkjHDLR5+gFF/d+bhn\n7dg648HXEhfhbu12kXrWasq9fMMlKGs0CwsKG2QbTWHL7S2fwPSBJTWn8y9i\nb59x\r\n=4bpx\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCjXLBu4D96zqyOoZQ01BNaYqYj1ElCxtPTgNjg7Cx2dwIhAPZ8BQK8A5KU3fF8odxgxfiC6Yn95cJv3/7LPbqYIYBs"}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_0.2.2-beta.0_1561381608419_0.9348007446925459"},"_hasShrinkwrap":false},"1.0.0-beta.0":{"name":"zustand","private":false,"version":"1.0.0-beta.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"readme":"<p align=\"center\">\n  <img width=\"700\" src=\"bear.png\" />\n</p>\n\n[![Build Status](https://travis-ci.org/react-spring/zustand.svg?branch=master)](https://travis-ci.org/react-spring/zustand) [![npm version](https://badge.fury.io/js/zustand.svg)](https://badge.fury.io/js/zustand)\n\n    npm install zustand\n\nSmall, fast and scaleable bearbones state-management solution. Has a comfy api based on hooks, isn't that boilerplatey or opinionated, but still just enough to be explicit and flux-like. Try a small live demo [here](https://codesandbox.io/s/v8pjv251w7).\n\n### How to use it\n\n#### First create a store (or multiple, up to you...)\n\nYour store is a hook! There are no rules, you can put anything in it, atomics, objects, functions. Like Reacts setState, `set` *merges* state, and it has the exact same semantics.\n\n```jsx\nimport create from 'zustand'\n\nconst [useStore] = create(set => ({\n  count: 0,\n  increase: () => set(state => ({ count: state.count + 1 })),\n  reset: () => set({ count: 0 })\n}))\n```\n\n#### Then bind components with the resulting hook, that's it!\n\nUse the hook anywhere, no providers needed. Once you have selected state your component will re-render on changes.\n\n```jsx\nfunction Counter() {\n  const count = useStore(state => state.count)\n  return <h1>{count}</h1>\n}\n\nfunction Controls() {\n  const increase = useStore(state => state.increase)\n  return <button onClick={increase}>up</button>\n}\n```\n\n### Why zustand over react-redux? This lib ...\n\n1. is simpler and un-opinionated\n2. makes hooks the primary means of consuming state\n3. isn't strictly dependent on actions, types & dispatch\n4. doesn't wrap your app into context providers (which allows it to support [mixed reconcilers](https://github.com/konvajs/react-konva/issues/188))\n5. can access state outside of components (and even React)\n6. has a solution for rapid state changes (look below for transient updates)\n7. is (or can be made) compatible with the redux api\n\n# Recipes\n\n## Fetching everything\n\nYou can, but remember that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nzustand defaults to strict-equality (old === new) to detect changes, this is efficient for atomic state picks. \n\n```jsx\nconst foo = useStore(state => state.foo)\nconst bar = useStore(state => state.bar)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly.\n\n```jsx\nimport { shallowEqual } from 'zustand'\n\nconst { foo, bar } = useStore(state => ({ foo: state.foo, bar: state.bar }), shallowEqual)\n```\n\n## Fetching from multiple stores\n\nSince you can create as many stores as you like, forwarding results to succeeding selectors is as natural as it gets.\n\n```jsx\nconst currentUser = useCredentialsStore(state => state.currentUser)\nconst person = usePersonStore(state => state.persons[currentUser])\n```\n\n## Memoizing selectors\n\nSelectors run on state changes, as well as when the component renders. If you give zustand a fixed reference it will only run on state changes, or when the selector changes. Don't worry about this, unless your selector is expensive.\n\n```js\nconst fooSelector = useCallback(state => state.foo[props.id], [props.id])\nconst foo = useStore(fooSelector)\n```\n\n## Async actions\n\nJust call `set` when you're ready, it doesn't care if your actions are async or not.\n\n```jsx\nconst [useStore] = create(set => ({\n  json: {},\n  fetch: async url => {\n    const response = await fetch(url)\n    set({ json: await response.json() })\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst [useStore] = create((set, get) => ({\n  text: \"hello\",\n  action: () => {\n    const text = get().text\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from \"immer\"\n\nconst [useStore] = create(set => ({\n  nested: { structure: { contains: { a: \"value\" } } },\n  set: fn => set(produce(fn)),\n}))\n\nconst set = useStore(state => state.set)\nset(state => void state.nested.structure.contains = null)\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nYou can use it with or without React out of the box.\n\n```jsx\nconst [, api] = create({ a: 1, b: 2, c: 3 })\n\n// Getting fresh state\nconst num = api.getState().n\n// Listening to all changes, fires on every dispatch\nconst unsub1 = api.subscribe(state => console.log(\"state changed\", state))\n// Listening to selected changes\nconst unsub2 = api.subscribe(state => state.a, a => console.log(\"a changed\", a))\n// Updating state, will trigger listeners\napi.setState({ a: 1 })\n// Unsubscribe listeners\nunsub1()\nunsub2()\n// Destroying the store (removing all listeners)\napi.destroy()\n```\n\n## Transient updates (for often occuring state-changes)\n\nThe api signature of subscribe([selector,] callback):unsub allows you to easily bind a component to a store without forcing it to re-render on state changes, you will be notified in a callback instead. Best combine it with useEffect. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance difference when you are allowed to mutate the view directly.\n\n```jsx\nconst [useStore, api] = create(set => ({ [0]: [-10, 0], [1]: [10, 5], ... }))\n\nfunction Component({ id }) {\n  // Fetch initial state\n  const xy = useRef(api.getState()[id])\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a callback\n  useEffect(() => api.subscribe(state => state[id], coords => (xy.current = coords)), [id])\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config(fn => set(produce(fn)), get, api)\n\nconst [useStore] = create(log(immer(set => ({\n  text: \"hello\",\n  setText: input => set(state => {\n    state.text = input\n  })\n}))))\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { count: state.count + by }\n    case types.decrease: return { count: state.count - by }\n  }\n}\n\nconst [useStore] = create(set => ({\n  count: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst [useStore] = create(redux(reducer, initialState))\n```\n\n## Devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst [useStore] = create(devtools((set, get => ({ ... })))))\n// Usage with a redux store, it will log full action types\nconst [useStore] = create(devtools(redux(reducer, initialState)))\n```\n","readmeFilename":"readme.md","_id":"zustand@1.0.0-beta.0","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-EAPG9pBbNV7t3Ez+ohWzHP2v0FxWDq9H7lwsk+sPlGphPyWs6QbgGWxtxdkIFDeDdVxxk9WetFZAkgkXQ0T6+g==","shasum":"0bfd040581aca4180b7df16071e8c594156eeb88","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.0-beta.0.tgz","fileCount":10,"unpackedSize":21379,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdEf53CRA9TVsSAnZWagAAnYQP/3V0kx7+Ji6V0151TQHI\nDDvVBpCB2aw5YXADWG3w0IurjyqlmTkrHkl7Z4YBolPkF7MTmIa4ok1B3mRG\n10IrqcM6tsZHoA3vb/qgwHXnxQBnMxVLrQJTFJfksxpU8Vkc+NFvYZGpGEuO\nRusrZSAh1h/YKihu0ARm+AK7uxWwqV4ar9fr/uP9EZNgZHmA/FwgwRB0BVzQ\nAMA/gnXL7OM8vh27tR7GdvL69jFX0M4T5wj6bfVnw6Au8UAnwVU+EeHG1A2U\nGF7QFUSi9xz5/36iBxqADGLWSovVQkbAhDobAxXHYDcG8cesQ9PFjDA6QQg2\n5VgOMwnGLmhTr5Ni75pMvw5+VISzgzrEzaEqVpmdmmBjYYHQquEoCOi/T2dk\nSrD900YvDam1l6P5B9R85g0znncwprIT7W7bK91PsDo+ZwRY9eXlK0iqFefm\nh6dH8RxK62e9jLTMezGcY8mOYGll8B/bhPiGxcrzZMSEmfj2M11De9Smokwg\nallQLZzLNzHTIrRkSWZK6kH8mc0Ig5R/zhlUX3Yi1ZQOiUpR8SK/MCcXLQqA\n56ovonX+yBLnzd7y3gIL+9j0FaDfwuXSs/xRRaT0hPxLlisa0dCLI10eH7w1\nMgSyOGybqn6ck/qEfw8wHMVIZl5d3fWjNbxSFrkq2UuUnA12HoONQxYFt1UR\ntCPm\r\n=W2YJ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB8RFbZMaxCA3GLdaxIIXKDPfUs1N0TakGjdAQeO6GD/AiEAoDQVsG8byKzIeVobzxlWv4AHCLxM5ckQom1ErFsi1yI="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.0-beta.0_1561460342869_0.22575446707605296"},"_hasShrinkwrap":false},"1.0.0-beta.1":{"name":"zustand","private":false,"version":"1.0.0-beta.1","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"readme":"<p align=\"center\">\n  <img width=\"500\" src=\"bear.png\" />\n</p>\n\n[![Build Status](https://travis-ci.org/react-spring/zustand.svg?branch=master)](https://travis-ci.org/react-spring/zustand) [![npm version](https://badge.fury.io/js/zustand.svg)](https://badge.fury.io/js/zustand)\n\nSmall, fast and scaleable bearbones state-management solution. Has a comfy api based on hooks, isn't that boilerplatey or opinionated, but still just enough to be explicit and flux-like. Try a small live demo [here](https://codesandbox.io/s/v8pjv251w7).\n\n    npm install zustand\n\n### First create a store\n\nYour store is a hook! You can put anything in it, atomics, objects, functions. Like Reacts setState, `set` *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst [useStore] = create(set => ({\n  count: 0,\n  increase: () => set(state => ({ count: state.count + 1 })),\n  reset: () => set({ count: 0 })\n}))\n```\n\n### Then bind your components, that's it!\n\nUse the hook anywhere, no providers needed. Once you have selected state your component will re-render on changes.\n\n```jsx\nfunction Counter() {\n  const count = useStore(state => state.count)\n  return <h1>{count}</h1>\n}\n\nfunction Controls() {\n  const increase = useStore(state => state.increase)\n  return <button onClick={increase}>up</button>\n}\n```\n\n#### Why zustand over react-redux?\n\n* Simpler and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app into context providers\n* Can inform components transiently (without causing render)\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but remember that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nzustand defaults to strict-equality (old === new) to detect changes, this is efficient for atomic state picks. \n\n```jsx\nconst foo = useStore(state => state.foo)\nconst bar = useStore(state => state.bar)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly.\n\n```jsx\nimport shallowequal from 'shallowequal'\n\nconst { foo, bar } = useStore(state => ({ foo: state.foo, bar: state.bar }), shallowequal)\n```\n\n## Fetching from multiple stores\n\nSince you can create as many stores as you like, forwarding results to succeeding selectors is as natural as it gets.\n\n```jsx\nconst currentUser = useCredentialsStore(state => state.currentUser)\nconst person = usePersonStore(state => state.persons[currentUser])\n```\n\n## Memoizing selectors\n\nSelectors run on state changes, as well as when the component renders. If you give zustand a fixed reference it will only run on state changes, or when the selector changes. Don't worry about this, unless your selector is expensive.\n\n```js\nconst fooSelector = useCallback(state => state.foo[props.id], [props.id])\nconst foo = useStore(fooSelector)\n```\n\n## Async actions\n\nJust call `set` when you're ready, it doesn't care if your actions are async or not.\n\n```jsx\nconst [useStore] = create(set => ({\n  json: {},\n  fetch: async url => {\n    const response = await fetch(url)\n    set({ json: await response.json() })\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst [useStore] = create((set, get) => ({\n  text: \"hello\",\n  action: () => {\n    const text = get().text\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from \"immer\"\n\nconst [useStore] = create(set => ({\n  nested: { structure: { contains: { a: \"value\" } } },\n  set: fn => set(produce(fn)),\n}))\n\nconst set = useStore(state => state.set)\nset(state => void state.nested.structure.contains = null)\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nYou can use it with or without React out of the box.\n\n```jsx\nconst [, api] = create({ a: 1, b: 2, c: 3 })\n\n// Getting fresh state\nconst num = api.getState().n\n// Listening to all changes, fires on every dispatch\nconst unsub1 = api.subscribe(state => console.log(\"state changed\", state))\n// Listening to selected changes\nconst unsub2 = api.subscribe(state => state.a, a => console.log(\"a changed\", a))\n// Updating state, will trigger listeners\napi.setState({ a: 1 })\n// Unsubscribe listeners\nunsub1()\nunsub2()\n// Destroying the store (removing all listeners)\napi.destroy()\n```\n\n## Transient updates (for often occuring state-changes)\n\nThe api signature of subscribe([selector,] callback):unsub allows you to easily bind a component to a store without forcing it to re-render on state changes, you will be notified in a callback instead. Best combine it with useEffect. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance difference when you are allowed to mutate the view directly.\n\n```jsx\nconst [useStore, api] = create(set => ({ [0]: [-10, 0], [1]: [10, 5], ... }))\n\nfunction Component({ id }) {\n  // Fetch initial state\n  const xy = useRef(api.getState()[id])\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a callback\n  useEffect(() => api.subscribe(state => state[id], coords => (xy.current = coords)), [id])\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config(fn => set(produce(fn)), get, api)\n\nconst [useStore] = create(log(immer(set => ({\n  text: \"hello\",\n  setText: input => set(state => {\n    state.text = input\n  })\n}))))\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { count: state.count + by }\n    case types.decrease: return { count: state.count - by }\n  }\n}\n\nconst [useStore] = create(set => ({\n  count: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst [useStore] = create(redux(reducer, initialState))\n```\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst [useStore] = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst [useStore] = create(devtools(redux(reducer, initialState)))\n```\n","readmeFilename":"readme.md","_id":"zustand@1.0.0-beta.1","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-m69L9/Bwv3848CHklcVfHSZcIKz3HMmEmr7SQm+2uySau1QpxVpZYq6pZ2uJtUX5fsQQHT1qgtLRzi5ys4kTAg==","shasum":"3bff8a5626e2885c4683fc66c84d4f4e25be956f","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.0-beta.1.tgz","fileCount":10,"unpackedSize":21122,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFhOFCRA9TVsSAnZWagAAHY4P/i08lsASVR2wFpvLy15l\nH2z32RlSrvdx2EvNUs8AdFnVbk/tb+Abawn4F7rC1LwIiovV1YX4NGpWI/iC\nJs+MBAt3Ymli2I28DlopwUnNqIngawf5DDbSx+Gr+h26S06D3vrFOa1VmaYY\nZwajDbSGX91YDkIusRLVQXIbE7FdV6ggEN60is9WEDqZmiXGjCDtIn4k7kqf\niRuVSeVNHVW3oSNi3cXFpq2KKYXsmHekrNEbOqZGGav5EJ869dbCJaHYv9Yz\n33+CVLIGSLFV0JbuRevpHqTemKmB5HAFFJ8nyK7uZyFHXLbm7ouDJA52vPmr\n1lcHAI5ZdhlpCRCEwUVolifX5teVLRbvVFawNL8hubeXP/aHw+nMzSTaPbiJ\noZcRssjKbF7Nnz/GrOIOmPLJxCEmUptlydfQWvFCObc/DQ1dJ11apmADvAHI\nXeh9Ujd88EmAf0atDdc+8gyqdPgTUW7/EZklvUlFH1J4jDBXf6db26ujfgix\nSS429HBpPGJp8nymUH27S5t6hEes5Q/2Hk6D26kJDXmGVC8USbJSVjRnxXGX\nNDGmOHnF57Fg3TFSGIQabgonzjk7MpiY4w6fKuik0MGB4J1BvS6aGwxEnHfj\nMTJ4/ItjCnScln/4eQhTSXl+f2W8qD9qfyPVqf3sYDimb3aT65/sapel0zG2\nH693\r\n=/NNW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCO5HMBENgp/HrJ9bCgfo3dqfnW1DMlRCFZLJ1q3N8MxQIhAKj9X//J3Zn56Vy92yFgL1sPPhV/huBG5qbxYjlNWUiG"}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.0-beta.1_1561727876641_0.8584602773469214"},"_hasShrinkwrap":false},"1.0.0":{"name":"zustand","private":false,"version":"1.0.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@1.0.0","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-KoO0bRoPhVTAeSu7oaJmVMcZNxwNKid6woRX2Fgz+4vtczOFSe/QJXHTT5kYYLc/mFvU94+n4fnvYWFbY2t87A==","shasum":"618c2c80f5ce3d6ef8090ce786b0c8f347faaf09","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.0.tgz","fileCount":11,"unpackedSize":26689,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFn01CRA9TVsSAnZWagAAFvYP/2/KTfUZQqkHZV0oGd7g\nV2V2MR97fCyof3h84n4m1qj2N15+Rm+IGi/7F2dGz1axC+yA4nsyUH7EMGR0\nTOEDntvD5DPGmQrqRejutrgO+b5bz7CJUJyD0p2F9p0BTEPhFo7noiQhPzvX\nZJFLD9UeoFBI3r47vxNcY17sDpj5LkGKfzcmRH1MCc3SKyZDgwhDj7DdObo0\nb2rYO6izMe3BMwExbdVKgwUZpk+O4DsC1WaaoPaSwVGYLka0Fbv5MSfj9qiN\n+9Ss5kwSP1kz1wZ/ykvN6U9EDyeVSD6if3B4Cesu8omfh7pAVNtV1Y2XOzgs\nDpmzVYueDKNOTACFHQOCUZb2iwlf95OjEy7MxjnNeFom9LtrEX1tKMZtTSRc\nlE6L0K88jUX1NQ9aGrvmlDUATGHp3Hz05pOUjWmHnwgN7iL0gI0BLlkXg7pk\nkezvm1aYhaphUQmhJmAaLy+dGX5a9RGIgNu7NjPR/wjk1Zr5cHnwUL6tY1qB\nPijFr+Hpzm3WaYSMltUBAsdMJs3OMHUaVA5NXRtimhtXjhVBfmaAI1OF1ZWr\nIhiJgWAPKiN87/6vwoasua5PBcruYUl/dWEXVrJ0wZTR+XOc3iWgu9z6Wi+w\nyeKRyBFdn17iV0EH/U709STRntQ6H7HleSX1r5kAMCUioxsfyawlnxcuDnrh\nyxvq\r\n=iNHj\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCc1SPfoTqQi1yApbMoe4EW3m6WNXbaTKeqVq5KnFOsbgIgIBLWvd8glXS6sB0sPERr4zpHSvlO17rdWwlIKZI9/WE="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.0_1561754932873_0.34456108227539417"},"_hasShrinkwrap":false},"1.0.1":{"name":"zustand","private":false,"version":"1.0.1","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@1.0.1","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-i2h+lyy9XKZYegbrfOD63FOccr/Ojkmvz33TDGCQonxRHIjuReBKnaiCCKnxQ2hFvqFULRy8hGGkBgrVjG7USw==","shasum":"5907521e8f3690e0c4776d27f199cfca915d0d2f","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.1.tgz","fileCount":11,"unpackedSize":27498,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFoIbCRA9TVsSAnZWagAAQnQP/RFFsvFdNpatfqHVb2pF\naM3h7NsM4By9yRtZejPgI9VZRU6MNIY1lF48u2wASJkRwUoMcW0SjmQ27+kY\nbXMJF4IUx5jgAHy3tbo7jNSYJwQmJtkcBAp1V/VNxsW1x+Mn9B/z2S5Nem9e\nBiY8c2IHZsnFT/4wQp8QyTBqWcjejVPXcuY7w1hCXrpwrsur9/1Ayg1rBQhM\nWt7mbJNA4p2KYVXEuXb84D2xUTQ9BUrL18QLjG2HRvoE61+jxbP0BdZQV7Uo\ny3WV8+9+t+tDQ/fvHwQbCukAt9u5Zi6unjQ4o4lU2QCvMXEuIbudEOqe7+eg\nQndnA2YDK7eSRSyo6mCvv/pjPxka5jYuNT3PWHgMfLNFUWMhcJ49Ar9oWztY\n8ua2NRlHCTrA3DtE430XIbYwK2TlHRaqw6EjKTFtVKEg3mDmezakByhC041g\n0DyvnWn3rEPXITt1gYzerjkB7kwrAmxVAtbax865eAbv3idw6EeteWb4ojvA\nJfULCwAWrrU8jz1hawdWxO/FTCpLukRtYVOq4RPRQ7up889E4zz33b4w4dA4\n9AIB1sQY6YcjmhZRGXQFVvUk5WdGh/5oxxRJfDKJh210WP1ISsM1fwmPz2j6\n0MtK5QKZrUcOv7wYWds+M7i/Ac4yw6AQIpoG/ylmYMzrX4WCdSgnitud1+Ja\noV0M\r\n=WCku\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBmNce8ilIAFkc2wKrXyqju+MqWPI7qxlX2gyGgHVAICAiEAl7xNcDs88k0dhIRX3jyY9crhqlZEjzYmOyQ0WehaWQA="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.1_1561756186526_0.4651119918880935"},"_hasShrinkwrap":false},"1.0.2":{"name":"zustand","private":false,"version":"1.0.2","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@1.0.2","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-Mi7aqoG1u+oQ3JaLuYrMv9idzLGUVR04lqnlP0br5cYQkfaX3Hc61i4VAhkh4GXIr2sZRLV1hoHo+LnvJqlNmA==","shasum":"03b22d39a4cb4449c0fd9db2999e71f5ef8956af","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.2.tgz","fileCount":15,"unpackedSize":30073,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdGNwWCRA9TVsSAnZWagAAdYQP/j/NzES+h2QwZHJyBjt8\nCjM2Sbt7dmwLBLJsmoxtVa/7Z7Px+KQlg1jY+OQAb51g1QQuSKOqo1dbRgWr\nXB6T+0kVczoEnF90pg8tRpCc+TTcOY0A5fEZfq7MjV5HWygaTTpWn1dI0Jpc\nPxSeYsRrIROa5eo+81Nfy2BcCMWX0ntbg/bWFQznH7CgCREhX0q11f9AGSyH\nT0se+/1Z/5TOE7Q332e+MzY4hGDDhOHKQ0ny8fOcJ9BtH4t3XYJvjP/5dXA+\n5qQPhAyKJruxP+8AKThPbgIUVxB2NCsJnnG/zQzvQLfXJUs4vZVkTVzt3uJ9\n6MSeOeQv4JaNhcfgcvpLz42AV/DZbNk+Ccyk/krXAVf784aL6MK6JGdj5cw4\n1/ay3EU7u7xBZoOT2punfoRI8rMMi+kfI/OPnoH9D3gZJAJed2G1SP5d8dHc\nuz/nwrfzFFo81HGD2qrHttfBFdOL3txAOK4coCqxWR2pzUtew0t7nvtILYss\n02wRexGFmDhUw5n99yHIJha4SqGjqjfNs/KzQpMXepxiH64KAca1euQg8zpd\nwJoSSrkeMCo1I+5+/v/Yt6qSEGgUDtEShEw6/LNINEUIr06wFjmlgKhp7ZIg\nZhSszL2HIjwjT43w/+fB9pSd8o8GLohf030f9w7YfauSGgeDja66nzJTlt32\nroAx\r\n=SD/i\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDNlrazfj5xw75XqYnJOtnkzpHUSALEnGRCve23+PgETwIgK3kziEA5oLWYhAQUO4EbjfEyhkTp1aTqmFH3/6Z0HFo="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.2_1561910293690_0.6023987749398045"},"_hasShrinkwrap":false},"1.0.3":{"name":"zustand","private":false,"version":"1.0.3","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@1.0.3","_nodeVersion":"12.5.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-ILZt7xFlQK6guitqszo054qjDKmfKm2zhfy7RqWG77VCx/wZf754H8ixPOR+jT0e96JZ9ws0az5IkTUHx5+TpQ==","shasum":"aa53f959583c6e187bd31486ccf6752bd6e4fef3","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.3.tgz","fileCount":15,"unpackedSize":29742,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdN3bxCRA9TVsSAnZWagAALugP/20m3junfpNM1ylLH5/7\nOlK3dmXRXrGBi+aZIgdhBFSqDvWj2Yw5ht7ol17EGiORsfdkv54kkuzP2mTP\nhzWLC6lCPq1hBV8cch6jjx88ckKqnHJcFrfJWCf6+yoYuhwP519Z0OtgwDFL\nhNyysXujdlRYTGmknAhSLWCrPWvtYWtjw1yyp0HmQCsthYjxhitQHiNA4haR\niNTcdA84PQgNjxHUoC3G/dejLlz7dYQqqAqMlktzo7dJBSQFADVaIF6XmVNO\nTbU3dS9UfjFWLufnHuQzibpA30i+tYo9iO8uR42nqYfsLCPvPUK4ID6wJJU7\np3Sj6eUlCJNDiOco10C0RDrThZz1+b2DayvVToDwE8ScNltoBuK0uR5VxRpo\nIj8pErVQhkagcNWM8vV0CSpDlfwhBhNGbDzRWTPo1l9TSz68E9uuVKUyFJCO\na4/8Ph6n7yo8sIfuQD8vIy5h5rf2idrG8CsKEARtGJd/iRBFUjbgLvGfHhiT\nBH/+MfZPEWlalmV9CPmRutsaaIBYnVLZegdAW1Ng7BtpgUsTomWy0FdauHoz\nHYn+VmFfGM5lNLVdUYHtTI8Yn7rJP9TLB4qQ4ZrQ+iP+SzEGinsy7ZJlb6GU\ndIj98akxeUs9eWVvjGl40AdaL3TvOw1+E7MEQNxWfbGGfxa/BuZ8cdHVioBY\nlmtD\r\n=gZoG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCTe6vJUktbxzFgZEwRGwMiGP5xwIufX+0+e0Ouid1h1gIgJuu7Reev0+fVEuJNcLVQwQDj2p8eiBCUNik6qtVP4Do="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.3_1563916016758_0.856980437124663"},"_hasShrinkwrap":false},"1.0.4":{"name":"zustand","private":false,"version":"1.0.4","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@1.0.4","_nodeVersion":"12.5.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-unSDAyctYddVNk/TBpVtzk5zyj3WtBEuyITBodeXHRxAd/I9HgIn9AdWj9TD6EtjWGKFXbP/cs+5UI2OC/gZRw==","shasum":"ae61fe6c8535c1e423fdbfac3422b2f0113d1fe5","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.4.tgz","fileCount":15,"unpackedSize":29763,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdVU6OCRA9TVsSAnZWagAAxtIP/jsg9mM6xrpoVAa8ezVE\nhjPJcCZR5kTi9EERpw7E/1iiq48bRnVEQ3gB+yrNu9B7dUic42OWE+tKUd7x\noMnHFlrwbi8FxUUg0nOwE5Z8aBO7YH7pEOA/mNy9wcAxc/ep5S3AuXHF6tKl\nVodYXibenCM41tVSxsN41LBT8QJECe05N3gK2LTsJcwsrUyDuZckWSXRBndV\nMEDe2f0qdzSIK1gQH8RWl5tA8+rb/JDWZ9oV7qpPthG5TNqYayh0VoX1RqgU\nd5vtoeJUmFjm84Ywir3mIEUiO4vjd1SeCjNuNjDqWuXN6S6TsOaV+VrpjfY6\nCKkrxUQYFimqrx/c85QF4j/xvwKZmN+2Z1wqgazKfxdTjHTu/Ly0FnP4Tjwl\nKAiGIOiGuSxITo9b9QvdKgtRC7eKP0TuysOuhgtUYFA7uOIiG6R8kzdMeslz\no+cn3+6TiTZf6Aefj27I0yL1bUrT1Ilu3m7mFp975dK8RHC5LiTaCrqhP/nU\nKE9ma4CpZ6GMqjfoTaiiQJ1AAK//SAax48OFcPennviPpqAZwQJuGr5e1z4y\n8SRJUT1xDXcdsqQWIHDschFC827ZTzqCDwtdjucKGVTWqmIumqqdFwar4KMM\ndHiBmAwdTVBiRboA/KEBzYdZw5Z9E50/DXf+2Ve80g8UaU4bD7jv0+fsAIXG\n58wL\r\n=a9CV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDWYun/m81ewwYrVJPcuL9TOPtUw4ckqZdLDlAX74JFSAiAPzUWRSzEz+X/4TM7UZs+aQShPPuOnE22dupw2C3JPIg=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.4_1565871757432_0.5193497496729438"},"_hasShrinkwrap":false},"1.0.5":{"name":"zustand","private":false,"version":"1.0.5","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"scripts":{"prebuild":"rimraf dist","build":"rollup -c && npm run copy","prepare":"npm run build --scripts-prepend-node-path","test":"jest","test:dev":"jest --watch --no-coverage","test:coverage:watch":"jest --watch","copy":"copyfiles -f package.json readme.md LICENSE dist && json -I -f dist/package.json -e \"this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.husky=undefined; this.prettier=undefined; this.jest=undefined; this['lint-staged']=undefined;\""},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":{"semi":false,"trailingComma":"es5","singleQuote":true,"jsxBracketSameLine":true,"tabWidth":2,"printWidth":80},"lint-staged":{"*.{js,ts,tsx}":["prettier --write","git add"]},"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","jest":{"testPathIgnorePatterns":["/node_modules/","jest","legacy"],"testRegex":"test.(js|ts|tsx)$","coverageDirectory":"./coverage/","collectCoverage":true,"coverageReporters":["json","html","text","text-summary"],"collectCoverageFrom":["src/**/*.{js,ts,tsx}","tests/**/*.{js,ts,tsx}"]},"devDependencies":{"@babel/core":"^7.4.5","@babel/plugin-proposal-class-properties":"^7.4.4","@babel/plugin-transform-modules-commonjs":"^7.4.4","@babel/plugin-transform-react-jsx":"^7.3.0","@babel/plugin-transform-typescript":"^7.4.5","@babel/preset-env":"^7.4.5","@testing-library/react":"^8.0.4","@types/jest":"^24.0.15","@types/react":"^16.8.22","copyfiles":"^2.1.0","husky":"^2.7.0","jest":"^24.8.0","json":"^9.0.6","lint-staged":"^8.2.1","prettier":"^1.18.2","react":"^16.8.6","react-dom":"^16.8.6","rimraf":"^2.6.3","rollup":"^1.16.2","rollup-plugin-babel":"^4.3.3","rollup-plugin-node-resolve":"^5.1.0","rollup-plugin-size-snapshot":"^0.9.0","rollup-plugin-typescript2":"^0.21.2","typescript":"^3.5.2"},"peerDependencies":{"react":">=16.8"},"gitHead":"e1f877457cc5277ab63d26d8d7469bc6944f5beb","_id":"zustand@1.0.5","_nodeVersion":"12.8.0","_npmVersion":"6.10.2","dist":{"integrity":"sha512-GomHcjwxLkfobin2cT8wAhWOedFNuxfGxZTP2RY7cmdGSBlz+UBfD09XDjRVASWQ9lZa/NHSj0NCEtxLtpxOnQ==","shasum":"a27e63e110ebdb341a0991029fc05af0ec9bea36","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.5.tgz","fileCount":144,"unpackedSize":503066,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdX0MGCRA9TVsSAnZWagAAmE0P/1u4vjaZj0EGMzEFa2aR\nA74yrlidusnZi1XEgItn8mbhwrP4Aa1D47UEQezjc9A8RSFnxNLcGNWnaJK/\n4qGUWMCsRhQLBjtJGfw3cF1g1v+fcBqLjg91zwSrXuxQc9ygexTaHMPdsNvo\nKc0JpRazbwXVLR1gXGYgQ6ZJNsNT50uuRqiI/uf3MZyYxO6CWfSpxRNThoIn\n4zB+FHF8cU5KlC8cScOtMqeETksKJdMWo05HrrU0YHJGRBjCvkE7SFpRhT6M\nDMSaJj6cu4DtyKQRaT3fGu2ls+UhE4/0fcpg38lizEP5nPV6Sj0p7jjkeET8\nseCi9xja4lXLSepqH6jp32vDr76WauBBa5rwmlylErBb48qwHFVrkvMyCV8v\nv9IDeiE1RCoYtAJgw5GlbcDsNAcT6btfSK8mc2EJoJqwKMCpnKbqpW3i8UR0\nDTnCmcwN7aOHBHJ9m8xawWpbYIxXtW43LOXnljB0caMvEjSPFjpeCahLl3P5\n7qgl4IvBI+crit+ArPGVTcIEaiCOgJ+rtl3Cqy+CmJ8QD4QtHDZnLD741ia4\nWe9JV+ZXl5mSipj4OC3tqnwzN/45DgzSiEIHJYk8uivxkj087L8EQoNdRrvw\nqibi4StbcgECYirctjzV5ykaD7k/KQIHbjoM/BoafOuFwPY4bNLdSLiFjLNq\nI8yG\r\n=UTBd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHkr+PQXhijZ90D1UBrKFOmBBznspH2tMxGKVpwhlgDhAiAEY+/epjScnWPoRe4BA+j5/RQ0pmStSmxBzgVYoaQ7Jw=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"jeremyrh","email":"holcomb227@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.5_1566524165866_0.7663017495260203"},"_hasShrinkwrap":false},"1.0.6":{"name":"zustand","private":false,"version":"1.0.6","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@1.0.6","_nodeVersion":"12.8.0","_npmVersion":"6.10.2","dist":{"integrity":"sha512-h0+b7NkVPa4BQrA+9gjc9H9mkYfcWGtqBrYadCilMTEog10ZrPEpqdzum6O6jRsAPw+HJcCjmqiEpOVosdL5Qw==","shasum":"af1e05292c6c98afac977aa2849b2a0edaad1555","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.6.tgz","fileCount":15,"unpackedSize":29760,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdX0l4CRA9TVsSAnZWagAAR2cP/0les3Ntuh+48MrTWqu3\nuc+mgjhHk2eYJ4GbTHpOoJN+eBh6/G0VkLqMwBgsgSzIVLHifKdlcq33GxOC\niwiCCAdd3dmPmNHlBniZKBrjFBSoxfydRokBIFY41Z+6OZ7jF3mLnxa9t2la\nGWA4JWusqdUSpsdRposq6dHjTa1K4IoWF0xD/ZdVIRZJvsZuElK28SrTdkBU\nSPr4givqGjLwg83xI5S7DfuBAAiSh0zOOd9BgPhUndepMldgy93mO6Z0TQSH\nL9eUEIYCTXQhV3/09GyodeIZPkS0oRA2BR7vHidIuM/iZ8Nefkqojxt1b0jV\nbvh2aobl/mf1+h3MPQlUpiGLH6D0X4qox71VjoP3423lVgFS/9No3uk61XeE\ntI6BoSxQkuVH9PePcHtHAG5csRwLc/c6c89cZg+5sZG4KWmzq1JFkr2C7Pxq\n5Sn/s4Qu/MSP0ooPQSbMmceXl3XisDZKzrrtExJIRkSpgYMydxZL8pVXCI5A\nlAcei1B8vDYXjlfipH2ZkohL2Y5NCTA4P4lKZxyy02FhfC5022P4rMq0SiD7\nGuurdPdz4hi14ZhMUqzqnO1y0tvVpp5/DVyfbp8Sx+/vMHBWfedQgm6z+x8b\nKufYqYYVtB9501OG2/Mx8j2bN+ABUAHJe7wAeihy73/Yode5uV025UhPYTjz\niY3N\r\n=+QNV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDUkhaAOQDfs58g+CO3O7DcUFy267Tgu1kUs20NvJH0EQIhAPiuHxPWgBEuf9DdjlG+E80uZTXhgXglCelBa3kiOHZN"}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"jeremyrh","email":"holcomb227@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.6_1566525815526_0.8966464859904948"},"_hasShrinkwrap":false},"1.0.7":{"name":"zustand","private":false,"version":"1.0.7","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@1.0.7","_nodeVersion":"12.8.0","_npmVersion":"6.10.2","dist":{"integrity":"sha512-4E5PVD0O4UEWm6ZLFwiyLuK+0LJTg+mqlGO3Mvndqonm44ovTISn3H/EgE6cOA5/PnAXlmdsopRPdZ7MsdLgwQ==","shasum":"b4ff50785073b6e0ce28fdda3f2ede1cc810e99b","tarball":"https://registry.npmjs.org/zustand/-/zustand-1.0.7.tgz","fileCount":15,"unpackedSize":29789,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdX1aeCRA9TVsSAnZWagAAfHYP/30iPenwUnoUITuYZava\naPj7HKmQIyMR5pekZb9XrdTVLjfRC2+ORM+lZIkEoyYqKeoZMwy5xapt4EVD\nW5JVnbk12j1+gaRBi7sIZtpfa0ZkC/z+DcDVXDK8LUK/HhTM/NZv6yahvYSu\nL0pTjWyhvux/KMhhYN3Eq8O+6+DUFTfA/4CTB1TjUdmOvtvAV7s8vpGFp8jN\npNnt2Mo4wBMgDn06RJBVqlJUB8u5R4Fqr3g0HVAETmVIsVvVCaCa1S298yLW\nDHJfQbcn+gtGQt8Y5wSxwC4kp7Bv3+By7AfUJBnd9ZBuy6AORaxoEg9QeZOT\nDzD++wDRyhHcrK3+1uoxL5y61cZfzISs8rKlJ9ZB/k3/7JyHi8/MxNQsYiTg\nSqkO4pciXNZdnpUhBhEYcYCbg1n2j4Un68cDElzyx8CTI+6GKmBO17EZopdu\nG0eHkqCRfV7fDiZXinlYMnRjNzXYabZ5V5lW8CiBrrL5KTals51QO3fHJiwL\nSeRp1G+P95peRNkzyUyfl5X/IuVgJ2GELrFnu7ihO/THqYLy7QRYQmF/afUW\nXC2ykNqPcMLU2TAF0NLzk7JSjT7XRj/oMpgcSbOXXyCBtpMCFXm9vBHvlCew\npPLQr0c4SH3J6aGeLa9mxcfgsb4ocaK4vZw3SlXhSGyi0weZq/HQ9bECjgPl\nczn2\r\n=UaxH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFiW4uafCmQ5+zqx7i4FpojDzhZ/tt3S0EM+auRGioVvAiEA6dOpt7Xf0HrklnqYMPThxc9QE0Y/J4405RzF2RKJiu4="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"jeremyrh","email":"holcomb227@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_1.0.7_1566529181461_0.13762750342000651"},"_hasShrinkwrap":false},"2.0.0":{"name":"zustand","private":false,"version":"2.0.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@2.0.0","_nodeVersion":"12.9.1","_npmVersion":"6.10.3","dist":{"integrity":"sha512-dJcO2D637QAT3XAIz4mYkw1vwrl6A20tiJ//ItA+lz7iHiSoD1xGa4Hd5AhMOJQSH+lXoEvezx633PTY08H3sA==","shasum":"638cee67d060a2ab84e5266e7aeb5c8d561c35a6","tarball":"https://registry.npmjs.org/zustand/-/zustand-2.0.0.tgz","fileCount":11,"unpackedSize":27483,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdnlB5CRA9TVsSAnZWagAAR10P/26v+LhlDG/vptjDL+W4\nj53Ss+/tprGz47fxXf1JbrJCT+osZbp9CrkXvhKBt9oNQObu5SpKZtIaoU8s\nFIcbAk5Foa97B0OZjd8NbZAblaajvaoSyOsGLBHarolkowtQf4+rBJvWYJwp\nszZBvzhMEKEPRQD4Qoh/ZQ1L3bWIj7pATW4QuNMabWA7oLCxZR0IxgOGFbqN\nb6onBQzW4faW97XxCUF4mA0jIRolKhyIXdWEahuf2sVF/s8odoxQBldlQlmF\nk8yKEhwXR1ozD6tlUuWYdYej59Dua2+9m6kMhGRtUEljy02sVl0cCSldJFHi\n8hdmgNEl5AwZmZ2cZUbIT+EXkR9bBVTNOJBJKxF5C1EJ6jpc0qomzH2BrlCT\nFKDBau1geYiUdggwW2TCz3xCcH9v1Hcb8QcyMnXhVnitevCLgWdBnikQnTFk\n21dKrt1xs0RehxY449avojMf2P49O/z1EQi+NfiORK9cp/VKebaaygzrYmVR\n3FMOyO+/vPtEwazTpDanQ8mO5yyONBpR+1nsUmE01NiT97z05XFOi3M+Hi7V\nN71uAg788X2IxcRNrEIEz/e6oVy/X8B6Th+7ZIdlh9lyBglcOH8gXdO634db\nmCoURcWoxtyo6qm+sqFPdlagnhXKe0cZhi5z1E409ZDgApdbXdM+Rd9s1maG\nEBlS\r\n=SYRU\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGNjvNjBmDGJpvy0+Z9psATNnZILbDeNYArQnJ6hXcMvAiA7a0WHxkZYKwwuYqN1TD1bBqj49/jGrOP1hxAuainivA=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_2.0.0_1570656375052_0.5235709403667721"},"_hasShrinkwrap":false},"2.1.0":{"name":"zustand","private":false,"version":"2.1.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/drcmda/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/drcmda/zustand/issues"},"homepage":"https://github.com/drcmda/zustand#readme","peerDependencies":{"react":">=16.8"},"_id":"zustand@2.1.0","_nodeVersion":"10.16.3","_npmVersion":"6.9.0","dist":{"integrity":"sha512-lIcGVrrqH+wlctbOS4ug78puWZxMKAbuRQQPJ8t1LVJkEIiCofD0x83P0C0YW9Ut9yiEPYsPjZfNxVfyDLEanQ==","shasum":"ace192de32277ec923343b914a6cab81d2d75eb1","tarball":"https://registry.npmjs.org/zustand/-/zustand-2.1.0.tgz","fileCount":11,"unpackedSize":28980,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdoLSfCRA9TVsSAnZWagAAPF0QAKGRaI1rPxv97GeYV71f\nGK/G9aYbyQyEiZeKsuXDiimNkew9yyPpzdGq9jmVycZ4+42gdfYalzbdq+24\n8+QL3o27akiVLcj7DXt2LqUKZpRuo7F4o6gqoofEYN4Kp26A/xgfmbqP6c4s\nVaUzPT3RTb/zBlFa9P60uCDhCFTwWZNhIMXxQWaPmV4EBjGeCSCLBu9xMh0s\nZAQj8KP+lm1smuVTYmCDrM+tvXsgi07GfkAkJhWfWaqWfZZe1ZtFH6DgPe9k\nJSBkNilFMMbFDOXYw/BzQrQKtjTZZM/0E/KFxi2x0nsodKQD/ajOkp3J6C9x\ntyNXx4STL8Kat8yJCdwxyx48A8ATvT4qxGtTt7A+RUjvZCOoPDVDjqSTWqeU\npYupeKaMTLd15HWtpOXaXLDKTmkePk+MSZetJdZoVsntAnglH7bo+8qW/icH\nvfPwFAj5M/+6V6QCvhZOVPWOMmbwWkabyelgrxakeB7SoQI1QOiffKp6lEdM\n+D+LoU4gzMvA/JSANGGo0fVYigJW8vLFs/Ybu2NJiaSD08ryoZD3uaBsTrh7\nezwiNoj8OliZlEli6CpLn2c5YWwhZ7gGtAMjVeELdIJaaQdG1UXMuGICibqU\nyKKg3/h7wasiLthSpKIrz5UO64XSr3omafOBhg1vHMvcThwzJHVljO0WXsWw\nj+eZ\r\n=wIAE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF+LK0v+ZDrnzLq4LEEuHJl5TxnsdGKMy8A36G5Ea06mAiBNB9QT4TqD64TN1TLOnVAnYY3UAXANL1KPwlrMcNPvzg=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"jeremyrh","email":"holcomb227@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_2.1.0_1570813086696_0.28883768463273096"},"_hasShrinkwrap":false},"2.2.0":{"name":"zustand","private":false,"version":"2.2.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@2.2.0","_nodeVersion":"10.16.3","_npmVersion":"6.9.0","dist":{"integrity":"sha512-D7OcwBsMEDSuYRwIpxagSHaSe3WeYLgw4Ft+bWD4nGeA6V4Jsks7amcjfdm5WLuIM4i8juPWD7MsdHV6JiqVwA==","shasum":"8f79b23e25394db19fff5df15d9bdaeb87c5a481","tarball":"https://registry.npmjs.org/zustand/-/zustand-2.2.0.tgz","fileCount":11,"unpackedSize":29346,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdsbMaCRA9TVsSAnZWagAAVq4P/0SDLH79L5VsyGA0iGbz\nVIcevhFYpJ6D2YSjjKNKcoDUrkzGB9abihO4UsIeSVJKfsVEc0z9413cu8op\nnjgtWm46UA+NbR1MVkMdcncLxESW2Q+o+yAEoCUZ0QRhA1Hyrpd1x3pPFtPn\nOykL7MWQjF2rcJmHtbLi3XcGMDov4weMeIKenMRqtzwrbX7TcHWrFSvgUIog\naWw58t5+Fs+mVrVCZq9xWb9shON7rz9iTPf7OVVoTCI0wvw68TbYNlegR1qb\nm/z1p9qUxEgGJ2yEi1gKOdVP5OAImXU8R3Hxle31eUbsCvH2qqAXtiylyD8W\nc+tZXPOnRMY17NlJOReeePvSlP/s23V8mSB01X/vu32GnHgNYzkrjbX/42sn\n2K/2NBa937IWAIxkrfumb6O2xqhw+xjDiv2pIe28q2kIMEKkwyaMOCJOaobW\nFi3JzWuJbf3M0ymRnTld6t5ZsTLJ/svCGSU7PrW/lAgEU6aUprypr+nr5+hs\naqw4KXiQYvZtKBJNPlQ7E1vkm+gxxl0EbI/XEy4vAprpoeNND5CtO3tZ6Uaa\nw1FaVRlJZGPN1A9VyJU+3kuzWo5/ppe+OsSEIuA5LCWU3mk5jma/FBcrYXhe\nWo5ey4FEnJB3AFGHT6eTcfry0/LW411kNK73jgDnnEqHF1UL9FV8/FZQ1dwF\nuavF\r\n=3Nin\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFWXsEjJELqu+dwXz0UK5pBupb7SGq5VpptknYbN/UrTAiEAlkd3uexCFoNDfyVkMt31puFi57oVAqIioUO5+BZK/ss="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"jeremyrh","email":"holcomb227@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_2.2.0_1571926810234_0.16284575453247774"},"_hasShrinkwrap":false},"2.2.1":{"name":"zustand","private":false,"version":"2.2.1","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@2.2.1","_nodeVersion":"12.9.1","_npmVersion":"6.10.3","dist":{"integrity":"sha512-K0GO3fe4RxhUWJo3yu9ET16FxPpwHR7EZg3du/c2q1p8QEarzSxqmT9J+Gip4cAV8tapL17h99GbsBsmqq55WA==","shasum":"e749b43bbd87e3b6658a6c9a8e3e20dc3da3b2fa","tarball":"https://registry.npmjs.org/zustand/-/zustand-2.2.1.tgz","fileCount":11,"unpackedSize":29347,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJduT3BCRA9TVsSAnZWagAAtT0P/ApAJ3DdWji7W/nEFEAE\ndYrYsVHvbBs5UQdejcuclFifk1fTorwfImPo5Bf843sS8es+tvOZp61Os2gj\nZ07K3ofijhjFt1sd4/YrVwuMad468tNRo8xTxni1vk6EtZk+X7hfwB6hQhZ8\n6G7l+R1tsoesVlXLJnBthlk0eeJxjbNXQzcn6eamseekIzodwkzk61rjm+89\nCG7j33RXKuHjFudJ6+dBQOWfppaSwgPEEZlT6SVeKDiDFocbcVYggkpOf/To\nb9lZtl7OTqwUfh8LkXmFCiYhtyvhYKh1J5n9vq5eKVJ4QWRKiilrKkU8ZNJf\ngnEuIrTiWC9IAT0Xr2LqWFCGvfDsswCszHVfPS9AuPW+7HICFp556UEvAWGt\n+qQu4CZrrA8B+w8A27Epvfw3VCYkAi/EBMoeVYf2zOJBdXZtljFAo2PFZ/Gn\n0EERHzUkauQyvMdsvYF0MAVwSMcT3PpQaQCiVFgB3tVXtJhTazDTFZBfwtMe\nUzMFmuEO1aLKIdSA859jXLlS18Jaesck13tgBtuWTVYw8goTScA0ZT/eqAOY\nRtt2MfarRl1rO5uM+B14IfsLG6QSxuDoqmc6udiLwj8x9X//pBSJNMpT99Rp\nrN3OI3EgTRf3KMW+38J0koDJNOvxFCcwHba36W5XAnSSrXnDqlf0V9Bu0cT+\neHMk\r\n=7dyG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDjyqaYKSh1p+miIfVOZShAFsvKbotwsXV2iHyU3JlHewIgH+DHAS3i/9svabdNhfUGop1DJJ7NaVstT02mab3xVK0="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_2.2.1_1572421056908_0.15023784037670218"},"_hasShrinkwrap":false},"2.2.2":{"name":"zustand","private":false,"version":"2.2.2","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@2.2.2","_nodeVersion":"12.9.1","_npmVersion":"6.10.3","dist":{"integrity":"sha512-l51p5Ys4WcAqrds1pCd/lWQU5jzyayzyftyTmtwawhLLl/V9Wn9D0aX5Wu2fZ8XOco4C87UrurRVJ0Y/rNNrtg==","shasum":"4a318b3076696b250e694eb3181fccb11eba3fc1","tarball":"https://registry.npmjs.org/zustand/-/zustand-2.2.2.tgz","fileCount":11,"unpackedSize":28042,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeFEEHCRA9TVsSAnZWagAA6Z0P/18AsaBqqK7BrlEFaUoc\n98LnfYB+nzR0UKS3dW4Ylmb+SL/LsnoThxnaRjt8MGqcPxu9SV65n+RXD1ZY\ne2i7iS9AHONBKgPNfYYE6IR4wq9Wm108wvsdBBIVb2lW3YtbgSImKvdU3vFI\nnxGv1zSTELumFHwy6ehq6Orf2M80fOhkYVfERi3JUwYsToLUaCue4XhYX0dT\nfoFbPgjxLM8Yh1hLtg+VQZfdFlF3UnvJnBCy7hT3PDsAjQu2cAEj1R7Ch2HI\nQRpx1iUQEBSJAmvdukH2Z3RffPmDXzinnwQLAMbbG/3HKkMf+dLWCu+3tQhn\n7AhJw9siOepV/Oj1HpXT92Kxh807bWBcMmBG3rXfl5YrGd9ibjjAWfHsmf7k\naJqoXXrCDrdBsC73hzgPDLeHCJJGVABo514sN54M9HCKQBU2wCKcAy3Z6lCH\n1maU5Xh3aJVQPXeZLz0elkYLOkqyVBcFe57duff4ok/oE4UG5LGxG6v2U23w\ni7MFqt5yNdTzbvctLoIFAda1jYTQiyvli9+Lp5coNuxjX9gxderQhW1erLsm\nLCSzYUW6oDFFSfxqqLwZ3sRTkrd5qG1qR17J5S1KSGLV37Yu81NF7d8fFdUT\nrrINVE0WRiOtNeMcZ6TJJpKCus3kCkHoB29xVxqB6OHQP6UeVgQSqrSWfkKV\niNMr\r\n=Cpwc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDXaTdQNdmTgll82YtHeaX7kpRNDf0+pDBLnoJPA7xYNwIgFyJPyUmqwIR6a2GRbBeuH9RTeyLhCS+SrdhKNye8yaQ="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_2.2.2_1578385671463_0.895432404421219"},"_hasShrinkwrap":false},"2.2.3":{"name":"zustand","private":false,"version":"2.2.3","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"licenseText":"MIT License\n\nCopyright (c) 2019 Paul Henschel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"zustand@2.2.3","dist":{"shasum":"07ee668bf600a5e0dcff8f8b60f35faa149f65d5","integrity":"sha512-SSd5DzbwUN0b8ePW4I+8mSdXQc6UOqTgYzlMtoNvf7pogmFoXjeE0wZwCVopoZBnzz/uRBD2dsozzM2FXDQcXw==","tarball":"https://registry.npmjs.org/zustand/-/zustand-2.2.3.tgz","fileCount":13,"unpackedSize":323982,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeTiz+CRA9TVsSAnZWagAAigwP/2f8tlXkknmVMtoQBnTN\n9uBMuwID20yM1vLSzbdpb1YQTyJMhM4RfXt8bHTp82nOLuymjjLLOKMV1vb0\n56XBrXJsZBi2HcIyXNTuSdJQmcUJRXe6n4zl4ag92g/7S3Be/iAIfaGKxVBo\ngUFqo7BdZ6pLE4FvrVTs6enDEaMDQRlMGTFo9bPxG0ZQ5qGFvOVd8HvDxivZ\n1lkeIcmbwC5rv20rKxMZon7qgVIQHfdj9kc51C1bl3K1ZtdyzGLwcBNJ5aDm\nEiGPrekzWsM+74bHdA72LDPgkBkLM4oV+mv/9neQN/b+n67n3FpeOtli2rRA\n7GwT/EQuhsZNs0tfQknJRVUdNJvh99CBL9+nAUu24F0acvy5foWcKCcbTO2W\nnF+5rdoXz9ktWsNM8ObX8+fIx2V1K3AoQ3MzAgHJzgXdmdfDbPRS7QCY4vp6\nHMk5CdgsM36YaBlIHds5RbhpWKH6tf1W9LC/7xPrM9/zskr8kuORoovxZNOv\nqC7fIjYesaNygmIwuynOyt4NjH1TNGb9xE5P/fD8qYoz5rNxNGhDwKiRujfC\nPwm2r8BD7CJfyAFPo5ynM/OqkJvJOxG0CfhFRsqlV/cTIrYyc0zKVMCLN8Pn\naeNz+4p3ajSS9M/SfLnxlPJvEZ7NS5xk8L2ayFk0oeqdrTKmt19UYx8eTB7H\nKcsA\r\n=PBDh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEsly9FO+lbZ8hjc9FhFIy2qg7GDKPFGhoJlvvQxnawgAiB8jPeGQw6gqniKBMq7E3f2nzEqWNBZS9s3D+fhTWOBWg=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"jeremyrh","email":"holcomb227@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_2.2.3_1582181630234_0.7196708642960157"},"_hasShrinkwrap":false},"2.2.4":{"name":"zustand","private":false,"version":"2.2.4","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@2.2.4","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-THkjmdAT3h7WzLGDFmC7LVdDOxplYXOdXy0rIEIe/Yn5NDUZNEpywurVdereUlL/hR0Yxm/P7uiSGNYw1eYxBA==","shasum":"3b38f9192ae06e6a737ce2d78cbdc321b1c7f185","tarball":"https://registry.npmjs.org/zustand/-/zustand-2.2.4.tgz","fileCount":11,"unpackedSize":25521,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfL5cECRA9TVsSAnZWagAAZYcP/3CEime5B0+Ui4vbzEDM\nOZ32raqHa5c9fEycr0J8ui9TeVF64h0vRTWBUyDTR+u+gMdunBzU73w9Fc4r\n0QmTtgxOPsXlBb9KvcX5D7nO5/pmN2PZMZSgzp9H6/Tfp0SftBGiDmbaS1yu\nUI65U1z+oiW8PYAatUv+6q/OHCz76RXvH0QpwXxGzRxtXcsuRJ26TDeq4saB\ndFoHoGFfYx+lzbwWc7IEt6kHbnf8RYwg0YupkXXt5VP2gQtNSKSZRE087FkW\nkGYFPgGq3vS9PWnUKUKNNceS7Uaebodzxtrz720tge9rF0qhcHy7ov+VwX3D\n7g1J8fRhRD/wzX9hCZoRbCYX4rEglFfp7WRnGkACAllCUBdDX6+h1CYWwvir\nkfs97U+tib8sMUImUQCZiMiwa4PejYSr1iDx8FpQg0UTR546gjKIpwvL4VBF\nFxhq+IEaCjyVDwd8goHm1C0TgsG3ER0Z+9KgXtds7Z/Y0yyDZrrF2J48AHnu\nEpmQ2hlZrt0arO9VxD6vMB3Mwua2L9m8jQ6OTvvZINM/1f/qcdqDU78U6D4S\nTq7CiiQtauCJuh75NZhkDqM6iTztUDk5fYvA3v2A/5FCK4yHUOrzITYL85sG\n1qDl3mSfEI20ZvDXlT1CiBvnQ8B8QCGvD9Mq/9zIx/4UdYK4bMwO/J6Xr7hc\ntYQQ\r\n=z4DZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEquMoXRJe0J2OuUP+hHJtpUq3bodR5NlJ2ue0uOsVwGAiBSUbl30AHCnqDnlyIXRBqFVYJXDpvGg4KC5cs1jjDAtQ=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_2.2.4_1596954372102_0.21144929011582225"},"_hasShrinkwrap":false},"3.0.0-beta.0":{"name":"zustand","private":false,"version":"3.0.0-beta.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"src/index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"readme":"<p align=\"center\">\n  <img width=\"500\" src=\"bear.png\" />\n</p>\n\n![Bundle Size](https://badgen.net/bundlephobia/minzip/zustand) [![Build Status](https://travis-ci.org/react-spring/zustand.svg?branch=master)](https://travis-ci.org/react-spring/zustand) [![npm version](https://badge.fury.io/js/zustand.svg)](https://badge.fury.io/js/zustand) ![npm](https://img.shields.io/npm/dt/zustand.svg)\n\nSmall, fast and scaleable bearbones state-management solution. Has a comfy api based on hooks, isn't boilerplatey or opinionated, but still just enough to be explicit and flux-like.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombi child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurreny](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/v8pjv251w7).\n\n    npm install zustand\n\n### First create a store\n\nYour store is a hook! You can put anything in it, atomics, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ count: state.bears + 1 })),\n  resetPopulation: () => set({ bears: 0 })\n}))\n```\n\n### Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n#### Why zustand over react-redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app into context providers\n* Can inform components transiently (without causing render)\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing an alternative equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either foo or bar change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either foo or bar change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.objects changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\n## Fetching from multiple stores\n\nSince you can create as many stores as you like, forwarding results to succeeding selectors is as natural as it gets.\n\n```jsx\nconst currentBear = useCredentialsStore(state => state.currentBear)\nconst bear = useBearStore(state => state.bears[currentBear])\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, false by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }), true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, it doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access the state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(console.log, state => state.paw)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\nunsub2()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(scratches => (scratchRef.current = scratches), state => state.scratches), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  nested: { structure: { contains: { a: \"bear\" } } },\n  set: fn => set(produce(fn)),\n}))\n\nconst set = useStore(state => state.set)\nset(state => {\n  state.nested.structure.contains = null\n})\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config(fn => set(produce(fn)), get, api)\n\nconst useStore = create(log(immer(set => ({\n  bees: false,\n  setBees: input => set(state => {\n    state.bees = input\n  })\n}))))\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store with a second argument: `devtools(store, \"MyStore\")`, which will be prefixed to your actions.","readmeFilename":"readme.md","_id":"zustand@3.0.0-beta.0","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-TV/+aBXQp7UWLj8Gsf+w1Yp4LHaScc1zdfF9GQL6Thd6Mg5aSYZavpBc2X4MjU3KhE0L2JuGl4IHzlRtpe2WDQ==","shasum":"72c152d886ff069682327d0aef34ef93476a897a","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.0.0-beta.0.tgz","fileCount":14,"unpackedSize":33315,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfOtySCRA9TVsSAnZWagAADCMP/ixvBQf9qH2BCN8TWP6i\n+8Im7So+NsY6q1wyynRomuDghS+2ZNar91/N7sIDBqNIXJbSEBGtjpJQ83Dw\ngZWvsiyzM9zDLa4Y+nH1pilzX3ZYXd0W+l/YlDrI0BF9mVDP8HYqFpWDsm+G\nQnW3DFyjVh3okxd+smR6vajfudzdOMQ27Ky+mGssFh59/hnAyJLx83AA1NIb\nnNTAtCyXgqvS6Xz9ItZhy4HKnlwQGRlxEudTaxv1xOKX0rK958Mv373tQ2GG\nl0JIktC+Bh3fnox3B4IgbwA3VJ7IBXxe8Hl/yez+Rhy1Zy3y3xQLkYfHr7MX\nBlKclBORYlxqfctfjIRHv4CpjOJnBHbJ6PL4gdNEtbMa2ytQe0q3rXxEenLp\nvX0lGKirBmI4o8mToMR92xXvNONZSKePic17ns7q9AY5FdeEE7rKAerSDq2X\nO2s+krMaNEu/Nz8eipGgNN+7KhG6u3JUCJiWi4gAGr4in+wqUc8UeznvA5SH\nUvfGLLhbHbH1OnXvNNxPSHjFFSzCbx4HxEnR7IzQBjaFOzGoTDRVGBV0HpMD\nXnbfGIXFIbb3J4NE7hQ21mvj9nXQ1Fg7MWhZ+13z4G2Zv5MrYMpsiRuX0zr2\nwEhdrJ60+dq6A4dnfpWbABWkymhpkGRBHsmTT7tkHxI1dRa3RQLawcNdoWOh\n7SDj\r\n=DkBZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGI55sgEvdyk3QxpbnHAUppxmIwEGT9wfQ1T26N+cyw8AiAG5Quu5esr2zLuH8LeqHhR987fenDZzSzfQAMk2nMP/A=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.0.0-beta.0_1597693074002_0.11140739364680208"},"_hasShrinkwrap":false},"3.0.0":{"name":"zustand","private":false,"version":"3.0.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"src/index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.0.0","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-3vd7uYwDSmYA5mT5/78RQhZXFEud+YlD46hTpFAtkr45dzN6R61d3TnFBXmAAbz+mEeQ/koRx0rkf2P0/gMDTA==","shasum":"218c2fb659d0cfb156683f3a6aa185896930721f","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.0.0.tgz","fileCount":14,"unpackedSize":33317,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfOuAeCRA9TVsSAnZWagAAC+QP/1hiq6v2fcfbw0GsfLxd\ntpA/Ov33g5gbJocoO//s+y0CPiyc9V4ff6jQRbZ9F5lxWyXq6vW+TS560f0G\nysJEE1Aelgv+LEguHtNj49YdU9ZJx5lN1stCByyxsVa+kgyO/54061GKB0v7\nQGiGMGTpLT6f90m5YDcPO3OkoMUrMuYQ1T1h0Ql4C0K8rXSmcUNl2hK2EyqF\nnT0GtmBVYUdA4pcNHiDvhR6UOkaiEjYxXN4qisa0kmvQQQfI7hrz785RC3cd\nCcBWUiXnvv0MQp34xAHBOpExl/F1QL24IoTeOtnoxJJNwAxqf054GBdL6zU0\n2owKysRGkfo+Q9agnNfeC5BD/+l6H6yeAASPa61sQnqQHW1RJ3ltulU/Xeam\nvOsHZGN+nl2/actteE1HWOhjIn56r1/dhl6bH4vV/Uq4hFCMkp0y5HfH9GBG\nwm0TNKnlh8m7XCKZDDI8cHtNpdk8qn6twDJEcLssOo6DCdDDpg5BixM43OJ3\nEJgEeMluQ2plOW6mdSGQXv33BK/9FtZPiMI9EwOpXhpqjj5dOKydX1eG812H\neehFwkyv+BRtAI+1kgQ9odQBys8Z5ocS6gfFXfilKuZdyVYClB8CD+a6AbIh\nNXFgGaHL1uDVfy+8Zci2FrI12iBjj3mTc1Ko2fRTXyoFJLE4lWMoyuTEaq2I\nEOsg\r\n=v7s0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGYVRXQTw4n35wvYW99Fi55nNV9gmmZWDJWYd3IytcHZAiEA2jTyDbTtAPiJQGxce6R2oTZTm0vujV/LAB3vff33gI4="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.0.0_1597693981801_0.41507049765794135"},"_hasShrinkwrap":false},"3.0.1":{"name":"zustand","private":false,"version":"3.0.1","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.0.1","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-HyIEcOStyTh3GRpomgMCFCjHjjTgaTfdItR4ThXjH8y+gA/xIwU+ay2sL0/47vtmETIHm7j739z2rOeiCSZWlQ==","shasum":"250264ace74152463cfb147cd97b5efda7be3665","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.0.1.tgz","fileCount":14,"unpackedSize":33446,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfO5oyCRA9TVsSAnZWagAAu8YP/0QUQyI8USVETrYv9TuT\n2ZMbq3fy2V5ueJqbgXGU0E82Qcvu+wr3o0sJsa7VybjPT1U8u+Pxl8Dw/0Hg\nyC8ShgLV/TDyGtioPyRzXWSH29UeaF6X/uRjye6rK8ORK09zGSfiuDTRBFss\nabFNU6ETeA9Ml+T0FazahmZtY4mRQEsD7fTsd8P7TQE4N9KPdYI7JW98uHBX\n29zW2CHKVGpRXbqpsx46IdH2hci1MBknfnW3n6XziFq83Ik+f4EX1aNrIiVL\nJg7lR/gqOM7Djijes9d0GuS2Qf9HJijabAiY/vDtF52MSCaglpAUgUT5LWyq\nIj1hfurvtUbKWioCuVhV5jNYzYh8GL0LsbfAUSK4IkgtZ8Ijg/7gbH195M/B\nW8YNE3GcKcclvvd96oLBZdx8HJeSwmxOx7pSXrJqJ+1MGUT7Qz57z84QcPY8\npiWQ2wa20LAQe5xDIwZHpoo+ud2YMvPuqISTMEk1MLfgAXafiCmgOQxOjcKg\n56ob0xUELPOS2viEs2s7R1mO0ECpPNwwStnfbJid5QyLO7n3Pip6vje1ymw8\ng50EUwDpFHZXmwhwSPSzWgCY2TKM52zHUIzz2A6dy54GIeTzyN+q1aRoGXLH\ndsGNIbvKwxZXKsTx9DZ/0HQFfzg7Uh69bi3WInEpkM04o55zxlf6lhx+Bbpd\nVQ4C\r\n=k0ot\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE0fxfmbf9q4UZkSSxfPkH83Ewe0YFbN27+D/Rbc0zCzAiBagnp+EWXLbmXPQnUBYecnVOR/lj//dMmuxiWI2TTRvQ=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"drcmda","email":"drcmda@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.0.1_1597741618096_0.23290428821854592"},"_hasShrinkwrap":false},"3.0.2":{"name":"zustand","private":false,"version":"3.0.2","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.0.2","_nodeVersion":"12.18.3","_npmVersion":"6.14.7","dist":{"integrity":"sha512-Vrj1qomDlkcQOrTCda7b1GPJcYuLU+EOgKHQwllgeGABrwm8FmauNFETrhqDjcB2esnusHPEKvDCqpJffl1igA==","shasum":"7e408c93dfbc5db39d9f05009d79b71818e6e13d","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.0.2.tgz","fileCount":14,"unpackedSize":34781,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfRm2YCRA9TVsSAnZWagAANbQP/30y6GW5xBuIBUDFHpvd\n0uljnTfqpGZQviNlRwujVZXKHJEtlvTXlxuRKxp6C1B7eUDw42Fqh4V4bnAD\niILOwRaSBmzqa9b5m4oY2OGKc4gCZxxVE+UeMPYuX6jhNSWdPiU601mbJrcL\nwj9oNA2lYI1tW1MsNqx3thnqRoqWO38QqM7U0gshlHEJQpHFongY+gbDLyB/\nZ6EaTmuVZy2SVwrxCGb/wJz+UsoxlRcYZ2J26EnHTX3VGJIVc87TYkREeXO9\nzOjxkhvNIunS5/LaMzRnBd4rqj0xsIV28nGg3EyQvoJqeBSwAUf5tq3Ko9we\nYDr4yXgv9Er3PPHWcWeiW7rM5g0UfE0ltp0Xdi7mufa/PpDma+A9r5qTcpun\nx1KB1j5YeKucLREXnR0A54GGZzWr2zRv9Z4tvs6VqFJTm94HXBGNw/UPSzUb\nrbHdh/6LVjd5dXJzfZC/vOQyobJ45AhOyj6XqUW+E8kC337F1vgdoWHcqanJ\nSbwQ9nMlJOtoSWoETqv9SyEiNDpJ/+/J0w6of1xtDRbDRpDMuMMyIMsLTtkA\nv/UbNj6moOXdnX5M2ZmX+dyt/LaIozs9R4XuRBGaw5FjkRswncTUA4SF23pN\nvBhQYRF8QeXIIxftjxz4udTNx7a4lTzAEU5KzgHIzqPNSlnObNNlCCYgf58Y\njX9A\r\n=xIcP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDreNGjSCbErVqDfRBCy9IeCDbRjQiEyjyBGAWp2jZSpgIgdOB7KRzDN+nq5rSqI3MMKyp74ep4wUEvukYEZ1fGgiE="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.0.2_1598451096066_0.6848005988524353"},"_hasShrinkwrap":false},"3.0.3":{"name":"zustand","private":false,"version":"3.0.3","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.0.3","_nodeVersion":"12.18.3","_npmVersion":"6.14.7","dist":{"integrity":"sha512-/Mr18AHb3kZ9C8VbWevmqMP1QVScOctIG1hHy1J9amVfcLgYBIJvvMhW0bz5tF3j325ZdyOnk0m2z5NUbsScEg==","shasum":"5a8395f1543be4cd865ca86e20cecba01e2cec2c","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.0.3.tgz","fileCount":14,"unpackedSize":35097,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfTkMWCRA9TVsSAnZWagAAsIUP/j8JWrrYpCjw0NdNABNw\necmGozcwrCzuXlffPJht8efAvPuxZl8sRuzcE7OmqUxLr26tkfkuzDcjDLhW\nbTInotdcyPpeqjHPylE+4K/iGmQl0BIuwh8s+NvW5mCPiBEup+bTViDXh2JZ\n3FvjIe28UliPuoaM6qt22OiIfauS7Zhek+CXGyw379+E2WmeQ0zeJ2L62Kqz\nIRdmFyj9bCFUL/gHV4MM+RVPmsoi2ADctAT2V0PL1nlSjmJ6ddSg4g4Dbyvy\nBRlbjRTImSh9uSLDcIrwAy4jGvZAq7yTSNn/NsTlGAp7WPiwNzlBfXZaHB1I\nemgaORH47b7notbmAl52vc5cKa1F0a2RUigX3OXyldL5PJnrlSTZPhttlkV/\nKnxQLURrrCbd2/Dkhs7tAxrpFWSsFFtuNvqlgXq/97Wx/Q2BT4p690w1X+9R\nRFpuekBRLis6S5zCcVnAYFie6lXNQ1FxWznNrtpTHhbJvuWv9unD7LXrwYgV\ncaCku5QVU8VWORujQGkbEn2UDwReCICXHf7LgfL9eFO8SJzUjrMxq2vZap6O\nq+RuRCxF+HcwTHudHskbG75ngM8OaE/caeKY7gyQkOQalm2JmcJjmupjUBVD\ntCMoyxA3cEIZmHuINQBXahDtpDWpshL4lEjBwvS3KXVHfwcdhwbNElgI2V3T\n4IvH\r\n=3WXY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFi2gFqfKO/dgC0wA/sxd6LNQ8HFZjkTvt/6Fw5oSDS/AiAOJvhv5OEZi51/f8vk7/Gjg7CqjxyzoYPcA2q/2i+RIw=="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.0.3_1598964499328_0.11719045961573227"},"_hasShrinkwrap":false},"3.1.0-beta.0":{"name":"zustand","private":false,"version":"3.1.0-beta.0","publishConfig":{"tag":"beta"},"description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"readme":"<p align=\"center\">\n  <img width=\"500\" src=\"bear.png\" />\n</p>\n\n![Bundle Size](https://badgen.net/bundlephobia/minzip/zustand) [![Build Status](https://travis-ci.org/react-spring/zustand.svg?branch=master)](https://travis-ci.org/react-spring/zustand) [![npm version](https://badge.fury.io/js/zustand.svg)](https://badge.fury.io/js/zustand) ![npm](https://img.shields.io/npm/dt/zustand.svg)\n\nSmall, fast and scaleable bearbones state-management solution. Has a comfy api based on hooks, isn't boilerplatey or opinionated, but still just enough to be explicit and flux-like.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand\n```    \n\nZustand is pronounced \"tsoostand\" and means \"state\" in German.\n\n### First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n### Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n#### Why zustand over react-redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing an alternative equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\n## Fetching from multiple stores\n\nSince you can create as many stores as you like, forwarding results to succeeding selectors is as natural as it gets.\n\n```jsx\nconst currentBear = useCredentialsStore(state => state.currentBear)\nconst bear = useBearStore(state => state.bears[currentBear])\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }), true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(console.log, state => state.paw)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\nunsub2()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    scratches => (scratchRef.current = scratches), \n    state => state.scratches\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forrest: { contains: { a: \"bear\" } } },\n  set: fn => set(produce(fn)),\n}))\n\nconst set = useStore(state => state.set)\nset(state => {\n  state.lush.forrest.contains = null\n})\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config(fn => set(produce(fn)), get, api)\n\nconst useStore = create(log(immer(set => ({\n  bees: false,\n  setBees: input => set(state => {\n    state.bees = input\n  })\n}))))\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store with a second argument: `devtools(store, \"MyStore\")`, which will be prefixed to your actions.\n","readmeFilename":"readme.md","_id":"zustand@3.1.0-beta.0","_nodeVersion":"12.18.3","_npmVersion":"6.14.7","dist":{"integrity":"sha512-2/LFIrjnfsrBa1WjrpMEAYnWss2srMebswUzb/bJZRWmDptzvqYxzsLYe2SzCG4eoWQJ9shkqWPtyTyuAH+Gzg==","shasum":"7f65f784ed58d1268010b273546622bdb01bb401","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.1.0-beta.0.tgz","fileCount":14,"unpackedSize":35777,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfUMQTCRA9TVsSAnZWagAAd8YQAIoCA+npBsZ/MkiRc3e4\nMGpPt6lvgCQaBt6YlXIInBdhPvOJEGnxhDDj9a736egO5zofzi/QAKBMHrE+\n7PjFQ9ZUtSFeN4TWa4OK6IjvFKIc3mWYkpCbDlcandpxrevGym6iLp318exk\n+glT5CyAdFF6At3exlw51D2dKdazvIWK/Y6GEuAUJzuOWZ0ljo3Fhd0e73V4\ndTnq5XK+R7rV+FeyHctEWjjVmPOsPCXaU4qev21GIeXuziJ9q6uYk7Si1Jmh\nRlyERZ1nsfI27kcuhlSfC5B+2R+kjmRTNhSDIlxAAzWyCceOliX+snwuaedX\noKY+THYrDqdEPdg0csvvK11FzoallBqyTki1McW64Njx8oxvkjShddyCGjAA\ntsK9FloE4nzziahQ5OptAcWTJptcq59mTPHfc0cw2awrUe4MWExMliqqiTEU\nlip5Yc+XeifSRmMReR4PzdU/62ZyYFFiLRJpI0UBw+OF9ZTdY/SkNbd201/i\nEPmVU4ybJOVhF4PPi1N2QJ7VQBHUI/fb10WsgDOIMBpbwAplSkSyi0qZ8CFf\nF+dJkTnbBQpQG2lOFN4oFTsxPxJWlLhf0Gx6gL5U8/gU96CLXCozgmy98bvZ\nu2M5RBMqlADO7FW87swecUFy0w+TY1HNQWI5cYTOgy5zsRRU6C0qDzawFjCo\n5xCL\r\n=88sQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCY0W3A1pc6H/JwzvALGlawtPfeE4P4w0SD8uQwd5cnigIhAKEcs+sCFix99Cgw65WS9AIdMVybI9rkm6VDqwRdOrWe"}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.1.0-beta.0_1599128595260_0.0238432955405965"},"_hasShrinkwrap":false},"3.1.0":{"name":"zustand","private":false,"version":"3.1.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.1.0","_nodeVersion":"12.18.3","_npmVersion":"6.14.7","dist":{"integrity":"sha512-9LYlcbAeQ6TjfltbjgX0XAa6MEruREIbynU1rV0SZzbklKhDqX1cmAX2P476BQ2EoIRpkxakCctzpK3XoqHeaA==","shasum":"8b8ca50c53c9ee44a197a71930274f97d64365b6","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.1.0.tgz","fileCount":14,"unpackedSize":35726,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfUOxDCRA9TVsSAnZWagAAgg4P/jVy/mnaZ8xpWtZAjDxS\nxw87REIYGM+CMR6/8DQP37iPKN0aW25JGzj2zzNCJagodVnnZratJyJY3Fe7\nOnmTKKNF7GjYMJ06bOtNXPPDOxFWC23bIffaM4lr5ftep0DEBlgyIwFTV0zH\nd6Cd+mqWiRTTEeqNxOLk+KcXD3WNLKv/gSlnogTiBkG6usu+dtddcAl8bDvr\nQdmW4z5EWkj1WgdALQ4h/xkJ8aA8MOM1NJEnChc4fDocZTBFvFnRqLX1GpPM\nhCykiMA375AkubnP8Efy94xEDglxQB5VtMrjPS1YxqCSNKG9mbDGd3iwXjVM\nkPUmFovuuMH0Zfv4sXZGPEj++74yhERDk8k0oT3o1B1MowOEbwUGaPVUCWtR\n/qkLHOyJVxx/0mRNHkz6DlKclufd0UmpPaE1igrjQ8+MWc10WCd+onMdlV+7\nYVpji+Y2li548QaqKE0E6I/JGtSfnE09sVOOsXU7wpdj9Dn3kNa2/0gjm4lv\n0gKRmEU4QoFMLFmZoM2p3x+pD9Pr01kKcEVNHtG5DMkQfBmg/zIOskrprUaZ\nQoTjeVP2lN31o6R20xQ/Wk3NBTMEQ1zpOS9ZQ6voY5G73kwfWbRWKtA+1a/C\njXwZv6lhf+uYImT/erNpy1RhioIPKO7IIv3WviMG4aajyFxsimPno396HGhC\nxQpQ\r\n=6EjD\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBN2MD7OCrq1fC0ATgGFF6aelCnjmuGxbH9mhAu+tVJRAiEA4BDisSUaXh80hwzmDEz1suNIGkWh4r72t13t6CNSTk0="}]},"maintainers":[{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.1.0_1599138882616_0.2799537235909626"},"_hasShrinkwrap":false},"3.1.1":{"name":"zustand","private":false,"version":"3.1.1","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.1.1","_nodeVersion":"12.18.3","_npmVersion":"6.14.7","dist":{"integrity":"sha512-VypPwGrcmUp0gjdKiW2W+RzcPSKl8VYBiP1QxAX0AsiSTh7M2al6+8zWxnWNSem+Z6gqPN3anNp12q+1MiH32w==","shasum":"c48d7d4f612aa0e4c64568db931645f179e6275b","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.1.1.tgz","fileCount":14,"unpackedSize":36895,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfV4HdCRA9TVsSAnZWagAA+5cP+QCiDaCFEZxHBdL8cjmg\nTCIxf7N+Cze2fQvI+pQftIuRPJqpQeV/cy68epk3XcegcgAP/yRNKJkvTOyG\nDLKZ+dMErejX0FmNhRKMkSHcfdCFPQoXnCMrck1r8TbFe8rTb4VCuUS9/e7B\nACvu+e+/NGC5qCCH2TVt74rPLf1idOeWLKV5BW1TpyYXzCFrmTAymPWGKwBC\nZo7K3MP1p2tweHxLL0EA61oLyxPp68m2ddfnAgmOA9Maj7/re3noBgfgTrFx\n7YUuroAzU1L2lbe05PLTNTihf3h1a1AO6yT/W4AhSKPUG4NSqSuPEcsMi+6P\n+EbYOMUD2yE4AN139VjHEaniNt1/fWA9GI5NY3PJ+9K9KjrnmL3n28c8OOPr\nO1aI45J0d56p8jgWf2UjRiiYknaDbZOI1fDv0s/h0Lg5AOwq0wNFhnk50z4y\nz1GpM1LgIy09cNMNAZq31MM12tBZXDGB6ulLt5CGLhgpdDYdLbT3FdQ1rrsw\n0xU74A9kPkTgha7xmkqx4bWTABfqVsjcNgKuNg4yyk/rNMKCpMuO2a2mZczA\nG0FPuUcFaS/w2jVeEgObkeJ+uRVJWWOvadK2UTRY9TTOOVCLELsQz9ZhUJw5\nUdXsbfMtjt0atD8mcP2yfyEfcOcYymxOMPn7mQrO+kGEU8SeN4tUBR9Jhj0q\nTqgn\r\n=U+ZR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCVs2m1jvK2e0Y644WkkmGLPncao/fTcs3lF57oVXRn7QIgEqRySWqprqbrs4PWJK/pq1+P0nNHDtnr4dbepjUKi6k="}]},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.1.1_1599570397166_0.7702365050090167"},"_hasShrinkwrap":false},"3.1.2":{"name":"zustand","private":false,"version":"3.1.2","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.1.2","_nodeVersion":"12.18.3","_npmVersion":"6.14.7","dist":{"integrity":"sha512-b9pbR29m/KYicTE33dF+SPQ3DoDnMT4ZHOS00QnzZ/SWArK7rn/3EVeSWWk3G2A9bexEHqj75Ob2w+GN547o/w==","shasum":"0dcb9197e38d82746ae2a22097d80009cd0efa4f","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.1.2.tgz","fileCount":15,"unpackedSize":37836,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfXLb1CRA9TVsSAnZWagAA4RcP/Rp5KmYKqIolMMoOa/3n\nyekCee/1qsMPHjfQFy94lmH5YBWjhWjc0fBJmNhnMKMXS4DGOx/pmvsrH9sQ\nA9nZNkbWF1zOVWt4eKEsFDlSl8rU7lmSuct6lsmGVucgbuJ17DKANOUlj6sj\nBYczQF/w2nU750d99bouePYeLcpmDS9p03xvAxY7bCWibZdJt4opzPtR7ayI\nYGJjwF3iWRgQt9OliQBPfJOyvqdyjHaZybQz5x3TeUJ1akvhhLNkTDPFwU1R\nym+H7iWhGBBv2YNA7VNF5MyPeKwf1Gtup0lpzFau6OHNcieCNxulSKil/g8q\n49KYh31Z1tmsctPXXhVIaRC8RGOuYgHd+c2ec3dIShA/BpC3SG8B7UnGR9A7\nxEpP80kyCda4wg5jHitmG2PxmMg8x9zO5aq1PaEb2U/ZIRkELWyE7Ab1ei/7\np48EQSwklCoEdUrG08Ch9O8W4VKl7IKM8JxCcDuwCeTtwb72TryFhOW8lS3J\nbcVZiMaRA7v/fCCcD6g4gR74zq4HGCSL4qMsa7A/FRf8bpiV3hkNBY9AJ4Kw\nooU1jfb9zVSD1NuNPO5RVIF+NOYVBR3PUPkb1TpawQJKcxIG34nQc1UrO6HA\nf1pZqHSVM2jqVtcFztpwV71VVlcI+kXzVb4xM4/2Fq0dtq673y08cvwxrIAK\ncMaA\r\n=kLSE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC1GR6HXjbPYxd2/x6YqxSwv5Oikh2OrxOQ3KeXeI651gIgMvH3PlrNn6xtQLotZ2KV55oGSWD3/O9ybocelCzlaPo="}]},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.1.2_1599911669313_0.92543436334082"},"_hasShrinkwrap":false},"3.1.3":{"name":"zustand","private":false,"version":"3.1.3","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.1.3","_nodeVersion":"12.18.3","_npmVersion":"6.14.7","dist":{"integrity":"sha512-Otuzh3r0GsatvsUWeXEwdYjZEw1TItWcAXwDGEHdXE4/k6WbAdVDxC21t/Poq4ZMB+2VaQNKICWu7eCBUJ65tQ==","shasum":"33df7f56ec11b3003458b60606addc94225b282c","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.1.3.tgz","fileCount":13,"unpackedSize":37845,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfa9sFCRA9TVsSAnZWagAAXXYQAJk45UOiiZET2AJCadve\ndEe/OmR2U9hPU4O9IYbGL5riKpv+XCPXhuzxWWxmi7eKeF4i/+KLoCM+aa7X\n+F9J3cG9zDcHXhDVejOTaIHLXrWBRz4czzy38HHN1rp9IY2rODN3c8B3amLr\nfBU3vq1ovHCZmcP0zgHRU+P4hoTDefzYNNZgT+uEI61xygUwLIeCgGcoXtMd\noVj6PoeabBa+3N4PWwVHCye7kmsst72G1xr2kKGqt3skal00GmsTg1Q5qPC/\nnbSrxsks4+TgoGqWq/r/tRjWOvgmJMAIOi9Xc8Y4aEap1QbnndA5H9DcTLKO\nk1sgiKtXCP6ynxfQBwloGCggNzJTHJU6pb0u3eQCR1vAdijYvEBC0gmhZToc\nlX9Z24KUluKoZAYTkhfYEH/A0G2h9Q8d0wocHkpZN3i+CQjziQcHUVJObL28\nFuoqBqJK2hAp69dGCPamAIokaSIVFq9CgSllQy1q/jueKORo33k51VIaAGvw\nO3m+JgiTGQRGFHHErm/+jCzKohHu0gKDOB5Thc6a8tuCup9jQFjfCyyftT/5\nnJ4iCUwK8vSO8q+yU8hxkhwtUpSlIkwYeLl8K6fJYbVhnQVNyA3rZmEPn5nb\n38rxZu3/1KBDSFvbB+NIAb4WcCVW4GLcXVaNW/6fmo9P8gtOMqU1wPO89wGj\ng9dM\r\n=TCDK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDSne4R8tQ677wgDbAUUgm5iYe3/KIIj+g7dp70TNGYuAiEAkHv9ntnWz6JeLz8rOKlLwCh6AFl5ulr83nNmdV7eG1o="}]},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.1.3_1600903941216_0.054924367372971794"},"_hasShrinkwrap":false},"3.1.4":{"name":"zustand","private":false,"version":"3.1.4","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.1.4","_nodeVersion":"12.18.3","_npmVersion":"6.14.8","dist":{"integrity":"sha512-DB/r73Dm3YsUEo9KilbGWsKXQLOrM41aYItznvD68f44P2hYo+FY65D7N8m2ojKVzg6eIPgXZWqkFO60Utko8A==","shasum":"684bb863e27b5a04b551c621a0aa73a5ccafc368","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.1.4.tgz","fileCount":13,"unpackedSize":43014,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfp4a0CRA9TVsSAnZWagAAwl4P/Al521zIhMmVYSpng3TG\nPLxovm/6BSPvQASPk9NlJ1CisX3NGj4ZPSZISPwDnV0MA+dh+P7ux/vJpbhV\niG5Au+dBwr/K9kqXN8WXh1OBuwxVb/360nV6Mxt2BGwqgqhA4WV80FFNYZRH\nl1GXlvLTee2FYCPSHY3FmVoz+SbVPxLcMlLhhYdxszN1UxCEf3ZU1MsON2Ze\nMvAZHiWFtzoiII7CmeScD8dd9Cipne3iRp9mwEYxH/rw9FvlscDcGWPjGvwO\nmMN/1A7x2aiIRLQ4rY07zou2dEQ1pNOHP8Pnjdj9pCMym/v3xHiTIXZCBRU2\ntgVVonbNzaLShKG1Xa/dJFZu2rhDcyeo1FZnNpBT6J890V5wBPgXy/qBjJJe\n7B94k67gkH7oF4n3Xlet5CkR5q1K/+KWcvO0r14nFEtz/HIzy/d+ivjJnGyr\nxEqLIgtoWfKTSdYAqKAvmJzDZLQSlwlIQxBqRmAuES9ybhjxwydO3jMypo+S\nTbWiX9GRxauIlAp9ldA+U0TxP+//q3xnxM7YygxToveuiM4MUNw0rEzBXGnw\nS6U7pbrx5YOcMXIBS3NW+HG2ThW/gKF7liyr8IIRxhlNF4H4h1DAnihqR2mb\nEMz0ZhnKkqn3p1MwGUVuXWwysmK4PWAQJsp3JYBWzo5xffG4/5yXkJUgIy5w\nlySl\r\n=Idec\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICMHIku4lsABN4jhiqi/qKaV4FWnqLnbNXgn8yiJUkDeAiEA3iogLzj8r8Z6T++R3QjNmbbWSaYwCaB21VO/52GE5Eg="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.1.4_1604814516166_0.7663479358611793"},"_hasShrinkwrap":false},"3.2.0":{"name":"zustand","private":false,"version":"3.2.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.2.0","_nodeVersion":"12.18.3","_npmVersion":"6.14.8","dist":{"integrity":"sha512-MBYFrnUdgFVi38tdQNSzVN9cPpRDf7w2HhdHGDSgBRHN7vIbUGUR3aBdVQykelXzSFR7iVj3YNBuq7B9ceMI5w==","shasum":"a718a964440796d44edda3073b69e78b95f4c8f5","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.2.0.tgz","fileCount":13,"unpackedSize":42513,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfso3KCRA9TVsSAnZWagAAdPQP/Rer4sf8C03dFLShq0Dx\nd3Ns5YXdguTPyC6RDP5LIqGRnvTEbxsWyKO9Tp+a8QtXwH7ZPmdFSfFJFsR3\njr5m/hSRAi0d8soFNTFZpex4eIWpJ/FJ7ncbUs79tVvIT7rk1n7wAfhxU665\npKw0Uz2jMkn6xcWxarLo4qxY68O4s+xXgcpdH10WOVjHe1qliHI9fQiPOMe3\nZGg4dkcMABGjjqlISvCZRbsvvBGSceEprU0pDlMnmjy/OmZT2ImJoOnZuya4\njUBeFhYf+QXOIpw8/cjeP6gObDriH5MoS5f5DwLAxheJwzBYeQAs7bUEDPJV\n/JxVlOCz9s3gPqZZ2YVYM9sbV58TdjE0eFYtwJMuH7Reb5Sib1U7lx+V9q71\nVFahyWQ3kOGjEGhQomEDpXk8eoZKEM/dHZie1/5QUAIDsF0BQS5yFFvZYcPk\nK9eyFzHfCGzgZETThyrjclMkVEreIxmA2wSMhdWlfQFxUPXQQ0LIAqyPVbKH\n86/26/s1gH8dIubwW7QbVa2xNpWcIuCBuRmZkvY/SjRS4ivFI5yjlJCMVehN\nERvxdvqpKglABjtLjvLVmMmfluCWZjF1R2LoLjDYieEDBtCzVKMc75cGQdjJ\nW0FFcKTul5gF5j3Bre3gjJNWAvo0NUoEZ/xjwDsw/PQtBakw8OBjMSUAAZo7\nPtUh\r\n=bdEX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD2heEGSFP4hGSbKWiExOyCnSvj7KT3mHeyNdGDxvUWEQIhANPVOcmVc4FWQN1lgL6hGGWHTBAQnlea4A5OcqkJTjwn"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.2.0_1605537225566_0.04956363369630923"},"_hasShrinkwrap":false},"3.3.0":{"name":"zustand","private":false,"version":"3.3.0","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.3.0","_nodeVersion":"12.18.3","_npmVersion":"6.14.8","dist":{"integrity":"sha512-oTOoJa70tYisd+fRmoIjZKlF21JEmGQ8oC+dJ7pf/wdS4qJPcCS/W9blzKAnyyLMrIYsIl6Mlq5cmili7mpJPw==","shasum":"dc029b8e0ea710a36dda05f5ca147246969a9104","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.3.0.tgz","fileCount":13,"unpackedSize":46292,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf+DMrCRA9TVsSAnZWagAAnBAP/3yZ7uESALujXmLei6x4\nQDxmHFdy6E9o0BihlAK8GKQcl2/vYz3Si03ccpGZQbcGI5MQ3Z25KwIoAMHb\nw0ENpTp3wdXODZRaBVYSEOwQAiGjqZhRMY12BxT1IZM9wTcxV/qDEIu2AsfM\niaG+jy6hOzHErHkZ7dfqcu7pU6CtPqPwgq6/ZKFtUQgzbNBYmNQep9Un3ciF\nTpFSkYRNC5nrEDVQBR+ZgFAPFTHVjqpe204Sqpo+3PxMLCcJWg7ssmU6mfzV\njrTrZTzAop0yPvx7K+6lX+RuZR92cxkl+AfSN/3R3jc7SJnEsg+QRrb458NN\nb4hnceiI1wE59OewhrLIPts4Xac17fJ1R/ToH2Mtct6Sdn8NTVMUYC5J9yGj\njxQsrKIslHHah/v5wc4ZYc0N6LkrVqxfGU+ugfLVlqxIdvoxMt74gEJbIJzA\nGsx/S67ilL0Ryk51n7H+rj6cSHtP/emPhoz9VZEsrOhKtGthRF72OcssHptf\n84ReHLUzHSH757RKLfZsCWkL0QeqU1GzFMcqUVnDGP2CJOKaZmNNux3O7qkA\nc8d5cvugg6aLmkX+sGarGR2UVkTei+RLf8rjiCRQ8McoXzq19nO64ZtY/0Jk\nKMUnwgkXCPX5loVp6u6PfcZZL8XqTy+03z8c/U/4hQsVd9CFSnUMXuiPBJBF\nvvTY\r\n=pmDZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDcWlXMpKqfL5nExNl6luH7IuRWXEjWiZz4r8yKRrKftwIhAIGHMk9lFcFQrkhJBnU1+6bjEuWWWmONxDYVIYffqWOT"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.3.0_1610101547120_0.7409130149007226"},"_hasShrinkwrap":false},"3.3.1":{"name":"zustand","private":false,"version":"3.3.1","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.3.1","_nodeVersion":"12.18.3","_npmVersion":"6.14.8","dist":{"integrity":"sha512-o0rgrBsi29nCkPHdhtkAHisCIlmRUoXOV+1AmDMeCgkGG0i5edFSpGU0KiZYBvFmBYycnck4Z07JsLYDjSET9g==","shasum":"de5c4b51112b84e0f819d8b3f336fbfbc087d758","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.3.1.tgz","fileCount":13,"unpackedSize":46330,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf+vDUCRA9TVsSAnZWagAAg7wP/3Qdr1hYhGlzcwv6axva\njvuQ9mhPaGV0nFwhoi+8RveNiAb8M3GNduRcIhYWODJ8lwWVAyHv2Q53xJ9t\nByYMNwi2eF8AsJ8t33k1Fc85BKRUKl9OPfikkucWXkBuMFZZoNVzkJXyyMpY\nyEK5D/UkH3KH3jA2f3KcgCn93fziJdccN/pKSBFMGvkThezF/WixcwjCW8Wm\nIzle2rxzL9WlFfIVvCO0y8NL0+GIc1ir3Psze0yVfPH92L1e90PyXZyWbtxz\nj6qWX9PAJ7P8UJe3aoWo/luhJNpVhL3el/8OfiactCrrG85+Zt6X+++mqpxz\nZhqBSvXhlO3gH/0+iBHUI+z2pHFdxuFYvePfOcV1hsrUglAwuJCBTizR6KQg\npY13zxhT1UV3DBYJ3qmVYCSL+LpadqSNsdVG0xRepiFFfNJqXAbo66BTrh6u\n8KGwPkXz5L0kv1sg+yEgCTzMchAFPogQR3JyoAMeOvf1Bo/Cz3r7J9pbmrAB\nsf2xv/s2zvI44Ke5ImEWbsr+KBRifbfmnpHT3zkTk6PMU1cAak825MGTalEi\nCosJ7ZydIc+COeI/NhVANJUYvK62NqhvbT90i1ZwNM1r1Zy6C0bgyZtZ0XBZ\nuF3Z1R6isGU9ydW81O4rpmvvspleG64dLc277Nb67r3/3n6CRUzPDCPAvf0q\nlTfm\r\n=dIrN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCx1yr7PF+1l6FaUrIg2cwpmN7nZEygKUXM9Fp3Ogx7OQIhAMRlsOhX42M9d0K3uy0zcnuSR2P6imo9s36hSEldYbS6"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.3.1_1610281171791_0.07042480266186035"},"_hasShrinkwrap":false},"3.3.2":{"name":"zustand","private":false,"version":"3.3.2","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.3.2","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-S1CuYmsgQiypCEvKJ6wjkQdMxAOPP+XY0fXLuPYY8BRZF+FvgyuqyEODJTvTasIYx8BMQXIcuMOCoKSwRdLKPw==","shasum":"0ea066d65ca9c398f48dd82773b8612510e61fc8","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.3.2.tgz","fileCount":13,"unpackedSize":48193,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLEULCRA9TVsSAnZWagAAIj8QAInYpBIgFOEtEDzvDknK\nHxImTXlxgBeMoRlwUy1wMbYB4hzvh/uwIzwmQJ8vEap7TXbE0Puwr041plWP\nVw/NSsSu3QF+2/E7fcxl16ZtD7HEFqTIhJWvkBcTWNvzZpJmVCNz0vBWaHSy\ncD/udkrWFCyX3gjzbBkBInL0FVhj3UWulsbELrRlMzMpf+cenTDUPfyQb/7+\nFHmInfzXnZCiURToCewhpODla5Pvrag2dDsYjOCbdsJmjyGEpa8ixIwEdXL3\nB025T87239o1bo4pVbOUeFSv8xpuQmyU8ALdcLWjSSpViGM2XcKtnVLa0fn9\ncXnaaiC7QpMI0TbwGLz6MrN2I6uyd9VLQsb5DHDWbvzy3VoXWHuyAUIvG3MZ\nXZ0/7yqtW9zrmkLzXcycAYgrP3S2qad/y9Qxy76g9SQMaaUvo8ulOkB1NKMO\nfUelvsriMVhfVygwZfXY/m+TVn6xrot8Uuo4A1uPGAfuvGHekooxCk7Q0MnS\nJG/RGrzzezEhORxfPrds8Swm/Xwa6oDPiXM4RGhrfu9isTsUEw4bWZwObiwP\nS8Ayc6gB15djN35Lp/q5tM9UB91Wq3Uw6IG7Y65D3g14NY/20lM/KJkIouWx\nTfSNYB1H7gQhyFGp4SsVkv0y51KZSZ+77Ewys6z4WcWRkDJ9HR9987ni4ELO\nxTog\r\n=xcg1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCRwhWWbIEJ0akpU6X9hPKP+0yd0hDuFO+x65A7+FcE7QIgbfwuxFtx7rgeVyIndaGjrjkB7RHWq/7NKm4j2Lvi0uk="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.3.2_1613513995345_0.4495182897403869"},"_hasShrinkwrap":false},"3.3.3":{"name":"zustand","private":false,"version":"3.3.3","description":"🐻 Bear necessities for state management in React","main":"index.cjs.js","module":"index.js","types":"index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","peerDependencies":{"react":">=16.8"},"_id":"zustand@3.3.3","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-KTN/O76rVc9muDoprsCDe/LQjbuq+GHYt5JdYahuXaGZ+8Gyk44SepzTFeQTF5J+b8+/Q+o90BaSEQ3WImKPog==","shasum":"88b930a873d0f13e406f96958c1409645ea8b370","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.3.3.tgz","fileCount":13,"unpackedSize":48111,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOvb2CRA9TVsSAnZWagAAM6YP/iXrtcJ0K9KSpx5lCVwv\nlwerWp9UtmSnM65gsLY/QGj09tuggTK5QlZ2FCu038ZGe/tKXcxj6Ahf0lsE\nJf/FDHpJZ1vfGCy2R1hx0o7v6/ibgmdib2Bc2WDz8FkCNegN1gsiFS1kOqBv\nAp17x0iUfFgkphheOKoUlcwptIh92+3IT/vgGgbfYczc+aJJIJ6xIQ4EeKWG\nWzMRfFJslgDCC6afaeXVR4cN0qeUfWPyxjOoY5ZarLQujIjlJflDnrqLEBl6\nVrAjaV2Bhb0nmduKevgIiGc5vUoEsEJMFZzZJbVl9jiH1TooU5Xq9UuyFLlh\nAnit/7gatJnSgP9djK8k7PTsTW2gc3B+6ka5M7rXK8Lwg/OnIaVsjTxN0cs8\n8J6bKPvQeY7P7gcdb1L1jDMwTF8bRifDddt36KF/fgqCsOuxCC0XBRzwJRCU\nc25tjYLbqDN9VYOt/VMHENVR6qABaGHCLolubDPAEdvSNNNRP5Xp1CxhgI8l\nB+wg8pyIDceWtAEIYqVXwMk2VipybkSSA9Lu+J7E9BtJ73AyHQr5G0aWWlHt\n0HnUeVSP68RgPyEknIQUgaa81e7D8YoFhbwcu6sG1tyOTOzW4Iai4C4uUUu+\ngnjRSv+GjqwdajGXwh2P+F92RvF9LexlxjlnIk6aT6RA0SBtvFeWj4dkmTKI\nHnEu\r\n=6B1b\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEoUWAVFk2/vDJxnylILPwbL1E/mfMNYFUhIJ/ONKvSTAiAh20OZt1ZBp4v1lKy/z3DPFEB7ZBbCD5xpJjXeR/sn8Q=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.3.3_1614477045775_0.649130419077151"},"_hasShrinkwrap":false},"3.4.0":{"name":"zustand","private":false,"version":"3.4.0","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","resolutions":{"@types/react":"^17.0.3","@types/react-dom":"^17.0.3"},"peerDependencies":{"react":">=16.8"},"_id":"zustand@3.4.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-rEO5ivKPOUcyHXjdLtE9J7rkyVXmm7D61MMwYF40b2Vv0pj8lkgtt5WFxdL6gKVQgNJSubqNbB+b4p9F6nrwxA==","shasum":"c41287822d310a185a1047159f488175f9338875","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.4.0.tgz","fileCount":19,"unpackedSize":54410,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgbH7GCRA9TVsSAnZWagAAjD4P/jNzkPr1Zt0TgFRDUfiL\n6F8dorQDrvo4N2HtUrqscFrKyHIV21biRNStqEhnSgnR7TOr4O3I4FsnJonu\n0scv6aRQJDYoiqxFwvyer+Dj2kCVg4gBLHs7odNWEZUpYDunD/wOHFyHaVrt\nwMFLumuy9N6YPOxt9H6YuZt9QIoNotaRP6BsMceX+dXOm2sKdymIGsKzoxae\npTAQUQpc2NO2RyotcxkcYw+20C0PlxuEQRZtUqplVRL8aB+9R2qT4bCK2J6X\nlFP51ClxD5lVg2xpPnbidsuN0C6kluQVZWcj1NiOfYtKiIzel0RPKiNATnXt\nEgmikGYZXihPKIZBhc7gG2h63sb6lQn+XqNPbpdygvbHotm+FjSJvcuxRvOo\nhgNWCuEOGXwXmbR6sDq/2O01wpK84Z/Mz4ftFGuSSPAL8ynqwP1PqkL4rqyt\nuOJLM2Bwci6xBBdTckMW0KyZ0lyrXVW5C8nyDsgURdVyOCaEBoBT7jqoHVkC\nec6XcRG8hWIe23T1kib0Ui1E3xY/PYvjbtnGW0hq8hh5omTjt4yoXN38TWI4\nBacgAUJAs+zDlL8bBEHiYaKGvku7N7zM3go2GAt+59Z9RtX+vee4abJIGUZH\n2HLH+lENk2QbxNlnvE68j3qJRGBjLojTB+Hzrz/4eYIA4rIpolq9M2WNQF1c\nObVm\r\n=ywH5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC3Q4utB8omFAoFxZPY9L0f6UOtv2e07w1FFsOo0rFSgwIhAPeuEfxqEoDtruDu80BlZ2zPSXa1gVslrs/dL6tf3e4a"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.4.0_1617723077923_0.9252496869844968"},"_hasShrinkwrap":false},"3.4.1":{"name":"zustand","private":false,"version":"3.4.1","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","resolutions":{"@types/react":"^17.0.3","@types/react-dom":"^17.0.3"},"peerDependencies":{"react":">=16.8"},"_id":"zustand@3.4.1","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-Kb91vSjy5vwBQ/PQ1a5GE6naS3gCxCgpkujT9zqZSO85+gnvmzgqraMW3ao1I0jR4PwHBXtLTf26r9j7EXoUiQ==","shasum":"ff1bc8480facda3a4329510b8164aa5b821be133","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.4.1.tgz","fileCount":19,"unpackedSize":54299,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgblu8CRA9TVsSAnZWagAAi+UP/iuC3uMmGQ245BmOoUt/\nYeOXyAAKvzC46GnZDyCQYIVh60GHwhMeR7lzUATkSdAdWoWHWnqc2I4byeVE\nscKGEayvb68f3ylDCyzuQOdedfeM9yIXABczgyEhiAjw5zLogZq6Qk1bsn+q\niWqd8LK75eRU+fz7YXSh59XFfDNyKt7M1J4Hc4gF6PQuj7p/nxe2m9m+uoqY\nY/qopCxrqZMSMQmM012JyguwgK1tcQI6yKr6Pr2H9NeWEwPvNwm7ekLnkbn2\nSkj/9CCC2F2sdZwG7fpXwb+gtgwRIt4PlR3zza3zeeSimXvlK46zbZB7qh8h\nRLXYR+QOCcnhOoq9G2ZkEcW9tlLbR+BKfS9UQlapLNWPErpl1itnXsSJy2o5\na0s2uyRQHefCw0qi275S1uoLQNUDEzfUSDTmi30kOU17uiEoBxmynjYvSyfS\n2su8flnTd4Y34MCRRyvfIfx8oCJPIWtSCosvqGoQUArJ/xqS5YTch6Q/P/Rx\nnjPZwXp0dQYCyoVWnDISga3YDy28tOh56jCcFtrhGI38hunH64DfYGI1DUob\n9ymmePuSg1+wmwmT0KKsb3spE75JyAQ/pU8m8Dr/5jun8YlVAdssaOwEWVrX\nmye8cMP0OrhAaWiPOKvPhr/FXcViwKooAGzdiTXHnM4/7BjqSsbfvXoEgl+r\n/bYq\r\n=sR3C\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF/8nx15r9MojfqQ/mSBZo0U7FuKYUSEJOcsmkAYtcqOAiBHcQI9RAud5u70qmed1j7jqDPC6a4ZV0DPhj9WlvPa6Q=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.4.1_1617845179813_0.24828980934084077"},"_hasShrinkwrap":false},"3.4.2":{"name":"zustand","private":false,"version":"3.4.2","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/react-spring/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/react-spring/zustand/issues"},"homepage":"https://github.com/react-spring/zustand","resolutions":{"@types/react":"^17.0.3","@types/react-dom":"^17.0.3"},"peerDependencies":{"react":">=16.8"},"_id":"zustand@3.4.2","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-/v0RRbzi8NNyiXf7vw2eizPfJaTlTbXNM3fjQ6xF+qr5Xc0cF0ypaa0ARLOvyaKsGx/q2p5azVhfGxl4uHK0Ag==","shasum":"22f0e0503a364672c6e3bb83399e69479bcea9b2","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.4.2.tgz","fileCount":19,"unpackedSize":56433,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgh1fBCRA9TVsSAnZWagAAoOoP/A69QGA2kzu4hd28j5dP\n7e/KC4BDwJIWpM7/xAz/pdTj3Qc4xzH8Tj+6pq9BuebsBzUqcV7NyJ8P8WQv\naRVdGwBoFBo2EGEYvVeWniSQDw1Cyud35IAyVNttc9w0Q9AnVHyENAYiUbTe\nKMNJBRv14JvrKcDQRhfzO6cHt2anfgFYFoszHYNM91Pdlm7qAs0GimjRl7e3\nKvfAzVYTXTdJKxRbwdrUqIUA/aq82KoO2Io0JJCFYrsUtkMxH69a0vFOMIdx\nbrbBDqrdViEbIcvXVU2XgA38gvBVlfiW7yUmk8M17MIg8FCXCnJsDt0pOsb7\nVJ4qX0KegH/RreO93nW8y+w7dMt6T80xtoE356IlXkJIzFGTqdpQxZ8L8zCg\nbIHBUXYBHLrskUQQJ+RM/IIuM9yJOyrLFNNluqijrxg6EVoLJPmIzlBJyLC3\nDio1nCMSuaViwagYzgoiteEY9Zs8b7SfKGNHnVOXUh6bGwOnOpVI/nX5q1ag\n3WbQzqkzKzmVShFTIdV3qe+zRWF+c3jmTgBYwruaRsur0BAbq5CBozb7dvVW\nvTEjuo4wUgwN6A3aBSNTy+FhPfNpc1ibF90QYjtr21Ho7xPTsd3QyOpOKAsE\nN2p6Ll4aS2KtYfdTZh6t/OaLft9guqRmX+2LoA9IQpAEQTa9rJzNlxsyEHJK\nTA8/\r\n=Ec7m\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDqgpNG5KhBFsD7qRm/MlVdXxJ50WTzEXWNjBUBc7z7eAiEAvGvuc5+rZas8jTE01YRbrZNrqA1vDNcS04RUMUzGB88="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.4.2_1619482560722_0.5886006946683462"},"_hasShrinkwrap":false},"3.5.0":{"name":"zustand","private":false,"version":"3.5.0","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","resolutions":{"@types/react":"^17.0.3","@types/react-dom":"^17.0.3"},"peerDependencies":{"react":">=16.8"},"_id":"zustand@3.5.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-fwZfax2c954pWB+RYXHXG0HWyuoUj8YiNykRjZC/w6L7ay9fPQ7M90mgDVP1KJsRqxLsDILBWSNxuzw5BkCpxA==","shasum":"727ce5bc28732ebce4f2ecb83b4325c866950b48","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.0.tgz","fileCount":23,"unpackedSize":60278,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgkrkrCRA9TVsSAnZWagAAKOQP/i5wb7Dc/X1j2/ahTo5N\nrHbtcIQOjE5YoD3qP7Yfnt2iUuAUznEolP/7WFIGs3Mcq3+cHz4h5Rxzkg4a\nrGD8X7mi+ipDRmpv/W2VPCiYZAkUp4cyEbXQzK8TGUZ6dG+AAR37S0VRovRI\nEkd7xXwd3nVz15d0FTS1TiRQ9MuV/1PnXZAF++b42L/79vlV6mcpzS6IRkrZ\nu6aW0Rfxhaw/Bt5PE7CPiIuBopC/Ogr0OBZIiYe6w6/xPLjaTNqs8dCuJais\n8YVIlZM2Xiz8LWZAQ0dccouBOrdZhnMg625ysuSCsPa115zmrYcPDr0OafJ0\nyEe9RftLlVSGKe/SB1gu6UK6LDUhohPWfWZTvmJYuPdqY3NPwSPnxNt2n3xe\ngRmZY7mGfwVBxobvb8kl9gdt4STc/Lkomu/JWEU66GaZcmjbnotc1B2DJiPN\nj3HsMmTdgbXSlc5jzyitEE57vG3BevNUduYvpqjgPjPkFW+C1tk9Zk5byjWM\nqsh1WNJvU3+xxNzrTJznOmSqKTlXKzfyfPkSmv46yqUzxXaBBYtnCDR8dZXv\niNy5L9xRoM+eVamoOKZ1af5tY+F9Ip0aomqa4yT1nDkxYU9qptKrUs/Pf3X3\n1fLAd4QJ36d8p1GBBJToOdmM+xMw/uh5YtIJcpO8AJKK09FtZTCBHBB62RzL\n1/PG\r\n=hHLN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBGofml6MoStIIMFB7BOMzt7/l0pjc/QC62MbYcAO27LAiEA6g7XOpZJPQeBcBNA9JdEgH8ziwqLZJABK3j1NcXUkt0="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.0_1620228394758_0.6450296208549715"},"_hasShrinkwrap":false},"3.5.1":{"name":"zustand","private":false,"version":"3.5.1","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","resolutions":{"@types/react":"^17.0.3","@types/react-dom":"^17.0.3"},"peerDependencies":{"react":">=16.8"},"_id":"zustand@3.5.1","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-7J56Ve814z4zap71iaKFD+t65LFI//jEq/Vf55BTSVqJZCm+w9rov8OMBg+YSwIPQk54bfoIWHTrOWuAbpEDMw==","shasum":"28970280e830924b185ce064061231957398c1d0","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.1.tgz","fileCount":23,"unpackedSize":61425,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJglpEACRA9TVsSAnZWagAATmUP+wTe5wB0+8kSIBroz4Ld\nK6/OmZ0RzzDwUxY4vHmgqaT7Zjkv/hrDt19PF3Q6IDos2PsDuBKMswMu3c1F\n8PmOcFshIcrKgLxrCZV4XsEqoE2GA0SHfdo+HnXpZZFVtUKBntv6m7k7WKbE\ntFuI7zRol1M2C0by/2rj++v30LSGu4Xq408PR40WrP3yLebQFuWL92wdsIS2\ni+j7YJgBrbHzYXi49QwP76MZBfFO7LGOWxzUcxT3RhDiPiyKD82CGdpp7GuA\ngqxlsUdzheMMc+B5oE9LBUVNUJnCyW4zHcgPdUGYg4CMD70PKyH6SN6V0gPw\nkX900Essi1Bku/sbDMO/R17NDqkScsbnoiK3BVVZ8lyodc8tt6gomfsueWLn\nOfMjd31+TFsKX2P2z5xfhSD6mUyPkwxZiARFwF2hFIHZCOYYKmr+ORitDRNE\n/uVHvTL00TEussafnkMm1ZO0wqj5KOtQyh6KMy1i+/UpXG5BCjCX9rpsxFou\nOnLYFG/HGYsz9bg2AntAv3QiTzfXyomvbL6vA7KItL/1lrcPwRDkEcibvGSh\nDHF+D45yin7yYCKTPWv+K4VBVm7dlwpvsawk+ds5xBr/4CrwjdoWZ5t0tRQK\nN9GoHvxlfaJ7CppDJn1gOQfR0sFb+Jlf+7BzQ56yzKDI4HYXV6BigaDXehlA\noo3e\r\n=WPbs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICop4To86YQIrIhd5qzug6Wfyk0M0C8spwMZMrnGfPemAiBVesz3C5isRU2c8GbnEyn9YopjOTlVRom0AhE8rSvHRA=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.1_1620480255495_0.2920718732734935"},"_hasShrinkwrap":false},"3.5.2":{"name":"zustand","private":false,"version":"3.5.2","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.2","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-HUCQI9O77/D/zvoWPNv4dwLriiiY2xtEqnQ0TVY8uaPjmOHls04Okd0w3sWUE9Ex2LaYlSk11DbPPIOZ6shEWg==","shasum":"cf162a8bd1d86475bf308bc856c4d02ff13fd53c","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.2.tgz","fileCount":23,"unpackedSize":62669,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgu0LBCRA9TVsSAnZWagAA52wQAJzqttI9KhIEHyJHODFL\nipVprLYg45s+LUWTMGxZsVGpyyIpX7WPCp6x+BPCSI0Gint+7c+bl8cTxNBk\nx/2tnXCx9zj6xlX4fnsLyXYdKJnlGiBofcRxIxemoOr5GZlyUod32h3tDI1d\nV49jZveGwTVcVkqX6xK9xqPaGIIq++PAO84EY4LlifLR9SWRPsF2yKkzE204\niNqooEfArybjjFG24YBbc1aUsaTjwVoGlgqRzjENTiFNGcnun6NWeRhEXrdt\nRoU1qafZmuZg/A+NirUGLlHqJxF1rvwP6CIQJ/IZe7/pjTO4qS0B/wyVOzbs\n4UBpLhZu3ZG/SMhyJuKeNKoWmP9bJ3SfsYKMVDTpoDwmwCIJ8DnSnr4ogPtd\nNdhU4hx31oU3WHyDIT82kbqoE9NsmfIXGMppRroyIPuohzzrKToI4ZQbeFK7\nfaM98hw18foNW2YnuMWqno56zrn8nSPxiiOpp62HRUpuKMV7UvjsmLUZKVzb\nT8psG7MD7ynuJpZdbn/qISqf4Tmcu3AR/y9KkUFCMWG32U1P5I3NJCn2ew4L\nPcx7GP5/v4ZYPx+PDvDhoBSJ1eEvbh6A7PzBmUApcjVmi4yi/gI+2RKF0rVk\n0eCXaTfc6ioODnL5SYeDgkzMhFgb1aOn0ZKPXhfN8C6hd5CSg1Pva1wyXQHw\n/EAS\r\n=9LwL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFMbtkUtDcNpE0AUkPPaqUfQMB4FM522OPZDNLYkSHHAAiBNBtACqXXs35so/eX74/sJunrtDKhalsD1YrFsOEMoZA=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.2_1622885056915_0.44971008642789245"},"_hasShrinkwrap":false},"4.0.0-alpha.0":{"name":"zustand","private":false,"version":"4.0.0-alpha.0","publishConfig":{"tag":"alpha"},"description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":"alpha"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/min/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scaleable bearbones state-management solution. Has a comfy api based on hooks, isn't boilerplatey or opinionated, but still just enough to be explicit and redux-like.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand\n```\n\n### First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n### Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n#### Why zustand over react-redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nFor more control over re-rendering, you may provide an alternative equality function on the second argument.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\nFor instance, if you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\n## Fetching from multiple stores\n\nSince you can create as many stores as you like, forwarding results to succeeding selectors is as natural as it gets.\n\n```jsx\nconst currentBear = useCredentialsStore(state => state.currentBear)\nconst bear = useBearStore(state => state.bears[currentBear])\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(console.log, state => state.paw)\n// Subscribe also supports an optional equality function\nconst unsub3 = useStore.subscribe(console.log, state => [state.paw, state.fur], shallow)\n// Subscribe also exposes the previous value\nconst unsub4 = useStore.subscribe((paw, previousPaw) => console.log(paw, previousPaw), state => state.paw)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\nunsub2()\nunsub3()\nunsub4()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    scratches => (scratchRef.current = scratches),\n    state => state.scratches\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  set: fn => set(produce(fn)),\n}))\n\nconst set = useStore(state => state.set)\nset(state => {\n  state.lush.forest.contains = null\n})\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config(fn => set(produce(fn)), get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\n```ts\nimport { State, StateCreator } from 'zustand'\nimport produce, { Draft } from 'immer'\n\n// Immer V8 or lower\nconst immer = <T extends State>(\n  config: StateCreator<T, (fn: (draft: Draft<T>) => void) => void>\n): StateCreator<T> => (set, get, api) =>\n  config((fn) => set(produce(fn) as (state: T) => T), get, api)\n\n// Immer V9\nconst immer = <T extends State>(\n  config: StateCreator<T, (fn: (draft: Draft<T>) => void) => void>\n): StateCreator<T> => (set, get, api) =>\n  config((fn) => set(produce<T>(fn)), get, api)\n```\n\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n  }\n))\n```\n\n<details>\n<summary>How to use custom storage engines</summary>\n\nYou can use other storage methods outside of `localStorage` and `sessionStorage` by defining your own `StateStorage`. A custom `StateStorage` object also allows you to write middlware for the persisted store when getting or setting store data.\n\n```tsx\nimport create from \"zustand\"\nimport { persist, StateStorage } from \"zustand/middleware\"\nimport { get, set } from 'idb-keyval' // can use anything: IndexedDB, Ionic Storage, etc.\n\n// Custom storage object\nconst storage: StateStorage = {\n  getItem: async (name: string): Promise<string | null> => {\n    console.log(name, \"has been retrieved\");\n    return await get(name) || null\n  },\n  setItem: async (name: string, value: string): Promise<void> => {\n    console.log(name, \"with value\", value, \"has been saved\");\n    set(name, value)\n  }\n}\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => storage,\n  }\n))\n```\n\n</details>\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store with a second argument: `devtools(store, \"MyStore\")`, which will be prefixed to your actions.\ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst store = create(...)\n\nconst App = () => (\n  <Provider initialStore={store}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n\n## TypeScript\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n\n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n","readmeFilename":"readme.md","_id":"zustand@4.0.0-alpha.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-F7gG2jjajqdFZpLEWz552nXBLfeqGur3vyIbW9AaGzHugywhD+gEzDRu/g6kGhZEXuOkjzLTX6y9P4MtTbtmMA==","shasum":"29e61d2e0d8612adacb1104e1c0fbbca90b40a85","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-alpha.0.tgz","fileCount":23,"unpackedSize":59822,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgwAtCCRA9TVsSAnZWagAAkdMP/17LUWrb2gofdn7CPni4\ncC0ZmMUFbPSm+aRW/Qgr1iN6YPa2jILd3lChu1q2PGEaldaPYYu5Uxk5MdIA\nmCMfgcB6cDgU73t5Tgsg1ZrDqP6Lg23Qwde8e2T73EIWX1qGfUGD1eJRtMB4\nLZjHD0VHFHdl1WBlNypdRlI8g6OIDuoBzoCV3yoPjVw7m9EVQ+ZnCR1axkbd\nif5cCNdq2CBqp+gzsKqBgf9jaMOWSFvQ0hNCO4rug/DCuHbsm4MKNYdPWuYO\nItaJc0LGPQbzWHUV2MHqsQuPcKSi+PxPTjo0ytzukS8FDZWMDz3GXE8DwnBB\nSrqFPa+pg0XlZS8GkyQ59HAMSShbAuDXDsXqWmAkHsUccxbl0WvN5G7ObbMW\nZGyz7nSmFo9B1fKN+HwQFpocjaCMpsdwZpwHgSCo6ZsMJdwBNGxNtUdHOdcy\nlVx4eyNAspsnVWPeCKt2NKk6wuaPT/OAQbSxFqT85GG36te/gZUUlPcYU1Yj\nIY6TRkWRAuun3v6Ry5pF9uXWV7uylCCu4mak8l0qMsaPNn6q7AJjXqJ0JV4/\nCxsjVM6VAMp2K/N9Wk933Qhk918BnFYRWg1vqVaWeLXWnif8qmUohToV6iP4\n4dN5wsbXlqZK+wDGxl4A6LTC0yMn3F0DN4c9W1Fncq/itEAbTo3nEdvww3Ck\nlJ1n\r\n=eGoE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEyaaKNLVmqIPUD3yc5DtRpEVMO2D/WEaHFuEqkCalEcAiEA165Yd0z7PVn4fkS529wUFyFp068jwp6imOymg4TBOUA="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-alpha.0_1623198529987_0.10848846302561"},"_hasShrinkwrap":false},"3.5.3":{"name":"zustand","private":false,"version":"3.5.3","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.3","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-0MuE3YgrgpBJ2mRWNmaHNUmVG5lEbkzJRUzLXNvyA5W989EElJoUZY8esvHBdyWxEeszustys68ftfaMnzFDwA==","shasum":"b015345d3a97b0e3f33b7c4926c6a04cea68cd84","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.3.tgz","fileCount":23,"unpackedSize":64826,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg0dQyCRA9TVsSAnZWagAAEboP/1O/ZVyaEPeVAl35pCGu\nb9Fv0wSbiHWLAsQUCVuAYOfWQrdCYx9WDJnfEzOGMzRIWBaNdLYeuK9em0wG\nJFc/AL1FAavKoneDcRj+k92r0tFkuMTho50NPzLXh9EaiqF0BLoK5p32OZKQ\nyydPC3SQP30/MrK5no7Wd4OdPF+LvQokcSz+eP0p4fvPD8JFHn9dZ2PDKdXj\nByoa2vtJpniZ9xKfeP4V4VnM/OeEU12L1dotCi7X+kgL9bJ01fDrWIrW+YpL\n1s5VhE1eq02kSl12Jt7iAZObNGocUaHWTVIyiPg7aIEqrx03dU7kk2CMs0+b\nTC7balvLg5SkNwXQx/yptaGnuyZow8yBZ2AzqPczc6yH3bvgpJPQn9AQZ7ox\nicNfeLOvlD7Z9gmBtqBuAT7zM52kUZJWqEMQbQyQEUkuYpn3BRtQekC7T0ty\nrn8goXjUuIQif7uA9GJWIZLHhhxWlYeXk1jWQs9rWMtGcRUrCSexu+r5LfM5\nISkPM2QdJ/3YLvbzgWPq7kaaOir9g9jHR2vc/bDOISiHsw5WxEOIHRcHGN4F\nJs1iYwjD2uWEDc4mI0KrIVEVBldLyLnK/Ym92WhOtEllJ6BR53qkMvAEThB9\neDqTXxS3pV+k/lxJ4iufVaXsEgamE072/Q30KtWLfiFSycosf92ZraATkDfh\nxXLn\r\n=UA6a\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC/aKdNZkWmmGr81L1/xAYbpq1SMAwDVK8+GXIkNR5S0AiB4oYe3L7hnKQAciPcvZ2xb6ABp0qhWFK02pzkAvtUgAg=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.3_1624364081801_0.004148653086294418"},"_hasShrinkwrap":false},"3.5.4":{"name":"zustand","private":false,"version":"3.5.4","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.4","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-EtS3D83il8eiydRS+xUcpczffT0MpD9ePIqAT10ns2tfzPvq85nmMmYJl9mOLOJjPLaXAMK8lgk0iCz2h7CxGg==","shasum":"9050a15042ced663b10588327b9210df91f0e13e","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.4.tgz","fileCount":23,"unpackedSize":64428,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg0fKECRA9TVsSAnZWagAA9ugP/iCvD2QAoqnq6AU4RTyu\nPahHpd2W3khhXSZlRSu+IMyGlUMUgZQ0Fra/QbHOg190Pmj7XDpYny614a//\ndrvCyyhPmAZzR6HtMbxQVWcjvu1G1iNfYc0E84bygAT7Hwb4jPN5CVqpZue7\n+O3knWHzeCVq+25oEqzKY75fzWRSSQuyzPO/oC+l4sGOy2FgqrWz2C2JWR2C\nbwZbpOoVw1c0Y2Ud5FxYIJeU6pPkZyD7stYETMYLgFbvi1/kdfJ/Z7Jusmk5\nHuAF9/Qs1U+oQcK8nhUXpVxZtgNAAFxOu66lAaoUP0kNpZ/S4ow12qfpG4/F\n/fILPwb7amslj8Bp+4WvoGmdavQx3i71iMjoSG+T9Wz/pdtEF8aYDACGPek0\nKCEwoxu9lbm8Wo2uT0blh1ynwI0a2MA4EU6ATSmjuK5UD++SHjSAS1DvuBqC\nWEHbWkqS8xsi39rH+uRLqfs/AjxfshhT51oOaTFkxHz3MCwQi4YFbvFiLUy0\nTYjPoVbVFHIzEg5+HOu5zGIGS4YvaTdxaXGqU0achnIi4TUpR2hXxcOAyNt4\nhIPnxIy94iGzYkrINQ6uG3QFDNc9AsgS5J0WO8UGd2LQ2yv1p3nCCOx3mnTP\nTO3mKNQsx1IfP7Cv8UnE458IhFVgKjztSi1ze9Wk1KEwHuLMf3YhrDbCxQ2R\nIEVA\r\n=P6C3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHRYwu7rjSISX3XzXrr4KuIohJhFUIUE2MEl0z6j4up0AiEAvJZ+zJBAc8cOSpPXze0oH6EGlNPqvT0RBQyrm5Gx4Jw="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.4_1624371844385_0.5536691637806259"},"_hasShrinkwrap":false},"3.5.5":{"name":"zustand","private":false,"version":"3.5.5","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.5","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-iTiJoxzYFtiD7DhscgwK2P4Kft1JcZEI2U7mG8IxiOFM4KpBAiJZfFop3r/3wbCuyltXI6ph1Fx90e4j/S43XA==","shasum":"628458ad70621ddc2a17dbee49be963e5c0dccb5","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.5.tgz","fileCount":23,"unpackedSize":65591,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg2xqcCRA9TVsSAnZWagAA90MP/j39CTYs5I2ddFUFyy1W\nDEOxoTj3LXW3RQnBDMu24GoqBG7M4Gp43OvC2PHJ/gSkRA01Ek/xtSjdamMA\n4/NFOkFgBftLsm88a7HlKrL237wShWbMgs8RTOBOZ/yJvaYLLwwrQI0M9ZVW\n2mIjzFkYuK6ONTdGskR9/ZOdXx+1Hwe6pWMxE7m2g0N6Oki+4Tbv4bU4Zz18\nspr5KMoMkjYiMD6Hv8Ixo36bFxxSFc/zwgu2KT9s2UXQAhh/0eHNwug0/7YZ\nk2IMR3uH5RWQY/TR74gxraxhKl5VgdoQkeJEnoYgYiqdz+tVzhbbbH6NBGTm\nmWs3Cle8hngJ1dgvXMQL1On73naK/ZtRtNcsnisZQQhgN//3BtFP3T2gIA8q\n975aZ5p8irwZffPp//30zRtb9UjTnFZ2UXqe1iT6wESw7ZbFSSH3xsr/qq/4\n06G6QHn45GnuonZjhTFg/U/MwjdGseP7geIx1RSBn0v82YfRA1U+KrvKFuIm\n6RA+Fv/q3qVmmW/Z08XCovSobene/72jWq3thpn/NAQULejddU5aJd5JiukB\npLhkidC4OEfW3zP6L3C/Qu8VIHhdR+4DfFGNW3fjnkLHCjr24zK2PX4JnnQ8\nhAR6OIw3BnOMA0pwHMpCJ/RKBfPGN0Oyg2gxB6WFJRmcYlz2Vc/0wEakUJqt\n3mn8\r\n=W6Bt\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDmueE30EIjGD5jxxJcP3IRLxwwd22G7NG3632/BquPUAiEAqahlRA3SPp/OQh9UFixIMh3crnzoPQnYhFikZJzofZ8="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.5_1624971931999_0.6090846777607124"},"_hasShrinkwrap":false},"3.5.6":{"name":"zustand","private":false,"version":"3.5.6","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.6","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-8XrpRO5scF8MSxeAlu7vFupmLG+5MTWhT+6+3QNsihs0QZfOjaArFyvenUgrk30WdZVGVHLHXBhbqC2/QzLeMA==","shasum":"c28cfbdfdd999d26d1a94ea105a6fd1da56ed38a","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.6.tgz","fileCount":23,"unpackedSize":65628,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg6FDFCRA9TVsSAnZWagAAwxUP/18ZWB8yOFFEvMNl6on0\nGCp2edZHnwjSSSVyWbjZpjPc5BXSew/WuWn/M0rJhm/a5Ri8pldVqBRNkMoz\nfufa6DuzRKeDIjbALhAgsPuJxsfm3nhXPLZMPFVw0F2wTEJiF456/ONF2FQU\nCrdhS6zYzcxgu3LREzGxMxpDETjtllhBuRdw6oliDvFTo3vpvr0SnliEghFe\nRJZOzEnvkvTmfzZ4t8fdfghIym5HQ0srrA5CgCVxrUwtoNwbyq+7V5jMxKIh\npkSJsZA8UHQ42cP5BNegiQ618S3vITAVizJtqawBUMBjpshVMfSl6SxDkfVp\ntatAoJJxxSFi7JnfJl4ZJagFc4k4mf98Orfwg5zjpmEBTkvQeouGR4Tr23Gx\nS1fjGFSlbn3a2xb7nIrCjP+XJuoLzTsrYKZq/nPkQuztbF6RYw1FmzWl8FPD\nh5PgEkx1pXlReqIJVcimNd/ymR9l+IcenNx2ljhi5aWsFuGkGa2FRKIagi9G\nrjAy8Kl7svdejtdVlD1zu7AX8OnBzlKFl/M9kdeb07gCpXsFXVZuiFet0Y4r\np/IvqG0itTsDM1rPQPTGIZkanIU+G++SnI/4S75iA2q5Ssu4xmwsP8qbi79K\ninzqI7QMmYk3X1xmzN+RqIjtS8u5H139ZHu7aZVISlY5LVkGMcjSWJPHqXoo\nRdqQ\r\n=PALc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGD5TbCj1ZoxAoNXOcSAqsNCPgZc7fzBnsK6CauXcGrIAiA6HSyzfi94nEbM6agN61mxKh2lGHbKKK0Jn3ovTkjAdA=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.6_1625837764637_0.3119490215967924"},"_hasShrinkwrap":false},"3.5.7":{"name":"zustand","private":false,"version":"3.5.7","description":"🐻 Bear necessities for state management in React","main":"index.js","module":"esm/index.js","types":"index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.7","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-DlVFXJavIHyXTOGz6dB+8QHZsPyJcGJSEBtlp2Ivmd5SwtlCnhPo3L8LB6YRfAOJC2PbqzgoD8NMjk+y+vIF0g==","shasum":"add5e8d0ba031ce6e0ddf9cb76ef15306efb665f","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.7.tgz","fileCount":23,"unpackedSize":65845,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg7iVqCRA9TVsSAnZWagAA50cQAJS/GO4Tpn4ek90c3QSq\nz4Y8YPAGzKJjkILehWMxKPPVOtZySJeqlZwCYpAZVytLuv6MjwOMl4llzTPA\nOPIZNCQPqb96HRSy6G7g6KNAgOUE/to5uHnjt+3CPyF4ibYtU0yqUV2tfA3y\nrE1Ksnu5xXBP6X6xUjdLVfXmrwA0O01ve/xCJ3/Om28fsYXyn7RfqXzfEzbI\nhUth+jSgxlb6XC/ocPHiTIKiaN+QvLoDYWThLTwUHb6l0XB0PT0KYZicaBdx\nFLu6jPiGKC3pJls40O8mWI6d/ZmSFx7TkCLHv/KT0Kz9XwEpa32q3PzstIQ5\nxk26JzwLZsqN4iJOy7E3Zss/RnSkN1JwA+BMc+rc/Lz4a0Z6pcmVYUs25R3T\nbBx4fOueQgYc2Yu56HYGFDZkw/LkCIcXwIJx+U5crowwGy7+Mq1+NbejT4km\n/uQCjslQScfYDdJTnwnB7VTmqKWeHxzrKPeiTqX8/gpF3YYL6Z8vOl04scsH\nPQOBt4rdWiUrs9bnZu9EKthXVxJL2TVBI8eezAQreISNP/HwhjNaqxmJYJAJ\nnK+qxxi1TK3lR3RDYRhSHgYg8MVfFsdXl2R6x6+RJ0BG0xt3XDADIuD9a6H3\n2UqwIYSwEH2LqAo5Vfj171g+80nb98odp4KCqS8vu0GI7LXqdYTmZE+erjvn\nUUH7\r\n=6jcf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDRpDmsc5iLOuCPHfoZCJO+vn+ZkRPeNp9F8JT5EZBpoAiBt5Tjdxh9DLGYq1hInNluML7rcQh39py7d/3oUhupnsA=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.7_1626219881577_0.6747942292373024"},"_hasShrinkwrap":false},"3.5.8":{"name":"zustand","private":false,"version":"3.5.8","description":"🐻 Bear necessities for state management in React","main":"./index.js","module":"./esm/index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.js","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.8","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-QA5h4cyJFPG0Gsk7u9gvwF7x6HbrjllSifwePluFK+tcthvaIo9zqiwjoUrXwb4e3BGxzVOXEgbhaB6jVCD7Kw==","shasum":"820d12b3a5855a5b93fa75ed52b320b091bb8f76","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.8.tgz","fileCount":24,"unpackedSize":66442,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhFlz3CRA9TVsSAnZWagAAW00P/2Li3Rgcje9T8W3UZ8pq\nUMXhUld36ElCWifb0QdttlBGPCg0xXtwKQyOmfK99k56oa+fhQNpFhts8sNg\nBkPA3v8HdeCkMILlyM/cV6HnrKkgCcG3uPlip4XLBuSFdyB1TBWfkQY2wJuE\nOP10TNKZ75/FcJLNUU3aakn2cTC4fxdIqYP8cPP6Wp/2UMSC8eiSZJb5iWsg\nl3gUD71r5GPjWIMGKIWnp1YWF1wiNT1nWvI7EUZqA+WqSIP+VoGEwUGYLPaP\n87SiYhRsVlRzMzTLyEfDh20w6qEtpH1+5O4Ugpw8zY84uKQioavoiFUVWDNb\noz+KwgiNFqgMNtziey0rmQtpk2pYpB62NGL3WuYY5YgJ7eDNSw0o8rm7haEc\nIOHMQYqmKoDXbgff2SgYqmgIQYRgfv9l95s8ZEEQupufUGODTsxRgXAGPRYJ\n4VHsjqJd0gxEe7yK8UqgDqU6vUTcak2eeL0lZPBaxBfditSix/onnOXHp9+W\nEGx4Lin3aFlPG2FoZLMihaoJ+wfMaN8iznVKesbquLLwxgn697nx5CU5b3Q5\n5/qkeugc5WFev4o9eE94OjewMPvetK3dzpsSwqSZ2pp+vfv2dicROgPT0DEt\nundhRfM/eI/QzJ3XYgKma/hTVFBXworYLIQ0brW8YD5/vgm8y0YPfXmXCWu+\nixJQ\r\n=XeJP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDDNWSyFQKpUl0GpWjqfu5NDZno/S0NCyP5yzw/qoRVzwIgIb01aVpKFPx2PENfzEmSogx0Fkcyv+Sq13GxFvhHWPE="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.8_1628855543740_0.3207532542682092"},"_hasShrinkwrap":false},"3.5.9":{"name":"zustand","private":false,"version":"3.5.9","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./index.mjs","import":"./index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./vanilla.mjs","import":"./vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./middleware.mjs","import":"./middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./shallow.mjs","import":"./shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./context.mjs","import":"./context.mjs","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.9","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-ELj8XLrf5TZoiffbsZKaJ0uGnT1t4PGU9IgFLfiLsjMhOXFfKEl3fEUa5mNAWTzrietJuA1R2YY6GBE1siyE5Q==","shasum":"93fcf9eb29d10bc7fc37bdb5806464af516e7da9","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.9.tgz","fileCount":18,"unpackedSize":59294,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhG6SHCRA9TVsSAnZWagAAGzkQAJc0vmDfxqrvjHLyH+1B\nDcwi3IGyhZXL6nvQaN1MSZZLwnOEyY3fvtSpE62a11E2CPnuK/a+U76odpGQ\nAhwiki46g8HTabx8GGRosIhlTcX/C4+C3E4ZptkAdD3X1vtOvz1lxkeYOBc9\n3igVqW6uJbB87wBTCuwJ0Ep6r/qFqgKiTT4bjIWoxPTvGB18bX/nluGaV80b\n0HcGslvZIoP9t7sWdl+O+8EDURc0DaAtYH6lD6t+sY7+lqLROsSegqaKuKFD\nEAgKmDRqL0Mx4h+yeYG0D7HD2ygtgPQmMWMgBxduINoxzus7iIErzwgj/i25\nvOvbANVUXhdoVb2apH7RrRGFJbyep2KK91NkIF59tkToFlqPwTuasbRMAoGf\nlyh55DcGfZ2t/A73ZZf5MK5dtnYjZ81jUkWH4nBZlNSLIPCih26f8Ua6o567\n2nZcUUceRWDh9DM3uOqn0gq3JLQ/FUSTcNm3Igql9+uQz8U0c0CdDHiKLBvL\nJbwpJ6/657NOC97XzBeTyxsx7axWI+4HcMVr9N8mzmdhBUo3FReijli5GZ6I\nYf7iL8VithodTisMBjD8sbX56mauOg4MXshcIPKa3DRHynFTEyHxk/FigXd5\nxurmuZKaa6tnCDZFZBNHR2YEVB7Nup/hL4Rm3uAl/ZUAPYdyLiHkOREMcETl\nZFqH\r\n=TBSz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICbTQGsEYDD/qEHaFYaX7TJnK8j4ITuheTAW4xUuMcEBAiEA3YZjQunA4ORcswpobhz6Jglx6iTOWuhtwZKK3ZIP+Xs="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.9_1629201543340_0.317426244639724"},"_hasShrinkwrap":false},"4.0.0-alpha.1":{"name":"zustand","private":false,"version":"4.0.0-alpha.1","publishConfig":{"tag":"alpha"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./index.mjs","import":"./index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./vanilla.mjs","import":"./vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./middleware.mjs","import":"./middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./shallow.mjs","import":"./shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./context.mjs","import":"./context.mjs","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":"alpha"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/min/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(console.log, state => state.paw)\n// Subscribe also supports an optional equality function\nconst unsub3 = useStore.subscribe(console.log, state => [state.paw, state.fur], shallow)\n// Subscribe also exposes the previous value\nconst unsub4 = useStore.subscribe((paw, previousPaw) => console.log(paw, previousPaw), state => state.paw)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\nunsub2()\nunsub3()\nunsub4()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    scratches => (scratchRef.current = scratches),\n    state => state.scratches\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\n```ts\nimport { State, StateCreator } from 'zustand'\nimport produce, { Draft } from 'immer'\n\nconst immer = <T extends State>(config: StateCreator<T>): StateCreator<T> => \n  (set, get, api) => config((partial, replace) => {\n    const nextState =\n      typeof partial === 'function'\n        ? produce(partial as (state: Draft<T>) => T)\n        : partial as T\n    return set(nextState, replace)\n  }, get, api)\n```\n\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n  }\n))\n```\n\n<details>\n<summary>How to use custom storage engines</summary>\n\nYou can use other storage methods outside of `localStorage` and `sessionStorage` by defining your own `StateStorage`. A custom `StateStorage` object also allows you to write middlware for the persisted store when getting or setting store data.\n\n```tsx\nimport create from \"zustand\"\nimport { persist, StateStorage } from \"zustand/middleware\"\nimport { get, set } from 'idb-keyval' // can use anything: IndexedDB, Ionic Storage, etc.\n\n// Custom storage object\nconst storage: StateStorage = {\n  getItem: async (name: string): Promise<string | null> => {\n    console.log(name, \"has been retrieved\");\n    return await get(name) || null\n  },\n  setItem: async (name: string, value: string): Promise<void> => {\n    console.log(name, \"with value\", value, \"has been saved\");\n    set(name, value)\n  }\n}\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => storage,\n  }\n))\n```\n\n</details>\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store with a second argument: `devtools(store, \"MyStore\")`, which will be prefixed to your actions.\ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","_id":"zustand@4.0.0-alpha.1","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-6xaC6qQ1Ujt1qK81LFA64XKSyWFC53C50BhlEoYkT62mnR2euDhdGd/HifUd+qVsM0+oAEyyv7pFft0wseulsA==","shasum":"3223c23a5ba9c184117bd09042203afa720eaf03","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-alpha.1.tgz","fileCount":18,"unpackedSize":57022,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhID9fCRA9TVsSAnZWagAAo5MQAImsc5GEipb6rGT3BYzL\n8as+H+mW8JyejhKVZUhwCcXxlidIIA2v6ZExOJrhGV6apKUOko+Lpf91KlbD\nH6U/d+2ruslbSI+tz5nPkHXg0VbTyVKrerR81C7o/KeOUawROq22aMnvpoty\necCpuwGNhKCUxDzEWqMgEFujZpwCajGeDkXenzF7s6MWU1DVlP2yy77Digf1\nFo+3jYczV5dZmadKy3oFbI3rnRAqKYEQ4fCb1ZM+0SeOvIGbwZ/bRi2tKA5S\nOjzutUEwL0kXy0SDSiACmxWVvx7OL8il9U3YNAEhra+ZIRflbqj+nJOyXtju\nZrF84oKTnaKMC2ls2Qu1102Ogo2nUa10mH4EHXv5hVsLj7q4mFCdGpnWSRNX\nUmompg4f0JjvptyQ+yOb41VPTOubhLJfPVwOUgJ/7REcCl+xfa0pVPyCXzPY\nKVf3EDg3MZFxW3qnUK1od183DaMfBxc/UQCggtVXAN+nDoucrZS04+rAAI86\nNq95+l9DNhHDwnqq195BqyYAuPZDVfvJ0/WS2iayjkBA41akCxi1zUiVJjnv\ns3K7YVVds003ceFmsEcsA75ga377Cr2GIm8HZvWYzGVGxW1H8VixaJdQkj0O\nFmbWLQOu1DPRLbhcZLxMWKYt7B16iR5RS9lCW5OXgr7unnu7ItK8IInvGkq/\n3+6/\r\n=gcR0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCGTbLxkyfyWA3H+kqYJoNAbuac2oFlXVQC/YivPPCLewIhAMdXBoV9hUfY8hvSJPeH6BiWWYybl6SWRIrKEOei/13K"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-alpha.1_1629503326973_0.6352972869841425"},"_hasShrinkwrap":false},"3.5.10":{"name":"zustand","private":false,"version":"3.5.10","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.10","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-upluvSRWrlCiExu2UbkuMIPJ9AigyjRFoO7O9eUossIj7rPPq7pcJ0NKk6t2P7KF80tg/UdPX6/pNKOSbs9DEg==","shasum":"d2622efd64530ffda285ee5b13ff645b68ab0faf","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.10.tgz","fileCount":28,"unpackedSize":81871,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhJ6KZCRA9TVsSAnZWagAAyUoP/2CYZtyiRpdv9DNcmkUw\n2fGISWKQyhOC8tq4MgpSdm3hZ25SZaiDHt4rNqu+l8etD5HKd+jWTiqfKN4k\n+V/wkBBX5WBnXZ006xIrchKdVMcloyPBshhdNkQduqA2/cysEpblJT+jPo9y\nWAqA3r820vMryPrfeR1EJh3bSLXIQ35Pkg6f7XecCsfPv/O90oeUbcWggoRS\niCGNcp48wJlM2106en8f3C7uZHdAHvVGdbZPiBIVEjPRK0bD1KAIjr21Y4Cb\n6epNwSpSNYqVu3byXx6i8hu7RCQcfWhAEb/hJVVsFxrEMvz3ckFV6ThkP7Bg\nwdL68FTZDmJIo8nHxn1r1HGXsWHX8+r2x21kBGGbuy7rus6tlgyEimgbZOXI\nYzVxmYZjNypnTcOCu7uTmkNnR1XjWyowi0gX1zrJM+c+kzrc6eQ7ZUhXlGDA\nBu0YW27je7Vp6Ku5pgLiMU30M+GpskFVUrida349ay/9jhIo+1uyaM7fG//J\n05TIYwBB/bMeV1evZin94DhpOoRtN5oGMo1wrYJdzBqdy4kTnrQyIpcNzJeA\nxkuet+BlJHgpiG2VUkZpYhd6LfJR3UQoi77Hv3Nj3uYiqhR1QbrrZ0iU9Htr\nBnBF0DrTVxWQk8mJSVMldRXZ3Dkgeme9KeAF/KQNvK50bx/BqsDSs3UNy3W8\nAElN\r\n=elRe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDlHBwMXzZuXf9nQ01VwxwOwyDf1XMIEugMntQ8IIRobAIgMXVNZbSJpXQdusG6Zy4ABnXgIPIXOWoIgArpgKS9mMI="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.10_1629987481537_0.36472749215578104"},"_hasShrinkwrap":false},"4.0.0-alpha.2":{"name":"zustand","private":false,"version":"4.0.0-alpha.2","publishConfig":{"tag":"alpha"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"^0.0.0-experimental-1314299c7-20210901"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/min/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(console.log, state => state.paw)\n// Subscribe also supports an optional equality function\nconst unsub3 = useStore.subscribe(console.log, state => [state.paw, state.fur], shallow)\n// Subscribe also exposes the previous value\nconst unsub4 = useStore.subscribe((paw, previousPaw) => console.log(paw, previousPaw), state => state.paw)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\nunsub2()\nunsub3()\nunsub4()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    scratches => (scratchRef.current = scratches),\n    state => state.scratches\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\n```ts\nimport { State, StateCreator } from 'zustand'\nimport produce, { Draft } from 'immer'\n\nconst immer = <T extends State>(config: StateCreator<T>): StateCreator<T> => \n  (set, get, api) => config((partial, replace) => {\n    const nextState =\n      typeof partial === 'function'\n        ? produce(partial as (state: Draft<T>) => T)\n        : partial as T\n    return set(nextState, replace)\n  }, get, api)\n```\n\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n  }\n))\n```\n\n<details>\n<summary>How to use custom storage engines</summary>\n\nYou can use other storage methods outside of `localStorage` and `sessionStorage` by defining your own `StateStorage`. A custom `StateStorage` object also allows you to write middlware for the persisted store when getting or setting store data.\n\n```tsx\nimport create from \"zustand\"\nimport { persist, StateStorage } from \"zustand/middleware\"\nimport { get, set } from 'idb-keyval' // can use anything: IndexedDB, Ionic Storage, etc.\n\n// Custom storage object\nconst storage: StateStorage = {\n  getItem: async (name: string): Promise<string | null> => {\n    console.log(name, \"has been retrieved\");\n    return await get(name) || null\n  },\n  setItem: async (name: string, value: string): Promise<void> => {\n    console.log(name, \"with value\", value, \"has been saved\");\n    set(name, value)\n  }\n}\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => storage,\n  }\n))\n```\n\n</details>\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will be prefixed to your actions.  \nSerialize options: `devtools(store, { serialize: { options: true } })`.  \n  \ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","_id":"zustand@4.0.0-alpha.2","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-6Bn9U/8vfdi/6C9cGD+15K50BH+ibGEH7SgC8hRYMI4/8Duno9WCsd2cdG/9GQBHpzxfVfqoU0foUbk5mhwKpw==","shasum":"bc0e18258ee5aa3f8cda704a4733a577807bfa6e","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-alpha.2.tgz","fileCount":28,"unpackedSize":77613,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhM0f7CRA9TVsSAnZWagAAVDgP/0IazWWXM+icHGiczpkP\nZmRRVh0uEs48raExS2x4NDJHqZm8EwwYf7MYmw3WuZUPPLuAsJU78YKkE5Kf\noNgJzqFOaCfXlSBSFyZlYr8jJU3hfWk44hibIyEjgtCVWOH2400CFx688uCj\nUnwEWPL2dV5cFkSqQ07Hdl5B+ns5N7iguoVNJ/Qr1vIEqYWulEOfNfts7t+p\n3PHXaj6Vs2VnnreAuvOzs/MtD9dEutXQyWPBZ5GnDB/lopEjD9HYM/tKF8kw\nkClK/eNa49jAt9Ctss4rM/8VyE4y6Snz/S32umka4W+yChWDbnh1I+tDgun3\n7eIxsEmLEcXt4oh6jpuShFvZOCIc2A0v1xomQ0PSCxnoYlUfwmsUcNLWGvGu\nkE4UfkP4Fow59SdhTmWHSdgkG72jyK757XLGEu7b/EuKZyeq8ljGFu9kp0jY\n/L9nTPE+NiCoucBbXCkcuvIlThD6HRlNXX4qESXksaZwTJEY7qzhh7tWDMAX\nftTXyB4S9JPSLWSAW5Aw67bUe/EVWFmzTjEFXHq4UAS7po71rTGIhZE+Orzc\nIch/sWBPPNhJpDk+hNrYX7aajO8vkDzl5LHc8xqT7q0Af37um8c0VV7xrD3R\nmOpQsZZluTqTUmEiN9Zl65zVrl3560AOtU2lNN18y2LEbTHFSj4RDAH9ETzm\n8rqN\r\n=Fqae\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGdRg6noYYKE/R1Vuj1MzfdO6I/EhPYy77zxdJ2IFbIYAiAEiUYTKIBcdqQ72JfxyqQnX1GI76cXilmsUsCwwdkHbg=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-alpha.2_1630750714974_0.8827463467945025"},"_hasShrinkwrap":false},"4.0.0-alpha.3":{"name":"zustand","private":false,"version":"4.0.0-alpha.3","publishConfig":{"tag":"alpha"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"^0.0.0-experimental-b1a1cb116-20210924"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/min/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(console.log, state => state.paw)\n// Subscribe also supports an optional equality function\nconst unsub3 = useStore.subscribe(console.log, state => [state.paw, state.fur], shallow)\n// Subscribe also exposes the previous value\nconst unsub4 = useStore.subscribe((paw, previousPaw) => console.log(paw, previousPaw), state => state.paw)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\nunsub2()\nunsub3()\nunsub4()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    scratches => (scratchRef.current = scratches),\n    state => state.scratches\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\n```ts\nimport { State, StateCreator } from 'zustand'\nimport produce, { Draft } from 'immer'\n\nconst immer = <T extends State>(config: StateCreator<T>): StateCreator<T> => \n  (set, get, api) => config((partial, replace) => {\n    const nextState =\n      typeof partial === 'function'\n        ? produce(partial as (state: Draft<T>) => T)\n        : partial as T\n    return set(nextState, replace)\n  }, get, api)\n```\n\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n  }\n))\n```\n\n<details>\n<summary>How to use custom storage engines</summary>\n\nYou can use other storage methods outside of `localStorage` and `sessionStorage` by defining your own `StateStorage`. A custom `StateStorage` object also allows you to write middlware for the persisted store when getting or setting store data.\n\n```tsx\nimport create from \"zustand\"\nimport { persist, StateStorage } from \"zustand/middleware\"\nimport { get, set } from 'idb-keyval' // can use anything: IndexedDB, Ionic Storage, etc.\n\n// Custom storage object\nconst storage: StateStorage = {\n  getItem: async (name: string): Promise<string | null> => {\n    console.log(name, \"has been retrieved\");\n    return await get(name) || null\n  },\n  setItem: async (name: string, value: string): Promise<void> => {\n    console.log(name, \"with value\", value, \"has been saved\");\n    set(name, value)\n  }\n}\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => storage,\n  }\n))\n```\n\n</details>\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will be prefixed to your actions.  \nSerialize options: `devtools(store, { serialize: { options: true } })`.  \n  \ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","_id":"zustand@4.0.0-alpha.3","_nodeVersion":"14.16.0","_npmVersion":"7.9.0","dist":{"integrity":"sha512-LJ6wlXsaeTZiF/fp1HWxpqezh4D2Jr4SXaDvVu0wmAw4sq6z3SyBVPsuj7aXu2xkqiGDJkLJNNllLCMybuegRQ==","shasum":"59b3eb7492f6f347e93152e9627ce86a0edfb456","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-alpha.3.tgz","fileCount":30,"unpackedSize":77978,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCI1ni+gAhacXNkHF7bSjEHWh9hhl+uYzVXSndsieI8YAIhAPqdjf9i8qlorVUVuXM9FuVD4Xdll1Z2Y/m3wZk/0kOS"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-alpha.3_1632756699722_0.4840789294201624"},"_hasShrinkwrap":false},"3.5.11":{"name":"zustand","private":false,"version":"3.5.11","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./*":{"types":"./*.d.ts","module":"./esm/*.js","import":"./esm/*.mjs","default":"./*.js"}},"sideEffects":false,"engines":{"node":">=12"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.11","_nodeVersion":"14.16.0","_npmVersion":"7.9.0","dist":{"integrity":"sha512-V3Ys0ik2flOnWr0h9D4ZTCdcpK4feg71vLWaxjw+D+PLxM0+6KITdLedgDa97yAS6YDQTBD0Gw+NbsdAiMCqfA==","shasum":"3a8fd24f7a63d02a6532ab230accc2108051d635","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.11.tgz","fileCount":28,"unpackedSize":82662,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCUPOhomK5XtOSeOftFrKlKZ5Tbdu7PpGKe8sW3VRYSrAIhAKzACfE3klGIcqsK87IIhsJcM2zUEG24rkTQiEZ98g2c"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.11_1632845232661_0.26875053387926906"},"_hasShrinkwrap":false},"3.5.12":{"name":"zustand","private":false,"version":"3.5.12","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.12","_nodeVersion":"14.16.0","_npmVersion":"7.9.0","dist":{"integrity":"sha512-Cv9fX/yM5HXYODkn3Q/HMmMofnmZw3yqM73VT/3rQEvI/04Yl0OFNO24qMofhN82xTPWcCffkGPFCMq8r67Whg==","shasum":"407a8685eb286a32d7f560e74966993bbff1dae8","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.12.tgz","fileCount":28,"unpackedSize":83203,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDQ77vSAoYK73xgRaK0/f6BHVnG0N44NfDoUvvJ4mMgxwIgYEIEJX8SVN4dRyhdzVSdZ2v8ZfftPKe0KUCH1pStBvw="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.12_1633094949553_0.04854281696878604"},"_hasShrinkwrap":false},"4.0.0-alpha.4":{"name":"zustand","private":false,"version":"4.0.0-alpha.4","publishConfig":{"tag":"alpha"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"^0.0.0-experimental-f2c381131-20211004"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/min/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(console.log, state => state.paw)\n// Subscribe also supports an optional equality function\nconst unsub3 = useStore.subscribe(console.log, state => [state.paw, state.fur], shallow)\n// Subscribe also exposes the previous value\nconst unsub4 = useStore.subscribe((paw, previousPaw) => console.log(paw, previousPaw), state => state.paw)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\nunsub2()\nunsub3()\nunsub4()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    scratches => (scratchRef.current = scratches),\n    state => state.scratches\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\n```ts\nimport { State, StateCreator } from 'zustand'\nimport produce, { Draft } from 'immer'\n\nconst immer = <T extends State>(config: StateCreator<T>): StateCreator<T> => \n  (set, get, api) => config((partial, replace) => {\n    const nextState =\n      typeof partial === 'function'\n        ? produce(partial as (state: Draft<T>) => T)\n        : partial as T\n    return set(nextState, replace)\n  }, get, api)\n```\n\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n  }\n))\n```\n\n<details>\n<summary>How to use custom storage engines</summary>\n\nYou can use other storage methods outside of `localStorage` and `sessionStorage` by defining your own `StateStorage`. A custom `StateStorage` object also allows you to write middlware for the persisted store when getting or setting store data.\n\n```tsx\nimport create from \"zustand\"\nimport { persist, StateStorage } from \"zustand/middleware\"\nimport { get, set } from 'idb-keyval' // can use anything: IndexedDB, Ionic Storage, etc.\n\n// Custom storage object\nconst storage: StateStorage = {\n  getItem: async (name: string): Promise<string | null> => {\n    console.log(name, \"has been retrieved\");\n    return await get(name) || null\n  },\n  setItem: async (name: string, value: string): Promise<void> => {\n    console.log(name, \"with value\", value, \"has been saved\");\n    set(name, value)\n  }\n}\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => storage,\n  }\n))\n```\n\n</details>\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will be prefixed to your actions.  \nSerialize options: `devtools(store, { serialize: { options: true } })`.  \n  \ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","_id":"zustand@4.0.0-alpha.4","_nodeVersion":"14.18.0","_npmVersion":"6.14.15","dist":{"integrity":"sha512-wLioMxfZmOihnVocuGvFsK3wpu+QdkbiAXEMhXazRJoy1YHjRp8907bmc9Eq0qQGmqOZCiM2O3Q4RgKBpoIhEg==","shasum":"92c8de20b95a14ba3ccdedf80db7d9b01fafc58f","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-alpha.4.tgz","fileCount":30,"unpackedSize":76878,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBhQVXf3iKbsDfx2G8uQR0+NKsHmRCvuNT7+hGWTZWDHAiEA13af7NLZlvMhtopT/O2WoptEk2r1uS2aoMpKF/1DuNo="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-alpha.4_1633388769279_0.8785272013729584"},"_hasShrinkwrap":false},"3.5.13":{"name":"zustand","private":false,"version":"3.5.13","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.13","_nodeVersion":"14.18.0","_npmVersion":"6.14.15","dist":{"integrity":"sha512-orO/XcYwSWffsrPVTdCtuKM/zkUaOIyKDasOk/lecsD3R0euELsj+cB65uKZ1KyinrK2STHIuUhRoLpH8QprQg==","shasum":"fd1af8c14a23ec7efdeb9ab167b8e69a8fc0980a","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.13.tgz","fileCount":28,"unpackedSize":85154,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCtWCeSCBGC2y6z5DMiqwcauhhHhtjAVvIOeGGlR/CQugIhAOiuPAtZTb4K0g12xi0YLAtZx31upgZlUUnjbXlFdwUH"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.13_1633610943536_0.10973376333253193"},"_hasShrinkwrap":false},"3.5.14":{"name":"zustand","private":false,"version":"3.5.14","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"_id":"zustand@3.5.14","_nodeVersion":"14.18.0","_npmVersion":"6.14.15","dist":{"integrity":"sha512-Y5o/024/eBluNGLt1MYp9KTqCzbw/Cztvx8MVjtmMWHQPrgnKfOe0Wqu7j7JSl+KxfJMA0TxNz4RKSqDx0fbHQ==","shasum":"591c3e8b75c57b2d13d596d8db00a08a0b3d5cdb","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.5.14.tgz","fileCount":28,"unpackedSize":85561,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA8Xdm5uXBYnxb5D8mA1xxR/qYV1XVmf6G/xhlMpXIWXAiEAweLp+trNBphYAMDUyC0UsR7OQu8ku6I3iVQe/y2k/Ro="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.5.14_1634643562940_0.041524163723884566"},"_hasShrinkwrap":false},"3.6.0":{"name":"zustand","private":false,"version":"3.6.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"9e8e7d0ebc3275d85a8d9b691e97205bf884e3c2","_id":"zustand@3.6.0","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-kCzsXL0GaJrG/EluZJJEaUQrf0pAlAD4qcTp8DU96pdF03RAGcGzVGorpIvh4cyKYbxn3wJbR6Hac4j3SsAS1g==","shasum":"7f89b72eed66e717b1e012781273085bce90728d","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.0.tgz","fileCount":28,"unpackedSize":96492,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCjzdv8JdgkJiQsyoBB1Qoa49Zd7T2FHgmdAHdSGBe2FgIhAL0lh8wRjTpu7CzChyZC92PKpIgH9cTzQ1jC4bLHHVvk"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.0_1634824541129_0.5441198576302964"},"_hasShrinkwrap":false},"3.6.1":{"name":"zustand","private":false,"version":"3.6.1","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"06a60bbdebfe6e8a0701be2121c064c1c1d1663a","_id":"zustand@3.6.1","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-2ghTWZhOx3xUK7drIa/1fVbuzyG70XKfCXIATrRBFDPcRRV4V/9uptNOKgyCvPwCDYgLpla4EtFbXNbdLpfPcw==","shasum":"d309074dd632ca7b14e20353e5c55274e3d72eda","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.1.tgz","fileCount":28,"unpackedSize":97766,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEH1yW/m0v2/lpk7cQsgHrXpZ+9+rGK16LV0UMyejFObAiEAgWCy+D84LEtEOS3BUzJ4GBpqTFjwGlcbt8a63695F4g="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.1_1635262866335_0.4687099723723265"},"_hasShrinkwrap":false},"4.0.0-alpha.5":{"name":"zustand","private":false,"version":"4.0.0-alpha.5","publishConfig":{"tag":"alpha"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"0.0.0-experimental-4298ddbc5-20211023"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/min/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(state => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useStore.subscribe(state => state.paw, (paw, previousPaw) => console.log(paw, previousPaw))\n// Subscribe also supports an optional equality function\nconst unsub4 = useStore.subscribe(state => [state.paw, state.fur], console.log, { equalityFn: shallow })\n// Subscribe and fire immediately\nconst unsub5 = useStore.subscribe(state => state.paw, console.log, { fireImmediately: true })\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\n```ts\nimport { State, StateCreator } from 'zustand'\nimport produce, { Draft } from 'immer'\n\nconst immer = <T extends State>(config: StateCreator<T>): StateCreator<T> => \n  (set, get, api) => config((partial, replace) => {\n    const nextState =\n      typeof partial === 'function'\n        ? produce(partial as (state: Draft<T>) => T)\n        : partial as T\n    return set(nextState, replace)\n  }, get, api)\n```\n\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n  }\n))\n```\n\n<details>\n<summary>How to use custom storage engines</summary>\n\nYou can use other storage methods outside of `localStorage` and `sessionStorage` by defining your own `StateStorage`. A custom `StateStorage` object also allows you to write middlware for the persisted store when getting or setting store data.\n\n```tsx\nimport create from \"zustand\"\nimport { persist, StateStorage } from \"zustand/middleware\"\nimport { get, set } from 'idb-keyval' // can use anything: IndexedDB, Ionic Storage, etc.\n\n// Custom storage object\nconst storage: StateStorage = {\n  getItem: async (name: string): Promise<string | null> => {\n    console.log(name, \"has been retrieved\");\n    return await get(name) || null\n  },\n  setItem: async (name: string, value: string): Promise<void> => {\n    console.log(name, \"with value\", value, \"has been saved\");\n    set(name, value)\n  }\n}\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => storage,\n  }\n))\n```\n\n</details>\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will be prefixed to your actions.  \nSerialize options: `devtools(store, { serialize: { options: true } })`.  \n  \ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","gitHead":"2ed60ebc9e2fc8964db82a87d42602adedfa4e94","_id":"zustand@4.0.0-alpha.5","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-XFKwBDGptJY3V4LxjQh+5wH0nN9p8HJDcNQlftG3m/jiLGSi5bXcwMG6lVhTKg3vUzO8bMO8k279W26V1HynvA==","shasum":"e5fa9eb8eb390a068c95cc60fcb69be26daf6cd0","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-alpha.5.tgz","fileCount":30,"unpackedSize":90535,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDe1Pi8EzkKOwdW1iXyKKYFqv7zbx/t7iSYDOQbg0J0bQIgO1SBiSvBH093Lhr27XEX1ps5TeNuasspYn3hey8rlyQ="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-alpha.5_1635373684153_0.5065068821922947"},"_hasShrinkwrap":false},"3.6.2":{"name":"zustand","private":false,"version":"3.6.2","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"feef4d4db713992849ddb6b612c72e2ff107681d","_id":"zustand@3.6.2","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-Jw+tM8T3koFjwLLj8ihlYcMqp3nHfpRNOrc/qqwFhmVp7nmrBD/N73bEb5cjveFKNQtAt+7n2S+gnIbhrV/4qA==","shasum":"76bd927c8f82c14d7aae9f592323371b583e564a","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.2.tgz","fileCount":28,"unpackedSize":95270,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDeRMBOzqMHg/bevwvZ6ocfA+Jbir3fMqZYETeK6dcLsAiBdZf1uihPw8IlYTRF7f8ipDrUGpkjWOUkdRAIFV/FnKA=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.2_1635554276905_0.4417638847996488"},"_hasShrinkwrap":false},"3.6.3":{"name":"zustand","private":false,"version":"3.6.3","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"80dc0ec559399e84723f943284c53529a8a731a7","_id":"zustand@3.6.3","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-TJ6QbRxRDiMfiBqEqzgrj1wvtcEiu3sQt5HKFA8IhqPJZNjW+nlJXqVELmaj2vTcMAT4VQ90x8yC+MP1TRWqig==","shasum":"3f500d187daf4dea0ae522b372caf30e72741a9b","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.3.tgz","fileCount":28,"unpackedSize":99883,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCXsSrPn0kayJtVTlmk0mHkduhxav5CHEkMlCUu63Ei1gIhALscqVmP5aZ7wFJpqC7d6/khhmxPg0IzX/ENgrH138xv"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.3_1635855483663_0.4848879710522931"},"_hasShrinkwrap":false},"4.0.0-alpha.6":{"name":"zustand","private":false,"version":"4.0.0-alpha.6","publishConfig":{"tag":"alpha"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.0.0-alpha-5cccacd13-20211101"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/min/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Memoizing selectors\n\nIt is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.\n\n```jsx\nconst fruit = useStore(useCallback(state => state.fruits[id], [id]))\n```\n\nIf a selector doesn't depend on scope, you can define it outside the render function to obtain a fixed reference without useCallback.\n\n```jsx\nconst selector = state => state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(state => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useStore.subscribe(state => state.paw, (paw, previousPaw) => console.log(paw, previousPaw))\n// Subscribe also supports an optional equality function\nconst unsub4 = useStore.subscribe(state => [state.paw, state.fur], console.log, { equalityFn: shallow })\n// Subscribe and fire immediately\nconst unsub5 = useStore.subscribe(state => state.paw, console.log, { fireImmediately: true })\n```\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\n```ts\nimport { State, StateCreator } from 'zustand'\nimport produce, { Draft } from 'immer'\n\nconst immer = <T extends State>(config: StateCreator<T>): StateCreator<T> => \n  (set, get, api) => config((partial, replace) => {\n    const nextState =\n      typeof partial === 'function'\n        ? produce(partial as (state: Draft<T>) => T)\n        : partial as T\n    return set(nextState, replace)\n  }, get, api)\n```\n\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default the 'localStorage' is used\n  }\n))\n```\n\n<details>\n<summary>How to use custom storage engines</summary>\n\nYou can use other storage methods outside of `localStorage` and `sessionStorage` by defining your own `StateStorage`. A custom `StateStorage` object also allows you to write middlware for the persisted store when getting or setting store data.\n\n```tsx\nimport create from \"zustand\"\nimport { persist, StateStorage } from \"zustand/middleware\"\nimport { get, set } from 'idb-keyval' // can use anything: IndexedDB, Ionic Storage, etc.\n\n// Custom storage object\nconst storage: StateStorage = {\n  getItem: async (name: string): Promise<string | null> => {\n    console.log(name, \"has been retrieved\");\n    return await get(name) || null\n  },\n  setItem: async (name: string, value: string): Promise<void> => {\n    console.log(name, \"with value\", value, \"has been saved\");\n    set(name, value)\n  }\n}\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => storage,\n  }\n))\n```\n\n</details>\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will be prefixed to your actions.  \nSerialize options: `devtools(store, { serialize: { options: true } })`.  \n  \ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the store is a hook, passing it as a normal context value may violate rules of hooks. To avoid misusage, a special `createContext` is provided.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","gitHead":"5812d0ee11aabd4120ee0b659fecba4722cbb2de","_id":"zustand@4.0.0-alpha.6","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-cHUBz0aV01Sp70yshuple1NFs/d/yjXpzm4nbEWh4m3D+wvuDEaTqXAqfzFzvUgYVDtW3KN6R9vEjVZR7mCeIw==","shasum":"72fd9874d84e60457ae0ba05e289507c1215b07b","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-alpha.6.tgz","fileCount":30,"unpackedSize":92727,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC+AYXGYTSJiL+yjLLRsmO32RE1VdYYHTUrF+bKfB8kmAiAGCVIPVMN/u9U8z/RQdHtsgAy5c458pPmkpGRAWzZS+Q=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-alpha.6_1635857465601_0.06193278909519151"},"_hasShrinkwrap":false},"3.6.4":{"name":"zustand","private":false,"version":"3.6.4","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"deb5d6f6db723acfed0622b0b43eb6ffff550751","_id":"zustand@3.6.4","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-liH2ZaEOSiEaVEl7N0CVzoKYZCQPpibfsIgB2ksrjvfu17WME8Eh7XV/MCi5OQM5AnbuYbLowplR03UP5yrNYw==","shasum":"2aed404072e3d4538fbc380bcf4eee88b174051d","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.4.tgz","fileCount":28,"unpackedSize":101344,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGvq7gMV9OCG6O8E7XP01Ym0CPTQacQCLCLi01SrakiqAiByh+GwIsBHdbKeXKpuIEakJ2hUt9D2/55NLOmuUKq16w=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.4_1635979558275_0.9524167555982272"},"_hasShrinkwrap":false},"3.6.5":{"name":"zustand","private":false,"version":"3.6.5","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"21a28ff13eb3d13f2944642287e136de998dd8ab","_id":"zustand@3.6.5","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-/WfLJuXiEJimt61KGMHebrFBwckkCHGhAgVXTgPQHl6IMzjqm6MREb1OnDSnCRiSmRdhgdFCctceg6tSm79hiw==","shasum":"42a459397907d6bf0e2375351394733b2f83ee44","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.5.tgz","fileCount":28,"unpackedSize":103951,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDxmiIu0nk0CcxhlsELTUFVTaDkXgaDpphA1fzCktr+XgIgENWouMmqm/RClJsFrh3FR2EG3YODIIYTA2LDAZW3uAo="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.5_1636466609283_0.9191395518470364"},"_hasShrinkwrap":false},"4.0.0-alpha.7":{"name":"zustand","private":false,"version":"4.0.0-alpha.7","publishConfig":{"tag":"alpha"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.0.0-beta-96ca8d915-20211115"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(state => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useStore.subscribe(state => state.paw, (paw, previousPaw) => console.log(paw, previousPaw))\n// Subscribe also supports an optional equality function\nconst unsub4 = useStore.subscribe(state => [state.paw, state.fur], console.log, { equalityFn: shallow })\n// Subscribe and fire immediately\nconst unsub5 = useStore.subscribe(state => state.paw, console.log, { fireImmediately: true })\n```\n\n<details>\n<summary>How to type store with `subscribeWithSelector` in TypeScript</summary>\n\n```ts\nimport create, { GetState, SetState } from 'zustand'\nimport { StoreApiWithSubscribeWithSelector } from 'zustand/middleware'\n\ntype BearState = {\n  paw: boolean\n  snout: boolean\n  fur: boolean\n}\nconst useStore = create<\n  BearState,\n  SetState<BearState>,\n  GetState<BearState>,\n  StoreApiWithSubscribeWithSelector<BearState>\n>(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n```\n\nFor more complex typing with multiple middlewares,\nPlease refer [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n</details>\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\n\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\nThere is a reference implementation in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx) with some use cases.\nYou can use any simplified variant based on your requirement.\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default, 'localStorage' is used\n  }\n))\n```\n\n[See the full documentation for this middleware.](https://github.com/pmndrs/zustand/wiki/Persisting-the-store's-data)\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will be prefixed to your actions.  \nSerialize options: `devtools(store, { serialize: { options: true } })`.  \n  \ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate rules of hooks.\n\nThe flexible method available since v4 is to use vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n}\n```\n\nAlternatively, a special `createContext` is provided since v3.5,\nwhich avoid misusing the store hook.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n\nTyping with multiple middleware might require some TypeScript knowledge. Refer some working examples in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","gitHead":"e91bde6755eb3a50c7f33f6cbd1c7bd8520d9de7","_id":"zustand@4.0.0-alpha.7","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-hv6wSzU4GuzqSxg+eNmjamPs6DCM+zKtgJqXt80J+00e9ZmbGD0A2W7PHks5VPO7iX/M2oe8DsGkicWH9ENGTw==","shasum":"0e03a42ac456acc1d99f59fa6a0ecc3c4c83df26","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-alpha.7.tgz","fileCount":30,"unpackedSize":95844,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhktYKCRA9TVsSAnZWagAAUVYP/1X6cWUd9u1MdiOetPke\nVX0Ec2MYUnFKX3HMBYScnfM17Pnlv7xd5IC5TlKA6ZBtHVoHqWZk1Y8Fdcox\nycV7peHdsoMDIsNM0LmHxkJKY/JXXE8uad04T/QEIEoPUnX/o3kUdDdEYirI\nR7G4ggN6k1JcP3zTWxxKwhMmZWpYGRbQ2PHbhCmtYVHodIi9G1OFFyHM1eZ0\n58ToGWyMQ2LBxRSSOevbqlHVCdsWldmOIylw1Aspe8sWJMAP3xhbWa2qa2v6\nLrPI/b3IUERuiKfjHiOWTnkhr/caQH6G3wLty1og/RzI2XplBE3BJHcQecUk\naQcJJsOhqHprrbJgTFhDvGEHZ3W221BNAIvKG1StcSmMUQqwoCgh+7wFdQ4o\nHVdAaeDi3BKLgBbIkhiIbdfaSm1x/sfu52/pl+oYb4tl4aywzwU8zP2lYM7w\n/MINBFlcLacKAfLOottJTnQJa996YE76aohCjp7RYA4rFkzjMbKDoGXRWtKN\ntjrD77qRgTOpp5OWK6854jMWHfvpAa6DqUyjK9o6SWIsvwEAq6epdRbUrO+0\nruwjgPNpQis+hVAptK43W5v6qiwMpAbdzqJR4oDwGbV/2Kx2+vqs5wrm7kzk\nyU/BBbDKAutLMRd57ZdYOuybKZxXlHSGsa5BGEVzMowXykpi6aJtXYzt6lHT\nuQTP\r\n=7xbN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCngustSLzFltrSbOgpfjvYfyrQSZnUUVFNDk0k1Zu3oAIhAPSNWi1zNRCpE/sISR2QcUuqrcHxO4Qg6XWMbIVlEyTG"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-alpha.7_1637013002481_0.04276278317635307"},"_hasShrinkwrap":false},"4.0.0-beta.0":{"name":"zustand","private":false,"version":"4.0.0-beta.0","publishConfig":{"tag":"next"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.0.0-beta-96ca8d915-20211115"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://codesandbox.io/s/dazzling-moon-itop4).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(state => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useStore.subscribe(state => state.paw, (paw, previousPaw) => console.log(paw, previousPaw))\n// Subscribe also supports an optional equality function\nconst unsub4 = useStore.subscribe(state => [state.paw, state.fur], console.log, { equalityFn: shallow })\n// Subscribe and fire immediately\nconst unsub5 = useStore.subscribe(state => state.paw, console.log, { fireImmediately: true })\n```\n\n<details>\n<summary>How to type store with `subscribeWithSelector` in TypeScript</summary>\n\n```ts\nimport create, { GetState, SetState } from 'zustand'\nimport { StoreApiWithSubscribeWithSelector } from 'zustand/middleware'\n\ntype BearState = {\n  paw: boolean\n  snout: boolean\n  fur: boolean\n}\nconst useStore = create<\n  BearState,\n  SetState<BearState>,\n  GetState<BearState>,\n  StoreApiWithSubscribeWithSelector<BearState>\n>(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n```\n\nFor more complex typing with multiple middlewares,\nPlease refer [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n</details>\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\n\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\nThere is a reference implementation in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx) with some use cases.\nYou can use any simplified variant based on your requirement.\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default, 'localStorage' is used\n  }\n))\n```\n\n[See the full documentation for this middleware.](https://github.com/pmndrs/zustand/wiki/Persisting-the-store's-data)\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will be prefixed to your actions.  \nSerialize options: `devtools(store, { serialize: { options: true } })`.  \n  \ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate rules of hooks.\n\nThe flexible method available since v4 is to use vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n}\n```\n\nAlternatively, a special `createContext` is provided since v3.5,\nwhich avoid misusing the store hook.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n\nTyping with multiple middleware might require some TypeScript knowledge. Refer some working examples in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","gitHead":"c8ae965435beb2cfb5a8bb8106e4e81712e9de25","_id":"zustand@4.0.0-beta.0","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-m7POAHkAeTEQqUdGC9M62/KXSsX6YQu6Gd4CiGZ6FOOTaUp1a0Hm9D8/fnBiMv8rGg0dfZu19JFSbRT9b+qQwA==","shasum":"880bb21d9308ebc733a2ae07edd7c2c7b4f68eed","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-beta.0.tgz","fileCount":40,"unpackedSize":91860,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhk7/KCRA9TVsSAnZWagAAA9kP/itXchzSr0mS23WmChfC\nL7RiJZpf1cyP1dii3lUq06rqAJynrtZv2nepcLeXOYGC2mEJhYHdXTjIo1X1\nDgshxLdWezlxwZp3Im8gUcNfqpJPfuclBfiijbuumVxj7YuZv8Qq3tpyGFYN\nxEy7EEc2hMxmBXJQH38ndP80haNVjoW5OaAnvHh/5ZftayPnP72xBJ0QX+pp\nNa1+rEnjy/aoH9FXq1sR49yfB5EmaMUqAjxN72AgDFPDxWBUclqSb0XWVsh5\nH1XU2MOgYavQ19HqjqaEosspE2TCruxgplX/R277DtXh3EKJkJzKj24qpBmc\n04QA2IaJBNmWZGMvVJnK3ELfbEWhjwJNQUYXTHUlrArAM1l/oNgAloMqvmm6\nkJTWZhryq3NdcxB2OFzAZ+kGMdCnZnk4IZhM5u4NsJDLpgd6fqlwpXe4YfRC\nxrDd4fC07Qvi4l2CReJP5tKEp3XGiqxiVioVFvmdBBI127MWwrQo6pNRJXTN\nIzELVDzXszLuBUB851GpAWK1wTFRbJFgI4xZkM7GSJqpJDL0n/tOjll03RoF\nL8y01sZ+OprLz2WVXC4/ryNGhIsJy7JWVltz/u82X+6UffpsObEukqdiUner\nUvAJgflqxkfFBMLIEQtknvb7kuwml79R/n0rHB7KNjP5G6Rk+GJQioQ1A9QT\nSkJn\r\n=wPAA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE3G8mCKc5s95tFl3iENpFGPWc1HCl22Njaue2WDy7AoAiACvu5O3GosIrAqaGLfoS4tTBlMOLcqNwj8CNVKpkqOOA=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-beta.0_1637072842054_0.9081369116018481"},"_hasShrinkwrap":false},"3.6.6":{"name":"zustand","private":false,"version":"3.6.6","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"d824413669442ff4ef958a273515b0f2e96dd39d","_id":"zustand@3.6.6","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-y4755cIzJHQFEHgTQ5cHrlHdmXMxm5N3DU05Q27yT6rK4lKs2336t5IsAz5q9/GRaoEz6o8SiCOPDhZd5BnneA==","shasum":"3b7473a15813f7af9784233abd052c3b4560bbcc","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.6.tgz","fileCount":40,"unpackedSize":116205,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqhqKCRA9TVsSAnZWagAA7WEP/1giVH8dmflsDDhYnjTk\nGDEOKReUI409KNCE8IYVVtOKoRTPRkQ19gsoAidGSEiLyc47L50PfyKViXAR\nKTFGm2RrvG4oDGHJzqKFecXooqCZurZcmSItdPtvG82x/u+ZHkbPnLG5K6Bm\n8qUGES4TE1OtlGR6mEStoOS0Iw++TWiAyLaCZ97nGMMNPxVSCd6zI3rSNdDR\nN2Kf6mCBJSnpG2gkpYeNzPGP0TG8KGL8TZTUXeVqEhiDh5GRAEEmhoGzac9i\nhg2tOF5x1pprcaIfg/AC+Dx+krqMWLKgqRzJwWYh+sWCiddmrJXFfzxKw8P6\n9Iy7V6zxALggdVMycTPPJNdkt7LrJSRy97lzcsklE7KR/TlUqnhyUQDzg/sx\nMvYCzNEmI7DtayNhgXSoNa7daZlAyJQRSv7oALUfVnBl8qiPdECERB4lXlKQ\n4hbABuOjxmgx5nf/bMDfCAA7OaJpTFADxCwnkl36VWUNOp8WhEPsP74JKBGS\n3Oo9AYlHJ7GULqrV8aRslVcJ6zTapSb16cN2/1z2uxmwOMvMlNW/QIj6zdwI\nhexYOfwc9F+98dpIatS7MZk0cHTsSGlMwug9jSAN87w2uhz7uDSHOBeojhLs\ndy2UgEbbEKhrmhNfsr23VmN04bsMXPSJW02jzZ+xefYhqIzUbpfF2EVFvH3u\nyuh4\r\n=w03J\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDhMll92OZViTgDg8+L1hyuZ55ORvqpuG6TtywlDr2iXwIgFOFPe7qf14t3/YJ7WAPVsedRRtBXtjOmTR9PfO8Q/ds="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.6_1638537865892_0.5051596724514733"},"_hasShrinkwrap":false},"3.6.7":{"name":"zustand","private":false,"version":"3.6.7","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"48d4dc1d4f6d18d29f5b1a10e242fc3f839b6e2e","_id":"zustand@3.6.7","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-bYWKXMfoJwZyliFgidcQ3tJC/F2f2hHq1+lhTk8dVPX2k28i4VnpnKjBGNxAd2QNliV0m455Vm+gDL8LShrV3g==","shasum":"aab5ac0a9d6d21dce752aecd390f373ed9c9d70a","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.7.tgz","fileCount":40,"unpackedSize":116024,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhrw5RCRA9TVsSAnZWagAA7vkP/2HfzX2h/s2Z/TBAAWvT\n/dwiqmrtAAXHy+62OlitXiu/a+KDkoKRvYCJAPPJVGzlM2RyxuDKmvUuR49I\nuZ1m+VdLpjYzBorLePOzlLKrdvvUe+vMVs7IcvE2Vy+cFprM3wWxW1Wz3MSZ\nvJEHjUSj1yyYp7NW/BVlXzRwBXnfuYXqi3Y+SyHSZ1QFim1waKbjoV0zxChS\nTXtjByzWu/olK1OglM+F/rZ5qY76Ym/UUsmTthSnA/se0hlZFgDYm5ZVF3ay\nXi9hk654aD0yg8Y18oarP/ZvR+ymBM81+ZJS7dWxjDzJSyX47N671tx2ZOec\nDIKmpU2erA/CbZ7THXk+RcBD3IV+3uLkFxcQ3SHyEMDJ6hh2edS1BtLCitdc\nzNeVRE6NrhLXNsFyCQEe9M/H1jmcnO/AOyMQEA5wp/vqypQoLvFiDJ4ysBF/\nmzSSEF8BzHQyCFfdyuVi/8ruCm9OzoqZ94gT/wAky3FeprFgZn1HyeGOQ+F1\nc2J109rER4dAwcKJw2/XGhiv6wDarU6JQzOpAptXHVLtk5vQ4YhV3ElYEss1\nKCNZ7a7PjHsMJM+NVTQrZCgN/uW9xsjvEtuMJue6FovZapSXbSewX4uC5XhG\nf+q/sUF4Y75RKGp81aoz3t3zQ31L4f9c67fF0qlUcSCpOamaLGSFvdpOERbj\nJ4yL\r\n=X+Ri\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCGQtxiGfTZHgY+kq7f3rTIjpdZhS/CxblHx3IYVDsQbgIhAIcrmGMzie8yg7TpOGld903GbTefp7Hw9qxDGmGO3plW"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.7_1638862417597_0.8457091276216664"},"_hasShrinkwrap":false},"3.6.8":{"name":"zustand","private":false,"version":"3.6.8","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"1dce3d2f140374630c4a64a897858e9308379c37","_id":"zustand@3.6.8","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-8dqxig1l/o/N4M3DGxhweLVyCvNsd40oU3fXuY4MfqX1notavmjljCnSeTN3FGfYzbo963w4un2ChYsPB/0gKA==","shasum":"17f24351aa9e1fbf46f3addb0bcb81b05940d79f","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.8.tgz","fileCount":40,"unpackedSize":119197,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhxXceCRA9TVsSAnZWagAAqBcQAIUc+K/OA5bWF7yutps/\nyFfylZRu7HSMM+MJe+Sd983xHTePP2hqlP2u4mjMUHZASBUMVdzXPTLu/02G\nWqQNnNfKtX85QLluWLZcBOAZaFOTMAUmNvN1jbbVMNxSFzzAV4PRfZJxdmDe\n9kUDVcanQ+OjIsX2DrLtCzGZHQsp9zPf5TzDlh8SxXCJaDiJwSxA8XUr4TPl\ngXTO/9XKAXPFN33wLUblyUcGdQ/GxXFaIj+zvjWwlXz75jQlG3lnzW1HcJtz\nt1L/YgIADhYxEm5mWQChlB0+OgFzk9Y9pKTGpWowlWOsP/cQwiXZB1ZVzn3u\ntC1oufUjt/OeCCfsxJYjUtADpOR52dowPqECGJ/Pu20Oucko38iP0SWbZ+qf\nCH1X2QkLrsEpa9xGKC8qOYYZyYgRRL1ddT4JkExMrcizDvAfBXLB6L509Auc\ndJiPAhXfVY2ZiFcc0UMk96+kKaPAb+TsHcDqEFYtBrSD3IcczOg10KSiChoL\nAYPHFR6NkbD5/rpCKHNmm+tzDloZp4pvo/orGrYf4UOhY3yzF2qcID6pEcIo\nbsYYqEXDzSZRIigvdx6VQxvPU0QtKpFwD5co3OZmm//KgXA9/O1VFOBwgLLX\nUpULH0NORaxiWTcLJ8flTE2GOPvLvTTWSC8kUjLUe7F7D/CvMh2B7NKL8ETD\nNoD2\r\n=f0eN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFmABaPNWhslyYC5uxpLxyprOIGwv/1M64Yq1qC8Dm6AAiA0tAMH3qJXXLzb53ou2g21FejNzfRIC0prlEKHuzJ+mw=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.8_1640331038630_0.8275024902179473"},"_hasShrinkwrap":false},"3.6.9":{"name":"zustand","private":false,"version":"3.6.9","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"50af477055a6c95aa0aaa0d2f5558b0a85cc32f7","_id":"zustand@3.6.9","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-OvDNu/jEWpRnEC7k8xh8GKjqYog7td6FZrLMuHs/IeI8WhrCwV+FngVuwMIFhp5kysZXr6emaeReMqjLGaldAQ==","shasum":"f61a756ddea9f95c7ee7cfd3af2f88c10078afbc","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.6.9.tgz","fileCount":50,"unpackedSize":172746,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh3D/ZCRA9TVsSAnZWagAAhf0P/3nA5wUdoKvaO/u5jtgV\nvC7ISTeHsz5Lxzy6N14I8TJ38LVeEz1cVaTK/UTS4c53OQFHcLqfAAEYgjMy\njG4atWPIqCu+9E23ABrm8V/Vurk3hR+qyUWNhh59LT7UwFjjg8Jt0cUov8Bh\nOyEtG6dOcs5A0cu4h0jqN5CgRDZj0xdOoa0cY5aSTF+00gzby9TmZv1ILGw0\nJVvCr+nlulwzHQ79O6Yq6q90ajuWBxdoaQ45ndVjnS7rteaktrm3L0WWFjna\nItFPji8gFA7/jMNQPJUp+38tFZW7NgEftAc6ILUJpsdklmRMeoFHWPmE/0fq\ndFDPm+PUOJB8l4xtDwza7Q9YJctbE2dEaK/RLo9YbYL9EY++PGcxABoOeWWb\nESUz/yCjiIhX3YvjG/pGSuGKMyM+AAfIZhTapLv0Kv063hjNlFWCuaN5tcji\n6fGfv/lq0fEaa8ixePpHMveXi4fhnipwPum4BxIZu62s5GItqPhDdqcUPkcG\n4f2YV+NNhMILmrcY7L2b/UiImAWlpLtGVpI+t1vbnPvmNEMD+JlTtW1L/ZdZ\n/4Oan7VaZRAEsJt6ppyifunpnLTgHolfYiuy97GWbc5vDk/jn4B4205DZIjx\n6eRIQAFproOyD2ngaVWmAYMjciRH2ptuE2PHgoN3k5SgkRByOVGuGmDBOp0v\n4lef\r\n=AP1y\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB4bxTTUmKRFJdtDSfkBpx1P0qTjHFUW0j9mvBJCS8Y7AiBZ4X//rgctMZIHOOfF4a2Epw7UjStIzHIXxWQXuUqi3Q=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.6.9_1641824216827_0.03642181295462921"},"_hasShrinkwrap":false},"3.7.0":{"name":"zustand","private":false,"version":"3.7.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"0fce3a9e7460002cf66222c86138095a47474121","_id":"zustand@3.7.0","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-USzVzLGrvZ8VK1/sEsOAmeqa8N7D3OBdZskVaL7DL89Q4QLTYD053iIlZ5KDidyZ+Od80Dttin/f8ZulOLFFDQ==","shasum":"a5c68fb06bdee9c63ad829de2432635be6d0ce69","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.7.0.tgz","fileCount":60,"unpackedSize":202824,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBaH6CRA9TVsSAnZWagAAvooQAIoSUYRuKnLAghr71mQK\nvKaxj1O5o/MYcP6aYLcWjgIZoI2tTepapSAy+Q6J2QVZNCAJsB2oEZhBpleB\nOMmfDjKE4+jKLpsgnBa11xV7zKRVZQ9cz2E2HQdaOgxOhBou3nB0egh+89hu\nRbd+WfF15ihCUjOiKFxMzCkS3RtLLg9gQseSq6KBBCAcP1Map8Z9IU7kL4Tp\nAbOVgGU1gAB8LYILsfY5qrh3WieTVIVFIPs/WBDR5dirsPLTVoU7CC/Vm34w\niHWPduTQnS+C7REHB4fx79XsJNMuA7S4/yVyu7sZZEPCHpE2vVyB0k6B2gbl\n2rCaZPPgO8FD04lEMwPpcq5nnlDv8CJb6/c1GjgUDjR3w4Ypf3JoWCnXa7/a\ntnaCKYZF12JtQx2Bqj++hLjMFnOJGiZohVs8xw8JZyyWG2IskH9IqJqSt01G\n3CdpXyE5JmRMbftGq1XgkQ88YTU0PqfZ7pn6zvcR1gi6UqUAm1NT1DF/AWKM\nbTN0anwqayLV2P5+HrjtjkgKwtLEwDJmu9q3oVWT4KVKzh/iN0I7jGxaNSnC\nY4vT6lk97y2yAo9yOhk55R5wVNJRyyA/gK1GByOypIojP43Dqqqqxkogv7Dn\nvXebvXd10J8Fm05z8QJA4aZI6iOZIZRGmnSSj2d3qOAdLMBEguzsTQbQcFod\n6/2r\r\n=W+fP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCPCMOvJO50BX0fYEvPtIoXHfMlqUKQzH1/VifEp5QHAAIgZcINxo3XYku5yQiWx4JVxnchHmKEuTqnqhRebT4tY64="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.7.0_1644536314753_0.2536413437779397"},"_hasShrinkwrap":false},"4.0.0-beta.1":{"name":"zustand","private":false,"version":"4.0.0-beta.1","publishConfig":{"tag":"next"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.0.0-rc.0"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://githubbox.com/pmndrs/zustand/tree/main/examples).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(state => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useStore.subscribe(state => state.paw, (paw, previousPaw) => console.log(paw, previousPaw))\n// Subscribe also supports an optional equality function\nconst unsub4 = useStore.subscribe(state => [state.paw, state.fur], console.log, { equalityFn: shallow })\n// Subscribe and fire immediately\nconst unsub5 = useStore.subscribe(state => state.paw, console.log, { fireImmediately: true })\n```\n\n<details>\n<summary>How to type store with `subscribeWithSelector` in TypeScript</summary>\n\n```ts\nimport create, { GetState, SetState } from 'zustand'\nimport { StoreApiWithSubscribeWithSelector, subscribeWithSelector } from 'zustand/middleware'\n\ntype BearState = {\n  paw: boolean\n  snout: boolean\n  fur: boolean\n}\nconst useStore = create<\n  BearState,\n  SetState<BearState>,\n  GetState<BearState>,\n  StoreApiWithSubscribeWithSelector<BearState>\n>(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n```\n\nFor more complex typing with multiple middlewares,\nPlease refer [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n</details>\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\n\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\nThere is a reference implementation in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx) with some use cases.\nYou can use any simplified variant based on your requirement.\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default, 'localStorage' is used\n  }\n))\n```\n\n[See the full documentation for this middleware.](https://github.com/pmndrs/zustand/wiki/Persisting-the-store's-data)\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will create a seperate instance named \"MyStore\" in the devtools.\n\nSerialize options: `devtools(store, { serialize: { options: true } })`.\n  \n#### Logging Actions\n\ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\nYou can log a specific action type for each `set` function by passing a third parameter:\n\n```jsx\nconst createBearSlice = (set, get) => ({\n  eatFish: () =>\n    set(\n      (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n      false,\n      \"bear/eatFish\"\n    ),\n})\n```\n\nIf an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter: \n\n```jsx\ndevtools(..., { anonymousActionType: 'unknown', ... })\n```\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate rules of hooks.\n\nThe flexible method available since v4 is to use vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n}\n```\n\nAlternatively, a special `createContext` is provided since v3.5,\nwhich avoid misusing the store hook.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n\nTyping with multiple middleware might require some TypeScript knowledge. Refer some working examples in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","gitHead":"01b42df916cf41846108d6236cb2b2ca76bfd58c","_id":"zustand@4.0.0-beta.1","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-XdKfCM6I2k758AQY/WaUZoC0uQjj7z6NfvvYBo+cxU58M3iMsrHU9w7yUkUNIOKc9T8/5S0j54ga7wVGQWhcvA==","shasum":"70ac562616a5a9f711a036290132432abb73b149","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-beta.1.tgz","fileCount":60,"unpackedSize":172434,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBlMXCRA9TVsSAnZWagAA1sQQAIoAINFvRQQ50hy0TB2A\nhjMqBiAIGpPlpGsLQlUNlFQESTnJ+ygxPmHK3+AlEIdQPn99DWmqDqzW8PCW\n/gQqje5ZwOkOf6iOUx463ayOGpFAuLd/3Zp5QOIjccOWBLImmt67ega7OQnH\nFThu1B0NaAXzokGxspMbejaZ0uUkFH0/uFKgtVqJNcYKPY0JDFKOU0p/LuKk\nYnl60H0HX14XlTKJF+b/f8KVMTldy2x8Tww7I/705YQhsY/k/qQ7y4oSUQRz\nLv+1DgKNU5Z6qABVORoEZE+9a8g/JFw7S/VNMOSPhiwC+DOEEB5GSvaxTYsV\nXJXu1ydaMD38ccQ0QbogwPePGn+RtcZ9KhpAtpbkfw0X/7SkGANOPaeTfIHh\nQinHqnDl93Pftsdfz1YrXhfjNLyQ+nIY5XBrmhaqoaiKK6v/US3s9s4VL0VR\n3pTIftRP4lixWum1UZGJHFTWyFxhlTEU/grn875+mA5aaftTXnqZyX6bHnYc\n+QZe47HvD1R9Uqs7ooryT8mdmTc+DQdpyauSaE1K2w5z8pXm9GEkdKqw3pRL\ns1PbAkexXc1JW8S1TDxAalsBMCRVR2PxgPqqZijhW3VW6xoF1O5KDsLA7qdI\nP1J4tgQpn65N3sjMo4+mJh5Ge8OMh5LXoJ7AkfI+dIlYNPPLsGYdh06MZ1ZM\nmiHS\r\n=o2/x\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG4o9AUsoQq06OBeeE8qvp1C/u00Mh2OsnkTw2EKPitOAiEAxzsxtId+Zc0M7NmIksYGI5uVbHh5xIZN+/hRcMbm+b0="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-beta.1_1644581655291_0.49552424301414844"},"_hasShrinkwrap":false},"3.7.1":{"name":"zustand","private":false,"version":"3.7.1","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"a715e140dd3661922e10bf06790253c75c31f377","_id":"zustand@3.7.1","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-wHBCZlKj+bg03/hP+Tzv24YhnqqP8MCeN9ECPDXoF01062SIbnfl3j9O0znkDw1lNTY0a8WN3F///a0UhhaEqg==","shasum":"7388f0a7175a6c2fd9a2880b383a4bf6cdf6b7c6","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.7.1.tgz","fileCount":60,"unpackedSize":205266,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHDYHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqlbA//drBB9oBWpUuUBShbjD7+/brrxfaIV3XsfUQEqlQAhGI3LbyK\r\nvL+9+Hk5NmyHVwdCXgcGgyKsmQnduIqcnNoQjiQIBoP2bWLcE+yeu+GhHlT8\r\nG1x9TKc3nJrhIC/XLdVieLyuhoG4NfNt7LpcUKwvBMXxwlgDQko9WaKv5L4n\r\n+VULK1ow8hrqrvZlvwfy0U9uQ8UKe8xpZb4q56dIxtHRVEZ4y0X3bQriKfuX\r\n3uKH46sppZmrDLUP/ntYdeqnSr4VPaIJQUtN1uQ3K6a9B+YWpqDSqGaZE7xh\r\nVHb2u9nMEzg8E8b1R+RG+l6xWx5+FO1YEeSPL42TWMGqOr0U3LjcNZD0ht25\r\nRva/lcYfWmJlFS6l+q+xBqEgvauY1DPeLLDPfHhWYpwUn09fsevXXHJOEvJj\r\npJOXxQ/M+nJjEI8YAUwBLPqgUV1Sgk9X6Tr965h6+Y3A0rKiA8rTneJGMaCo\r\nC1sR+t5sSs//lBikdo3p84+kVwfuMS0UMfNTk+GsnJmGKImH4h7AAtW2+ZW0\r\naxHj6btGx4t4A5BwXDJWbaSI6YTGpYv83Ax+LZayg3B/BszW+hHU+InnvdVf\r\nEDEFi+mS51YdMS3uNAvo48R2R3oCDzqZ8ROtiH1YE0xE01cd2ptZRZgsc8rn\r\nTrBZPkTn0OlrOmf3kbtCM/y7OtG2Q+HlIAQ=\r\n=6K7u\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDC5re/BZk+7m6HCYOPTxyqKBFtjYzKk6HNQu4owTcIAAiBLt4/KOfGasEUhZkCGIgS/9ndsuqGYef+zIAVTQmb54Q=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.7.1_1646016007665_0.22702485835538533"},"_hasShrinkwrap":false},"4.0.0-beta.2":{"name":"zustand","private":false,"version":"4.0.0-beta.2","publishConfig":{"tag":"next"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.0.0-rc.1-next-629036a9c-20220224"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://githubbox.com/pmndrs/zustand/tree/main/examples).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(state => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useStore.subscribe(state => state.paw, (paw, previousPaw) => console.log(paw, previousPaw))\n// Subscribe also supports an optional equality function\nconst unsub4 = useStore.subscribe(state => [state.paw, state.fur], console.log, { equalityFn: shallow })\n// Subscribe and fire immediately\nconst unsub5 = useStore.subscribe(state => state.paw, console.log, { fireImmediately: true })\n```\n\n<details>\n<summary>How to type store with `subscribeWithSelector` in TypeScript</summary>\n\n```ts\nimport create, { GetState, SetState } from 'zustand'\nimport { StoreApiWithSubscribeWithSelector, subscribeWithSelector } from 'zustand/middleware'\n\ntype BearState = {\n  paw: boolean\n  snout: boolean\n  fur: boolean\n}\nconst useStore = create<\n  BearState,\n  SetState<BearState>,\n  GetState<BearState>,\n  StoreApiWithSubscribeWithSelector<BearState>\n>(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n```\n\nFor more complex typing with multiple middlewares,\nPlease refer [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n</details>\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\n\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\nThere is a reference implementation in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx) with some use cases.\nYou can use any simplified variant based on your requirement.\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default, 'localStorage' is used\n  }\n))\n```\n\n[See the full documentation for this middleware.](https://github.com/pmndrs/zustand/wiki/Persisting-the-store's-data)\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will create a seperate instance named \"MyStore\" in the devtools.\n\nSerialize options: `devtools(store, { serialize: { options: true } })`.\n  \n#### Logging Actions\n\ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\nYou can log a specific action type for each `set` function by passing a third parameter:\n\n```jsx\nconst createBearSlice = (set, get) => ({\n  eatFish: () =>\n    set(\n      (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n      false,\n      \"bear/eatFish\"\n    ),\n})\n```\n\nIf an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter: \n\n```jsx\ndevtools(..., { anonymousActionType: 'unknown', ... })\n```\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate rules of hooks.\n\nThe flexible method available since v4 is to use vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n}\n```\n\nAlternatively, a special `createContext` is provided since v3.5,\nwhich avoid misusing the store hook.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n\nTyping with multiple middleware might require some TypeScript knowledge. Refer some working examples in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","gitHead":"304ee89cfe86d7a0fab4299cbae91ceb7bb297b1","_id":"zustand@4.0.0-beta.2","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-aJ5ypnOwPIa/uSjdZv/oHChTWPplpFOG/hvWwzkR5ahFiPI5R6ifyObf8Fz1Vi6Obz2wY1N32fT2pNrpT2hzPw==","shasum":"27fdc32b62225cc18976c0cf8866ecee9a9f4a98","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-beta.2.tgz","fileCount":60,"unpackedSize":171718,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHD82ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmoxbw//fSz7b/N4npAug2LSCfipzkJp1Z5LH+ktc/0jryWka/CcMXZb\r\nd26FrHjSvwllcbMQ6K9rPXxVwT/NnZmGZCG/4ofqnww6nceFfGsXPp6+DRIe\r\nZzd/G2HMuw7TPRaJfwaP2id+ecohtRp8zleA2YHUiL3xO+j7zUdlz783U+7B\r\nzqnOZ6Ugbfb6wqhsiM+vwPijcqNpa1pFo8n2IGfBrbY1vtF2hqV2y6nitvwG\r\nI48I/03fbLICHaYAZL4EsdyTjwxFVSRysNsB4eHGOUXPgxSWvIvo/j5/Gkrx\r\nHnxefaLH2QKjGvJ6ET6rJnSK66Cf+LRvgcCJsOzNR6xqPG3ERNrlIsvyhSxc\r\nuDdTaakXQ/HbdC/GREI0+yfaR3jXc3ucmD8CrxNPlLGwL9Lv71n6hIQrUPU0\r\nNlZrwqCk5eJa2y75049a14rMUsYKaOFck/uEHu1DENDHxZB9tBeRiaSvZlJU\r\nBbPzf+rFwJijS/LtcAW3tb4zOyP5lAOnv6ahS3XtQENqdcpxMiggWig34h6/\r\nZD6lpenMMiMUMVVWFE4FMzSNOLiuJf041jZTT72fzULUFK9IfvlB6mycRabB\r\no4ybRwEM+LHhC3Nf9dvJlP84ToDGMjdJQc/vdAsTG6xTL1fTTdt/0GAyaK6A\r\nzOGv8zZSAA5k3UB6Yl+/go36ZFbKwfKM2jM=\r\n=iC2o\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDNXBLsqqlqQw70B1H1hFOdb2N/hQSsMFPt3z9PWmB2yAIgUPRoZadWrBN1ELjlU9F3uHorf4NwYs2PgVCuYsV6Xmw="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-beta.2_1646018358421_0.6025750146984823"},"_hasShrinkwrap":false},"4.0.0-beta.3":{"name":"zustand","private":false,"version":"4.0.0-beta.3","publishConfig":{"tag":"next"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.0.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent to deal with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://githubbox.com/pmndrs/zustand/tree/main/examples).\n\n```bash\nnpm install zustand # or yarn add zustand\n```\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. The `set` function *merges* state.\n\n```jsx\nimport create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n* Simple and un-opinionated\n* Makes hooks the primary means of consuming state\n* Doesn't wrap your app in context providers\n* [Can inform components transiently (without causing render)](#transient-updates-for-often-occuring-state-changes)\n\n### Why zustand over context?\n\n* Less boilerplate\n* Renders components only on changes\n* Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useStore(state => state.nuts)\nconst honey = useStore(state => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the `shallow` equality function.\n\n```jsx\nimport shallow from 'zustand/shallow'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state => ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state => [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state => Object.keys(state.treats), shallow)\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useStore(\n  state => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats)\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from \"lodash-es/omit\"\n\nconst useStore = create(set => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({ }, true), // clears the entire store, actions included\n  deleteTuna: () => set(state => omit(state, ['tuna']), true)\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useStore = create(set => ({\n  fishies: {},\n  fetch: async pond => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useStore = create((set, get) => ({\n  sound: \"grunt\",\n  action: () => {\n    const sound = get().sound\n    // ...\n  }\n})\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.\n\n```jsx\nconst useStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state => state.paw)\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(state => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useStore.subscribe(state => state.paw, (paw, previousPaw) => console.log(paw, previousPaw))\n// Subscribe also supports an optional equality function\nconst unsub4 = useStore.subscribe(state => [state.paw, state.fur], console.log, { equalityFn: shallow })\n// Subscribe and fire immediately\nconst unsub5 = useStore.subscribe(state => state.paw, console.log, { fireImmediately: true })\n```\n\n<details>\n<summary>How to type store with `subscribeWithSelector` in TypeScript</summary>\n\n```ts\nimport create, { GetState, SetState } from 'zustand'\nimport { StoreApiWithSubscribeWithSelector, subscribeWithSelector } from 'zustand/middleware'\n\ntype BearState = {\n  paw: boolean\n  snout: boolean\n  fur: boolean\n}\nconst useStore = create<\n  BearState,\n  SetState<BearState>,\n  GetState<BearState>,\n  StoreApiWithSubscribeWithSelector<BearState>\n>(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n```\n\nFor more complex typing with multiple middlewares,\nPlease refer [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n</details>\n\n## Using zustand without React\n\nZustands core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the api utilities.\n\n```jsx\nimport create from 'zustand/vanilla'\n\nconst store = create(() => ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n```\n\nYou can even consume an existing vanilla store with React:\n\n```jsx\nimport create from 'zustand'\nimport vanillaStore from './vanillaStore'\n\nconst useStore = create(vanillaStore)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occuring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useStore = create(set => ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n```\n\n## Sick of reducers and changing nested state? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport produce from 'immer'\n\nconst useStore = create(set => ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () => set(produce(state => {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state => state.clearForest)\nclearForest();\n```\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = config => (set, get, api) => config(args => {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config => (set, get, api) => config((partial, replace) => {\n  const nextState = typeof partial === 'function'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) => ({\n      bees: false,\n      setBees: (input) => set((state) => void (state.bees = input)),\n    })),\n  ),\n)\n```\n\n<details>\n<summary>How to pipe middlewares</summary>\n\n```js\nimport create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set => ({\n  bears: 1,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n```\n\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\n</details>\n\n<details>\n<summary>How to type immer middleware in TypeScript</summary>\n\nThere is a reference implementation in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx) with some use cases.\nYou can use any simplified variant based on your requirement.\n</details>\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default, 'localStorage' is used\n  }\n))\n```\n\n[See the full documentation for this middleware.](https://github.com/pmndrs/zustand/wiki/Persisting-the-store's-data)\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set => ({\n  grumpiness: 0,\n  dispatch: args => set(state => reducer(state, args)),\n}))\n\nconst dispatch = useStore(state => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api. Try [this](https://codesandbox.io/s/amazing-kepler-swxol) example.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useStore = create(redux(reducer, initialState))\n```\n\n## Calling actions outside a React event handler\n\nBecause React handles `setState` synchronously if it's called outside an event handler. Updating the state outside an event handler will force react to update the components synchronously, therefore adding the risk of encountering the zombie-child effect.\nIn order to fix this, the action needs to be wrapped in `unstable_batchedUpdates`\n\n```jsx\nimport { unstable_batchedUpdates } from 'react-dom' // or 'react-native'\n\nconst useStore = create((set) => ({\n  fishes: 0,\n  increaseFishes: () => set((prev) => ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () => {\n  unstable_batchedUpdates(() => {\n    useStore.getState().increaseFishes()\n  })\n}\n```\n\nMore details: https://github.com/pmndrs/zustand/issues/302\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n```\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.  \n  \nName store: `devtools(store, {name: \"MyStore\"})`, which will create a seperate instance named \"MyStore\" in the devtools.\n\nSerialize options: `devtools(store, { serialize: { options: true } })`.\n  \n#### Logging Actions\n\ndevtools will only log actions from each separated store unlike in a typical *combined reducers* redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\nYou can log a specific action type for each `set` function by passing a third parameter:\n\n```jsx\nconst createBearSlice = (set, get) => ({\n  eatFish: () =>\n    set(\n      (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n      false,\n      \"bear/eatFish\"\n    ),\n})\n```\n\nIf an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter: \n\n```jsx\ndevtools(..., { anonymousActionType: 'unknown', ... })\n```\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate rules of hooks.\n\nThe flexible method available since v4 is to use vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n}\n```\n\nAlternatively, a special `createContext` is provided since v3.5,\nwhich avoid misusing the store hook.\n\n```jsx\nimport create from 'zustand'\nimport createContext from 'zustand/context'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () => create(...)\n\nconst App = () => (\n  <Provider createStore={createStore}>\n    ...\n  </Provider>\n)\n\nconst Component = () => {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n```\n\n<details>\n  <summary>createContext usage in real components</summary>\n\n  ```jsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =>\n    create((set) => ({\n      bears: 0,\n      increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n      removeAllBears: () => set({ bears: 0 })\n    }));\n\n  const Button = () => {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      <Provider createStore={createStore}> \n        <ButtonChild />\n      </Provider>\n    );\n  };\n\n  const ButtonChild = () => {\n    const state = useStore();\n    return (\n      <div>\n        {state.bears}\n        <button\n          onClick={() => {\n            state.increasePopulation();\n          }}\n        >\n          +\n        </button>\n      </div>\n    );\n  };\n\n  export default function App() {\n    return (\n      <div className=\"App\">\n        <Button />\n        <Button />\n      </div>\n    );\n  }\n  ```\n</details>\n\n<details>\n  <summary>createContext usage with initialization from props (in TypeScript)</summary>\n\n  ```tsx\n  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () => void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext<BearState>();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      <Provider\n        createStore={() =>\n          create((set) => ({\n            bears: initialBears,\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\n          }))\n        }\n      >\n        <Button />\n      </Provider>\n  )\n}\n  ```\n</details>\n\n## Typing your store and `combine` middleware\n\n```tsx\n// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) => void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\n// And it is going to work for both\nconst useStore = create<BearState>(set => ({\n  bears: 0,\n  increase: (by) => set(state => ({ bears: state.bears + by })),\n}))\n```\n\nOr, use `combine` and let tsc infer types. This merges two states shallowly.\n\n```tsx\nimport { combine } from 'zustand/middleware'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) => ({ increase: (by: number) => set((state) => ({ bears: state.bears + by })) })\n  ),\n)\n```\n\nTyping with multiple middleware might require some TypeScript knowledge. Refer some working examples in [middlewareTypes.test.tsx](./tests/middlewareTypes.test.tsx).\n  \n## Best practices\n  \n* You may wonder how to organize your code for better maintenance: [Splitting the store into seperate slices](https://github.com/pmndrs/zustand/wiki/Splitting-the-store-into-separate-slices).\n  \n* Recommended usage for this unopinionated library: [Flux inspired practice](https://github.com/pmndrs/zustand/wiki/Flux-inspired-practice).\n  \n## Testing\n\nFor information regarding testing with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/Testing).\n\n## 3rd-Party Libraries\n\nSome users may want to extends Zustand's feature set which can be done using 3rd-party libraries made by the community. For information regarding 3rd-party libraries with Zustand, visit the dedicated [Wiki page](https://github.com/pmndrs/zustand/wiki/3rd-Party-Libraries).\n\n## Comparison with other libraries\n\n- [Difference between zustand and valtio](https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio)\n","readmeFilename":"readme.md","gitHead":"dec16dc0fc87ac57075ddcf021d618622d2e4e0f","_id":"zustand@4.0.0-beta.3","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-cVDcspaK0CXgVmGcXB/oenhT7EFaKqD46pTmg30ciMsOoQN0ZuxEuHzpNIy9ejah0gzBL8aqHN89IMT2uFNOaA==","shasum":"16dc82b48b65ed61fe2bae5dea4501f49bd450c7","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-beta.3.tgz","fileCount":60,"unpackedSize":153543,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDqCJxzCJ+np5sWVATWHZveEFvNRTnz3a7eh8q7zX9E/AIhAOoL/uM4eSZ1LVQ6XF//bkXnm/phbmiSaCZ0vK3GnUCG"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiTNQ3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr6jA//WTfX2HY2rm4uOi76jhjxEbr/lhS/R6jzjC3kFngAmdzzziyS\r\nQWCeTcTc3IZeIXCkfHjbi45oEgomoB/KDbIT99pOWhhGmEPSUThkn/Y7DLF8\r\nesvX+5pc0L3RXZ24/Bq4yoL9OSbpmikP150rZNpbTwHVDY0j0tekLr2bvwQt\r\n+5doIuYQ28QmG4oWgrL0mblIrGphsLGYABGVQQqJ/r5Kryg47Vuu+Uf5J3dE\r\nh6VAM41plpl+Y0Y6UyAWGU1m2jNOQT6g2i2TVtKbgZRB9mLAFWOXA+LqYG40\r\ngANPooB7jIZW3Bn6ySKe8/y3bG3keX3nyfO/egAOHbl8XJ1cx1OVezjCBKoq\r\nN/aPDhbpcXI/PdSc1kdDQgR/BuSkjeEG31QrCYJ98TBmgIQbpTws3LoNfM48\r\nBlulJOf8sY52rDZHFtqtfwWvGLMti9/HXm3DOUxy8rNh0jdPBB5MnzeHxsJY\r\nPMV5ZvKGofpnRcYk+0bOY5qEgQOmIiqMhHDMBdzgOjjx6dqTF3dQwXrSqONb\r\nea91+QXRGsYeMTXkGAmksu4oSzVnEUhFzNm3OPqiPsX5fieom43rzUxGPy0L\r\nNtSdTFDL54P2H1Aa1rSNAqOPSVXX++0RCpWTV9/Qpqkvee/2k6Fu454nY8FE\r\nKYNxFCAUC92uSJr+fMTUnxUI3n3107we7BM=\r\n=D7Wn\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-beta.3_1649202231506_0.359653621350295"},"_hasShrinkwrap":false},"3.7.2":{"name":"zustand","private":false,"version":"3.7.2","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"react":">=16.8"},"peerDependenciesMeta":{"react":{"optional":true}},"gitHead":"4d8003b363cb06ee5b1da498300a60576419485a","_id":"zustand@3.7.2","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-PIJDIZKtokhof+9+60cpockVOq05sJzHCriyvaLBmEJixseQ1a5Kdov6fWZfWOu5SK9c+FhH1jU0tntLxRJYMA==","shasum":"7b44c4f4a5bfd7a8296a3957b13e1c346f42514d","tarball":"https://registry.npmjs.org/zustand/-/zustand-3.7.2.tgz","fileCount":60,"unpackedSize":205560,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDcHV7Qi0UUeyaS8hlfrvnqbx42p6F/voacJbyN3JfNGAIhAP/qYxRHiePPTS4uXOIxRBh6jIG9iX0OEe98dTQlKVqI"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiTu9iACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqFpw//bzJ021kdtae5e+Kaf3x+GQ14s/0vpnoVeHVml8hdcZNlGlhf\r\ndB5QOfsMvtGmHMuNhYPifSvGdleui7DA76xiMjjnRn+9+jKT4mxqiCXMBdCb\r\nJ6e4H67GNHtylgOQRl0scifl3lERtpdl+DcnqjkIIm2HnwU2hj80UH30fKGQ\r\nppb2teHLilOdauOORxYPF65UZVvttBC91kP6XRk8RkCwFbFRcO1EL5kNjXm9\r\nFKpKY6dtZkAEffOfk2nUEfIy8HYiPRP8irhrwxIfopv8iTQEW5KmylsjHb1m\r\n9AFD+TeMPOSgWT0CUfuOKXfiYiQ12jIeJKuzDtMnnEBp++TU1nrv62n7qY+F\r\nWaQRNfINRdOPEBtZmCjGz0ndXoMosGPhNIo11S4EQXDvVp9OFpxj5BhDkAGj\r\ngnIqz3Xt1PndOsJqqCCeRUfl2gr9Ts0RCOVMEMNBomvn7hn7w+cE5C61zv9N\r\nm6A+fUIGvscV2dalKNKxlyONkIMOzweESWtYemd32n6K1x0WImWL9T1sZ0HY\r\nO4Do+67TR27va147QXH1TdI+FXvLd77AAujdiwz+152aDHHD19XMfZ09frXJ\r\nJMnsuQTaz04ak2/CVBoMTuMDsrbKMUpC1K1g6QivQgNXOHntjbELhL+D/L1i\r\n4NxqyrmgD0Cg36sVikwChWbcEzFmTltVHQE=\r\n=+MtI\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_3.7.2_1649340258336_0.34704414413079787"},"_hasShrinkwrap":false},"4.0.0-rc.0":{"name":"zustand","private":false,"version":"4.0.0-rc.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.0.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"79782c3ba3916ec5f3036f6f96efc492cf97db4b","_id":"zustand@4.0.0-rc.0","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-jMimx6EIlLb/hwgnkVZ4Wd/UI73wXedUB6L/kcdIYbOYHcjIFRc7JEB8IXFZt+1rQq2qwuts7kN6kuHhFss47A==","shasum":"644982d70ea1eba3b6983790608bfe101afdd649","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-rc.0.tgz","fileCount":69,"unpackedSize":152480,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDAUc7zttyjOwj4pRySImzfUo5osC8GGYvvDhJSLbmlagIhAMDKrAe/OBiPvlBrV/JZkgCN6A3P5HfUnnopV6v4jX9/"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiXMH2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoHfRAAk6WLlt/NVypeZwUNqRSGG2J8HxV4iJdzJJaxa+51xeDnaiK1\r\nZezPDyTti8eACeYIjZQEC2+abTU5AtflwsA1fk8Ln3i6uPO3HHKDuCMYjDia\r\nccE1Hj6fSa8QSjXmwalZ3FkVrxpy3/hCHepMwPHLq0Qxf+PsGmb947gtpzpy\r\nj4tI5S52NlQMz2axGf55F1AM9t9cN9fof05NuTLcZqgSZRIcezACRL4tLApG\r\nt7294qQUFCCLmL/VXv3+AhDtaparqKom/ul3ivjVjhbhUspSLt2Wm/I7AsEN\r\n+s8TfJwKWdkUSwPXy9PPtZ1Yg4FJTnv9Q5kMcvNRuScQsJ4DIwWBDitO54Vt\r\nZOyupFxhTMCljbF7MNx+EahIPJ5fYCvWpE/UW4bDxRVYH0/2+mrO0ySHTbnZ\r\nvYGT5wkuuVFuDFh9PF7lOltWQW6YePnBkWLz0FVA+0UKSCXikNmyNV6ud108\r\nCvDQNbxzgfHElymaC1zYdacadtvb8+QdTfFn3IjZepNMcJaBLgPaStgYKxUC\r\nLszOF6m21vZ7pd3SWuDFC+Xiaxc/5scICaSv0QTPCSaie58EryZWC0C+UDTS\r\n4b5sBrlPqEQE/t57ZxdBJcyx9Zobk4b8qZJmaWOyl3QdFQbFleOzzdlate5n\r\nqPdEQ6nmKm/U3VcZLa5KCz+oKVxWjqKJy5Q=\r\n=yL4s\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-rc.0_1650246134125_0.8080446621505233"},"_hasShrinkwrap":false},"4.0.0-rc.1":{"name":"zustand","private":false,"version":"4.0.0-rc.1","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.1.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"ec90d993e182f2b668271473b7b7dac566bdbd51","_id":"zustand@4.0.0-rc.1","_nodeVersion":"14.18.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-qgcs7zLqBdHu0PuT3GW4WCIY5SgXdsv30GQMu9Qpp1BA2aS+sNS8l4x0hWuyEhjXkN+701aGWawhKDv6oWJAcw==","shasum":"ec30a3afc03728adec7e1bd7bcc3592176372201","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-rc.1.tgz","fileCount":69,"unpackedSize":156243,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDvgHw9439gBdFH+woTfVbtl7i7fibRAMd6DLeeckQNwgIhALIFZ1qjdif++G9ivM5rCcuhwF6ere+nX1789n9EEsaB"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJia/WyACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrP+xAAgOBZs7wH7hbFYUbopzitGctbP7pfDUfPcQsZsrow4BAeHXiX\r\ncRe+EKV4rxbxL/mBLobcndGyORTm+7THbra077J9q/YHbdTiMRJzoK2dZHwn\r\nBPpfQCBzM8rKtBDdoX7SYODPktcQRPNL+/WNByjO97h4ChO8jjhD0qps1X7f\r\nKfT/Fz04seeT57YhtrWfv66Np38euVC2ld35ltlv3zRPMKl1PI5izAUtBuUz\r\n5GUH/xRzw/jrTNjwHv9aXrZPOoYsLdhy2nNXPcxaOhV12VKvOvreIXeriwdC\r\ncwDMnpaNLLHg9IKXckU3jyVyXfctvseGL4zcdPmCkijs0PQzRuNS8mVLM6si\r\ne73p326d/UEfe2yQYwIWTEZTTKRmiMF6C7PBjH+Wf4ZCQfCquy5djt5YYreP\r\npJ76PUyflwDpf5rytlukZd7+eaoPRbHM/ewnBL4c7VGFs42J+9q0n0bmyp4i\r\nmXu9X20h4/NEMF0QWaAKSlUfk6TES3l9TK7Bhg6a/ldgiywt7E8G8wRVCD1S\r\nrD11RYONLofFHVT4v1oDnAJe6a4JhU4epLKQqst5T4wJOAmS78YaTZFytIbG\r\nMFgfERBroibb3f6Uj0ZMk760QG4yjolLb2cIniDtPN8NhTDmNJTWKiJFnbqy\r\nO08Ud5KZ3RA1YXlD4mf/J4RMOn9kZuTo2Ys=\r\n=KMH6\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-rc.1_1651242418289_0.6531585141531113"},"_hasShrinkwrap":false},"4.0.0-rc.2":{"name":"zustand","private":false,"version":"4.0.0-rc.2","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"ef46c686411e6a089f8316eebe029cbe675a6cfc","_id":"zustand@4.0.0-rc.2","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-eGDJHNmubDTggkMyZciCfI0H+NptOKQICpliJ4hd/XAjEvYp5h525CVJZ8uDfwd9P5JfSFjpBo14Z0qv04NWJA==","shasum":"6b23131d3b5486d5afde7c04946b81674c722abf","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-rc.2.tgz","fileCount":93,"unpackedSize":186599,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBs7Nwtn2m5QjnEPCi/OD+VwJEhphWN7nLpPMEPE0BW0AiEAzog0NdpFMZBTeqDK+VLV5KI/Kh/Q1Lpro7fNdrQL/m8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi1CK+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr0cg//cRFQQ2Hu2mkFzDc+3ydOHSToLreb3XelaR3utqLqOKw8uUDX\r\ngwIpdKt+Bnm37ge8LokxTiF8bXkHyMgPFOrxyhviEW6nikjpBydFusggLUjn\r\ngaDB/5jDxzn6Mzk9UHsrdNgjGGizsjYQtR9j2Y3RHMDY5m7cKv6/VkliZmem\r\nqBCD05YxsSHhN8gbY18pnc9Vbwr4sezfE+xJYaO7Fh9wryDmS55gLgQ0hYAJ\r\nORS6S9m6mTdxhRaTJUpiIBBF3KBmRLvhVonsuw4ADCIe9imXGCu40eV+Fn1D\r\nantJuofuopHAdi7yF6WsI22PBNLP5z+Za5QzPfy3zy21rNEpcgVqqe16w+XC\r\nY+AgaXtoxcazLPESec5ajBaSCD5BcHpHrRR5AeAG0UL8YKmdH+16oe+yG5Kx\r\nNCc/VW0hUYp1UZ8DQHWLWwnwkgxQcg9+kr1RgbtOjyCGTIuI+m99VQf1j6O9\r\ndaSUChfYCYU3u09HTC2Fq4ZsznRzWOr0SgkccBf4GogJUtMz5/vKYE0fZeHl\r\nnrksHb1Iy5hdSG1yjBkkAS2UtlKAIpBMAQBo9veeRt0/8J5REm/Gxm2RCMpc\r\nTHyZaRwXEa3dHgRvqNpPEAtntl/Ir5fnUOPQvrD462UHkvSwAwInfk+VqDXc\r\nlStj1JbuLF8R5CjLUCHblHvyZWDu+3Ws970=\r\n=sTNI\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-rc.2_1658069693771_0.158236069389472"},"_hasShrinkwrap":false},"4.0.0-rc.3":{"name":"zustand","private":false,"version":"4.0.0-rc.3","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"f5490a1512d23a851d307f5fb50cbbfd0dcf951e","_id":"zustand@4.0.0-rc.3","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-vc7TKQJC6T8lx5EupnuUTWXahuRLYjrK9oWLvY+u65ZkLDjocgxDGMrl5VBuxyjXCXyJ3kquN3l/Y2yUj5ZDEg==","shasum":"690fef2c91b106bd6376452cba2b1533267747f9","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-rc.3.tgz","fileCount":93,"unpackedSize":185474,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHnIkkMoFfwIYBEU826yS/7NliZ6pFJlqlkVyp8I4hcBAiEA2uOr+uxiOQMHElmMy/fpLd2LxlmWjQnEwNebUjG/0dQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi10U7ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo4Ig/9GspNh9V5r0GvjARj5DC2mOqixLknKIE6/tx0GiCK1bruZRA9\r\noZruToH+WLfLJ6xzLNhHS5nbxX2yX1skZfkyKVm37cPQEsjXOzD/KWClFKxp\r\n7tu2ZfDt/Q3Q+GExKHxvjwyikiN4ec/+fIif7ym738b7JYoGCFa0v6YuUkk3\r\n2FXxoqvFam7zTtARTfPGR9FxC6sNm7bnUwXdgY1NlRDCzZ/9yfnoLQNVB1il\r\nMqKTR8wGBFwIJQe7Fc2tCynh4Z7ARNYko21fPFAfR8hw2bHMUTOoWj2xF6Pb\r\nJgs9Ly2MK6cC7dr/+IHxD0Bv/txBkZgy/uxMle4c8UscXbTYSgG8j4H4cDDD\r\njwlYyfmse6MzVf9X2T3g1uQxgBbMoJe0kAAIZteT5+1jm7xKeQVrlHK9GvSe\r\nTF2e9Q1xwLf3UiyJaPkOnT2bSt1Z6D9WH7R1kL/i2iISUv1lj7jR9rYHka41\r\nkJh2Mb9vuy4XIQkIs5CnIpSRxt7GrkQNe9K1gZh1d0GGOwEZhgGR9EOTjUKe\r\nBIOD3wqzd3LfIlYTthxVkxHZbj6dlPTGf44/W9K3DFfB9HKEIfzEY4pG0ULO\r\n1PhzsZrTNSs1NHLXcf46gjyXoK676Q/dF5r49NljWerU+jhh5x4pcx10s3t2\r\nVu7IjGCI37vbe3GuSIOMziGCZETOjc6pmQU=\r\n=xuI3\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-rc.3_1658275131474_0.2900226590765904"},"_hasShrinkwrap":false},"4.0.0-rc.4":{"name":"zustand","private":false,"version":"4.0.0-rc.4","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"0fa3abd66c3e4e96a1ddccda8d8c3ba42e1d541c","_id":"zustand@4.0.0-rc.4","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-BP35Rq40GBTKKtYyjLuZogzXGh289xqO8U8ivGIK43nRqURD2dEEImkUci1/jWRUz7J1OPJkUZuNySCho801gQ==","shasum":"ed0e0f1fa3e1c7d0d9021739d862d88048d845da","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0-rc.4.tgz","fileCount":93,"unpackedSize":184909,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIALHNec3k4okkczJEULbuNxr61qhC2ufZPQ1LBSyjrhnAiEAtsPwi5G91+iciEFDeS1ptjVxFjy86I6AiXbiE5G7EeE="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi2I2yACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrRLA/7BqVBDzEPttmDZ6pI72vHRF6sguDX8WflEOsrvQh+P9HhTyv+\r\nVlYFHJCNZ0Se03Axw0DtN0Ml3cruZEyu+ji2T1BN4WCcxsoNzYrceGueuveu\r\nVoySVptgA3gHR5TPPbzCSNPE70Wj6c9ZAgPTJAyfZq/5lC7+l6sVZrVfqe1u\r\nifwsxhHYNUYRPwH+OjbS90yDY+6WWpziQolmAt01LZr8z0WHwuKAaQPAADID\r\nfFE0Za/zPXSVwPXk74VMb5WBeIjxCl5JaRIPuRBEFIZ6l+z6z3kpYij0R6V3\r\nW72iRi93yPO33NsXUQU59F0hgoSvyMyqdupoGpRweHGlia94Km0wp9A3IyFZ\r\nA5J4OJ7+gOlwM8EDkkloin2HMDOQoGpAgXBsSQnVOhKAKKXmuC3riTfQa7rf\r\nPAuqEDSKrDV0DsLmeO68wBjhfxdGQnZl0t4SmIeyMja0fqFpgO3940BSI7yG\r\noPT+Ey9eX7SLtG0T1AyogG5VujGy4T9uVfiQYMaUBwf4xc+hxX8KujFtnWi8\r\nuTdJCoMe1lDLsyuaPYSfIT8evkuJp08cJ7H6i/IrFZaS5s++NzUFQn3oGCPq\r\nbgCG+o6yYw4aCfT+fIgWbnN4HaUD29LHfRxUA1d8DabjMK8acUrTN3sHLWqH\r\nePtaBwo8HX6ZKzXD6nSJJ0y1g2AvNrm9tMY=\r\n=X6ft\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0-rc.4_1658359218647_0.5623454259702252"},"_hasShrinkwrap":false},"4.0.0":{"name":"zustand","private":false,"version":"4.0.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"cf46b424551fd319dafb5fd56c48b3eb4d1959f0","_id":"zustand@4.0.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-OrsfQTnRXF1LZ9/vR/IqN9ws5EXUhb149xmPjErZnUrkgxS/gAHGy2dPNIVkVvoxrVe1sIydn4JjF0dYHmGeeQ==","shasum":"739cba69209ffe67b31e7d6741c25b51496114a7","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.0.0.tgz","fileCount":93,"unpackedSize":186933,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC19GgAY+nCx0Ypx1JLnSaUZbJBsGuqdjsi7evxrD800AIhAJQmkbD72+jn2NnHwO1XAhPnrFnYS6KfxTibL67txUO7"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi30IVACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrIMQ/+IR5rFbtn4kPYDbZsqsv9dx1oxwAm37LEVk7k34Xm/JDHBdcx\r\nuM9m0lv23cy7Ammjzq9KFA98K7428GuoWcplqI64tfTVyU9FJ5W1V407Pbtp\r\nGEohVkLfbKKE00d6FMhwu/JtTTydmyPDIHdgOQv6t95UIgm7lP9HKo/1mE+F\r\nugX+OFB9F8rgTI1CGetBgy7pN6Pv1K/ejcixPGRbb0C+zKpePQndoIo+rQI4\r\nHqKBgzPZA6F8xRLCzCONJWmPdvOHiFl42facF1p1+UK/QajgP9Oxq0BK7r7p\r\nBH+o3pZtBbRIG619PqacryRjEueSSrJQv3ydVkr9fnCwhADMNJJcnuyMuYUh\r\nWmJhCnmmms/AwrInqTZwUxJrXn/RjrL3zAPU/b0feln5YtWzdNmeelAH/EQ/\r\nb4X1hgXvaAzzQYEi0KOK0H1kQcgFfG02i0eXZUwBN0y2tHw/0/ELoQ8FqicI\r\ngmwa7IOM4eN2NKU8DiIUQ9XKWnAqdQnBZMyEjrwc5UIPSuDEzWosgVvOFxHr\r\nB9WNFDXhldYjLTLT2tJNFVQ54FrJaIEhZMQeHg84m0C3X50MQSOcKz5zvRjh\r\n2LtgkZzEmSgnukCMXDciZChnzV4gxT+1iXWxTH4quHJpDwoX9XV6eRxXPEoe\r\n0kXuFtaoc3UZwRYV6bPS4yorGcQxKzZT+jk=\r\n=8yyF\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.0.0_1658798613682_0.3832479885453697"},"_hasShrinkwrap":false},"4.1.0":{"name":"zustand","private":false,"version":"4.1.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"604930988df9152ccc0c661f36da9e6b0b00095f","_id":"zustand@4.1.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-ba39yDM90wFHiCO5AuoP2Tr1vSY5Eggduk0ou91mWL/qKnz2sBq8AcdFoticOftt7AfIHRBENI7WfjkUrqB3vA==","shasum":"9676eeb30ece318707fd739a96dcb7b410d7d2c2","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.1.0.tgz","fileCount":93,"unpackedSize":183575,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGZSYejKzPTdSV8le70wIkShihh0BMUoxNMINf4LOieEAiEAvD5r+mfgb7lD3FF4zycK8v+SftZeg9n/Vb8htwcS76o="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi/spzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrXQA//eXCcGTn2zKXgOE6qUtopxHdhCo+YkBRHuZTrXZPJmn+Syyvj\r\no+4lR/0Y3zBxal1HxZW7UbE6x3K6P/ZUQaczzjS7sgaf6O2bSdebhDw+Rrm5\r\n5XWQ3P3dYZWO6BwQPmifx03C9xrz9eYooVKFkGjosBeVFznjatT040CALBQN\r\nJu2R1Osvg48vtlXm+zTi1nFNiwPOpR4RQnzE76XKDeBmMN8FMFbucBLr2Qtl\r\n+B2ZDxQDWkTXhclGiJbwbbzAG2cgn79mP5S706cT+jGzyuQdu4go4libx/4e\r\nCym+49k+gZxd/TulPKOpUR12QCiHXESLJHsII+ju8YHNLSAri3g+71Uyuszg\r\nXBKWQvIbtp5YHIzpi8nraBSEp1iTn/wMBrbh9vRX5sF/bA2dhrN2b/RUrhtb\r\nGkPRs5CBZy1cpzqDU0kf3l7FC9GtvlmNz50Y6JViBJgieEoVFZmJMmyTwTUh\r\nMTqM9m2wnv2yuZNUTN1zxXe62HJpB19XQm1lpcx0X6FfxwgRCtd72OFJO8Xk\r\n5+bzwtCmYpsN0Lk7CzAdbmvdnSROpYzX26x+6eeSRb68CdeG6jgJmkwyUKR0\r\n89m3Zy0QCITI7LLbTqsfc94mHKe8bmEApfLfM0y0vfckUJ8xXHYjeqbORHK2\r\nc/EVBclt0ZvygMeQ+LXogTyR5B+kKXThzk0=\r\n=qv1C\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.1.0_1660865139110_0.45283794385329257"},"_hasShrinkwrap":false},"4.1.1":{"name":"zustand","private":false,"version":"4.1.1","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"9cfad3eae5845621b1e2a52b98eb9bae9f7b7130","_id":"zustand@4.1.1","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-h4F3WMqsZgvvaE0n3lThx4MM81Ls9xebjvrABNzf5+jb3/03YjNTSgZXeyrvXDArMeV9untvWXRw1tY+ntPYbA==","shasum":"5a61cc755a002df5f041840a414ae6e9a99ee22b","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.1.1.tgz","fileCount":93,"unpackedSize":189413,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCS3HJMmehc7Gk4wBlkvARJq170umj2uiq8KuxvuPU/zQIhAMIAUg5X1KdA+jaAuyT8EyU3WVv+VHjrlFTxvuz/pGkj"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjAupvACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo/VRAApMH1XQQrqZXgan151lI3gKXVYUnPvyjnbvhbo1yF63jQcnuz\r\nOlt8nUuUwxrWP86MvoA5iebuqRFkZ8PmLulolJViUxvLlLLpJz5QRbY4vcGP\r\n1ngltipxZK/ePGLJDflctdpgNcmXIt6rLiJMEHLNbT5Wm3Qisjh1lxs8/Qyn\r\nDPjht1isdVwhDbP49j19dQ/a83G1c+gvGgi6ATVN+rmFgaq84mAWmeh7an1b\r\n9mtPOwmIB9C4AWxek/vODp3RTBSn3zmfcQ7s+27ZxfCsvTfLFVmDugJWxS3m\r\nvCszi2G4q0gU8q84KOtijS9ahqUtH6W5qMkQoIGh4nLZ6f3+3c0SP29kJ7Pp\r\n0BN98LQJbNOfa8xJU/bZBwn1UqVZcBO8Ki7C0KftqcCLf/DKYWRy+AvS7k90\r\nFZdwm57bo9mYGdj89bP9c4vvnZ+l6UQacVcPsD98TvBNMSB+i0qRncpe3rhF\r\nkRWF26EH5NcTmZq0kUaz45gCUBfuXew8X2MDV/YgqDuCrkpuvYOjiGx6qzKv\r\nOAKAAx6cUJ0I6zxhwPTx4M5zNHtYYswjGyp1+aJleJ1MlYHz1NIVoeoPCyZ7\r\nzT7h8azZsgFQOSbWScF7zD5B7v44pdST87K4i3LOYqquNdQtElfR1m82prRR\r\nl4meUHOGd+Cn/E7FY37/2xewuLHkJekfuIs=\r\n=XmvX\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.1.1_1661135471202_0.5622121931696111"},"_hasShrinkwrap":false},"4.1.2":{"name":"zustand","private":false,"version":"4.1.2","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"509175c0b83f3615f1c2b94979fd06aec6c3e8e9","_id":"zustand@4.1.2","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-gcRaKchcxFPbImrBb/BKgujOhHhik9YhVpIeP87ETT7uokEe2Szu7KkuZ9ghjtD+/KKkcrRNktR2AiLXPIbKIQ==","shasum":"4912b24741662d8a84ed1cb52198471cb369c4b6","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.1.2.tgz","fileCount":93,"unpackedSize":190440,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD4UIBcg0GzHebFqlVIlTQDUmV5tdUTntURaeOI4VpefQIgDhCjuP5fRUVSfd7FBF2xFE34yYCUaPsgrebKJ7guCJc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjQl+/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq9dQ/+PBWgywZleHJWbg7+J4LRGfEiPohRekTNhVQibQkqI+5P/S/F\r\nl1EeHojDkTEWNsXH/t5w6PiR0iSoNehHuYT5fo4zl/aGzZen6rfby/qYsDac\r\nQxDUd5CeCAaADKgGslP5IWmXQgXVebHrng8AgAxRC4wERhfL7MftGlwpXsmB\r\nmbpAWbb+tw6FcyD768wj17Ne18U1arpk17CSmPfefrSCX8rC+hHfY9u84IAL\r\n1qqpKB3ZqIc4q7YLDSPkQfv6cVeR6xYK60ntJcgjwCy1f2dqbfzxYxmIIMZ9\r\n5epHBknIP2UMk5fqnti5GbFhlRPlp3VrWXZBmbh826iLy5Iypasdj2O/fsyG\r\nJ9f7O3hITRp8mSs/uXXCqw//qMWEmKyu3WJkKMpxwUvRyrtRWz6YtDvOkxXq\r\nS5diaBZyDiiMv6q0vFT58g0Ss5cJTU+6g0UfBTsTdni+20TntbWq1ngnm+p/\r\nNUKzbIPY2EWAbasMmbyip1GljzGEzjf/afb25BxJJ4NPN4g5hbU1jcOk+and\r\nlCpiUtZB/rXw10g/aCxLO9TSMzfdOCgqdI6Fmkm4xuq0NNFGl9SnEQ4wfdjT\r\nvDOfgB+3H+BSbAI3ImO2QnkTm7dvNoRF27mM2i9FjOTwbzG/lKWxnsPbhY2x\r\nFr6bkTewEi4NZFFNOqcSAIfQSowsGQz2apE=\r\n=mHyv\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.1.2_1665294271449_0.6463873481932956"},"_hasShrinkwrap":false},"4.1.3":{"name":"zustand","private":false,"version":"4.1.3","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","module":"./esm/index.js","import":"./esm/index.mjs","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","module":"./esm/vanilla.js","import":"./esm/vanilla.mjs","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","module":"./esm/middleware.js","import":"./esm/middleware.mjs","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","import":"./esm/middleware/immer.mjs","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","module":"./esm/shallow.js","import":"./esm/shallow.mjs","default":"./shallow.js"},"./context":{"types":"./context.d.ts","module":"./esm/context.js","import":"./esm/context.mjs","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"d6f01e7aa47f85398a3aef8c7187d53ef0e47329","_id":"zustand@4.1.3","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-AdFyr6+4sVD6xlyc/ArQaOrleqzxJEBbAXglufZ5lgvisoz8GUN3icOrKOnX1uRSxmpmdVUQPen9hhymWIzhBg==","shasum":"72bc4c0ed8ed906fbd92c7c20cde8dd6114c018f","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.1.3.tgz","fileCount":93,"unpackedSize":187956,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBmVZpJgvPtz4Kb1AId9P6Cq9eCHry2wmGqGaIM3Fm0oAiEA1AmpDTtyW4FWBySSdaK0OL0+XIoxK0NuMVCq5ZO3T0Q="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjVJiqACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrBXBAAhuNVI1BDe8g1POSrJCK7Dwmm+RbJFfGjMVyeHMSnhwJSp0Td\r\nzCgBi5/oSdDnsqsT5dkK425pnaIB57D7sSKI/pzkSajZAinA0xYvJNChNH72\r\n2PIlhazkvWmTSsDKZNgQp2CVnCB79JMm7aetEgd4hicEkjlxG7YxeUVkQcvL\r\nG3ihEXhtzGcL8kXqOLLZiuh/MIjP5mjFwm6SETcjS/zOb/bno6KalNu7bzrt\r\nLrIIIa30WVTLI1XnvJ8Y3GuGNy7AFA/k1LgeKuKl3d7uXYmCEhqWvyzUO2Ja\r\npMiy1YUv7LBIacdtwEI7dK70UAcr3w+V06s1VRlDWMcL9MWDcPk/oubErZKI\r\n2wNRDlF6C0kJWYXjTQfPpz0yOBEoj5qi+yFP7b4FwIRh+9N1EaX3cnqHYJXJ\r\nQxg71F08s4vTobFXEMf8oTzE5zYQzrvZ4QEPCYYm9YQYV76TFfVcNXyt7P2Y\r\nVC+Nm9CeSB3qjLhByYIIlVI/36QUk0NViKYp1LBt+N8BsqD5RZ84DC48ILJF\r\nHSyBTmQxjkyxog3qJjsBY0Z8VNneiljCVv3/5FhHw6J5F0ddF3Du/KhcVoLU\r\nXfdUCfkqQkVoVrvBm/C1GrmhHgeHj+FAe8bwugLVntZ4bfnC5PoTQI1sVsBA\r\ns9gskyRpPCVMhefguKlxUnGLwdde3Ljd2y4=\r\n=iUPY\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.1.3_1666488490337_0.8363200711196765"},"_hasShrinkwrap":false},"4.1.4":{"name":"zustand","private":false,"version":"4.1.4","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"c2248fd56ae225f80c757eb029514eddffaee2e5","_id":"zustand@4.1.4","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-k2jVOlWo8p4R83mQ+/uyB8ILPO2PCJOf+QVjcL+1PbMCk1w5OoPYpAIxy9zd93FSfmJqoH6lGdwzzjwqJIRU5A==","shasum":"b0286da4cc9edd35e91c96414fa54bfa4652a54d","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.1.4.tgz","fileCount":105,"unpackedSize":204912,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHIIlPC5zBN5Gb3+eSekYQcW/sQyUPLrvEDz9B0OCb2tAiEAtkNrCWLcZS4sBrnVI5nZNd5g6WZPzt1Py5heUrZKPY4="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjX8SkACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr91w/9EWTROeHiBhviMT5LnU4/gdU4rHD/Am0kXMXaOWD9FtQR3+61\r\nLNWkCpZvBUZQRLw1pAkRl/ycIiHtD8zEkRqDC6UxrSiQ3oGxAFVzAIT0/m0a\r\n+PRgVDLAoeQZ7VOAPqB1kmMuY8ymkTPBTXGlU9rNBHuI9+XXyQBoqUABy44d\r\nSzMi25uLBaXffLwcYoRv1aUJHbrYyhKv5GOIf9J7wEpYYy8FdOfgiwB/E7Te\r\ngpBn4oy1oXYWoQ80BjOTWIaXLpQQeaOTLR+AswUkbqlzKIj8TR8xGP4sauoQ\r\ng0PXsrn4jFaucnYAe/ngu+BeaUGFsjBtaXaIMmb164H4t5tTgPLE9ktwLs6Z\r\nJJn5QlJarKi2hf8U4t3pyBZBl2437F+FHSrJhBIlXyatEXbWdm2jJYvIUnDt\r\nY6VzMSwBHPIQP5kjgbnVIa6uqAgxDZS2GCdJ8+HDjpSwL5MFZjghFoTIszjn\r\nHM7zQT2XRk5qk2g+0fzOuD1+ByFbgmFQmZI96hCx8LQxYWBzXswdBnqqr1jc\r\nlbnXjhopVjYcBUe6ed27LenvmHz4ql0u9mw53eB3Tp0+X+fb1LM+Fb8RG4A/\r\nkA0RXKwNiFpta80794jdUHu1icTnXPRs4G95/IYau5gk1xb6cObna2cf/i3l\r\nDIXdlSsuT/IrasRk/wTFdlu7JGl34Hb8Of0=\r\n=7hjQ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.1.4_1667220644102_0.8626045639464921"},"_hasShrinkwrap":false},"4.1.5":{"name":"zustand","private":false,"version":"4.1.5","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"0736a1c8bb54f5af3a5abc9ac043cf3abfc83004","_id":"zustand@4.1.5","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-PsdRT8Bvq22Yyh1tvpgdHNE7OAeFKqJXUxtJvj1Ixw2B9O2YZ1M34ImQ+xyZah4wZrR4lENMoDUutKPpyXCQ/Q==","shasum":"7402b511f5b23ccb0f9ba6d20ae01ec817e16eb6","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.1.5.tgz","fileCount":105,"unpackedSize":209717,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAGTcBzJ2nV1aLxJI5DKqhg0qolmMZrFqagzRKNvZMsWAiEAtufToRXTuep6eL3W4NfWDkbzn+xb4fg/el2L0kZtLRM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjje4/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrNPxAAoJj/xa4eSB/7jN/n4gncXRJFKDNynBXBB7qZfwR5Yu4NiYTI\r\nsQ20aAx3ol9RiHTrQDDItAwxnTnH9ukA5RQRAM8vpTX6TSPkT2rCi2c7UVqi\r\nruXo34Flqpd1xvmZXg3nSlQxt4zM6sg3phZNUyyp/kRMok0ttcKtBjeDTojp\r\nDle/schAs/zB1pMqUvoNofVSvdChPOJgL3/K3HV3rixRT2jy6n8pqluH8nrE\r\n5vh/30L54a63q89m4PXBe8l76uZPSCyinfjO2t+z/WLn0V8oAMYgxT9ScUc0\r\njXyN/eoYn5fEUdF3rFUpgqre+T0LjoG8fwfmDKj9s85LjHzkJiPV1iaOqgOz\r\ns6Q0/zqy4b6ml94C0PydWwHFQyeWfaaniqt9eg6CkGze0mrBew3+U1Vn6win\r\nog+HWxzNnp6FhCn/cHWxAtYEAIcgi7Yt5HUfpGUWOIDhZlAA7UJr4ug72Ojw\r\n+sUhjtkSBBLBP3+lzSPYL5F5e0vTcCv/n89kFviIXDsVIPq0XZh1FLTE6Tr+\r\namUgl/E207bwmcHPpgRChVenNdyvWBQRir7i7K+daV8F7hWUB8rqnOdOXnAS\r\njYvMah18aFu0lcygaSiQIv+6pEDrpQnI84KQyObTAV9tClTw7t2Rokaz1gAs\r\nLq1cwszAt6/s/77UYdUZKgbP5ab9mS3bwFo=\r\n=z1KG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.1.5_1670245951550_0.3057251342635021"},"_hasShrinkwrap":false},"4.2.0":{"name":"zustand","private":false,"version":"4.2.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"e2e383ec321ca7f6a2125d7d044280b344447d75","_id":"zustand@4.2.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-eNwaDoD2FYVnMgtNxiMUhTJO780wonZUzJrPQTLYI0erSIMZF8cniWFW22kGQUECd8rdHRJ/ZJL2XO54c9Ttuw==","shasum":"f6ef9e63794eda9b296979578538a6df6be3e1b0","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.2.0.tgz","fileCount":105,"unpackedSize":267651,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCCYbwzK94eoHZ42lkN2jTgNlaRAyl9nGI5iCQtFj4BfwIgRZpGrOytcAZE1qjRzbMCAm5y3MdmYOsD02+cnJ7osbc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjsN4wACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpsuQ//ThZ4HjyOZ/X/Q0wvNxrhgbRv2Ib7jEhbmOfWksTLSUUzAo3B\r\nztHVvMoWcq0mWqsGXakm4+bkco7jNmZGeC/8YN7QWdcKHTk1AWJr19My4nCL\r\n7l8gf7hU6mZHXZ2hKy5v6mTE40tuYmA/1ePe9Og2ivJinYVK/kCDyPdGw/OW\r\nku9JZSE7TDSlxU/ZqR5+EoHB/Ytn04eoGY17dAhIgr+ZjECXUte8v9vA3YtF\r\nBu4YBlaccqEfjaSMmSTKhJV6oOk8nGhS5quzSNyFE/ba5tEiWCfSJIM9LPCo\r\n7+qTR6Yzk3OR1ukglYZ80UJwA9Oqlfbyo6xP8VvNStDhVaf5l2T1jcWMYHGE\r\nDtjH2/WWdKTw3fMpOcp1F3LFeYDWWDNe/tpvZZ5mDoJxrlWR8WgfVJO+BA7T\r\nydzlKL1RSITCwhiCFdBorl+QYrigETnixsWvD9LjCDNJ7qQxEsUO87o7NqIq\r\ny3glV2bwK5sebshxojc4O9X6OqXD0hmkRgRYq0lu2qEFTbVXX8zT8L0hEB2g\r\nFbXlC/thfNeA+lIuPjBoQGLxcgvuWQKx/qYanDoCwm1n5E4q7uK3u/gC4TXz\r\n61GdvBUalwMrkJp9f8Ooix+iCZ2UhiyHJb/kKDXcIdiCHvtJcDsYOx6311Hx\r\ngjqI33UuU5jmF1eSZAubXdYtECbsxNOeeeo=\r\n=wyW8\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.2.0_1672535600105_0.26087281146573216"},"_hasShrinkwrap":false},"4.3.0":{"name":"zustand","private":false,"version":"4.3.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"a1d40349078149db51ae5d657680ec816c6880ab","_id":"zustand@4.3.0","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-YJtXl3DAd2KLCQl1kkoixrVzM4WzdnaHeEJM5NbF8iLIfWxIJABVn6jgrl50WjWzeFf0Q3QoRkBO/ijN5/2Ujg==","shasum":"ab25113c3b33f14ede7b9d3efa21d2b26df0b7a9","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.0.tgz","fileCount":105,"unpackedSize":278215,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCEo78m3nMcgz7t4g0kI7aqYpqZVvfKp99qCp68Z+fYTgIgdpp7a8dzNFqpNbtJGE7lp8Tq0mnm9KUnEIhGW84YYn4="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjvT99ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpDIxAAo2XaxiwTlRYjZS92MpufUSi3r5pGy14WNrZxk22VYqtLNKyl\r\n3JIV+O1l921DmUJ4LLkeLDZDsS4LNCe/XTnoFpg+8Lwuj6bGMCB3GWgyFvQg\r\nO5YAAB4cXhUYfUv3xFtoj9OSznrUuLnHXUnHiLnziOYg0LCIsf671GsWqpv1\r\nNtpobRzbA+QpBD44a+w10MawVBlIvSW9hbmovm/FJ8LbqxWXc94T19PUcC1l\r\njGCFOr+rWmRy0LA8oPBpp6kQSVwznziIljxcMUF873mBq8vPBGfTaxCanyvN\r\nqaoELultvUCDzLGduldC3tICmNRgjHtUmIpKVInUUT53dhRWx1Y1mXcxGTf6\r\n75fYDTbllODG6WZxlYpqA2Shzhk8cf8hcwpLsgvWVxFdrPR256oUztnYvuqf\r\ng5AgnvyDmW8MWmcsAvW0tBsQzVO6ps967XSBakp6Tl/lDYJuyM0tWOciDdwo\r\nRFKRg0fA3BPNi/kfPeF85oHdiZDyPUMRzF96Y4g1RgRHRAbKBzKI9JRhAZt8\r\nWwmtJoPe/BFhsixSqt4ykwfl/SXb/o4YvDN/8uzTG9TVI6N8dPYCpLbMq1Qa\r\noZXbfaLoxWZRuQC1SdKQ0zuX85d0yRONtbpvNbw+KmIyWYH44E989kc/h8J7\r\n5NWXPNy5wadx06pStEd9ig9nriajfmiX5OE=\r\n=gdby\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.0_1673346941029_0.9162235144032045"},"_hasShrinkwrap":false},"4.3.1":{"name":"zustand","private":false,"version":"4.3.1","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"013a1ca5ff7183924ce8500f66dee42b30e240e3","_id":"zustand@4.3.1","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-EVyo/eLlOTcJm/X5M00rwtbYFXwRVTaRteSvhtbTZUCQFJkNfIyHPiJ6Ke68MSWzcKHpPzvqNH4gC2ZS/sbNqw==","shasum":"76c47ef713c43763953f7a9e518f89efd898e3bb","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.1.tgz","fileCount":105,"unpackedSize":278267,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDobDooWXNt2E+tCBRT3x1ZekdDtmwXm5Isbc/qST2oLAiBm5n4sT3RVfMQ9MgCgRNM0BnHMR6br+s/hkcPbTXz9PQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjvUhoACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrVPBAApIIujNJEklDlf44vDFfoimGDMb4/bysa1yLJ/DLzJzaZwYzm\r\nnIb3u4crbGaOw4t7iD4QbPDnhwkxizsdapAf20CnIkl8qvYQOzaMbzMxr6I0\r\ntrqwcv/Vf1tRJ1hHj5n3qbfCNkAiKCnVH4nvjM1vhMqtvXNqiTcuSMfk3l8Q\r\nfph8/9D2LwjPHQBLBzh9H2L9pCQCIFhSufGTigtEfQaJLbRdxZnsNOI4g2ZQ\r\na+YXWrp/oEIA00cZwQuF0z0DCHnYcV5qtsrYRCtk83KyaHCQHApD+QFib01K\r\n9To/eHcaRODt1OIR4ttTpJ0Wjy3JEJK0xxWh4Omp24NksYPc9gGInA2Pgunv\r\n0wgqR5JC4e1L+d12z0ZbLg4E0s5jlKNHVI/G49ZLfocew/93g/cbduElPgVK\r\n9DHUFkOgAor9xXvQ73SnpmrBge88xO/kV3OJrf1wb4ngIE9xdEXVqwrbW1R0\r\npoftD2IvcFZTigBvI3dIqxmB3MvBvxaJdU15rzshcvVBjVRRwQYcjaG8KCnT\r\nw687Rf4ZJ9icAXVRs5pqZMu78BU1tdpDveJYoDjUOpU80XPDohZZQ6ditBdl\r\nRyyzpV0oRlwClRkc3YLNbRdkvFDB/bEGojcD8oDiHPVOGBXNy3nVda8+Nz6T\r\nxQ0USwcj9mW9eMi/UbtkEI0udi7ErLM/QZk=\r\n=SBfi\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.1_1673349224790_0.030439555256915884"},"_hasShrinkwrap":false},"4.3.2":{"name":"zustand","private":false,"version":"4.3.2","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"types":"./index.d.ts","module":"./esm/index.js","default":"./index.js"},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"types":"./vanilla.d.ts","module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"types":"./middleware.d.ts","module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"types":"./middleware/immer.d.ts","module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"types":"./shallow.d.ts","module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"types":"./context.d.ts","module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"resolutions":{"date-fns":"2.27.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"35e275adf9d67b9521707692353e7360c790aa69","_id":"zustand@4.3.2","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-rd4haDmlwMTVWVqwvgy00ny8rtti/klRoZjFbL/MAcDnmD5qSw/RZc+Vddstdv90M5Lv6RPgWvm1Hivyn0QgJw==","shasum":"bb121fcad84c5a569e94bd1a2695e1a93ba85d39","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.2.tgz","fileCount":105,"unpackedSize":278563,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDIbNF+3h4561KiKNFUkmS/QS/Q+PMaqpuGlMTvHH3AHQIgbTlyqLT7mSDRpOWC+m0lIIumMfX7cTZU4/p91ASHLLo="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjwfDzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqE+BAAlh002kf/8NeW4zkeOWEQne3t3Y5dq/b83G5rejOcB+5j2uD7\r\nerZQds04CEugwtdVAnsiwWAryra1CZtAHVsQwmf8EsQACRJwgNWZdlUibMUy\r\nybYkHDjtDtsyDIomDYOjNf4UaJLEw4WiFPtZkxDlF1TDv4NQtzLrpCQe040x\r\nikh3xkVZFYKU7m8xOmD8yYvGNXLChvcX0tkOZq5KdRBvtJ1yWv9QI4GAt90E\r\n3o4jzkkilIqbWlEO2TyWsUkHibxoOvGGMlVdyNfJ2FqrMhcmRQoHTZjRmKk4\r\nUw4fS9lnAvKUnpOyIDC0oGfC3fUtZxK66o/Ulnhy7i+rkPnBbueVi6UArhZa\r\nm4LuNoP5OfIL/FH5qQ5qB6sfXm9pA4paPtmF6rMP6/7caOHiyVvH1SJMpnQ7\r\nUDn4V8mZyzTYN1OEIcmv8rgrb3h6/V5awBO3ijOJwcwv8fVPPvlZ/JxeXB+R\r\nT9FXr6Y9LSgMxeXMnPtFF9LzxCltCa1wYtvyQK4cfgV/C85MMfhiDkh8TdSw\r\nUkVgdUagO6DwyfV4POw9dgcX8dOZFowcy6bkCrOHG5NEjnntahqe0QX/K4y4\r\nqkbt4aHc7B3oBuDM60+OmhxOIqCg0d18kaKiy/RYRZptguEO0UbZed1uOARx\r\ngWl5CPWnPJxdV7sx6ZgpYfLcfVF3p8BoVhI=\r\n=MMEI\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.2_1673654515370_0.8598689467073868"},"_hasShrinkwrap":false},"4.3.3":{"name":"zustand","private":false,"version":"4.3.3","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"8e3cc002e72d2ebdf8e63e90d1808a84fe84f5a4","_id":"zustand@4.3.3","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-x2jXq8S0kfLGNwGh87nhRfEc2eZy37tSatpSoSIN+O6HIaBhgQHSONV/F9VNrNcBcKQu/E80K1DeHDYQC/zCrQ==","shasum":"c9113499074dde2d6d99c1b5f591e9329572c224","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.3.tgz","fileCount":105,"unpackedSize":278666,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD3NApZquxmWs9ASMUsDYVOI57rlO3xbWtkHqCgxcXuHgIgCiSH72THKYMfX+/Ymx0c/tRQk9eJt78mqGfEAoWY9kA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj5jawACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqeCA//fsCMsmg+ArPlaWmpKKxgm5HhckbWmpIoWVDgOzGp6eLBbD/l\r\nfYuyMYGUwF12oxtQUlu+IbHbtSk/ygwMfkiSDAnwqAdjC/9TKcSRkvaVgQQc\r\ncr/Zj36odOgcpRyGQ+yzcjn3LcyGg5HHsN8p1iss/GTwhn6bJh6087jV7zz0\r\nKHAAeOboVzvjUyjY6NvvEVzUiU7Z0YAyGFr0Jern3AUCMcFJM9SRFTkf5x7U\r\np5oq9FIvIBAi/3QogQG7JHcWWE6yaAjTwv+g/ZE0pzeyyZs5t5fAJ0gLjiXT\r\nKlyscMDsS+nX2aa+xz359tCpNc35Ie0g7klcBdRGi5qRRoUwMVZj96Avl2b3\r\nw2wi0NFqJg/LzdT+mlKndBmCNxkd4ZszAjznfJUmtz2aEv9TCPrg9n5I1D9f\r\nnMm0iE8P61BkcBITW20I04gVlBL8bPoOHwcgyVbZ0CnYjZo2gSKXa9WIxNYm\r\nxAenfmNggpYL+1G/HaDOti/+pz5Foo26wF8Ewt4YChzhBU7hbq4nQ+Bht6zg\r\nXCaclSwUht7R3596i4LHiVoYXcPToKHVvzPvuFlFc+lhzTfWlDh6bnShAvNB\r\naipq7AaL08Sy+nrZtGiIZlP8vppkXkjW/pGJzh45oBMA++Mr28/q1eWE9RPr\r\nnEn3e8QQw/oda15853ORLAIZrHZxjs8LENk=\r\n=XBb9\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.3_1676031664220_0.256589219307084"},"_hasShrinkwrap":false},"4.3.4":{"name":"zustand","private":false,"version":"4.3.4","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"6be46fd900ef2c05c9db5939af0dc8c6c93a37ed","_id":"zustand@4.3.4","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-QSV8MF80I4yM9UCcBhIBr5OcQkiTbZdxDofg5R5vyX49QsEia7sK1iwOhFyH/0hyNVg+h+OzARM76G8MgMno0g==","shasum":"55a1345656348218a690e437ee894dd042ac2440","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.4.tgz","fileCount":105,"unpackedSize":278509,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCqfWcWy8KIpaWPtv7X6FHBcgNc4Q0gXUiRxTCRwPN4wgIhAKv3ZDh30cC7mNSTDdEBoGcGIV1a1IQNY9oJ6BeLbH5Q"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj/ByDACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrHPg//dOEKhjqGnJ6wlKPeA9LlxxUFHmMIKisZ9RFEsq07hj7typjV\r\nqCBx2uH8D8Ss7kqfnfhb2QcMGh6ejgRhZR6E/pxfohkIc/qSvCM1RI+IQ9HJ\r\n9PerFhUuD60DTeH0gePatx/ds2pM7ts3WRtO90yFAJAwTw/cv64/I0CM22Pn\r\nH0+kg/OVU3vx1nVsJRX6tVASIMkluYJM5j+9kaUhGLGtNmcZi/+MC7zgZnef\r\nLsaaS2C5aVlBkL4JDuNATIxdo01W+s3etOPJ83o4liVF2FhAX7dbNoXnD422\r\nMHJRrOYaw3YOxbNBfHXickr7vhbIh3PaYaoreU25YfMG0Z4+qWDEctwgP09Q\r\nikZ+CnYbm/91VjkAtXPXqntrG+pyJsnu22nHPVwlts0e8dvYnd6S5whn4T3b\r\noySa1yky/yrZD38Cfzuf6GblmT4omqQKKctiBcauZeu3RU0AP3PmIypHE/m/\r\nluCzAsaIp0TEO7npZYALcWMhhsCpU24lgaZ1Fd+MWBqksKZ/iYU56awaPCwN\r\n/vXTbmTad1ptM9a/3zwunH7zQN4F+kqbl9NEe3LaK5Hw7ZH2St6l6rMzriGC\r\nWaouAZf1cpQr+F4O7nMVSF2UMEO5MCeHYyRhFbm7TuNdIdNuhrV2cvUlVA6H\r\nSvs4oduVjBxl1CQuISvj1N1OmWXDk6ZhECs=\r\n=78Hi\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.4_1677466754944_0.8204540382847809"},"_hasShrinkwrap":false},"4.3.5":{"name":"zustand","private":false,"version":"4.3.5","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"6f8eca3291f446d2700dcfc0e19bbe2691aa77c7","_id":"zustand@4.3.5","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-2iPUzfwx+g3f0PagOMz2vDO9mZzEp2puFpNe7vrAymVPOEIEUjCPkC4/zy84eAscxIWmTU4j9g6upXYkJdzEFQ==","shasum":"011d2997534f8a187ea7b1d75db56df31f58453d","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.5.tgz","fileCount":105,"unpackedSize":278559,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCrzp1lUwZrvdbWYQpQ9iL5f+gKDekzk+21GcRFy82HvAIgU5mAuy74OhY/Krv0QBN65pKP18/oO5mjUN/BrOJ0t6s="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj/eIyACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmosMQ/9Hh8PXfPkNnoYiF7N24TfZDN+cglKXR+ard8ZyFz7aUopkAd9\r\n8FW72tM88MbNkdw5Gg+g5o7RsBP2e8tuE2C8loWZ8pqzg5xmbSOrJvPeTVKe\r\nUVb7HhqClEGqr0ehaRurwJ6/9YYULxwU3raZDzCb6cxGcxkOZdoKBsfVPN8M\r\nYK+oCFIGcAgriNygxGgVIbHNgzoVTnkLiSnIw5GpzNIOUU2Q/4eF6p9Ua7Nk\r\nQ0taWeWMnpPh9UMTeu06WKgPPqep9VnThPBDoNVeln4TE7u4NqzF47p+nYZ/\r\nKGOh/9YeMxT740SInG8xf7i4sYneyXI53LvEezg1UV7u+6g2eKuy9ipGEB+9\r\n+9g868hMnRffw7HsHL7NwcXI3x4pYlL8INv8qnJ0dZXKllNtuR7GfDYrD/ma\r\nHPa3uthkQfWwNghUUrm0n96rkqdsGflxpHPIh4bHFq2dafw7iqqQeFBniXB2\r\ntarOe6cH07waCWTWLUuxCL8NxNEMEGBTyOgODpIFQi5p4CiP8lm94qjjpTdq\r\n4IMybnwycvBrPygWIG09GmOZQGjPPw9WlrD8NRrozlM5LynggUVUtPVhK1ff\r\nAYQj5rixEpARcTQdhMYejoCCu98oELxfTTyfxxxdhwUPmv/4wmkrN4Rnt5Tc\r\nkWL19E0NDV1UbFKyZVvj0sOaAUWw0myYUq4=\r\n=Yrhp\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.5_1677582898266_0.23142366935341907"},"_hasShrinkwrap":false},"4.3.6":{"name":"zustand","private":false,"version":"4.3.6","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"962f83e01599257aa6eceaaa993965a0e296d359","_id":"zustand@4.3.6","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-6J5zDxjxLE+yukC2XZWf/IyWVKnXT9b9HUv09VJ/bwGCpKNcaTqp7Ws28Xr8jnbvnZcdRaidztAPsXFBIqufiw==","shasum":"ce7804eb75361af0461a2d0536b65461ec5de86f","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.6.tgz","fileCount":105,"unpackedSize":279006,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD97ql7Wq+EIDKkFesQpouX0xTU5AZIIdhXIiYsPwmKWwIgUojO1iUNcgthURGgSlDc/ltW+tB2tbCY5F1uBcOehDU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkBXbhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrP9Q//dsaihZFly763DlxPt1pIsi2tpw+zyP6bEcbwS6Ys9u3E4hbL\r\nYBe8OLfB+VIEhPsZaBlujFEilPbqcpLTErl50Z1jVYTqz7240FI4/zqfiZ2z\r\nlcA1OIYCYmHGUZwQrthUfuUwYJd77vetZa/mGUxq2cuDOmyJXQHTyngJZX2+\r\nvVjD3qWJm2/VOzgIQjZRx3wTHtYMjlIJi2mCoGl+FoMv1UFFAjHw5F5VvunX\r\nXMrIUlnTty0I/PWyCeTMQAJqttJtGCDOMK6bHILK3eNPcF2aefyqw9IJhohM\r\nM1oNikG+E/7g033OW94ZZQYwbdfwjzViKPvCYtFgSe636jMcdb7+ZfFgVF88\r\nKaoTcNCmbMQaDvN30YpPx4EWVFs5kedzG4Xl8Y/KSfEG445H+5kcz7asn0uu\r\nALDHh5dvnkZm6TFrbABodeTp/8ZozRS6SlOeEPxrvWoZq/Wa9MhhMrEvFzmi\r\ne3Mteaip6J20qlKfiWbFrBwopJkh01DV0CZa1JIuTyZ2QvYqZ7RCz70KYp06\r\np8rKtwO0WFU4u+nUnZm5UCPRiUNrMfsHcto7qMJYYMWHGI8c5OLEXolN8sqB\r\nyn9KUFPYfwb1bA8oRBrBYNdvWjMaWZJAmE3gRMn/i2SsG/7H7uI4rD3COmST\r\nnawuReHiNenmUZWnBYDt7yloLYphSaZbyNM=\r\n=sFIh\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.6_1678079713372_0.5038169960647785"},"_hasShrinkwrap":false},"4.3.7":{"name":"zustand","private":false,"version":"4.3.7","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"142b60025b41ed3407c2abb08afe3f048ea6258b","_id":"zustand@4.3.7","_nodeVersion":"16.19.0","_npmVersion":"8.19.3","dist":{"integrity":"sha512-dY8ERwB9Nd21ellgkBZFhudER8KVlelZm8388B5nDAXhO/+FZDhYMuRnqDgu5SYyRgz/iaf8RKnbUs/cHfOGlQ==","shasum":"501b1f0393a7f1d103332e45ab574be5747fedce","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.7.tgz","fileCount":105,"unpackedSize":281818,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBsPsamvB38F/H4hEq5ltriRxdEffnfz7nM1SaXUgpoWAiEAhKLItJT3f1Z5GQfBnHSNoONIV5CPG19lEewAmbUKWx4="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkJvd4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpKyg//QIIEKB2aMdu9s1qvTeV5/p1cYkDSl7D2EFyKkumysKMPk1Lr\r\nkN4qHYwxPvUv+GtTbgCxBKjfaDlTSxQIAHM5JNWOaiJ9ZWQXpn3r/R0q2soL\r\nl4AUgp39wk9Uh1eKVWQBsDXfCkxcBbTxk1pCWHKxkk/fbnhGrb5DJ6nFNu32\r\nzrCQhrnCrHC/nmnPG4xbWaIZTrF2bLSXFG3WOEnYhDLYF+mTY0OzoLyv3to1\r\nWwDbUZWN17eF4j4+Xd3purZNCwZ9vhcuYuWg4EGMf4byqo3XBrksFGRZczHB\r\nxEd1rBPmT3Ti2myjMyOFV8rp+NFheSMf/WDk9MwkaU6Nq9Dd+HBoEDWesy1a\r\nFR5Wc/yn+PqaYOgo11pWMVk8F3IfKLvPoO1Yy193MAc0iBmfOAFJFlhyOvYj\r\nV33FlXzoxMIByTEAVPTUps+Qbupnw24Wn/L0x/gvFTN+8SArYC/WhtYJu+4Q\r\npYB0r13PYeE2dcj91b9D2aaTT3Hph4aoZgcKa1mI9brLK0N17edxh8qEaTR6\r\ndIErmBalWMmxf//zqZ5nvshqcu8jhhYXFA1uhMMkySIccODncdfO1eAo1QX8\r\nvgYK3i1VwD1WMAapse8qAzwzMOV/ZY6/GNDEC9fYi1e1WIkTlD+z+VOAFYmk\r\nu4bEHMmAgW8UDIP0pen+5zlL0lm8/oFsnQ4=\r\n=SUl8\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.7_1680275320567_0.7451527392508406"},"_hasShrinkwrap":false},"4.3.8":{"name":"zustand","private":false,"version":"4.3.8","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"0784028ed7591daf890c22ad4c065205cb35d2be","_id":"zustand@4.3.8","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-4h28KCkHg5ii/wcFFJ5Fp+k1J3gJoasaIbppdgZFO4BPJnsNxL0mQXBSFgOgAdCdBj35aDTPvdAJReTMntFPGg==","shasum":"37113df8e9e1421b0be1b2dca02b49b76210e7c4","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.8.tgz","fileCount":105,"unpackedSize":283363,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEMrPJr8/4VB3hH9g7fqVZXFQdZIsspM4B1r6vlUtGMDAiA/dbpv7iFasEL0Ov3IOCdQgzVI7S3ln8WPFTGvOI5U8A=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkU2LsACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpMHBAAns4jQncVL+0nro47K0XidhJiW9suc7l8b1yjR77LJc7GXOvn\r\nChMp6kVMOlHQvk9EyhbB9Mr1pyeBfZJglRn5YpF4hMyIMJjWjTzF1D0O4cDG\r\nJDsBUHk6uIqlj0nQjrxFVLgVY4wYjSDh7mkmtrLGnwqWS8tLinu4AU5Upn5/\r\n0YtDs+IhBEuMqEZEjUQIhLlCLZ+ShH/YTHO/vUhIe7lFgAC8aplRQ7aC504Q\r\n7RWZl1HpdCtpw0NI1CrwCZLvwHZcu4m9dxuriXS8Ave7rivfU0n/HPDGV+WP\r\nNYDgShLhAQYb176SbKV0wHaddHVUGSDvAqMwnTaFaahaOKSv3l5oBNR2IgDO\r\npC1nx1h9EdtFRQIwWuTs3yViQFo28q3zs9lZKg0rpwYYNLtRRetMKy/IMYpq\r\n0MnnqrkQnZq17qsWGSlcdu3/lNkegp0R60xutKns4KK3v/1fD+0oczW6jjm2\r\nTpQ4gRdKtC6yryHDXTcAuVsGvMWZJGg8+3QrDpFfnJVCnKqzOL4EHkJhaW1v\r\nt2VKFAGZ7B+80W3kyfDKtNJCLlAOaDlPJIxM6edjP7UcOTDMeuhOh6fZFEKR\r\nS/VPSWnchxpd1KUiA12a5fpmTJD1pq5kxuRzYuTCdfXIffQvJbbOfAS3QrKg\r\n8HvapyB10bNInvoJrK6ZB+mqaeloyMulI8k=\r\n=rl7v\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.8_1683186411736_0.2973290270710689"},"_hasShrinkwrap":false},"4.3.9":{"name":"zustand","private":false,"version":"4.3.9","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"react":{"optional":true}},"gitHead":"ea40986e46eafe88a0a508714eedafa8f96f9971","_id":"zustand@4.3.9","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-Tat5r8jOMG1Vcsj8uldMyqYKC5IZvQif8zetmLHs9WoZlntTHmIoNM8TpLRY31ExncuUvUOXehd0kvahkuHjDw==","shasum":"a7d4332bbd75dfd25c6848180b3df1407217f2ad","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.3.9.tgz","fileCount":105,"unpackedSize":283473,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEz/ppmJp/p0YRQLoYKyCnbUAZ7N1IUkiqdLe514D89TAiEAs8Fh5aoHOVxASWFdDwFOp7BcxnNjYu1+fXA7sJbVBhE="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.3.9_1688481525742_0.7323397013297639"},"_hasShrinkwrap":false},"4.4.0":{"name":"zustand","private":false,"version":"4.4.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./traditional":{"types":"./traditional.d.ts","import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":"./esm/traditional.js","default":"./traditional.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","@types/react":">=16.8","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"@types/react":{"optional":true},"react":{"optional":true}},"gitHead":"2778e71c84e54ae638cb8b7d163f895ecf025a33","_id":"zustand@4.4.0","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-2dq6wq4dSxbiPTamGar0NlIG/av0wpyWZJGeQYtUOLegIUvhM2Bf86ekPlmgpUtS5uR7HyetSiktYrGsdsyZgQ==","shasum":"13b3e8ca959dd53d536034440aec382ff91b65c3","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.4.0.tgz","fileCount":117,"unpackedSize":302895,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD0Jgormn9A0mfKVcuQb4j00BVe9ePMqGlKqSV4/t8U7AIgZ8kRFEj9TjjfqsGLc1XmzS5m6fJuO4cGSpI4drqOQ3k="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.4.0_1690855282510_0.15367704963121787"},"_hasShrinkwrap":false},"4.4.1":{"name":"zustand","private":false,"version":"4.4.1","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./traditional":{"types":"./traditional.d.ts","import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":"./esm/traditional.js","default":"./traditional.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","@types/react":">=16.8","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"@types/react":{"optional":true},"react":{"optional":true}},"gitHead":"0426978490e8b14f40443bcbb2332e103076510b","_id":"zustand@4.4.1","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-QCPfstAS4EBiTQzlaGP1gmorkh/UL1Leaj2tdj+zZCZ/9bm0WS7sI2wnfD5lpOszFqWJ1DcPnGoY8RDL61uokw==","shasum":"0cd3a3e4756f21811bd956418fdc686877e8b3b0","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.4.1.tgz","fileCount":117,"unpackedSize":303951,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDzauKvAGlDoC3SKL6PJyx3gdFZr7SwPGXpHZGw+BxoPAiEA/wGhSIEX7wFw5+7UkZ2pHsaDhtw1heaKh0EBT0o/YLM="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.4.1_1691365461788_0.1417959967423741"},"_hasShrinkwrap":false},"4.4.2":{"name":"zustand","private":false,"version":"4.4.2","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./traditional":{"types":"./traditional.d.ts","import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":"./esm/traditional.js","default":"./traditional.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","@types/react":">=16.8","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"@types/react":{"optional":true},"react":{"optional":true}},"gitHead":"ec538e9d4c0b9b5759e6dfd0fd3c9a21f8236949","_id":"zustand@4.4.2","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-qF3/vZHCrjPUX5DvPE3DPDZlh+FiAWRKlP9PI7SlW1MCk8q4vUCDqyWsbF8K41ne0Yx8eeeb0m1cypn1LqUMYQ==","shasum":"e26ad331d0a2e28a7d4aa126b00c7140b34904bb","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.4.2.tgz","fileCount":117,"unpackedSize":297855,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCID7TcKWWGoRI59fKtWJop1msXfBoFd2IxJAIVBphxTYHAiAcmW5RLa8RRWz+fXkLvlmh6q5OaRc5mhmIWSeyV5IRfg=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.4.2_1696254320353_0.9718112957133258"},"_hasShrinkwrap":false},"4.4.3":{"name":"zustand","private":false,"version":"4.4.3","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./vanilla/shallow":{"types":"./vanilla/shallow.d.ts","import":{"types":"./esm/vanilla/shallow.d.mts","default":"./esm/vanilla/shallow.mjs"},"module":"./esm/vanilla/shallow.js","default":"./vanilla/shallow.js"},"./react/shallow":{"types":"./react/shallow.d.ts","import":{"types":"./esm/react/shallow.d.mts","default":"./esm/react/shallow.mjs"},"module":"./esm/react/shallow.js","default":"./react/shallow.js"},"./traditional":{"types":"./traditional.d.ts","import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":"./esm/traditional.js","default":"./traditional.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","@types/react":">=16.8","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"@types/react":{"optional":true},"react":{"optional":true}},"gitHead":"90915ad1b853bfaf3091e86f650b3b3d3be31562","_id":"zustand@4.4.3","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-oRy+X3ZazZvLfmv6viIaQmtLOMeij1noakIsK/Y47PWYhT8glfXzQ4j0YcP5i0P0qI1A4rIB//SGROGyZhx91A==","shasum":"1d54cf7fa4507ad8bf58e2f13e08ddc8a6730128","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.4.3.tgz","fileCount":141,"unpackedSize":321545,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAJgkHpV3OD373RX5XSU1icZdsbq1OAlpwvk3nEYcWodAiEA9xGAFrSJ/fCbttlsK9MC9KhHHmrIrjpTptIxhoh54Jc="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.4.3_1696515925272_0.05735008641312089"},"_hasShrinkwrap":false},"4.4.4":{"name":"zustand","private":false,"version":"4.4.4","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"types":"./index.d.ts","import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":"./esm/index.js","default":"./index.js"},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./vanilla/shallow":{"types":"./vanilla/shallow.d.ts","import":{"types":"./esm/vanilla/shallow.d.mts","default":"./esm/vanilla/shallow.mjs"},"module":"./esm/vanilla/shallow.js","default":"./vanilla/shallow.js"},"./react/shallow":{"types":"./react/shallow.d.ts","import":{"types":"./esm/react/shallow.d.mts","default":"./esm/react/shallow.mjs"},"module":"./esm/react/shallow.js","default":"./react/shallow.js"},"./traditional":{"types":"./traditional.d.ts","import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":"./esm/traditional.js","default":"./traditional.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","@types/react":">=16.8","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"@types/react":{"optional":true},"react":{"optional":true}},"gitHead":"93c8ca564792e2733710493699af11c4e9dc76d8","_id":"zustand@4.4.4","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-5UTUIAiHMNf5+mFp7/AnzJXS7+XxktULFN0+D1sCiZWyX7ZG+AQpqs2qpYrynRij4QvoDdCD+U+bmg/cG3Ucxw==","shasum":"cc06202219972bd61cef1fd10105e6384ae1d5cf","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.4.4.tgz","fileCount":141,"unpackedSize":321530,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCu0/PDuojpexBDv/1cCaYkVZ3WGv+4gAKCOBTV2EqWUgIgD8/xYyYH1zkJBUDtYePrLQq2XaA0MgmbzvobwNYWqxw="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.4.4_1697896918740_0.2193336302458404"},"_hasShrinkwrap":false},"4.4.5":{"name":"zustand","private":false,"version":"4.4.5","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":{"types":"./index.d.ts","default":"./esm/index.js"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./vanilla":{"types":"./vanilla.d.ts","import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":"./esm/vanilla.js","default":"./vanilla.js"},"./middleware":{"types":"./middleware.d.ts","import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":"./esm/middleware.js","default":"./middleware.js"},"./middleware/immer":{"types":"./middleware/immer.d.ts","import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":"./esm/middleware/immer.js","default":"./middleware/immer.js"},"./shallow":{"types":"./shallow.d.ts","import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":"./esm/shallow.js","default":"./shallow.js"},"./vanilla/shallow":{"types":"./vanilla/shallow.d.ts","import":{"types":"./esm/vanilla/shallow.d.mts","default":"./esm/vanilla/shallow.mjs"},"module":"./esm/vanilla/shallow.js","default":"./vanilla/shallow.js"},"./react/shallow":{"types":"./react/shallow.d.ts","import":{"types":"./esm/react/shallow.d.mts","default":"./esm/react/shallow.mjs"},"module":"./esm/react/shallow.js","default":"./react/shallow.js"},"./traditional":{"types":"./traditional.d.ts","import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":"./esm/traditional.js","default":"./traditional.js"},"./context":{"types":"./context.d.ts","import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":"./esm/context.js","default":"./context.js"}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","@types/react":">=16.8","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"@types/react":{"optional":true},"react":{"optional":true}},"gitHead":"e138de70bb8925747a9774eb4089f9bf2521be59","_id":"zustand@4.4.5","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-jgIrBBLKncQW74PA2Lclct3gwD4aPughwGE4FqlXrv3rDqQox7JCn8rwUiFK6ygJcbBAvfTf8fF+ICg7HLD2FQ==","shasum":"0d5571affb30906b0c07c16557f2779ede9f4d8c","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.4.5.tgz","fileCount":141,"unpackedSize":322875,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGqMRl9IvE1FKcN8ZjgXfGPFkx2ZofRhZVRSLW89pw9rAiAKbvOO6Fktdp0a2lTm6NINAeSk58GcZG7LBQU13ejupA=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.4.5_1698762462873_0.986043795079744"},"_hasShrinkwrap":false},"4.4.6":{"name":"zustand","private":false,"version":"4.4.6","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":{"types":"./esm/index.d.ts","default":"./esm/index.js"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":{"types":"./esm/vanilla.d.ts","default":"./esm/vanilla.js"},"default":{"types":"./vanilla.d.ts","default":"./vanilla.js"}},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":{"types":"./esm/middleware.d.ts","default":"./esm/middleware.js"},"default":{"types":"./middleware.d.ts","default":"./middleware.js"}},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":{"types":"./esm/middleware/immer.d.ts","default":"./esm/middleware/immer.js"},"default":{"types":"./middleware/immer.d.ts","default":"./middleware/immer.js"}},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":{"types":"./esm/shallow.d.ts","default":"./esm/shallow.js"},"default":{"types":"./shallow.d.ts","default":"./shallow.js"}},"./vanilla/shallow":{"import":{"types":"./esm/vanilla/shallow.d.mts","default":"./esm/vanilla/shallow.mjs"},"module":{"types":"./esm/vanilla/shallow.d.ts","default":"./esm/vanilla/shallow.js"},"default":{"types":"./vanilla/shallow.d.ts","default":"./vanilla/shallow.js"}},"./react/shallow":{"import":{"types":"./esm/react/shallow.d.mts","default":"./esm/react/shallow.mjs"},"module":{"types":"./esm/react/shallow.d.ts","default":"./esm/react/shallow.js"},"default":{"types":"./react/shallow.d.ts","default":"./react/shallow.js"}},"./traditional":{"import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":{"types":"./esm/traditional.d.ts","default":"./esm/traditional.js"},"default":{"types":"./traditional.d.ts","default":"./traditional.js"}},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":{"types":"./esm/context.d.ts","default":"./esm/context.js"},"default":{"types":"./context.d.ts","default":"./context.js"}}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","@types/react":">=16.8","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"@types/react":{"optional":true},"react":{"optional":true}},"gitHead":"a836356b5e4062abde852af3ba5ee6fc3f1a41fe","_id":"zustand@4.4.6","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-Rb16eW55gqL4W2XZpJh0fnrATxYEG3Apl2gfHTyDSE965x/zxslTikpNch0JgNjJA9zK6gEFW8Fl6d1rTZaqgg==","shasum":"03c78e3e2686c47095c93714c0c600b72a6512bd","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.4.6.tgz","fileCount":141,"unpackedSize":323701,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDZkJ+bQXmwVwYBTob+OA0Vrf0vkXHFt6giLF9cOtM7ZQIgY5skSVJPaTS93LHpCvPWd5cwtgryIgtlMNQkUYK+Rx4="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.4.6_1698969573363_0.8766573966471354"},"_hasShrinkwrap":false},"4.4.7":{"name":"zustand","private":false,"version":"4.4.7","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":{"types":"./esm/index.d.ts","default":"./esm/index.js"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":{"types":"./esm/vanilla.d.ts","default":"./esm/vanilla.js"},"default":{"types":"./vanilla.d.ts","default":"./vanilla.js"}},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":{"types":"./esm/middleware.d.ts","default":"./esm/middleware.js"},"default":{"types":"./middleware.d.ts","default":"./middleware.js"}},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":{"types":"./esm/middleware/immer.d.ts","default":"./esm/middleware/immer.js"},"default":{"types":"./middleware/immer.d.ts","default":"./middleware/immer.js"}},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":{"types":"./esm/shallow.d.ts","default":"./esm/shallow.js"},"default":{"types":"./shallow.d.ts","default":"./shallow.js"}},"./vanilla/shallow":{"import":{"types":"./esm/vanilla/shallow.d.mts","default":"./esm/vanilla/shallow.mjs"},"module":{"types":"./esm/vanilla/shallow.d.ts","default":"./esm/vanilla/shallow.js"},"default":{"types":"./vanilla/shallow.d.ts","default":"./vanilla/shallow.js"}},"./react/shallow":{"import":{"types":"./esm/react/shallow.d.mts","default":"./esm/react/shallow.mjs"},"module":{"types":"./esm/react/shallow.d.ts","default":"./esm/react/shallow.js"},"default":{"types":"./react/shallow.d.ts","default":"./react/shallow.js"}},"./traditional":{"import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":{"types":"./esm/traditional.d.ts","default":"./esm/traditional.js"},"default":{"types":"./traditional.d.ts","default":"./traditional.js"}},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":{"types":"./esm/context.d.ts","default":"./esm/context.js"},"default":{"types":"./context.d.ts","default":"./context.js"}}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"immer":">=9.0","@types/react":">=16.8","react":">=16.8"},"peerDependenciesMeta":{"immer":{"optional":true},"@types/react":{"optional":true},"react":{"optional":true}},"resolutions":{"vite":"4.5.0"},"gitHead":"50a8677dba4acecc1e313dcb08d4cf2ac1ab918c","_id":"zustand@4.4.7","_nodeVersion":"18.14.0","_npmVersion":"9.3.1","dist":{"integrity":"sha512-QFJWJMdlETcI69paJwhSMJz7PPWjVP8Sjhclxmxmxv/RYI7ZOvR5BHX+ktH0we9gTWQMxcne8q1OY8xxz604gw==","shasum":"355406be6b11ab335f59a66d2cf9815e8f24038c","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.4.7.tgz","fileCount":141,"unpackedSize":324231,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHgNSqvkSzmL1wMMReh9hA5Mce01wJglGeTLwagUCSe0AiEAjKK8b9rAJ/17NGxqot9KVp2Rcl5+1W1XRpr0bOUMEKs="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.4.7_1701131257035_0.37706880655479846"},"_hasShrinkwrap":false},"4.5.0":{"name":"zustand","private":false,"version":"4.5.0","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":{"types":"./esm/index.d.ts","default":"./esm/index.js"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":{"types":"./esm/vanilla.d.ts","default":"./esm/vanilla.js"},"default":{"types":"./vanilla.d.ts","default":"./vanilla.js"}},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":{"types":"./esm/middleware.d.ts","default":"./esm/middleware.js"},"default":{"types":"./middleware.d.ts","default":"./middleware.js"}},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":{"types":"./esm/middleware/immer.d.ts","default":"./esm/middleware/immer.js"},"default":{"types":"./middleware/immer.d.ts","default":"./middleware/immer.js"}},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":{"types":"./esm/shallow.d.ts","default":"./esm/shallow.js"},"default":{"types":"./shallow.d.ts","default":"./shallow.js"}},"./vanilla/shallow":{"import":{"types":"./esm/vanilla/shallow.d.mts","default":"./esm/vanilla/shallow.mjs"},"module":{"types":"./esm/vanilla/shallow.d.ts","default":"./esm/vanilla/shallow.js"},"default":{"types":"./vanilla/shallow.d.ts","default":"./vanilla/shallow.js"}},"./react/shallow":{"import":{"types":"./esm/react/shallow.d.mts","default":"./esm/react/shallow.mjs"},"module":{"types":"./esm/react/shallow.d.ts","default":"./esm/react/shallow.js"},"default":{"types":"./react/shallow.d.ts","default":"./react/shallow.js"}},"./traditional":{"import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":{"types":"./esm/traditional.d.ts","default":"./esm/traditional.js"},"default":{"types":"./traditional.d.ts","default":"./traditional.js"}},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":{"types":"./esm/context.d.ts","default":"./esm/context.js"},"default":{"types":"./context.d.ts","default":"./context.js"}}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"@types/react":">=16.8","immer":">=9.0.6","react":">=16.8"},"peerDependenciesMeta":{"@types/react":{"optional":true},"immer":{"optional":true},"react":{"optional":true}},"gitHead":"13830c11343abe59a616a2cde8411a15c176b83d","_id":"zustand@4.5.0","_nodeVersion":"18.16.0","_npmVersion":"9.5.1","dist":{"integrity":"sha512-zlVFqS5TQ21nwijjhJlx4f9iGrXSL0o/+Dpy4txAP22miJ8Ti6c1Ol1RLNN98BMib83lmDH/2KmLwaNXpjrO1A==","shasum":"141354af56f91de378aa6c4b930032ab338f3ef0","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.5.0.tgz","fileCount":141,"unpackedSize":326409,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDNS+d0v7IIOLpaY3KLz46nOBaPk+zrB8CQA+ds9Zy/xAIhAM8ZfZcYzXsow8fadKEl5pkCfpupa063vBIaLaiUQkub"}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.5.0_1705713849490_0.0036693145820563267"},"_hasShrinkwrap":false},"5.0.0-alpha.0":{"name":"zustand","private":false,"version":"5.0.0-alpha.0","publishConfig":{"tag":"next"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{">=4.5":{"esm/*":["esm/*"],"*":["*"]},"*":{"esm/*":["ts_version_4.5_and_above_is_required.d.ts"],"*":["ts_version_4.5_and_above_is_required.d.ts"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./*":{"import":{"types":"./esm/*.d.mts","default":"./esm/*.mjs"},"default":{"types":"./*.d.ts","default":"./*.js"}}},"sideEffects":false,"engines":{"node":">=12.20.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"@types/react":">=18.0","immer":">=9.0.6","react":">=18.0","use-sync-external-store":">=1.2.0"},"peerDependenciesMeta":{"@types/react":{"optional":true},"immer":{"optional":true},"react":{"optional":true},"use-sync-external-store":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/pmndrs/zustand/lint-and-type.yml?branch=main&style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy API based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent dealing with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://githubbox.com/pmndrs/zustand/tree/main/examples/demo).\n\n```bash\nnpm install zustand # or yarn add zustand or pnpm add zustand\n```\n\n:warning: This readme is written for JavaScript users. If you are a TypeScript user, be sure to check out our [TypeScript Usage section](#typescript-usage).\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the `set` function [merges state](./docs/guides/immutable-state-and-merging.md) to help it.\n\n```jsx\nimport { create } from 'zustand'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers are needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useBearStore((state) => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useBearStore((state) => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n- Simple and un-opinionated\n- Makes hooks the primary means of consuming state\n- Doesn't wrap your app in context providers\n- [Can inform components transiently (without causing render)](#transient-updates-for-often-occurring-state-changes)\n\n### Why zustand over context?\n\n- Less boilerplate\n- Renders components only on changes\n- Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useBearStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useBearStore((state) => state.nuts)\nconst honey = useBearStore((state) => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can use [useShallow](./docs/guides/prevent-rerenders-with-use-shallow.md) to prevent unnecessary rerenders when the selector output does not change according to shallow equal.\n\n```jsx\nimport { create } from 'zustand'\nimport { useShallow } from 'zustand/react/shallow'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useBearStore(\n  useShallow((state) => ({ nuts: state.nuts, honey: state.honey })),\n)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useBearStore(\n  useShallow((state) => [state.nuts, state.honey]),\n)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useBearStore(useShallow((state) => Object.keys(state.treats)))\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useBearStore(\n  (state) => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats),\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from 'lodash-es/omit'\n\nconst useFishStore = create((set) => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({}, true), // clears the entire store, actions included\n  deleteTuna: () => set((state) => omit(state, ['tuna']), true),\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useFishStore = create((set) => ({\n  fishies: {},\n  fetch: async (pond) => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  },\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useSoundStore = create((set, get) => ({\n  sound: 'grunt',\n  action: () => {\n    const sound = get().sound\n    ...\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way or act upon the store. For these cases, the resulting hook has utility functions attached to its prototype.\n\n:warning: This technique is not recommended for adding state in [React Server Components](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md) (typically in Next.js 13 and above). It can lead to unexpected bugs and privacy issues for your users. For more details, see [#2200](https://github.com/pmndrs/zustand/discussions/2200).\n\n```jsx\nconst useDogStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useDogStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useDogStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseDogStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useDogStore((state) => state.paw)\n  ...\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with a selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useDogStore = create(\n  subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })),\n)\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useDogStore.subscribe((state) => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useDogStore.subscribe(\n  (state) => state.paw,\n  (paw, previousPaw) => console.log(paw, previousPaw),\n)\n// Subscribe also supports an optional equality function\nconst unsub4 = useDogStore.subscribe(\n  (state) => [state.paw, state.fur],\n  console.log,\n  { equalityFn: shallow },\n)\n// Subscribe and fire immediately\nconst unsub5 = useDogStore.subscribe((state) => state.paw, console.log, {\n  fireImmediately: true,\n})\n```\n\n## Using zustand without React\n\nZustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the API utilities.\n\n```jsx\nimport { createStore } from 'zustand/vanilla'\n\nconst store = createStore((set) => ...)\nconst { getState, setState, subscribe, getInitialState } = store\n\nexport default store\n```\n\nYou can use a vanilla store with `useStore` hook available since v4.\n\n```jsx\nimport { useStore } from 'zustand'\nimport { vanillaStore } from './vanillaStore'\n\nconst useBoundStore = (selector) => useStore(vanillaStore, selector)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occurring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useScratchStore = create((set) => ({ scratches: 0, ... }))\n\nconst Component = () => {\n  // Fetch initial state\n  const scratchRef = useRef(useScratchStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useScratchStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n  ...\n```\n\n## Sick of reducers and changing nested states? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport { produce } from 'immer'\n\nconst useLushStore = create((set) => ({\n  lush: { forest: { contains: { a: 'bear' } } },\n  clearForest: () =>\n    set(\n      produce((state) => {\n        state.lush.forest.contains = null\n      }),\n    ),\n}))\n\nconst clearForest = useLushStore((state) => state.clearForest)\nclearForest()\n```\n\n[Alternatively, there are some other solutions.](./docs/guides/updating-state.md#with-immer)\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = (config) => (set, get, api) =>\n  config(\n    (...args) => {\n      console.log('  applying', args)\n      set(...args)\n      console.log('  new state', get())\n    },\n    get,\n    api,\n  )\n\nconst useBeeStore = create(\n  log((set) => ({\n    bees: false,\n    setBees: (input) => set({ bees: input }),\n  })),\n)\n```\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport { create } from 'zustand'\nimport { persist, createJSONStorage } from 'zustand/middleware'\n\nconst useFishStore = create(\n  persist(\n    (set, get) => ({\n      fishes: 0,\n      addAFish: () => set({ fishes: get().fishes + 1 }),\n    }),\n    {\n      name: 'food-storage', // name of the item in the storage (must be unique)\n      storage: createJSONStorage(() => sessionStorage), // (optional) by default, 'localStorage' is used\n    },\n  ),\n)\n```\n\n[See the full documentation for this middleware.](./docs/integrations/persisting-store-data.md)\n\n## Immer middleware\n\nImmer is available as middleware too.\n\n```jsx\nimport { create } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\nconst useBeeStore = create(\n  immer((set) => ({\n    bees: 0,\n    addBees: (by) =>\n      set((state) => {\n        state.bees += by\n      }),\n  })),\n)\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: 'INCREASE', decrease: 'DECREASE' }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase:\n      return { grumpiness: state.grumpiness + by }\n    case types.decrease:\n      return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useGrumpyStore = create((set) => ({\n  grumpiness: 0,\n  dispatch: (args) => set((state) => reducer(state, args)),\n}))\n\nconst dispatch = useGrumpyStore((state) => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets the initial state, and adds a dispatch function to the state itself and the vanilla API.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useGrumpyStore = create(redux(reducer, initialState))\n```\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore = create(devtools((set) => ...))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)))\n```\n\nOne redux devtools connection for multiple stores\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore1 = create(devtools((set) => ..., { name, store: storeName1 }))\nconst usePlainStore2 = create(devtools((set) => ..., { name, store: storeName2 }))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName3 })\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName4 })\n```\n\nAssigning different connection names will separate stores in redux devtools. This also helps group different stores into separate redux devtools connections.\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.\n\nName store: `devtools(..., {name: \"MyStore\"})`, which will create a separate instance named \"MyStore\" in the devtools.\n\nSerialize options: `devtools(..., { serialize: { options: true } })`.\n\n#### Logging Actions\n\ndevtools will only log actions from each separated store unlike in a typical _combined reducers_ redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\nYou can log a specific action type for each `set` function by passing a third parameter:\n\n```jsx\nconst useBearStore = create(devtools((set) => ({\n  ...\n  eatFish: () => set(\n    (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n    false,\n    'bear/eatFish'\n  ),\n  ...\n```\n\nYou can also log the action's type along with its payload:\n\n```jsx\n  ...\n  addFishes: (count) => set(\n    (prev) => ({ fishes: prev.fishes + count }),\n    false,\n    { type: 'bear/addFishes', count, }\n  ),\n  ...\n```\n\nIf an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter:\n\n```jsx\ndevtools(..., { anonymousActionType: 'unknown', ... })\n```\n\nIf you wish to disable devtools (on production for instance). You can customize this setting by providing the `enabled` parameter:\n\n```jsx\ndevtools(..., { enabled: false, ... })\n```\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate the rules of hooks.\n\nThe recommended method available since v4 is to use the vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n```\n\n## TypeScript Usage\n\nBasic typescript usage doesn't require anything special except for writing `create<State>()(...)` instead of `create(...)`...\n\n```ts\nimport { create } from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\nimport type {} from '@redux-devtools/extension' // required for devtools typing\n\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\nconst useBearStore = create<BearState>()(\n  devtools(\n    persist(\n      (set) => ({\n        bears: 0,\n        increase: (by) => set((state) => ({ bears: state.bears + by })),\n      }),\n      {\n        name: 'bear-storage',\n      },\n    ),\n  ),\n)\n```\n\nA more complete TypeScript guide is [here](docs/guides/typescript.md).\n\n## Best practices\n\n- You may wonder how to organize your code for better maintenance: [Splitting the store into separate slices](./docs/guides/slices-pattern.md).\n- Recommended usage for this unopinionated library: [Flux inspired practice](./docs/guides/flux-inspired-practice.md).\n- [Calling actions outside a React event handler in pre-React 18](./docs/guides/event-handler-in-pre-react-18.md).\n- [Testing](./docs/guides/testing.md)\n- For more, have a look [in the docs folder](./docs/)\n\n## Third-Party Libraries\n\nSome users may want to extend Zustand's feature set which can be done using third-party libraries made by the community. For information regarding third-party libraries with Zustand, visit [the doc](./docs/integrations/third-party-libraries.md).\n\n## Comparison with other libraries\n\n- [Difference between zustand and other state management libraries for React](https://docs.pmnd.rs/zustand/getting-started/comparison)\n","readmeFilename":"readme.md","gitHead":"e5b64ccc197a9e6c4e59188e9b082e4e2da0ca30","_id":"zustand@5.0.0-alpha.0","_nodeVersion":"18.16.0","_npmVersion":"9.5.1","dist":{"integrity":"sha512-lFKM5iO3ScRIJ/SgfTgtyNmp6yIjJMccDgVqa8LAuZaV8kzm2k85k5/t61xZMJrpMMgt7ftQMJNdhEt9KYuILQ==","shasum":"06d69de146bf33b0089e5b17e1514edcbe0719a0","tarball":"https://registry.npmjs.org/zustand/-/zustand-5.0.0-alpha.0.tgz","fileCount":48,"unpackedSize":99140,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHuq6klKOdWVqsV6EPTV8BHqDTCKjZQFsllUCc4liKD9AiA9ihaW593DgALAn+oyZuhwWshRaDJeBPZbvjnrMTkoJw=="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_5.0.0-alpha.0_1705728277561_0.6451568260793858"},"_hasShrinkwrap":false},"5.0.0-alpha.1":{"name":"zustand","private":false,"version":"5.0.0-alpha.1","publishConfig":{"tag":"next"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{">=4.5":{"esm/*":["esm/*"],"*":["*"]},"*":{"esm/*":["ts_version_4.5_and_above_is_required.d.ts"],"*":["ts_version_4.5_and_above_is_required.d.ts"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./*":{"import":{"types":"./esm/*.d.mts","default":"./esm/*.mjs"},"default":{"types":"./*.d.ts","default":"./*.js"}}},"sideEffects":false,"engines":{"node":">=12.20.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"@types/react":">=18.0","immer":">=9.0.6","react":">=18.0","use-sync-external-store":">=1.2.0"},"peerDependenciesMeta":{"@types/react":{"optional":true},"immer":{"optional":true},"react":{"optional":true},"use-sync-external-store":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/pmndrs/zustand/lint-and-type.yml?branch=main&style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy API based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent dealing with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://githubbox.com/pmndrs/zustand/tree/main/examples/demo).\n\n```bash\nnpm install zustand # or yarn add zustand or pnpm add zustand\n```\n\n:warning: This readme is written for JavaScript users. If you are a TypeScript user, be sure to check out our [TypeScript Usage section](#typescript-usage).\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the `set` function [merges state](./docs/guides/immutable-state-and-merging.md) to help it.\n\n```jsx\nimport { create } from 'zustand'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers are needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useBearStore((state) => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useBearStore((state) => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n- Simple and un-opinionated\n- Makes hooks the primary means of consuming state\n- Doesn't wrap your app in context providers\n- [Can inform components transiently (without causing render)](#transient-updates-for-often-occurring-state-changes)\n\n### Why zustand over context?\n\n- Less boilerplate\n- Renders components only on changes\n- Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useBearStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useBearStore((state) => state.nuts)\nconst honey = useBearStore((state) => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can use [useShallow](./docs/guides/prevent-rerenders-with-use-shallow.md) to prevent unnecessary rerenders when the selector output does not change according to shallow equal.\n\n```jsx\nimport { create } from 'zustand'\nimport { useShallow } from 'zustand/react/shallow'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useBearStore(\n  useShallow((state) => ({ nuts: state.nuts, honey: state.honey })),\n)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useBearStore(\n  useShallow((state) => [state.nuts, state.honey]),\n)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useBearStore(useShallow((state) => Object.keys(state.treats)))\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useBearStore(\n  (state) => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats),\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from 'lodash-es/omit'\n\nconst useFishStore = create((set) => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({}, true), // clears the entire store, actions included\n  deleteTuna: () => set((state) => omit(state, ['tuna']), true),\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useFishStore = create((set) => ({\n  fishies: {},\n  fetch: async (pond) => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  },\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useSoundStore = create((set, get) => ({\n  sound: 'grunt',\n  action: () => {\n    const sound = get().sound\n    ...\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way or act upon the store. For these cases, the resulting hook has utility functions attached to its prototype.\n\n:warning: This technique is not recommended for adding state in [React Server Components](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md) (typically in Next.js 13 and above). It can lead to unexpected bugs and privacy issues for your users. For more details, see [#2200](https://github.com/pmndrs/zustand/discussions/2200).\n\n```jsx\nconst useDogStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useDogStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useDogStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseDogStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useDogStore((state) => state.paw)\n  ...\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with a selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useDogStore = create(\n  subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })),\n)\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useDogStore.subscribe((state) => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useDogStore.subscribe(\n  (state) => state.paw,\n  (paw, previousPaw) => console.log(paw, previousPaw),\n)\n// Subscribe also supports an optional equality function\nconst unsub4 = useDogStore.subscribe(\n  (state) => [state.paw, state.fur],\n  console.log,\n  { equalityFn: shallow },\n)\n// Subscribe and fire immediately\nconst unsub5 = useDogStore.subscribe((state) => state.paw, console.log, {\n  fireImmediately: true,\n})\n```\n\n## Using zustand without React\n\nZustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the API utilities.\n\n```jsx\nimport { createStore } from 'zustand/vanilla'\n\nconst store = createStore((set) => ...)\nconst { getState, setState, subscribe, getInitialState } = store\n\nexport default store\n```\n\nYou can use a vanilla store with `useStore` hook available since v4.\n\n```jsx\nimport { useStore } from 'zustand'\nimport { vanillaStore } from './vanillaStore'\n\nconst useBoundStore = (selector) => useStore(vanillaStore, selector)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occurring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useScratchStore = create((set) => ({ scratches: 0, ... }))\n\nconst Component = () => {\n  // Fetch initial state\n  const scratchRef = useRef(useScratchStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useScratchStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n  ...\n```\n\n## Sick of reducers and changing nested states? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport { produce } from 'immer'\n\nconst useLushStore = create((set) => ({\n  lush: { forest: { contains: { a: 'bear' } } },\n  clearForest: () =>\n    set(\n      produce((state) => {\n        state.lush.forest.contains = null\n      }),\n    ),\n}))\n\nconst clearForest = useLushStore((state) => state.clearForest)\nclearForest()\n```\n\n[Alternatively, there are some other solutions.](./docs/guides/updating-state.md#with-immer)\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = (config) => (set, get, api) =>\n  config(\n    (...args) => {\n      console.log('  applying', args)\n      set(...args)\n      console.log('  new state', get())\n    },\n    get,\n    api,\n  )\n\nconst useBeeStore = create(\n  log((set) => ({\n    bees: false,\n    setBees: (input) => set({ bees: input }),\n  })),\n)\n```\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport { create } from 'zustand'\nimport { persist, createJSONStorage } from 'zustand/middleware'\n\nconst useFishStore = create(\n  persist(\n    (set, get) => ({\n      fishes: 0,\n      addAFish: () => set({ fishes: get().fishes + 1 }),\n    }),\n    {\n      name: 'food-storage', // name of the item in the storage (must be unique)\n      storage: createJSONStorage(() => sessionStorage), // (optional) by default, 'localStorage' is used\n    },\n  ),\n)\n```\n\n[See the full documentation for this middleware.](./docs/integrations/persisting-store-data.md)\n\n## Immer middleware\n\nImmer is available as middleware too.\n\n```jsx\nimport { create } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\nconst useBeeStore = create(\n  immer((set) => ({\n    bees: 0,\n    addBees: (by) =>\n      set((state) => {\n        state.bees += by\n      }),\n  })),\n)\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: 'INCREASE', decrease: 'DECREASE' }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase:\n      return { grumpiness: state.grumpiness + by }\n    case types.decrease:\n      return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useGrumpyStore = create((set) => ({\n  grumpiness: 0,\n  dispatch: (args) => set((state) => reducer(state, args)),\n}))\n\nconst dispatch = useGrumpyStore((state) => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets the initial state, and adds a dispatch function to the state itself and the vanilla API.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useGrumpyStore = create(redux(reducer, initialState))\n```\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore = create(devtools((set) => ...))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)))\n```\n\nOne redux devtools connection for multiple stores\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore1 = create(devtools((set) => ..., { name, store: storeName1 }))\nconst usePlainStore2 = create(devtools((set) => ..., { name, store: storeName2 }))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName3 })\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName4 })\n```\n\nAssigning different connection names will separate stores in redux devtools. This also helps group different stores into separate redux devtools connections.\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.\n\nName store: `devtools(..., {name: \"MyStore\"})`, which will create a separate instance named \"MyStore\" in the devtools.\n\nSerialize options: `devtools(..., { serialize: { options: true } })`.\n\n#### Logging Actions\n\ndevtools will only log actions from each separated store unlike in a typical _combined reducers_ redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\nYou can log a specific action type for each `set` function by passing a third parameter:\n\n```jsx\nconst useBearStore = create(devtools((set) => ({\n  ...\n  eatFish: () => set(\n    (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n    false,\n    'bear/eatFish'\n  ),\n  ...\n```\n\nYou can also log the action's type along with its payload:\n\n```jsx\n  ...\n  addFishes: (count) => set(\n    (prev) => ({ fishes: prev.fishes + count }),\n    false,\n    { type: 'bear/addFishes', count, }\n  ),\n  ...\n```\n\nIf an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter:\n\n```jsx\ndevtools(..., { anonymousActionType: 'unknown', ... })\n```\n\nIf you wish to disable devtools (on production for instance). You can customize this setting by providing the `enabled` parameter:\n\n```jsx\ndevtools(..., { enabled: false, ... })\n```\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate the rules of hooks.\n\nThe recommended method available since v4 is to use the vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n```\n\n## TypeScript Usage\n\nBasic typescript usage doesn't require anything special except for writing `create<State>()(...)` instead of `create(...)`...\n\n```ts\nimport { create } from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\nimport type {} from '@redux-devtools/extension' // required for devtools typing\n\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\nconst useBearStore = create<BearState>()(\n  devtools(\n    persist(\n      (set) => ({\n        bears: 0,\n        increase: (by) => set((state) => ({ bears: state.bears + by })),\n      }),\n      {\n        name: 'bear-storage',\n      },\n    ),\n  ),\n)\n```\n\nA more complete TypeScript guide is [here](docs/guides/typescript.md).\n\n## Best practices\n\n- You may wonder how to organize your code for better maintenance: [Splitting the store into separate slices](./docs/guides/slices-pattern.md).\n- Recommended usage for this unopinionated library: [Flux inspired practice](./docs/guides/flux-inspired-practice.md).\n- [Calling actions outside a React event handler in pre-React 18](./docs/guides/event-handler-in-pre-react-18.md).\n- [Testing](./docs/guides/testing.md)\n- For more, have a look [in the docs folder](./docs/)\n\n## Third-Party Libraries\n\nSome users may want to extend Zustand's feature set which can be done using third-party libraries made by the community. For information regarding third-party libraries with Zustand, visit [the doc](./docs/integrations/third-party-libraries.md).\n\n## Comparison with other libraries\n\n- [Difference between zustand and other state management libraries for React](https://docs.pmnd.rs/zustand/getting-started/comparison)\n","readmeFilename":"readme.md","gitHead":"43986a3acb85940e01bad865bef6962d387181ae","_id":"zustand@5.0.0-alpha.1","_nodeVersion":"18.16.0","_npmVersion":"9.5.1","dist":{"integrity":"sha512-W4fqUO1LQsqvPnzC8iT/7e9rEzAQXXSiJ0rRKDKveUZ8J54At/i/D8mk3cVZz0hYL3ehbQEyawx9c92SZiuCsg==","shasum":"b3afbff5f664f9a90e5f92483e96e246b10de3e1","tarball":"https://registry.npmjs.org/zustand/-/zustand-5.0.0-alpha.1.tgz","fileCount":48,"unpackedSize":99645,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA2wqnO+Ft7AeiCLR+J0S2fsxmO8KdLtk8JH3V9tNzrUAiEAx7NGVkD87Jjcdb0Up0HenSs/kqd+mzH4bUVk5biRDYo="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_5.0.0-alpha.1_1705740568939_0.7449066425474415"},"_hasShrinkwrap":false},"5.0.0-alpha.2":{"name":"zustand","private":false,"version":"5.0.0-alpha.2","publishConfig":{"tag":"next"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{">=4.5":{"esm/*":["esm/*"],"*":["*"]},"*":{"esm/*":["ts_version_4.5_and_above_is_required.d.ts"],"*":["ts_version_4.5_and_above_is_required.d.ts"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./*":{"import":{"types":"./esm/*.d.mts","default":"./esm/*.mjs"},"default":{"types":"./*.d.ts","default":"./*.js"}}},"sideEffects":false,"engines":{"node":">=12.20.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"@types/react":">=18.0","immer":">=9.0.6","react":">=18.0","use-sync-external-store":">=1.2.0"},"peerDependenciesMeta":{"@types/react":{"optional":true},"immer":{"optional":true},"react":{"optional":true},"use-sync-external-store":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/pmndrs/zustand/lint-and-type.yml?branch=main&style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy API based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent dealing with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://githubbox.com/pmndrs/zustand/tree/main/examples/demo).\n\n```bash\nnpm install zustand # or yarn add zustand or pnpm add zustand\n```\n\n:warning: This readme is written for JavaScript users. If you are a TypeScript user, be sure to check out our [TypeScript Usage section](#typescript-usage).\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the `set` function [merges state](./docs/guides/immutable-state-and-merging.md) to help it.\n\n```jsx\nimport { create } from 'zustand'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers are needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useBearStore((state) => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useBearStore((state) => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n- Simple and un-opinionated\n- Makes hooks the primary means of consuming state\n- Doesn't wrap your app in context providers\n- [Can inform components transiently (without causing render)](#transient-updates-for-often-occurring-state-changes)\n\n### Why zustand over context?\n\n- Less boilerplate\n- Renders components only on changes\n- Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useBearStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useBearStore((state) => state.nuts)\nconst honey = useBearStore((state) => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can use [useShallow](./docs/guides/prevent-rerenders-with-use-shallow.md) to prevent unnecessary rerenders when the selector output does not change according to shallow equal.\n\n```jsx\nimport { create } from 'zustand'\nimport { useShallow } from 'zustand/react/shallow'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useBearStore(\n  useShallow((state) => ({ nuts: state.nuts, honey: state.honey })),\n)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useBearStore(\n  useShallow((state) => [state.nuts, state.honey]),\n)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useBearStore(useShallow((state) => Object.keys(state.treats)))\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useBearStore(\n  (state) => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats),\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from 'lodash-es/omit'\n\nconst useFishStore = create((set) => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({}, true), // clears the entire store, actions included\n  deleteTuna: () => set((state) => omit(state, ['tuna']), true),\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useFishStore = create((set) => ({\n  fishies: {},\n  fetch: async (pond) => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  },\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useSoundStore = create((set, get) => ({\n  sound: 'grunt',\n  action: () => {\n    const sound = get().sound\n    ...\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way or act upon the store. For these cases, the resulting hook has utility functions attached to its prototype.\n\n:warning: This technique is not recommended for adding state in [React Server Components](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md) (typically in Next.js 13 and above). It can lead to unexpected bugs and privacy issues for your users. For more details, see [#2200](https://github.com/pmndrs/zustand/discussions/2200).\n\n```jsx\nconst useDogStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useDogStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useDogStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseDogStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useDogStore((state) => state.paw)\n  ...\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with a selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useDogStore = create(\n  subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })),\n)\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useDogStore.subscribe((state) => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useDogStore.subscribe(\n  (state) => state.paw,\n  (paw, previousPaw) => console.log(paw, previousPaw),\n)\n// Subscribe also supports an optional equality function\nconst unsub4 = useDogStore.subscribe(\n  (state) => [state.paw, state.fur],\n  console.log,\n  { equalityFn: shallow },\n)\n// Subscribe and fire immediately\nconst unsub5 = useDogStore.subscribe((state) => state.paw, console.log, {\n  fireImmediately: true,\n})\n```\n\n## Using zustand without React\n\nZustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the API utilities.\n\n```jsx\nimport { createStore } from 'zustand/vanilla'\n\nconst store = createStore((set) => ...)\nconst { getState, setState, subscribe, getInitialState } = store\n\nexport default store\n```\n\nYou can use a vanilla store with `useStore` hook available since v4.\n\n```jsx\nimport { useStore } from 'zustand'\nimport { vanillaStore } from './vanillaStore'\n\nconst useBoundStore = (selector) => useStore(vanillaStore, selector)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occurring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useScratchStore = create((set) => ({ scratches: 0, ... }))\n\nconst Component = () => {\n  // Fetch initial state\n  const scratchRef = useRef(useScratchStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useScratchStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n  ...\n```\n\n## Sick of reducers and changing nested states? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport { produce } from 'immer'\n\nconst useLushStore = create((set) => ({\n  lush: { forest: { contains: { a: 'bear' } } },\n  clearForest: () =>\n    set(\n      produce((state) => {\n        state.lush.forest.contains = null\n      }),\n    ),\n}))\n\nconst clearForest = useLushStore((state) => state.clearForest)\nclearForest()\n```\n\n[Alternatively, there are some other solutions.](./docs/guides/updating-state.md#with-immer)\n\n## Middleware\n\nYou can functionally compose your store any way you like.\n\n```jsx\n// Log every time state is changed\nconst log = (config) => (set, get, api) =>\n  config(\n    (...args) => {\n      console.log('  applying', args)\n      set(...args)\n      console.log('  new state', get())\n    },\n    get,\n    api,\n  )\n\nconst useBeeStore = create(\n  log((set) => ({\n    bees: false,\n    setBees: (input) => set({ bees: input }),\n  })),\n)\n```\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport { create } from 'zustand'\nimport { persist, createJSONStorage } from 'zustand/middleware'\n\nconst useFishStore = create(\n  persist(\n    (set, get) => ({\n      fishes: 0,\n      addAFish: () => set({ fishes: get().fishes + 1 }),\n    }),\n    {\n      name: 'food-storage', // name of the item in the storage (must be unique)\n      storage: createJSONStorage(() => sessionStorage), // (optional) by default, 'localStorage' is used\n    },\n  ),\n)\n```\n\n[See the full documentation for this middleware.](./docs/integrations/persisting-store-data.md)\n\n## Immer middleware\n\nImmer is available as middleware too.\n\n```jsx\nimport { create } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\nconst useBeeStore = create(\n  immer((set) => ({\n    bees: 0,\n    addBees: (by) =>\n      set((state) => {\n        state.bees += by\n      }),\n  })),\n)\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: 'INCREASE', decrease: 'DECREASE' }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase:\n      return { grumpiness: state.grumpiness + by }\n    case types.decrease:\n      return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useGrumpyStore = create((set) => ({\n  grumpiness: 0,\n  dispatch: (args) => set((state) => reducer(state, args)),\n}))\n\nconst dispatch = useGrumpyStore((state) => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets the initial state, and adds a dispatch function to the state itself and the vanilla API.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useGrumpyStore = create(redux(reducer, initialState))\n```\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore = create(devtools((set) => ...))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)))\n```\n\nOne redux devtools connection for multiple stores\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore1 = create(devtools((set) => ..., { name, store: storeName1 }))\nconst usePlainStore2 = create(devtools((set) => ..., { name, store: storeName2 }))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName3 })\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName4 })\n```\n\nAssigning different connection names will separate stores in redux devtools. This also helps group different stores into separate redux devtools connections.\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.\n\nName store: `devtools(..., {name: \"MyStore\"})`, which will create a separate instance named \"MyStore\" in the devtools.\n\nSerialize options: `devtools(..., { serialize: { options: true } })`.\n\n#### Logging Actions\n\ndevtools will only log actions from each separated store unlike in a typical _combined reducers_ redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\nYou can log a specific action type for each `set` function by passing a third parameter:\n\n```jsx\nconst useBearStore = create(devtools((set) => ({\n  ...\n  eatFish: () => set(\n    (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n    false,\n    'bear/eatFish'\n  ),\n  ...\n```\n\nYou can also log the action's type along with its payload:\n\n```jsx\n  ...\n  addFishes: (count) => set(\n    (prev) => ({ fishes: prev.fishes + count }),\n    false,\n    { type: 'bear/addFishes', count, }\n  ),\n  ...\n```\n\nIf an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter:\n\n```jsx\ndevtools(..., { anonymousActionType: 'unknown', ... })\n```\n\nIf you wish to disable devtools (on production for instance). You can customize this setting by providing the `enabled` parameter:\n\n```jsx\ndevtools(..., { enabled: false, ... })\n```\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate the rules of hooks.\n\nThe recommended method available since v4 is to use the vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n```\n\n## TypeScript Usage\n\nBasic typescript usage doesn't require anything special except for writing `create<State>()(...)` instead of `create(...)`...\n\n```ts\nimport { create } from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\nimport type {} from '@redux-devtools/extension' // required for devtools typing\n\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\nconst useBearStore = create<BearState>()(\n  devtools(\n    persist(\n      (set) => ({\n        bears: 0,\n        increase: (by) => set((state) => ({ bears: state.bears + by })),\n      }),\n      {\n        name: 'bear-storage',\n      },\n    ),\n  ),\n)\n```\n\nA more complete TypeScript guide is [here](docs/guides/typescript.md).\n\n## Best practices\n\n- You may wonder how to organize your code for better maintenance: [Splitting the store into separate slices](./docs/guides/slices-pattern.md).\n- Recommended usage for this unopinionated library: [Flux inspired practice](./docs/guides/flux-inspired-practice.md).\n- [Calling actions outside a React event handler in pre-React 18](./docs/guides/event-handler-in-pre-react-18.md).\n- [Testing](./docs/guides/testing.md)\n- For more, have a look [in the docs folder](./docs/)\n\n## Third-Party Libraries\n\nSome users may want to extend Zustand's feature set which can be done using third-party libraries made by the community. For information regarding third-party libraries with Zustand, visit [the doc](./docs/integrations/third-party-libraries.md).\n\n## Comparison with other libraries\n\n- [Difference between zustand and other state management libraries for React](https://docs.pmnd.rs/zustand/getting-started/comparison)\n","readmeFilename":"readme.md","gitHead":"9bf05b2004e961562c167a933768addabc65eaba","_id":"zustand@5.0.0-alpha.2","_nodeVersion":"18.16.0","_npmVersion":"9.5.1","dist":{"integrity":"sha512-1l1GhnDG6n+QLhfLToGQGt4Y1cjJdZFXe7PIxoFqwB+vLPdSBqpwBpwRUeU1j+EAfMZA520DBOVi0YX0WZxrsQ==","shasum":"73a1698f927c4b61c69244ef57ec72932a87aaaf","tarball":"https://registry.npmjs.org/zustand/-/zustand-5.0.0-alpha.2.tgz","fileCount":50,"unpackedSize":92795,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIANMiVvz12yb3R6GPPGbslz0Blm1ICiexm28eS4Ds/O1AiEArPA6zM9BYzIkiKhBylma+ceRoNR687BQx5RaRLK+OqA="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_5.0.0-alpha.2_1705815881319_0.2230633538720821"},"_hasShrinkwrap":false},"4.5.1":{"name":"zustand","private":false,"version":"4.5.1","description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{"<4.0":{"esm/*":["ts3.4/*"],"*":["ts3.4/*"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"module":{"types":"./esm/index.d.ts","default":"./esm/index.js"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./vanilla":{"import":{"types":"./esm/vanilla.d.mts","default":"./esm/vanilla.mjs"},"module":{"types":"./esm/vanilla.d.ts","default":"./esm/vanilla.js"},"default":{"types":"./vanilla.d.ts","default":"./vanilla.js"}},"./middleware":{"import":{"types":"./esm/middleware.d.mts","default":"./esm/middleware.mjs"},"module":{"types":"./esm/middleware.d.ts","default":"./esm/middleware.js"},"default":{"types":"./middleware.d.ts","default":"./middleware.js"}},"./middleware/immer":{"import":{"types":"./esm/middleware/immer.d.mts","default":"./esm/middleware/immer.mjs"},"module":{"types":"./esm/middleware/immer.d.ts","default":"./esm/middleware/immer.js"},"default":{"types":"./middleware/immer.d.ts","default":"./middleware/immer.js"}},"./shallow":{"import":{"types":"./esm/shallow.d.mts","default":"./esm/shallow.mjs"},"module":{"types":"./esm/shallow.d.ts","default":"./esm/shallow.js"},"default":{"types":"./shallow.d.ts","default":"./shallow.js"}},"./vanilla/shallow":{"import":{"types":"./esm/vanilla/shallow.d.mts","default":"./esm/vanilla/shallow.mjs"},"module":{"types":"./esm/vanilla/shallow.d.ts","default":"./esm/vanilla/shallow.js"},"default":{"types":"./vanilla/shallow.d.ts","default":"./vanilla/shallow.js"}},"./react/shallow":{"import":{"types":"./esm/react/shallow.d.mts","default":"./esm/react/shallow.mjs"},"module":{"types":"./esm/react/shallow.d.ts","default":"./esm/react/shallow.js"},"default":{"types":"./react/shallow.d.ts","default":"./react/shallow.js"}},"./traditional":{"import":{"types":"./esm/traditional.d.mts","default":"./esm/traditional.mjs"},"module":{"types":"./esm/traditional.d.ts","default":"./esm/traditional.js"},"default":{"types":"./traditional.d.ts","default":"./traditional.js"}},"./context":{"import":{"types":"./esm/context.d.mts","default":"./esm/context.mjs"},"module":{"types":"./esm/context.d.ts","default":"./esm/context.js"},"default":{"types":"./context.d.ts","default":"./context.js"}}},"sideEffects":false,"engines":{"node":">=12.7.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","dependencies":{"use-sync-external-store":"1.2.0"},"peerDependencies":{"@types/react":">=16.8","immer":">=9.0.6","react":">=16.8"},"peerDependenciesMeta":{"@types/react":{"optional":true},"immer":{"optional":true},"react":{"optional":true}},"gitHead":"6109bc3bd0f3850c2d9546956de971f27834ac7a","_id":"zustand@4.5.1","_nodeVersion":"18.17.0","_npmVersion":"9.6.7","dist":{"integrity":"sha512-XlauQmH64xXSC1qGYNv00ODaQ3B+tNPoy22jv2diYiP4eoDKr9LA+Bh5Bc3gplTrFdb6JVI+N4kc1DZ/tbtfPg==","shasum":"2088956ee454759fb8b866ca335a2373e76736c5","tarball":"https://registry.npmjs.org/zustand/-/zustand-4.5.1.tgz","fileCount":141,"unpackedSize":326671,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDNWeHcEpUdKwwxdovp3Y/cwggo1OW5t6GuQPXyBAIhIAiEAs6NThGOQxaJb9ffUdleEM7Kt3PbVdTfn4cW/MX6G6xk="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_4.5.1_1708135679346_0.03986234015819767"},"_hasShrinkwrap":false},"5.0.0-alpha.3":{"name":"zustand","private":false,"version":"5.0.0-alpha.3","publishConfig":{"tag":"next"},"description":"🐻 Bear necessities for state management in React","main":"./index.js","types":"./index.d.ts","typesVersions":{">=4.5":{"esm/*":["esm/*"],"*":["*"]},"*":{"esm/*":["ts_version_4.5_and_above_is_required.d.ts"],"*":["ts_version_4.5_and_above_is_required.d.ts"]}},"exports":{"./package.json":"./package.json",".":{"import":{"types":"./esm/index.d.mts","default":"./esm/index.mjs"},"default":{"types":"./index.d.ts","default":"./index.js"}},"./*":{"import":{"types":"./esm/*.d.mts","default":"./esm/*.mjs"},"default":{"types":"./*.d.ts","default":"./*.js"}}},"sideEffects":false,"engines":{"node":">=12.20.0"},"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"keywords":["react","state","manager","management","redux","store"],"author":{"name":"Paul Henschel"},"contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"license":"MIT","bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"homepage":"https://github.com/pmndrs/zustand","peerDependencies":{"@types/react":">=18.0","immer":">=9.0.6","react":">=18.0","use-sync-external-store":">=1.2.0"},"peerDependenciesMeta":{"@types/react":{"optional":true},"immer":{"optional":true},"react":{"optional":true},"use-sync-external-store":{"optional":true}},"readme":"<p align=\"center\">\n  <img src=\"bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/pmndrs/zustand/lint-and-type.yml?branch=main&style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy API based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent dealing with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://githubbox.com/pmndrs/zustand/tree/main/examples/demo).\n\n```bash\nnpm install zustand # or yarn add zustand or pnpm add zustand\n```\n\n:warning: This readme is written for JavaScript users. If you are a TypeScript user, be sure to check out our [TypeScript Usage section](#typescript-usage).\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the `set` function [merges state](./docs/guides/immutable-state-and-merging.md) to help it.\n\n```jsx\nimport { create } from 'zustand'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers are needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useBearStore((state) => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useBearStore((state) => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n- Simple and un-opinionated\n- Makes hooks the primary means of consuming state\n- Doesn't wrap your app in context providers\n- [Can inform components transiently (without causing render)](#transient-updates-for-often-occurring-state-changes)\n\n### Why zustand over context?\n\n- Less boilerplate\n- Renders components only on changes\n- Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useBearStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useBearStore((state) => state.nuts)\nconst honey = useBearStore((state) => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can use [useShallow](./docs/guides/prevent-rerenders-with-use-shallow.md) to prevent unnecessary rerenders when the selector output does not change according to shallow equal.\n\n```jsx\nimport { create } from 'zustand'\nimport { useShallow } from 'zustand/react/shallow'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useBearStore(\n  useShallow((state) => ({ nuts: state.nuts, honey: state.honey })),\n)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useBearStore(\n  useShallow((state) => [state.nuts, state.honey]),\n)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useBearStore(useShallow((state) => Object.keys(state.treats)))\n```\n\nFor more control over re-rendering, you may provide any custom equality function.\n\n```jsx\nconst treats = useBearStore(\n  (state) => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats),\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from 'lodash-es/omit'\n\nconst useFishStore = create((set) => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({}, true), // clears the entire store, actions included\n  deleteTuna: () => set((state) => omit(state, ['tuna']), true),\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useFishStore = create((set) => ({\n  fishies: {},\n  fetch: async (pond) => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  },\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useSoundStore = create((set, get) => ({\n  sound: 'grunt',\n  action: () => {\n    const sound = get().sound\n    ...\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way or act upon the store. For these cases, the resulting hook has utility functions attached to its prototype.\n\n:warning: This technique is not recommended for adding state in [React Server Components](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md) (typically in Next.js 13 and above). It can lead to unexpected bugs and privacy issues for your users. For more details, see [#2200](https://github.com/pmndrs/zustand/discussions/2200).\n\n```jsx\nconst useDogStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useDogStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useDogStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseDogStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useDogStore((state) => state.paw)\n  ...\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with a selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useDogStore = create(\n  subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })),\n)\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useDogStore.subscribe((state) => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useDogStore.subscribe(\n  (state) => state.paw,\n  (paw, previousPaw) => console.log(paw, previousPaw),\n)\n// Subscribe also supports an optional equality function\nconst unsub4 = useDogStore.subscribe(\n  (state) => [state.paw, state.fur],\n  console.log,\n  { equalityFn: shallow },\n)\n// Subscribe and fire immediately\nconst unsub5 = useDogStore.subscribe((state) => state.paw, console.log, {\n  fireImmediately: true,\n})\n```\n\n## Using zustand without React\n\nZustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the API utilities.\n\n```jsx\nimport { createStore } from 'zustand/vanilla'\n\nconst store = createStore((set) => ...)\nconst { getState, setState, subscribe, getInitialState } = store\n\nexport default store\n```\n\nYou can use a vanilla store with `useStore` hook available since v4.\n\n```jsx\nimport { useStore } from 'zustand'\nimport { vanillaStore } from './vanillaStore'\n\nconst useBoundStore = (selector) => useStore(vanillaStore, selector)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occurring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useScratchStore = create((set) => ({ scratches: 0, ... }))\n\nconst Component = () => {\n  // Fetch initial state\n  const scratchRef = useRef(useScratchStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useScratchStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n  ...\n```\n\n## Sick of reducers and changing nested states? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport { produce } from 'immer'\n\nconst useLushStore = create((set) => ({\n  lush: { forest: { contains: { a: 'bear' } } },\n  clearForest: () =>\n    set(\n      produce((state) => {\n        state.lush.forest.contains = null\n      }),\n    ),\n}))\n\nconst clearForest = useLushStore((state) => state.clearForest)\nclearForest()\n```\n\n[Alternatively, there are some other solutions.](./docs/guides/updating-state.md#with-immer)\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport { create } from 'zustand'\nimport { persist, createJSONStorage } from 'zustand/middleware'\n\nconst useFishStore = create(\n  persist(\n    (set, get) => ({\n      fishes: 0,\n      addAFish: () => set({ fishes: get().fishes + 1 }),\n    }),\n    {\n      name: 'food-storage', // name of the item in the storage (must be unique)\n      storage: createJSONStorage(() => sessionStorage), // (optional) by default, 'localStorage' is used\n    },\n  ),\n)\n```\n\n[See the full documentation for this middleware.](./docs/integrations/persisting-store-data.md)\n\n## Immer middleware\n\nImmer is available as middleware too.\n\n```jsx\nimport { create } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\nconst useBeeStore = create(\n  immer((set) => ({\n    bees: 0,\n    addBees: (by) =>\n      set((state) => {\n        state.bees += by\n      }),\n  })),\n)\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: 'INCREASE', decrease: 'DECREASE' }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase:\n      return { grumpiness: state.grumpiness + by }\n    case types.decrease:\n      return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useGrumpyStore = create((set) => ({\n  grumpiness: 0,\n  dispatch: (args) => set((state) => reducer(state, args)),\n}))\n\nconst dispatch = useGrumpyStore((state) => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets the initial state, and adds a dispatch function to the state itself and the vanilla API.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useGrumpyStore = create(redux(reducer, initialState))\n```\n\n## Redux devtools\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore = create(devtools((set) => ...))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)))\n```\n\nOne redux devtools connection for multiple stores\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore1 = create(devtools((set) => ..., { name, store: storeName1 }))\nconst usePlainStore2 = create(devtools((set) => ..., { name, store: storeName2 }))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName3 })\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName4 })\n```\n\nAssigning different connection names will separate stores in redux devtools. This also helps group different stores into separate redux devtools connections.\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.\n\nName store: `devtools(..., {name: \"MyStore\"})`, which will create a separate instance named \"MyStore\" in the devtools.\n\nSerialize options: `devtools(..., { serialize: { options: true } })`.\n\n#### Logging Actions\n\ndevtools will only log actions from each separated store unlike in a typical _combined reducers_ redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\nYou can log a specific action type for each `set` function by passing a third parameter:\n\n```jsx\nconst useBearStore = create(devtools((set) => ({\n  ...\n  eatFish: () => set(\n    (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n    false,\n    'bear/eatFish'\n  ),\n  ...\n```\n\nYou can also log the action's type along with its payload:\n\n```jsx\n  ...\n  addFishes: (count) => set(\n    (prev) => ({ fishes: prev.fishes + count }),\n    false,\n    { type: 'bear/addFishes', count, }\n  ),\n  ...\n```\n\nIf an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter:\n\n```jsx\ndevtools(..., { anonymousActionType: 'unknown', ... })\n```\n\nIf you wish to disable devtools (on production for instance). You can customize this setting by providing the `enabled` parameter:\n\n```jsx\ndevtools(..., { enabled: false, ... })\n```\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate the rules of hooks.\n\nThe recommended method available since v4 is to use the vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n```\n\n## TypeScript Usage\n\nBasic typescript usage doesn't require anything special except for writing `create<State>()(...)` instead of `create(...)`...\n\n```ts\nimport { create } from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\nimport type {} from '@redux-devtools/extension' // required for devtools typing\n\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\nconst useBearStore = create<BearState>()(\n  devtools(\n    persist(\n      (set) => ({\n        bears: 0,\n        increase: (by) => set((state) => ({ bears: state.bears + by })),\n      }),\n      {\n        name: 'bear-storage',\n      },\n    ),\n  ),\n)\n```\n\nA more complete TypeScript guide is [here](docs/guides/typescript.md).\n\n## Best practices\n\n- You may wonder how to organize your code for better maintenance: [Splitting the store into separate slices](./docs/guides/slices-pattern.md).\n- Recommended usage for this unopinionated library: [Flux inspired practice](./docs/guides/flux-inspired-practice.md).\n- [Calling actions outside a React event handler in pre-React 18](./docs/guides/event-handler-in-pre-react-18.md).\n- [Testing](./docs/guides/testing.md)\n- For more, have a look [in the docs folder](./docs/)\n\n## Third-Party Libraries\n\nSome users may want to extend Zustand's feature set which can be done using third-party libraries made by the community. For information regarding third-party libraries with Zustand, visit [the doc](./docs/integrations/third-party-libraries.md).\n\n## Comparison with other libraries\n\n- [Difference between zustand and other state management libraries for React](https://docs.pmnd.rs/zustand/getting-started/comparison)\n","readmeFilename":"readme.md","gitHead":"bfea65a71148f874fba6c1f4efc91178f0ef76be","_id":"zustand@5.0.0-alpha.3","_nodeVersion":"18.17.0","_npmVersion":"9.6.7","dist":{"integrity":"sha512-/ODhOkKe+a1RFRGTslmDowwVk4wt5br9nKpkIvoEvf2n59Ihr4mUzbcgVrnC1UvzcT44CnI7gNrTctCxbYqTWg==","shasum":"0a8132a45a121ce2daaa8f3a052a81b4c702d673","tarball":"https://registry.npmjs.org/zustand/-/zustand-5.0.0-alpha.3.tgz","fileCount":50,"unpackedSize":92405,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEqktbzciE5btEcLDbdXZuRGOAqgd70jJeswCFY+VyebAiEAwASEd0KvXvXxOGQFSg8WmmD+2u9vKs0UbUIsuosOF80="}]},"_npmUser":{"name":"daishi","email":"daishi@axlight.com"},"directories":{},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/zustand_5.0.0-alpha.3_1708136081331_0.27203590265611477"},"_hasShrinkwrap":false}},"time":{"created":"2019-04-09T13:47:37.089Z","0.0.1":"2019-04-09T13:47:37.189Z","modified":"2024-02-17T02:14:42.357Z","0.0.2":"2019-04-09T20:49:59.761Z","0.0.3":"2019-04-10T14:39:33.277Z","0.0.4":"2019-04-10T22:45:11.361Z","0.0.5":"2019-04-13T20:35:41.140Z","0.0.6":"2019-04-14T13:25:35.566Z","0.1.0":"2019-04-26T12:13:36.529Z","0.1.1":"2019-04-29T17:46:02.717Z","0.1.2":"2019-05-11T20:24:18.095Z","0.1.3":"2019-05-12T08:41:54.261Z","0.2.0":"2019-06-02T18:51:49.105Z","0.2.1":"2019-06-04T22:01:21.680Z","0.2.2":"2019-06-22T15:53:02.598Z","0.2.2-beta.0":"2019-06-24T13:06:48.783Z","1.0.0-beta.0":"2019-06-25T10:59:02.992Z","1.0.0-beta.1":"2019-06-28T13:17:56.783Z","1.0.0":"2019-06-28T20:48:52.978Z","1.0.1":"2019-06-28T21:09:46.638Z","1.0.2":"2019-06-30T15:58:13.833Z","1.0.3":"2019-07-23T21:06:56.900Z","1.0.4":"2019-08-15T12:22:37.555Z","1.0.5":"2019-08-23T01:36:06.080Z","1.0.6":"2019-08-23T02:03:35.652Z","1.0.7":"2019-08-23T02:59:41.667Z","2.0.0":"2019-10-09T21:26:15.162Z","2.1.0":"2019-10-11T16:58:06.837Z","2.2.0":"2019-10-24T14:20:10.407Z","2.2.1":"2019-10-30T07:37:37.052Z","2.2.2":"2020-01-07T08:27:51.614Z","2.2.3":"2020-02-20T06:53:50.411Z","2.2.4":"2020-08-09T06:26:12.331Z","3.0.0-beta.0":"2020-08-17T19:37:54.148Z","3.0.0":"2020-08-17T19:53:01.905Z","3.0.1":"2020-08-18T09:06:58.223Z","3.0.2":"2020-08-26T14:11:36.186Z","3.0.3":"2020-09-01T12:48:19.460Z","3.1.0-beta.0":"2020-09-03T10:23:15.417Z","3.1.0":"2020-09-03T13:14:42.781Z","3.1.1":"2020-09-08T13:06:37.273Z","3.1.2":"2020-09-12T11:54:29.464Z","3.1.3":"2020-09-23T23:32:21.343Z","3.1.4":"2020-11-08T05:48:36.309Z","3.2.0":"2020-11-16T14:33:45.825Z","3.3.0":"2021-01-08T10:25:47.343Z","3.3.1":"2021-01-10T12:19:31.910Z","3.3.2":"2021-02-16T22:19:55.503Z","3.3.3":"2021-02-28T01:50:45.949Z","3.4.0":"2021-04-06T15:31:18.082Z","3.4.1":"2021-04-08T01:26:19.936Z","3.4.2":"2021-04-27T00:16:00.950Z","3.5.0":"2021-05-05T15:26:34.905Z","3.5.1":"2021-05-08T13:24:15.613Z","3.5.2":"2021-06-05T09:24:17.948Z","4.0.0-alpha.0":"2021-06-09T00:28:50.157Z","3.5.3":"2021-06-22T12:14:41.948Z","3.5.4":"2021-06-22T14:24:04.494Z","3.5.5":"2021-06-29T13:05:32.132Z","3.5.6":"2021-07-09T13:36:04.844Z","3.5.7":"2021-07-13T23:44:41.719Z","3.5.8":"2021-08-13T11:52:23.834Z","3.5.9":"2021-08-17T11:59:03.574Z","4.0.0-alpha.1":"2021-08-20T23:48:47.184Z","3.5.10":"2021-08-26T14:18:01.664Z","4.0.0-alpha.2":"2021-09-04T10:18:35.166Z","4.0.0-alpha.3":"2021-09-27T15:31:39.861Z","3.5.11":"2021-09-28T16:07:12.784Z","3.5.12":"2021-10-01T13:29:09.760Z","4.0.0-alpha.4":"2021-10-04T23:06:09.440Z","3.5.13":"2021-10-07T12:49:03.724Z","3.5.14":"2021-10-19T11:39:23.079Z","3.6.0":"2021-10-21T13:55:41.304Z","3.6.1":"2021-10-26T15:41:06.494Z","4.0.0-alpha.5":"2021-10-27T22:28:04.307Z","3.6.2":"2021-10-30T00:37:57.081Z","3.6.3":"2021-11-02T12:18:03.831Z","4.0.0-alpha.6":"2021-11-02T12:51:05.750Z","3.6.4":"2021-11-03T22:45:58.494Z","3.6.5":"2021-11-09T14:03:29.573Z","4.0.0-alpha.7":"2021-11-15T21:50:02.661Z","4.0.0-beta.0":"2021-11-16T14:27:22.215Z","3.6.6":"2021-12-03T13:24:26.057Z","3.6.7":"2021-12-07T07:33:37.743Z","3.6.8":"2021-12-24T07:30:38.780Z","3.6.9":"2022-01-10T14:16:57.030Z","3.7.0":"2022-02-10T23:38:34.884Z","4.0.0-beta.1":"2022-02-11T12:14:15.534Z","3.7.1":"2022-02-28T02:40:07.779Z","4.0.0-beta.2":"2022-02-28T03:19:18.801Z","4.0.0-beta.3":"2022-04-05T23:43:51.666Z","3.7.2":"2022-04-07T14:04:18.521Z","4.0.0-rc.0":"2022-04-18T01:42:14.361Z","4.0.0-rc.1":"2022-04-29T14:26:58.453Z","4.0.0-rc.2":"2022-07-17T14:54:53.992Z","4.0.0-rc.3":"2022-07-19T23:58:51.634Z","4.0.0-rc.4":"2022-07-20T23:20:18.820Z","4.0.0":"2022-07-26T01:23:33.843Z","4.1.0":"2022-08-18T23:25:39.260Z","4.1.1":"2022-08-22T02:31:11.361Z","4.1.2":"2022-10-09T05:44:31.614Z","4.1.3":"2022-10-23T01:28:10.578Z","4.1.4":"2022-10-31T12:50:44.298Z","4.1.5":"2022-12-05T13:12:31.807Z","4.2.0":"2023-01-01T01:13:20.277Z","4.3.0":"2023-01-10T10:35:41.203Z","4.3.1":"2023-01-10T11:13:44.966Z","4.3.2":"2023-01-14T00:01:55.552Z","4.3.3":"2023-02-10T12:21:04.363Z","4.3.4":"2023-02-27T02:59:15.158Z","4.3.5":"2023-02-28T11:14:58.435Z","4.3.6":"2023-03-06T05:15:13.547Z","4.3.7":"2023-03-31T15:08:40.809Z","4.3.8":"2023-05-04T07:46:51.991Z","4.3.9":"2023-07-04T14:38:45.957Z","4.4.0":"2023-08-01T02:01:22.680Z","4.4.1":"2023-08-06T23:44:22.013Z","4.4.2":"2023-10-02T13:45:20.567Z","4.4.3":"2023-10-05T14:25:25.526Z","4.4.4":"2023-10-21T14:01:58.932Z","4.4.5":"2023-10-31T14:27:43.072Z","4.4.6":"2023-11-02T23:59:33.561Z","4.4.7":"2023-11-28T00:27:37.211Z","4.5.0":"2024-01-20T01:24:09.654Z","5.0.0-alpha.0":"2024-01-20T05:24:37.758Z","5.0.0-alpha.1":"2024-01-20T08:49:29.134Z","5.0.0-alpha.2":"2024-01-21T05:44:41.474Z","4.5.1":"2024-02-17T02:07:59.525Z","5.0.0-alpha.3":"2024-02-17T02:14:41.522Z"},"maintainers":[{"name":"daishi","email":"daishi@axlight.com"},{"name":"jeremyrh","email":"holcomb227@gmail.com"},{"name":"drcmda","email":"drcmda@gmail.com"}],"description":"🐻 Bear necessities for state management in React","homepage":"https://github.com/pmndrs/zustand","keywords":["react","state","manager","management","redux","store"],"repository":{"type":"git","url":"git+https://github.com/pmndrs/zustand.git"},"author":{"name":"Paul Henschel"},"bugs":{"url":"https://github.com/pmndrs/zustand/issues"},"license":"MIT","readme":"","readmeFilename":"","contributors":[{"name":"Jeremy Holcomb","url":"https://github.com/JeremyRH"},{"name":"Daishi Kato","url":"https://github.com/dai-shi"}],"users":{"flumpus-dev":true}}